{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DashboardService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/dashboard`;\n    this.tasksApiUrl = `${environment.apiUrl}`; // Base API URL for /api/tasks endpoints\n  }\n  // Helper method to properly encode iteration path\n  encodeIterationPath(iterationPath) {\n    // Use double-encoded backslashes (%255C) which is what the working API expects\n    return iterationPath.replace(/\\\\/g, '%255C');\n  }\n  getCurrentSprint() {\n    return this.http.get(`${this.apiUrl}/sprint`);\n  }\n  getSprintSummary(iterationPath) {\n    const encodedPath = this.encodeIterationPath(iterationPath);\n    let params = new HttpParams().set('iterationPath', encodedPath);\n    return this.http.get(`${this.apiUrl}/summary`, {\n      params\n    });\n  }\n  getActivityFeed(count = 10) {\n    return this.http.get(`${this.apiUrl}/activity`, {\n      params: {\n        count: count.toString()\n      }\n    });\n  }\n  getDailyTip() {\n    return this.http.get(`${this.apiUrl}/tip`);\n  }\n  getTaskDistribution(iterationPath) {\n    const encodedPath = this.encodeIterationPath(iterationPath);\n    let params = new HttpParams().set('iterationPath', encodedPath);\n    return this.http.get(`${this.tasksApiUrl}/tasks`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error fetching task distribution:', error);\n      return of(null);\n    }));\n  }\n  getWorkItemDistribution(iterationPath) {\n    let params = new HttpParams();\n    if (iterationPath) {\n      params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\n    }\n    return this.http.get(`${this.apiUrl}/distribution`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error fetching work item distribution:', error);\n      return of({\n        iterationPath: iterationPath || '',\n        states: [],\n        totalCount: 0\n      });\n    }));\n  }\n  getStateDistribution(iterationPath) {\n    let params = new HttpParams();\n    if (iterationPath) {\n      params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\n    }\n    return this.http.get(`${this.apiUrl}/state-distribution`, {\n      params\n    });\n  }\n  getLongTermDevNewItems(maxItems = 5) {\n    return this.http.get(`${this.apiUrl}/long-term-dev-new`, {\n      params: {\n        count: maxItems.toString()\n      }\n    });\n  }\n  getSupportItems(months = 6) {\n    return this.http.get(`${this.apiUrl}/support-items`, {\n      params: {\n        months: months.toString()\n      }\n    });\n  }\n  getAiTips() {\n    return this.http.get(`${this.apiUrl}/ai-tips`);\n  }\n  getTasksByStatus(iterationPath) {\n    let params = new HttpParams().set('iterationPath', this.encodeIterationPath(iterationPath));\n    return this.http.get(`${this.apiUrl}/tasks-by-status`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error fetching tasks by status:', error);\n      return of({\n        items: []\n      });\n    }));\n  }\n  sendChatMessage(data) {\n    return this.http.post(`${this.apiUrl}/chat`, {\n      message: data.message,\n      currentIterationPath: data.currentIterationPath\n    });\n  }\n  getSprintDetailsByIterationPath(iterationPath) {\n    const encodedPath = this.encodeIterationPath(iterationPath);\n    let params = new HttpParams().set('iterationPath', encodedPath);\n    return this.http.get(`${this.apiUrl}/sprint-details`, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function DashboardService_Factory(t) {\n      return new (t || DashboardService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DashboardService,\n      factory: DashboardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpParams","of","catchError","environment","DashboardService","constructor","http","apiUrl","encodeIterationPath","iterationPath","replace","getCurrentSprint","get","getSprintSummary","encodedPath","params","set","getActivityFeed","count","toString","getDailyTip","getTaskDistribution","tasksApiUrl","pipe","error","console","getWorkItemDistribution","states","totalCount","getStateDistribution","getLongTermDevNewItems","maxItems","getSupportItems","months","getAiTips","getTasksByStatus","items","sendChatMessage","data","post","message","currentIterationPath","getSprintDetailsByIterationPath","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\dashboard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { \r\n  SprintOverview, \r\n  SprintSummary, \r\n  ActivityFeed, \r\n  WorkItemDistribution, \r\n  LongTermDevNewItem, \r\n  SupportItem,\r\n  AiDashboardTip,\r\n  TaskStatusBoard,\r\n  ChatMessage\r\n} from '../models/sprint.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService {\r\n  private apiUrl = `${environment.apiUrl}/dashboard`;\r\n  private tasksApiUrl = `${environment.apiUrl}`;  // Base API URL for /api/tasks endpoints\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Helper method to properly encode iteration path\r\n  private encodeIterationPath(iterationPath: string): string {\r\n    // Use double-encoded backslashes (%255C) which is what the working API expects\r\n    return iterationPath.replace(/\\\\/g, '%255C');\r\n  }\r\n\r\n  getCurrentSprint(): Observable<SprintOverview> {\r\n    return this.http.get<SprintOverview>(`${this.apiUrl}/sprint`);\r\n  }\r\n\r\n  getSprintSummary(iterationPath: string): Observable<SprintSummary> {\r\n    const encodedPath = this.encodeIterationPath(iterationPath);\r\n    let params = new HttpParams().set('iterationPath', encodedPath);\r\n    return this.http.get<SprintSummary>(`${this.apiUrl}/summary`, { params });\r\n  }\r\n\r\n  getActivityFeed(count: number = 10): Observable<ActivityFeed> {\r\n    return this.http.get<ActivityFeed>(`${this.apiUrl}/activity`, {\r\n      params: { count: count.toString() }\r\n    });\r\n  }\r\n\r\n  getDailyTip(): Observable<{ tip: string }> {\r\n    return this.http.get<{ tip: string }>(`${this.apiUrl}/tip`);\r\n  }\r\n\r\n  getTaskDistribution(iterationPath: string): Observable<any> {\r\n    const encodedPath = this.encodeIterationPath(iterationPath);\r\n    let params = new HttpParams().set('iterationPath', encodedPath);\r\n    \r\n    return this.http.get(`${this.tasksApiUrl}/tasks`, { params })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error fetching task distribution:', error);\r\n          return of(null);\r\n        })\r\n      );\r\n  }\r\n\r\n  getWorkItemDistribution(iterationPath?: string): Observable<WorkItemDistribution> {\r\n    let params = new HttpParams();\r\n    if (iterationPath) {\r\n      params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\r\n    }\r\n    \r\n    return this.http.get<WorkItemDistribution>(`${this.apiUrl}/distribution`, { params })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error fetching work item distribution:', error);\r\n          return of({ iterationPath: iterationPath || '', states: [], totalCount: 0 });\r\n        })\r\n      );\r\n  }\r\n\r\n  getStateDistribution(iterationPath?: string): Observable<WorkItemDistribution[]> {\r\n    let params = new HttpParams();\r\n    if (iterationPath) {\r\n      params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\r\n    }\r\n    \r\n    return this.http.get<WorkItemDistribution[]>(`${this.apiUrl}/state-distribution`, { params });\r\n  }\r\n\r\n  getLongTermDevNewItems(maxItems: number = 5): Observable<LongTermDevNewItem[]> {\r\n    return this.http.get<LongTermDevNewItem[]>(`${this.apiUrl}/long-term-dev-new`, {\r\n      params: { count: maxItems.toString() }\r\n    });\r\n  }\r\n\r\n  getSupportItems(months: number = 6): Observable<SupportItem[]> {\r\n    return this.http.get<SupportItem[]>(`${this.apiUrl}/support-items`, {\r\n      params: { months: months.toString() }\r\n    });\r\n  }\r\n\r\n  getAiTips(): Observable<AiDashboardTip> {\r\n    return this.http.get<AiDashboardTip>(`${this.apiUrl}/ai-tips`);\r\n  }\r\n\r\n  getTasksByStatus(iterationPath: string): Observable<TaskStatusBoard> {\r\n    let params = new HttpParams().set('iterationPath', this.encodeIterationPath(iterationPath));\r\n    \r\n    return this.http.get<TaskStatusBoard>(`${this.apiUrl}/tasks-by-status`, { params })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error fetching tasks by status:', error);\r\n          return of({ items: [] });\r\n        })\r\n      );\r\n  }\r\n\r\n  sendChatMessage(data: { message: string, currentIterationPath: string }): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/chat`, { \r\n      message: data.message,\r\n      currentIterationPath: data.currentIterationPath \r\n    });\r\n  }\r\n\r\n  getSprintDetailsByIterationPath(iterationPath: string): Observable<SprintOverview> {\r\n    const encodedPath = this.encodeIterationPath(iterationPath);\r\n    let params = new HttpParams().set('iterationPath', encodedPath);\r\n    return this.http.get<SprintOverview>(`${this.apiUrl}/sprint-details`, { params });\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}