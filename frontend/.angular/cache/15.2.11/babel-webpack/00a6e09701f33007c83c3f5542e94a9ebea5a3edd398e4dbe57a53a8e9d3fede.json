{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskDetailsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}`;\n    this.azureDevOpsUrl = environment.azureDevOpsUrl;\n    this.organization = environment.organization;\n    this.project = environment.project;\n  }\n  /**\r\n   * Get detailed task information for a specific iteration path\r\n   * First attempts to use the backend API, falls back to direct Azure DevOps API if necessary\r\n   * @param iterationPath The iteration path (e.g. 'Techoil\\\\2.3.23')\r\n   * @returns Observable with task details and summary\r\n   */\n  getTaskDetails(iterationPath) {\n    // First try to get task data from our backend API\n    return this.getTasksFromBackend(iterationPath).pipe(catchError(error => {\n      console.warn('Backend API request failed, attempting direct Azure DevOps query:', error);\n      // If backend API fails, try direct Azure DevOps query\n      return this.getTasksFromAzureDevOps(iterationPath);\n    }));\n  }\n  /**\r\n   * Get tasks from our backend API\r\n   * @param iterationPath The iteration path\r\n   * @returns Observable with task details and summary\r\n   */\n  getTasksFromBackend(iterationPath) {\n    const url = `${this.apiUrl}/tasks`;\n    const params = new HttpParams().set('iterationPath', iterationPath);\n    return this.http.get(url, {\n      params\n    }).pipe(map(tasks => this.processTaskData(tasks)), catchError(error => {\n      console.error('Error fetching tasks from backend:', error);\n      return throwError(() => error);\n    }));\n  }\n  /**\r\n   * Get tasks directly from Azure DevOps using WIQL API\r\n   * @param iterationPath The iteration path\r\n   * @returns Observable with task details and summary\r\n   */\n  getTasksFromAzureDevOps(iterationPath) {\n    // URL for WIQL API\n    const wiqlUrl = `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_apis/wit/wiql?api-version=7.0`;\n    // WIQL query to filter by iteration path and work item type\n    const wiqlQuery = {\n      query: `SELECT [System.Id], [System.Title], [System.State], [System.WorkItemType], [System.AssignedTo], [System.Tags], [System.IterationPath]\n              FROM WorkItems\n              WHERE [System.IterationPath] = '${iterationPath}'\n              AND [System.WorkItemType] = 'Task'`\n    };\n    // Execute WIQL query to get work item IDs\n    return this.http.post(wiqlUrl, wiqlQuery).pipe(switchMap(result => {\n      if (!result.workItems || result.workItems.length === 0) {\n        // No work items found\n        return of({\n          totalTasks: 0,\n          statusCounts: {},\n          assigneeCounts: {},\n          tasks: []\n        });\n      }\n      // Extract work item IDs\n      const ids = result.workItems.map(item => item.id);\n      // URL for batch API to get full work item details\n      const batchUrl = `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_apis/wit/workitems?ids=${ids.join(',')}&fields=System.Id,System.Title,System.State,System.WorkItemType,System.AssignedTo,System.Tags,System.IterationPath&api-version=7.0`;\n      // Get work item details\n      return this.http.get(batchUrl).pipe(map(response => {\n        const tasks = response.value.map(item => ({\n          id: item.id,\n          title: item.fields['System.Title'],\n          state: item.fields['System.State'],\n          assignedTo: item.fields['System.AssignedTo'] ? item.fields['System.AssignedTo'].displayName : 'Unassigned',\n          iterationPath: item.fields['System.IterationPath'],\n          workItemType: item.fields['System.WorkItemType'],\n          tags: item.fields['System.Tags'] ? item.fields['System.Tags'].split(';').map(tag => tag.trim()) : []\n        }));\n        return this.processTaskData(tasks);\n      }));\n    }), catchError(error => {\n      console.error('Error fetching task details from Azure DevOps:', error);\n      return of({\n        totalTasks: 0,\n        statusCounts: {},\n        assigneeCounts: {},\n        tasks: []\n      });\n    }));\n  }\n  /**\r\n   * Process task data to generate summary information\r\n   * @param tasks Array of tasks\r\n   * @returns Task summary with counts by status and assignee\r\n   */\n  processTaskData(tasks) {\n    const statusCounts = {};\n    const assigneeCounts = {};\n    // Process each task\n    tasks.forEach(task => {\n      const status = task.state || 'Unknown';\n      const assignee = task.assignedTo || 'Unassigned';\n      // Count by status\n      statusCounts[status] = (statusCounts[status] || 0) + 1;\n      // Count by assignee\n      assigneeCounts[assignee] = (assigneeCounts[assignee] || 0) + 1;\n    });\n    return {\n      totalTasks: tasks.length,\n      statusCounts,\n      assigneeCounts,\n      tasks: tasks\n    };\n  }\n  static {\n    this.ɵfac = function TaskDetailsService_Factory(t) {\n      return new (t || TaskDetailsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskDetailsService,\n      factory: TaskDetailsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpParams","of","throwError","catchError","map","switchMap","environment","TaskDetailsService","constructor","http","apiUrl","azureDevOpsUrl","organization","project","getTaskDetails","iterationPath","getTasksFromBackend","pipe","error","console","warn","getTasksFromAzureDevOps","url","params","set","get","tasks","processTaskData","wiqlUrl","wiqlQuery","query","post","result","workItems","length","totalTasks","statusCounts","assigneeCounts","ids","item","id","batchUrl","join","response","value","title","fields","state","assignedTo","displayName","workItemType","tags","split","tag","trim","forEach","task","status","assignee","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\task-details.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface TaskDetails {\r\n  id: number;\r\n  title: string;\r\n  state: string;\r\n  assignedTo?: string;\r\n  iterationPath: string;\r\n  workItemType: string;\r\n  tags?: string[];\r\n}\r\n\r\nexport interface TaskSummary {\r\n  totalTasks: number;\r\n  statusCounts: { [status: string]: number };\r\n  assigneeCounts: { [assignee: string]: number };\r\n  tasks: TaskDetails[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskDetailsService {\r\n  private apiUrl = `${environment.apiUrl}`;\r\n  private azureDevOpsUrl = environment.azureDevOpsUrl;\r\n  private organization = environment.organization;\r\n  private project = environment.project;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Get detailed task information for a specific iteration path\r\n   * First attempts to use the backend API, falls back to direct Azure DevOps API if necessary\r\n   * @param iterationPath The iteration path (e.g. 'Techoil\\\\2.3.23')\r\n   * @returns Observable with task details and summary\r\n   */\r\n  getTaskDetails(iterationPath: string): Observable<TaskSummary> {\r\n    // First try to get task data from our backend API\r\n    return this.getTasksFromBackend(iterationPath).pipe(\r\n      catchError(error => {\r\n        console.warn('Backend API request failed, attempting direct Azure DevOps query:', error);\r\n        // If backend API fails, try direct Azure DevOps query\r\n        return this.getTasksFromAzureDevOps(iterationPath);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get tasks from our backend API\r\n   * @param iterationPath The iteration path\r\n   * @returns Observable with task details and summary\r\n   */\r\n  private getTasksFromBackend(iterationPath: string): Observable<TaskSummary> {\r\n    const url = `${this.apiUrl}/tasks`;\r\n    const params = new HttpParams().set('iterationPath', iterationPath);\r\n\r\n    return this.http.get<any[]>(url, { params }).pipe(\r\n      map(tasks => this.processTaskData(tasks)),\r\n      catchError(error => {\r\n        console.error('Error fetching tasks from backend:', error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get tasks directly from Azure DevOps using WIQL API\r\n   * @param iterationPath The iteration path\r\n   * @returns Observable with task details and summary\r\n   */\r\n  private getTasksFromAzureDevOps(iterationPath: string): Observable<TaskSummary> {\r\n    // URL for WIQL API\r\n    const wiqlUrl = `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_apis/wit/wiql?api-version=7.0`;\r\n\r\n    // WIQL query to filter by iteration path and work item type\r\n    const wiqlQuery = {\r\n      query: `SELECT [System.Id], [System.Title], [System.State], [System.WorkItemType], [System.AssignedTo], [System.Tags], [System.IterationPath]\r\n              FROM WorkItems\r\n              WHERE [System.IterationPath] = '${iterationPath}'\r\n              AND [System.WorkItemType] = 'Task'`\r\n    };\r\n\r\n    // Execute WIQL query to get work item IDs\r\n    return this.http.post<{ workItems: { id: number }[] }>(wiqlUrl, wiqlQuery).pipe(\r\n      switchMap(result => {\r\n        if (!result.workItems || result.workItems.length === 0) {\r\n          // No work items found\r\n          return of({\r\n            totalTasks: 0,\r\n            statusCounts: {},\r\n            assigneeCounts: {},\r\n            tasks: []\r\n          });\r\n        }\r\n\r\n        // Extract work item IDs\r\n        const ids = result.workItems.map(item => item.id);\r\n\r\n        // URL for batch API to get full work item details\r\n        const batchUrl = `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_apis/wit/workitems?ids=${ids.join(',')}&fields=System.Id,System.Title,System.State,System.WorkItemType,System.AssignedTo,System.Tags,System.IterationPath&api-version=7.0`;\r\n\r\n        // Get work item details\r\n        return this.http.get<{ value: any[] }>(batchUrl).pipe(\r\n          map(response => {\r\n            const tasks = response.value.map(item => ({\r\n              id: item.id,\r\n              title: item.fields['System.Title'],\r\n              state: item.fields['System.State'],\r\n              assignedTo: item.fields['System.AssignedTo'] ? item.fields['System.AssignedTo'].displayName : 'Unassigned',\r\n              iterationPath: item.fields['System.IterationPath'],\r\n              workItemType: item.fields['System.WorkItemType'],\r\n              tags: item.fields['System.Tags'] ? item.fields['System.Tags'].split(';').map((tag: string) => tag.trim()) : []\r\n            }));\r\n\r\n            return this.processTaskData(tasks);\r\n          })\r\n        );\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error fetching task details from Azure DevOps:', error);\r\n        return of({\r\n          totalTasks: 0,\r\n          statusCounts: {},\r\n          assigneeCounts: {},\r\n          tasks: []\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Process task data to generate summary information\r\n   * @param tasks Array of tasks\r\n   * @returns Task summary with counts by status and assignee\r\n   */\r\n  private processTaskData(tasks: any[]): TaskSummary {\r\n    const statusCounts: { [status: string]: number } = {};\r\n    const assigneeCounts: { [assignee: string]: number } = {};\r\n\r\n    // Process each task\r\n    tasks.forEach(task => {\r\n      const status = task.state || 'Unknown';\r\n      const assignee = task.assignedTo || 'Unassigned';\r\n\r\n      // Count by status\r\n      statusCounts[status] = (statusCounts[status] || 0) + 1;\r\n\r\n      // Count by assignee\r\n      assigneeCounts[assignee] = (assigneeCounts[assignee] || 0) + 1;\r\n    });\r\n\r\n    return {\r\n      totalTasks: tasks.length,\r\n      statusCounts,\r\n      assigneeCounts,\r\n      tasks: tasks\r\n    };\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}