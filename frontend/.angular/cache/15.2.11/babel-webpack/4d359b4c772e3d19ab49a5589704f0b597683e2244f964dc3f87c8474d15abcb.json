{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SettingsService = /*#__PURE__*/(() => {\n  class SettingsService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiUrl}/settings`;\n    }\n    // Get all settings (admin only)\n    getAllSettings() {\n      return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n    }\n    // User role management\n    getUserRoles() {\n      return this.http.get(`${this.apiUrl}/users`).pipe(catchError(this.handleError));\n    }\n    updateUserRole(request) {\n      return this.http.post(`${this.apiUrl}/users`, request).pipe(catchError(this.handleError));\n    }\n    // Azure DevOps settings\n    getAzureDevOpsSettings() {\n      return this.http.get(`${this.apiUrl}/azure-devops-pat`).pipe(catchError(this.handleError));\n    }\n    updateAzureDevOpsPAT(request) {\n      return this.http.post(`${this.apiUrl}/azure-devops-pat`, request).pipe(catchError(this.handleError));\n    }\n    // AI model settings\n    getAiModelSettings() {\n      return this.http.get(`${this.apiUrl}/ai-model`).pipe(catchError(this.handleError));\n    }\n    updateAiModelSettings(request) {\n      return this.http.post(`${this.apiUrl}/ai-model`, request).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      console.error('Settings service error:', error);\n      let errorMessage = 'An unknown error occurred';\n      if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      } else if (error.status === 403) {\n        errorMessage = 'You do not have permission to access this resource';\n      } else if (error.status === 401) {\n        errorMessage = 'Please log in to access this resource';\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return throwError(() => new Error(errorMessage));\n    }\n    static {\n      this.ɵfac = function SettingsService_Factory(t) {\n        return new (t || SettingsService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: SettingsService,\n        factory: SettingsService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return SettingsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}