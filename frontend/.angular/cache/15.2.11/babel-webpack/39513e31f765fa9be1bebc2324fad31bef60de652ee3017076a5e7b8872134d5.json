{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/auth.service\";\nimport * as i2 from \"../../../services/settings.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction AiModelSettingsComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function AiModelSettingsComponent_div_5_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.error = \"\");\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.error, \" \");\n  }\n}\nfunction AiModelSettingsComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function AiModelSettingsComponent_div_6_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.success = \"\");\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.success, \" \");\n  }\n}\nfunction AiModelSettingsComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"div\", 12)(2, \"span\", 13);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction AiModelSettingsComponent_div_8_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵelement(1, \"i\", 29);\n    i0.ɵɵtext(2, \" You can view AI model settings, but you need Admin or Scrum Master role to modify them. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AiModelSettingsComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 14)(2, \"div\", 15)(3, \"div\", 16)(4, \"div\", 17)(5, \"label\", 18);\n    i0.ɵɵtext(6, \"Model Endpoint\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 19);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 16)(9, \"div\", 17)(10, \"label\", 18);\n    i0.ɵɵtext(11, \"API Key\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"input\", 20);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(13, \"div\", 21)(14, \"div\", 22)(15, \"div\", 3)(16, \"div\", 23)(17, \"div\")(18, \"h6\", 2);\n    i0.ɵɵtext(19, \"AI Model Auto-Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"p\", 24);\n    i0.ɵɵtext(21, \" When enabled, the AI model will automatically update with the latest data. \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(22, \"div\", 25)(23, \"input\", 26);\n    i0.ɵɵlistener(\"change\", function AiModelSettingsComponent_div_8_Template_input_change_23_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.toggleAutoUpdate());\n    });\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵtemplate(24, AiModelSettingsComponent_div_8_div_24_Template, 3, 0, \"div\", 27);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"value\", ctx_r3.settings.modelEndpoint);\n    i0.ɵɵadvance(16);\n    i0.ɵɵproperty(\"checked\", ctx_r3.settings.enableAutoUpdate)(\"disabled\", ctx_r3.loading || !ctx_r3.authService.canEditAiModelSettings());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.authService.canEditAiModelSettings());\n  }\n}\nexport class AiModelSettingsComponent {\n  constructor(authService, settingsService, fb) {\n    this.authService = authService;\n    this.settingsService = settingsService;\n    this.fb = fb;\n    this.settings = null;\n    this.loading = false;\n    this.error = '';\n    this.success = '';\n  }\n  ngOnInit() {\n    this.loadSettings();\n  }\n  loadSettings() {\n    this.loading = true;\n    this.error = '';\n    this.success = '';\n    this.settingsService.getAiModelSettings().subscribe({\n      next: settings => {\n        this.settings = settings;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = err.message || 'Failed to load AI model settings';\n        this.loading = false;\n      }\n    });\n  }\n  toggleAutoUpdate() {\n    if (!this.authService.canEditAiModelSettings()) {\n      this.error = 'You do not have permission to update AI model settings';\n      return;\n    }\n    if (!this.settings) {\n      return;\n    }\n    this.loading = true;\n    this.error = '';\n    this.success = '';\n    const newValue = !this.settings.enableAutoUpdate;\n    const request = {\n      enableAutoUpdate: newValue\n    };\n    this.settingsService.updateAiModelSettings(request).subscribe({\n      next: () => {\n        if (this.settings) {\n          this.settings.enableAutoUpdate = newValue;\n        }\n        this.success = `AI Model Auto-Update ${newValue ? 'enabled' : 'disabled'} successfully`;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = err.message || 'Failed to update AI model settings';\n        this.loading = false;\n      }\n    });\n  }\n  static {\n    this.ɵfac = function AiModelSettingsComponent_Factory(t) {\n      return new (t || AiModelSettingsComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.SettingsService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AiModelSettingsComponent,\n      selectors: [[\"app-ai-model-settings\"]],\n      decls: 9,\n      vars: 4,\n      consts: [[1, \"card\"], [1, \"card-header\"], [1, \"mb-0\"], [1, \"card-body\"], [\"class\", \"alert alert-danger alert-dismissible fade show\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"alert alert-success alert-dismissible fade show\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"d-flex justify-content-center mb-3\", 4, \"ngIf\"], [4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\", \"alert-dismissible\", \"fade\", \"show\"], [\"type\", \"button\", 1, \"btn-close\", 3, \"click\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\", \"alert-dismissible\", \"fade\", \"show\"], [1, \"d-flex\", \"justify-content-center\", \"mb-3\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"mb-4\"], [1, \"row\", \"g-3\"], [1, \"col-md-6\"], [1, \"form-group\"], [1, \"form-label\", \"text-muted\"], [\"type\", \"text\", \"readonly\", \"\", 1, \"form-control\", 3, \"value\"], [\"type\", \"password\", \"value\", \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\", \"readonly\", \"\", 1, \"form-control\"], [1, \"mt-4\"], [1, \"card\", \"bg-light\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"text-muted\", \"mb-0\", \"small\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"role\", \"switch\", \"id\", \"aiAutoUpdate\", 1, \"form-check-input\", 3, \"checked\", \"disabled\", \"change\"], [\"class\", \"alert alert-info mt-3\", 4, \"ngIf\"], [1, \"alert\", \"alert-info\", \"mt-3\"], [1, \"bi\", \"bi-info-circle\", \"me-2\"]],\n      template: function AiModelSettingsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h5\", 2);\n          i0.ɵɵtext(3, \"AI Model Settings\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 3);\n          i0.ɵɵtemplate(5, AiModelSettingsComponent_div_5_Template, 3, 1, \"div\", 4);\n          i0.ɵɵtemplate(6, AiModelSettingsComponent_div_6_Template, 3, 1, \"div\", 5);\n          i0.ɵɵtemplate(7, AiModelSettingsComponent_div_7_Template, 4, 0, \"div\", 6);\n          i0.ɵɵtemplate(8, AiModelSettingsComponent_div_8_Template, 25, 4, \"div\", 7);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.success);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading && ctx.settings);\n        }\n      },\n      dependencies: [i4.NgIf],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zZXR0aW5ncy9haS1tb2RlbC1zZXR0aW5ncy9haS1tb2RlbC1zZXR0aW5ncy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIEFJIG1vZGVsIHNldHRpbmdzIGNvbXBvbmVudCBzdHlsZXMgKi8gIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["i0","AiModelSettingsComponent","constructor","authService","settingsService","fb","ngOnInit","loadSettings","loading","error","success","getAiModelSettings","subscribe","next","settings","err","message","toggleAutoUpdate","canEditAiModelSettings","newValue","enableAutoUpdate","request","updateAiModelSettings","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\settings\\ai-model-settings\\ai-model-settings.component.html","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\settings\\ai-model-settings\\ai-model-settings.component.ts"],"sourcesContent":["<div class=\"card\">\r\n  <div class=\"card-header\">\r\n    <h5 class=\"mb-0\">AI Model Settings</h5>\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <!-- Error and success alerts -->\r\n    <div *ngIf=\"error\" class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n      {{ error }}\r\n      <button type=\"button\" class=\"btn-close\" (click)=\"error = ''\"></button>\r\n    </div>\r\n    \r\n    <div *ngIf=\"success\" class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n      {{ success }}\r\n      <button type=\"button\" class=\"btn-close\" (click)=\"success = ''\"></button>\r\n    </div>\r\n\r\n    <!-- Loading state -->\r\n    <div *ngIf=\"loading\" class=\"d-flex justify-content-center mb-3\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- AI Model Settings -->\r\n    <div *ngIf=\"!loading && settings\">\r\n      <div class=\"mb-4\">\r\n        <div class=\"row g-3\">\r\n          <div class=\"col-md-6\">\r\n            <div class=\"form-group\">\r\n              <label class=\"form-label text-muted\">Model Endpoint</label>\r\n              <input type=\"text\" class=\"form-control\" [value]=\"settings.modelEndpoint\" readonly>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-6\">\r\n            <div class=\"form-group\">\r\n              <label class=\"form-label text-muted\">API Key</label>\r\n              <input type=\"password\" class=\"form-control\" value=\"••••••••••••••••\" readonly>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- AI Model Auto-Update Toggle -->\r\n      <div class=\"mt-4\">\r\n        <div class=\"card bg-light\">\r\n          <div class=\"card-body\">\r\n            <div class=\"d-flex justify-content-between align-items-center\">\r\n              <div>\r\n                <h6 class=\"mb-0\">AI Model Auto-Update</h6>\r\n                <p class=\"text-muted mb-0 small\">\r\n                  When enabled, the AI model will automatically update with the latest data.\r\n                </p>\r\n              </div>\r\n              <div class=\"form-check form-switch\">\r\n                <input \r\n                  class=\"form-check-input\" \r\n                  type=\"checkbox\" \r\n                  role=\"switch\" \r\n                  id=\"aiAutoUpdate\" \r\n                  [checked]=\"settings.enableAutoUpdate\" \r\n                  (change)=\"toggleAutoUpdate()\"\r\n                  [disabled]=\"loading || !authService.canEditAiModelSettings()\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Info message about permissions -->\r\n        <div *ngIf=\"!authService.canEditAiModelSettings()\" class=\"alert alert-info mt-3\">\r\n          <i class=\"bi bi-info-circle me-2\"></i>\r\n          You can view AI model settings, but you need Admin or Scrum Master role to modify them.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> ","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { SettingsService } from '../../../services/settings.service';\r\nimport { AiModelSettingsDto, UpdateAiModelSettingsRequest } from '../../../models/settings.model';\r\n\r\n@Component({\r\n  selector: 'app-ai-model-settings',\r\n  templateUrl: './ai-model-settings.component.html',\r\n  styleUrls: ['./ai-model-settings.component.scss']\r\n})\r\nexport class AiModelSettingsComponent implements OnInit {\r\n  settings: AiModelSettingsDto | null = null;\r\n  loading = false;\r\n  error = '';\r\n  success = '';\r\n\r\n  constructor(\r\n    public authService: AuthService,\r\n    private settingsService: SettingsService,\r\n    private fb: FormBuilder\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadSettings();\r\n  }\r\n\r\n  loadSettings(): void {\r\n    this.loading = true;\r\n    this.error = '';\r\n    this.success = '';\r\n\r\n    this.settingsService.getAiModelSettings().subscribe({\r\n      next: (settings) => {\r\n        this.settings = settings;\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        this.error = err.message || 'Failed to load AI model settings';\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleAutoUpdate(): void {\r\n    if (!this.authService.canEditAiModelSettings()) {\r\n      this.error = 'You do not have permission to update AI model settings';\r\n      return;\r\n    }\r\n\r\n    if (!this.settings) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.error = '';\r\n    this.success = '';\r\n\r\n    const newValue = !this.settings.enableAutoUpdate;\r\n    \r\n    const request: UpdateAiModelSettingsRequest = {\r\n      enableAutoUpdate: newValue\r\n    };\r\n\r\n    this.settingsService.updateAiModelSettings(request).subscribe({\r\n      next: () => {\r\n        if (this.settings) {\r\n          this.settings.enableAutoUpdate = newValue;\r\n        }\r\n        this.success = `AI Model Auto-Update ${newValue ? 'enabled' : 'disabled'} successfully`;\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        this.error = err.message || 'Failed to update AI model settings';\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}