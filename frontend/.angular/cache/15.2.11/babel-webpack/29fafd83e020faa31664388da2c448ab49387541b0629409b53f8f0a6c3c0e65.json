{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/estimation.service\";\nimport * as i3 from \"../../services/task.service\";\nexport class TaskEstimationComponent {\n  constructor(fb, estimationService, taskService) {\n    this.fb = fb;\n    this.estimationService = estimationService;\n    this.taskService = taskService;\n    this.teamMembers = [];\n    this.taskTypes = ['Bug', 'Change Request', 'Feature', 'Documentation', 'Test', 'Research'];\n    this.complexityLevels = ['Low', 'Medium', 'High'];\n    this.loading = false;\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n    this.estimationForm = this.fb.group({\n      title: ['', [Validators.required, Validators.minLength(5)]],\n      type: ['Feature', Validators.required],\n      assignee: [''],\n      complexity: ['Medium', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.loadTeamMembers();\n  }\n  loadTeamMembers() {\n    this.taskService.getTeamMembers().subscribe({\n      next: response => {\n        if (Array.isArray(response)) {\n          if (typeof response[0] === 'string') {\n            // It's an array of strings\n            this.teamMembers = response;\n          } else {\n            // It's an array of TeamMember objects\n            this.teamMembers = response.map(m => m.displayName || m.name);\n          }\n        }\n      },\n      error: err => {\n        console.error('Error loading team members:', err);\n        this.error = 'Failed to load team members';\n      }\n    });\n  }\n  estimateTaskTime() {\n    if (this.estimationForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.estimationForm.controls).forEach(key => {\n        this.estimationForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n    this.loading = true;\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n    const request = {\n      title: this.estimationForm.value.title,\n      type: this.estimationForm.value.type,\n      assignee: this.estimationForm.value.assignee,\n      complexity: this.estimationForm.value.complexity\n    };\n    this.estimationService.estimateTaskTime(request).subscribe({\n      next: result => {\n        this.estimationResult = result;\n        this.showResult = true;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = err.message || 'An error occurred during estimation';\n        this.loading = false;\n      }\n    });\n  }\n  resetForm() {\n    this.estimationForm.reset({\n      title: '',\n      type: 'Feature',\n      assignee: '',\n      complexity: 'Medium'\n    });\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n  }\n  getConfidenceClass(score) {\n    if (score >= 0.8) return 'bg-success';\n    if (score >= 0.6) return 'bg-info';\n    if (score >= 0.4) return 'bg-warning';\n    return 'bg-danger';\n  }\n  formatConfidence(score) {\n    return (score * 100).toFixed(0) + '%';\n  }\n  static {\n    this.ɵfac = function TaskEstimationComponent_Factory(t) {\n      return new (t || TaskEstimationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EstimationService), i0.ɵɵdirectiveInject(i3.TaskService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskEstimationComponent,\n      selectors: [[\"app-task-estimation\"]],\n      decls: 5,\n      vars: 0,\n      consts: [[1, \"container\"], [1, \"alert\", \"alert-info\"]],\n      template: function TaskEstimationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"ML-Based Task Estimation\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 1);\n          i0.ɵɵtext(4, \" This feature is currently under development. Check back soon for machine learning-powered task time estimation. \");\n          i0.ɵɵelementEnd()();\n        }\n      },\n      styles: [\"h2[_ngcontent-%COMP%] {\\n  margin-bottom: 1.5rem;\\n  color: #2c3e50;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  padding-top: 1.5rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWVzdGltYXRpb24vdGFzay1lc3RpbWF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UscUJBQUE7RUFDQSxjQUFBO0FBQ0Y7O0FBRUE7RUFDRSxtQkFBQTtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaDIge1xyXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTtcclxuICBjb2xvcjogIzJjM2U1MDtcclxufVxyXG5cclxuLmNvbnRhaW5lciB7XHJcbiAgcGFkZGluZy10b3A6IDEuNXJlbTtcclxufSAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","TaskEstimationComponent","constructor","fb","estimationService","taskService","estimationForm","group","title","required","minLength","type","assignee","complexity","ngOnInit","loadTeamMembers","getTeamMembers","subscribe","next","response","Array","isArray","teamMembers","map","m","displayName","name","error","err","console","estimateTaskTime","invalid","Object","keys","controls","forEach","key","get","markAsTouched","loading","estimationResult","showResult","request","value","result","message","resetForm","reset","getConfidenceClass","score","formatConfidence","toFixed","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { EstimationService, TaskEstimationResponse } from '../../services/estimation.service';\r\nimport { TaskService } from '../../services/task.service';\r\n\r\n@Component({\r\n  selector: 'app-task-estimation',\r\n  templateUrl: './task-estimation.component.html',\r\n  styleUrls: ['./task-estimation.component.scss']\r\n})\r\nexport class TaskEstimationComponent implements OnInit {\r\n  estimationForm: FormGroup;\r\n  teamMembers: string[] = [];\r\n  taskTypes: string[] = [\r\n    'Bug',\r\n    'Change Request',\r\n    'Feature',\r\n    'Documentation',\r\n    'Test',\r\n    'Research'\r\n  ];\r\n  complexityLevels: string[] = [\r\n    'Low',\r\n    'Medium',\r\n    'High'\r\n  ];\r\n  \r\n  loading = false;\r\n  error: string | null = null;\r\n  estimationResult: TaskEstimationResponse | null = null;\r\n  showResult = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private estimationService: EstimationService,\r\n    private taskService: TaskService\r\n  ) {\r\n    this.estimationForm = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(5)]],\r\n      type: ['Feature', Validators.required],\r\n      assignee: [''],\r\n      complexity: ['Medium', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadTeamMembers();\r\n  }\r\n\r\n  loadTeamMembers(): void {\r\n    this.taskService.getTeamMembers().subscribe({\r\n      next: (response) => {\r\n        if (Array.isArray(response)) {\r\n          if (typeof response[0] === 'string') {\r\n            // It's an array of strings\r\n            this.teamMembers = response as string[];\r\n          } else {\r\n            // It's an array of TeamMember objects\r\n            this.teamMembers = (response as any[]).map(m => m.displayName || m.name);\r\n          }\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading team members:', err);\r\n        this.error = 'Failed to load team members';\r\n      }\r\n    });\r\n  }\r\n\r\n  estimateTaskTime(): void {\r\n    if (this.estimationForm.invalid) {\r\n      // Mark all fields as touched to trigger validation messages\r\n      Object.keys(this.estimationForm.controls).forEach(key => {\r\n        this.estimationForm.get(key)?.markAsTouched();\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.error = null;\r\n    this.estimationResult = null;\r\n    this.showResult = false;\r\n\r\n    const request = {\r\n      title: this.estimationForm.value.title,\r\n      type: this.estimationForm.value.type,\r\n      assignee: this.estimationForm.value.assignee,\r\n      complexity: this.estimationForm.value.complexity\r\n    };\r\n\r\n    this.estimationService.estimateTaskTime(request).subscribe({\r\n      next: (result) => {\r\n        this.estimationResult = result;\r\n        this.showResult = true;\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        this.error = err.message || 'An error occurred during estimation';\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  resetForm(): void {\r\n    this.estimationForm.reset({\r\n      title: '',\r\n      type: 'Feature',\r\n      assignee: '',\r\n      complexity: 'Medium'\r\n    });\r\n    this.error = null;\r\n    this.estimationResult = null;\r\n    this.showResult = false;\r\n  }\r\n\r\n  getConfidenceClass(score: number): string {\r\n    if (score >= 0.8) return 'bg-success';\r\n    if (score >= 0.6) return 'bg-info';\r\n    if (score >= 0.4) return 'bg-warning';\r\n    return 'bg-danger';\r\n  }\r\n\r\n  formatConfidence(score: number): string {\r\n    return (score * 100).toFixed(0) + '%';\r\n  }\r\n} ","<div class=\"container\">\r\n  <h2>ML-Based Task Estimation</h2>\r\n  <div class=\"alert alert-info\">\r\n    This feature is currently under development. Check back soon for machine learning-powered task time estimation.\r\n  </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}