{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, finalize, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/dashboard.service\";\nimport * as i2 from \"../../services/azure-devops.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"stateDistributionChart\"];\nconst _c1 = [\"iterationDistributionChart\"];\nconst _c2 = [\"statusPieChart\"];\nfunction DashboardComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"span\", 31);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.error.sprint, \" \");\n  }\n}\nfunction DashboardComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 33);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 34)(4, \"div\")(5, \"p\", 35);\n    i0.ɵɵtext(6, \"Start Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\", 36);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\")(11, \"p\", 35);\n    i0.ɵɵtext(12, \"End Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\", 36);\n    i0.ɵɵtext(14);\n    i0.ɵɵpipe(15, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\")(17, \"p\", 35);\n    i0.ɵɵtext(18, \"Days Remaining\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p\", 37);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.sprintOverview.sprintName);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 4, ctx_r2.sprintOverview.startDate, \"mediumDate\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(15, 7, ctx_r2.sprintOverview.endDate, \"mediumDate\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r2.sprintOverview.daysRemaining);\n  }\n}\nfunction DashboardComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"p\", 38);\n    i0.ɵɵtext(2, \"Ask me anything about your project or tasks.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 39);\n    i0.ɵɵtext(4, \"Examples:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ul\", 40)(6, \"li\");\n    i0.ɵɵtext(7, \"How many tasks are in the current sprint?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"li\");\n    i0.ɵɵtext(9, \"Show me tasks assigned to John\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"li\");\n    i0.ɵɵtext(11, \"Assign task #1234 to Sarah\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c3 = function (a0, a1) {\n  return {\n    \"user-message\": a0,\n    \"assistant-message\": a1\n  };\n};\nfunction DashboardComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41)(1, \"div\", 42)(2, \"div\", 43);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 44);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const msg_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c3, msg_r9.role === \"user\", msg_r9.role === \"assistant\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(msg_r9.content);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 3, msg_r9.timestamp, \"shortTime\"));\n  }\n}\nfunction DashboardComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"span\", 31);\n    i0.ɵɵtext(3, \"Loading work item data...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 45);\n    i0.ɵɵtext(5, \"Fetching real-time work item counts from Azure DevOps...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.taskDetailsError, \" \");\n  }\n}\nfunction DashboardComponent_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"p\", 38);\n    i0.ɵɵtext(2, \"No work item state data available. Please select an iteration and click Search.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_div_42_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52)(1, \"div\", 6);\n    i0.ɵɵelement(2, \"div\", 53);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const statusItem_r12 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"background-color\", statusItem_r12.color);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", statusItem_r12.status, \": \", statusItem_r12.count, \"\");\n  }\n}\nfunction DashboardComponent_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46)(1, \"div\", 47);\n    i0.ɵɵelement(2, \"canvas\", null, 48);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 49)(5, \"div\", 50);\n    i0.ɵɵtemplate(6, DashboardComponent_div_42_div_6_Template, 5, 4, \"div\", 51);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.tasksByStatus);\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(dashboardService, azureDevOpsService) {\n      this.dashboardService = dashboardService;\n      this.azureDevOpsService = azureDevOpsService;\n      this.sprintOverview = null;\n      this.sprintSummary = null;\n      this.activityFeed = null;\n      this.dailyTip = '';\n      this.workItemDistribution = null;\n      this.stateDistributions = [];\n      this.longTermDevNewItems = [];\n      this.supportItems = [];\n      this.aiTips = null;\n      // Define state colors for consistency\n      this.stateColors = {\n        'Proposed': '#e6e6e6',\n        'New': '#b4d7a8',\n        'Dev-New': '#b4d7a8',\n        'Active': '#4a86e8',\n        'Dev-WIP': '#4a86e8',\n        'In Progress': '#4a86e8',\n        'Resolved': '#ffd966',\n        'Code Review': '#9fc5e8',\n        'QA': '#d5a6bd',\n        'Testing': '#d5a6bd',\n        'Done': '#93c47d',\n        'Closed': '#6aa84f',\n        'Completed': '#6aa84f',\n        'Blocked': '#e06666',\n        'Removed': '#999999'\n      };\n      // Default chart colors if state not found in mapping\n      this.defaultChartColors = ['#4a86e8', '#6aa84f', '#ffd966', '#e06666', '#9fc5e8', '#d5a6bd', '#b4d7a8', '#e6e6e6', '#93c47d', '#6fa8dc'];\n      // Properties for the new task board\n      this.taskStatusBoard = [];\n      // Properties for task details\n      this.loadingTaskDetails = false;\n      this.taskDetailsError = '';\n      this.tasksByStatus = [];\n      // Chat properties\n      this.chatMessages = [];\n      this.currentMessage = '';\n      // Define status colors based on Azure DevOps board from the image\n      this.statusColors = {\n        'PMG - Proposed': '#e0e0e0',\n        'DEV - Yet to Start': '#9a9a9a',\n        'DEV - WIP': '#0078d4',\n        'DEV - Code Review': '#324e93',\n        'DEV - Done': '#00b7c3',\n        'DEV/QC - Reopened': '#e81123',\n        'Clarifications': '#fff100',\n        'On Hold': '#e3008c',\n        'QC - In Test Bed': '#8764b8',\n        'Completed': '#107c10'\n      };\n      // Track loading and error states\n      this.loading = {\n        sprint: true,\n        summary: true,\n        activity: true,\n        tip: true,\n        distribution: true,\n        stateDistribution: true,\n        longTermDevNew: true,\n        supportItems: true,\n        aiTips: true,\n        taskStatusBoard: true\n      };\n      this.error = {\n        sprint: '',\n        summary: '',\n        activity: '',\n        tip: '',\n        distribution: '',\n        stateDistribution: '',\n        longTermDevNew: '',\n        supportItems: '',\n        aiTips: '',\n        taskStatusBoard: ''\n      };\n      // Starting with a default Iteration Path that can be changed\n      this.selectedIterationPath = 'Techoil\\\\2.3.23';\n      this.availableIterationPaths = ['Techoil\\\\2.3.23'];\n      // Work item status counts from Azure DevOps\n      this.azureDevOpsWorkItems = [];\n      this.workItemCounts = {\n        totalTasks: 0,\n        devNew: 0,\n        inProgress: 0,\n        codeReview: 0,\n        devComplete: 0,\n        completed: 0,\n        blocked: 0\n      };\n      // Assignee distribution data\n      this.assigneeDistribution = {};\n      // Loading and error states\n      this.loadingAzureDevOps = false;\n      this.azureDevOpsError = '';\n    }\n    ngOnInit() {\n      this.loadDashboardData();\n    }\n    ngAfterViewInit() {\n      // Charts will be initialized after data is loaded\n    }\n    loadDashboardData() {\n      this.loadSprintOverview();\n      this.loadAiTips();\n      this.loadTaskStatusBoard();\n    }\n    loadIterationData() {\n      // Validate iteration path\n      if (!this.selectedIterationPath) {\n        return;\n      }\n      // Trim whitespace and ensure consistent formatting\n      this.selectedIterationPath = this.selectedIterationPath.trim();\n      // Reset loading and error states\n      this.loadingTaskDetails = true;\n      this.taskDetailsError = '';\n      // Load Azure DevOps work items directly first to get live data\n      this.loadAzureDevOpsWorkItemsWithWiql();\n      // Load other dashboard data\n      this.loadSprintSummary(this.selectedIterationPath);\n      this.loadTaskStatusBoard();\n      // Update available paths if this is a new one\n      if (!this.availableIterationPaths.includes(this.selectedIterationPath)) {\n        this.availableIterationPaths.push(this.selectedIterationPath);\n      }\n    }\n    loadSprintOverview() {\n      this.loading.sprint = true;\n      this.dashboardService.getCurrentSprint().subscribe({\n        next: data => {\n          this.sprintOverview = data;\n          // Use hard-coded iteration path instead of data.iterationPath\n          // this.selectedIterationPath = data.iterationPath;\n          this.loading.sprint = false;\n          this.loadSprintSummary(this.selectedIterationPath);\n          this.loadActivityFeed();\n          this.loadWorkItemDistribution(this.selectedIterationPath);\n          this.loadStateDistributions();\n        },\n        error: err => {\n          this.error.sprint = 'Failed to load sprint data';\n          this.loading.sprint = false;\n          console.error('Error loading sprint data:', err);\n        }\n      });\n    }\n    loadSprintSummary(iterationPath) {\n      this.loading.summary = true;\n      this.dashboardService.getSprintSummary(iterationPath).subscribe({\n        next: data => {\n          this.sprintSummary = data;\n          this.loading.summary = false;\n        },\n        error: err => {\n          this.error.summary = 'Failed to load summary data';\n          this.loading.summary = false;\n          console.error('Error loading summary data:', err);\n        }\n      });\n    }\n    loadActivityFeed() {\n      this.loading.activity = true;\n      this.dashboardService.getActivityFeed().subscribe({\n        next: data => {\n          this.activityFeed = data;\n          this.loading.activity = false;\n        },\n        error: err => {\n          this.error.activity = 'Failed to load activity feed';\n          this.loading.activity = false;\n          console.error('Error loading activity feed:', err);\n        }\n      });\n    }\n    loadDailyTip() {\n      this.loading.tip = true;\n      this.dashboardService.getDailyTip().subscribe({\n        next: data => {\n          this.dailyTip = data.tip;\n          this.loading.tip = false;\n        },\n        error: err => {\n          this.error.tip = 'Failed to load daily tip';\n          this.loading.tip = false;\n          console.error('Error loading daily tip:', err);\n        }\n      });\n    }\n    loadWorkItemDistribution(iterationPath) {\n      this.loading.distribution = true;\n      this.dashboardService.getWorkItemDistribution(iterationPath).subscribe({\n        next: data => {\n          this.workItemDistribution = data;\n          this.loading.distribution = false;\n          // Initialize distribution chart after data is loaded\n          setTimeout(() => {\n            this.initializeWorkItemDistributionChart();\n          }, 100);\n        },\n        error: err => {\n          this.error.distribution = 'Failed to load work item distribution';\n          this.loading.distribution = false;\n          console.error('Error loading work item distribution:', err);\n        }\n      });\n    }\n    loadStateDistributions() {\n      this.loading.stateDistribution = true;\n      this.dashboardService.getStateDistribution(this.selectedIterationPath).subscribe({\n        next: data => {\n          this.stateDistributions = data;\n          // Keep hard-coded iteration paths instead of dynamically loading them\n          // this.availableIterationPaths = data.map(d => d.iterationPath);\n          this.loading.stateDistribution = false;\n          // Initialize state distribution chart after data is loaded\n          setTimeout(() => {\n            this.initializeStateDistributionsChart();\n          }, 100);\n        },\n        error: err => {\n          this.error.stateDistribution = 'Failed to load state distributions';\n          this.loading.stateDistribution = false;\n          console.error('Error loading state distributions:', err);\n        }\n      });\n    }\n    loadLongTermDevNewItems() {\n      this.loading.longTermDevNew = true;\n      this.dashboardService.getLongTermDevNewItems(5).subscribe({\n        next: data => {\n          this.longTermDevNewItems = data;\n          this.loading.longTermDevNew = false;\n        },\n        error: err => {\n          this.error.longTermDevNew = 'Failed to load long-term Dev-New items';\n          this.loading.longTermDevNew = false;\n          console.error('Error loading long-term Dev-New items:', err);\n        }\n      });\n    }\n    loadSupportItems() {\n      this.loading.supportItems = true;\n      this.dashboardService.getSupportItems(6).subscribe({\n        next: data => {\n          this.supportItems = data;\n          this.loading.supportItems = false;\n        },\n        error: err => {\n          this.error.supportItems = 'Failed to load support items';\n          this.loading.supportItems = false;\n          console.error('Error loading support items:', err);\n        }\n      });\n    }\n    loadAiTips() {\n      this.loading.aiTips = true;\n      this.dashboardService.getAiTips().subscribe({\n        next: data => {\n          this.aiTips = data;\n          this.longTermDevNewItems = data.longTermDevNewItems;\n          this.supportItems = data.supportItems;\n          this.dailyTip = data.tip;\n          this.loading.aiTips = false;\n        },\n        error: err => {\n          this.error.aiTips = 'Failed to load AI tips';\n          this.loading.aiTips = false;\n          console.error('Error loading AI tips:', err);\n          // Fall back to individual methods\n          this.loadDailyTip();\n          this.loadLongTermDevNewItems();\n          this.loadSupportItems();\n        }\n      });\n    }\n    initializeWorkItemDistributionChart() {\n      if (!this.workItemDistribution || !this.stateDistributionChartRef?.nativeElement) {\n        return;\n      }\n      // Get canvas element\n      const ctx = this.stateDistributionChartRef.nativeElement.getContext('2d');\n      if (!ctx) return;\n      const labels = this.workItemDistribution.states.map(s => s.state);\n      const data = this.workItemDistribution.states.map(s => s.count);\n      const colors = this.workItemDistribution.states.map(s => this.stateColors[s.state] || this.getRandomColor());\n      // Clear any existing chart\n      if (window.Chart && ctx.chart) {\n        ctx.chart.destroy();\n      }\n      // Create new chart\n      if (window.Chart) {\n        ctx.chart = new window.Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: labels,\n            datasets: [{\n              data: data,\n              backgroundColor: colors,\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right'\n              },\n              title: {\n                display: true,\n                text: `Work Item States - ${this.workItemDistribution.iterationPath}`\n              }\n            }\n          }\n        });\n      }\n    }\n    initializeStateDistributionsChart() {\n      if (this.stateDistributions.length === 0 || !this.iterationDistributionChartRef?.nativeElement) {\n        return;\n      }\n      // Get canvas element\n      const ctx = this.iterationDistributionChartRef.nativeElement.getContext('2d');\n      if (!ctx) return;\n      // Clear any existing chart\n      if (window.Chart && ctx.chart) {\n        ctx.chart.destroy();\n      }\n      // Prepare data for stacked bar chart\n      const iterationLabels = this.stateDistributions.map(d => d.iterationPath);\n      // Find all unique states across all iterations\n      const allStates = new Set();\n      this.stateDistributions.forEach(dist => {\n        dist.states.forEach(state => {\n          allStates.add(state.state);\n        });\n      });\n      // Create datasets, one for each state\n      const datasets = Array.from(allStates).map(stateName => {\n        // Find color for this state\n        const stateColor = this.stateColors[stateName] || this.getRandomColor();\n        // Create dataset for this state across all iterations\n        return {\n          label: stateName,\n          data: this.stateDistributions.map(dist => {\n            const stateData = dist.states.find(s => s.state === stateName);\n            return stateData ? stateData.count : 0;\n          }),\n          backgroundColor: stateColor\n        };\n      });\n      // Create new chart\n      if (window.Chart) {\n        ctx.chart = new window.Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: iterationLabels,\n            datasets: datasets\n          },\n          options: {\n            responsive: true,\n            scales: {\n              x: {\n                stacked: true\n              },\n              y: {\n                stacked: true,\n                beginAtZero: true\n              }\n            },\n            plugins: {\n              legend: {\n                position: 'right'\n              },\n              title: {\n                display: true,\n                text: 'Work Item Distribution by Iteration'\n              }\n            }\n          }\n        });\n      }\n    }\n    changeIterationPath(iterationPath) {\n      // Even with hardcoded path, keep the method in case it's called from elsewhere\n      if (iterationPath !== this.selectedIterationPath) {\n        this.selectedIterationPath = iterationPath;\n        this.loadWorkItemDistribution(iterationPath);\n        this.loadSprintSummary(iterationPath);\n      }\n    }\n    getStateColor(state) {\n      return this.stateColors[state] || this.getRandomColor();\n    }\n    getRandomColor() {\n      const randomIndex = Math.floor(Math.random() * this.defaultChartColors.length);\n      return this.defaultChartColors[randomIndex];\n    }\n    reload() {\n      this.loadDashboardData();\n    }\n    loadTaskStatusBoard() {\n      this.loading.taskStatusBoard = true;\n      this.error.taskStatusBoard = '';\n      // Try the direct tasks API first which appears to be working correctly\n      this.dashboardService.getTaskDistribution(this.selectedIterationPath).subscribe({\n        next: data => {\n          if (data && Array.isArray(data)) {\n            // Process task data from tasks API\n            this.processTaskData(data);\n          } else {\n            // Fallback to work item distribution API\n            this.tryWorkItemDistribution();\n          }\n        },\n        error: err => {\n          console.error('Error loading task distribution:', err);\n          // Fallback to work item distribution API\n          this.tryWorkItemDistribution();\n        }\n      });\n    }\n    // Process raw task data from /api/tasks endpoint\n    processTaskData(tasks) {\n      if (!tasks || tasks.length === 0) {\n        this.error.taskStatusBoard = 'No tasks found for this iteration';\n        this.loading.taskStatusBoard = false;\n        this.createDummyTaskBoard();\n        this.initializeStatusPieChart();\n        return;\n      }\n      // Group tasks by status\n      const statusGroups = tasks.reduce((acc, task) => {\n        const status = task.status || 'Unknown';\n        if (!acc[status]) {\n          acc[status] = [];\n        }\n        acc[status].push(task);\n        return acc;\n      }, {});\n      // Convert to our TaskStatusItem format\n      this.taskStatusBoard = Object.keys(statusGroups).map(status => ({\n        status: status,\n        count: statusGroups[status].length,\n        color: this.getStatusColor(status)\n      }));\n      this.loading.taskStatusBoard = false;\n      // Initialize the pie chart\n      setTimeout(() => {\n        this.initializeStatusPieChart();\n      }, 100);\n    }\n    tryWorkItemDistribution() {\n      // First try to use the work item distribution API\n      this.dashboardService.getWorkItemDistribution(this.selectedIterationPath).subscribe({\n        next: data => {\n          if (data && data.states && data.states.length > 0) {\n            // Convert from WorkItemDistribution to TaskStatusItem[]\n            this.taskStatusBoard = data.states.map(state => ({\n              status: state.state,\n              count: state.count,\n              color: state.color || this.getStatusColor(state.state)\n            }));\n            this.loading.taskStatusBoard = false;\n            // Initialize the pie chart\n            setTimeout(() => {\n              this.initializeStatusPieChart();\n            }, 100);\n          } else {\n            // Fallback to tasks-by-status if data is empty\n            this.loadTasksByStatus();\n          }\n        },\n        error: err => {\n          console.error('Error loading work item distribution:', err);\n          // Fallback to tasks-by-status API\n          this.loadTasksByStatus();\n        }\n      });\n    }\n    loadTasksByStatus() {\n      this.dashboardService.getTasksByStatus(this.selectedIterationPath).subscribe({\n        next: data => {\n          if (data && data.items) {\n            this.taskStatusBoard = data.items;\n            this.loading.taskStatusBoard = false;\n            // Initialize the pie chart\n            setTimeout(() => {\n              this.initializeStatusPieChart();\n            }, 100);\n          } else {\n            this.error.taskStatusBoard = 'No task status data available for this iteration';\n            this.loading.taskStatusBoard = false;\n            // Create dummy data as a last resort\n            this.createDummyTaskBoard();\n            setTimeout(() => {\n              this.initializeStatusPieChart();\n            }, 100);\n          }\n        },\n        error: err => {\n          this.error.taskStatusBoard = 'Failed to load task status data';\n          this.loading.taskStatusBoard = false;\n          console.error('Error loading task status data:', err);\n          // Fallback to dummy data for development\n          this.createDummyTaskBoard();\n          // Initialize the pie chart with dummy data\n          setTimeout(() => {\n            this.initializeStatusPieChart();\n          }, 100);\n        }\n      });\n    }\n    createDummyTaskBoard() {\n      // Create dummy data similar to the Azure DevOps board in the image\n      this.taskStatusBoard = [{\n        status: 'PMG - Proposed',\n        count: 0,\n        color: this.statusColors['PMG - Proposed']\n      }, {\n        status: 'DEV - Yet to Start',\n        count: 2,\n        color: this.statusColors['DEV - Yet to Start']\n      }, {\n        status: 'DEV - WIP',\n        count: 4,\n        color: this.statusColors['DEV - WIP']\n      }, {\n        status: 'DEV - Code Review',\n        count: 2,\n        color: this.statusColors['DEV - Code Review']\n      }, {\n        status: 'DEV - Done',\n        count: 5,\n        color: this.statusColors['DEV - Done']\n      }, {\n        status: 'DEV/QC - Reopened',\n        count: 1,\n        color: this.statusColors['DEV/QC - Reopened']\n      }, {\n        status: 'Clarifications',\n        count: 1,\n        color: this.statusColors['Clarifications']\n      }, {\n        status: 'On Hold',\n        count: 0,\n        color: this.statusColors['On Hold']\n      }, {\n        status: 'QC - In Test Bed',\n        count: 7,\n        color: this.statusColors['QC - In Test Bed']\n      }, {\n        status: 'Completed',\n        count: 123,\n        color: this.statusColors['Completed']\n      }];\n    }\n    initializeStatusPieChart() {\n      if (!this.statusPieChartRef?.nativeElement) {\n        return;\n      }\n      // Get canvas element\n      const ctx = this.statusPieChartRef.nativeElement.getContext('2d');\n      if (!ctx) return;\n      // Setup data for pie chart from work item counts\n      const statusData = [{\n        status: 'Dev-New',\n        count: this.workItemCounts.devNew,\n        color: '#00a8e8'\n      }, {\n        status: 'In Progress',\n        count: this.workItemCounts.inProgress,\n        color: '#0078d4'\n      }, {\n        status: 'Code Review',\n        count: this.workItemCounts.codeReview,\n        color: '#8764b8'\n      }, {\n        status: 'Dev Complete',\n        count: this.workItemCounts.devComplete,\n        color: '#107c10'\n      }, {\n        status: 'Completed',\n        count: this.workItemCounts.completed,\n        color: '#00b7c3'\n      }, {\n        status: 'Blocked',\n        count: this.workItemCounts.blocked,\n        color: '#e81123'\n      }];\n      // Filter out states with 0 count for better visualization\n      const filteredStatuses = statusData.filter(item => item.count > 0);\n      const labels = filteredStatuses.map(s => s.status);\n      const data = filteredStatuses.map(s => s.count);\n      const colors = filteredStatuses.map(s => s.color);\n      // Clear any existing chart\n      if (window.Chart && ctx.chart) {\n        ctx.chart.destroy();\n      }\n      // Create new chart\n      if (window.Chart) {\n        ctx.chart = new window.Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: labels,\n            datasets: [{\n              data: data,\n              backgroundColor: colors,\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                display: true\n              },\n              title: {\n                display: true,\n                text: 'Work Item States Distribution'\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    const label = context.label || '';\n                    const value = context.raw || 0;\n                    const total = context.dataset.data.reduce((a, b) => Number(a) + Number(b), 0);\n                    const percentage = Math.round(value / total * 100);\n                    return `${label}: ${value} (${percentage}%)`;\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n    getStatusColor(status) {\n      return this.statusColors[status] || '#9a9a9a'; // Default gray color\n    }\n    // Chat methods\n    sendChatMessage() {\n      if (!this.currentMessage.trim()) return;\n      // Add user message\n      const userMessage = {\n        role: 'user',\n        content: this.currentMessage.trim(),\n        timestamp: new Date()\n      };\n      this.chatMessages.push(userMessage);\n      // Store message and clear input\n      const message = this.currentMessage;\n      this.currentMessage = '';\n      // Call API to get response\n      this.dashboardService.sendChatMessage(message).subscribe({\n        next: response => {\n          const assistantMessage = {\n            role: 'assistant',\n            content: response,\n            timestamp: new Date()\n          };\n          this.chatMessages.push(assistantMessage);\n        },\n        error: err => {\n          console.error('Error getting chat response:', err);\n          // Add fallback response\n          const fallbackMessage = {\n            role: 'assistant',\n            content: 'Sorry, I encountered an error processing your request. Please try again later.',\n            timestamp: new Date()\n          };\n          this.chatMessages.push(fallbackMessage);\n        }\n      });\n    }\n    /**\r\n     * Load work items from Azure DevOps for the selected iteration using WIQL API\r\n     */\n    loadAzureDevOpsWorkItemsWithWiql() {\n      this.loadingAzureDevOps = true;\n      this.azureDevOpsError = '';\n      this.azureDevOpsService.getWorkItemsByWiql(this.selectedIterationPath).pipe(finalize(() => {\n        this.loadingAzureDevOps = false;\n      })).subscribe({\n        next: dashboardStats => {\n          // Store the work item counts\n          this.workItemCounts = {\n            totalTasks: dashboardStats.totalTasks,\n            devNew: dashboardStats.devNew,\n            inProgress: dashboardStats.inProgress,\n            codeReview: dashboardStats.codeReview,\n            devComplete: dashboardStats.devComplete,\n            completed: dashboardStats.completed,\n            blocked: dashboardStats.blocked\n          };\n          // Store the work items if available\n          if (dashboardStats.workItems) {\n            this.azureDevOpsWorkItems = dashboardStats.workItems;\n          }\n          // Store assignee distribution data\n          if (dashboardStats.statsByAssignee) {\n            this.assigneeDistribution = dashboardStats.statsByAssignee;\n          }\n          // Update the summary data with the Azure DevOps counts\n          this.updateSummaryWithAzureDevOpsCounts();\n          // Update pie chart\n          setTimeout(() => {\n            this.initializeStatusPieChart();\n          }, 100);\n        },\n        error: error => {\n          console.error('Error loading Azure DevOps work items with WIQL:', error);\n          this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\n          // Fall back to the legacy method if WIQL fails\n          this.loadAzureDevOpsWorkItems();\n        }\n      });\n    }\n    /**\r\n     * Load work items from Azure DevOps for the selected iteration\r\n     */\n    loadAzureDevOpsWorkItems() {\n      this.loadingAzureDevOps = true;\n      this.azureDevOpsError = '';\n      // First try to get the status counts directly from the backend proxy\n      this.azureDevOpsService.getWorkItemStatusCounts(this.selectedIterationPath).pipe(catchError(error => {\n        console.error('Error loading status counts, falling back to work items:', error);\n        // Fall back to getting work items and counting them\n        return this.azureDevOpsService.getWorkItemsByIteration(this.selectedIterationPath).pipe(map(workItems => {\n          // Process the work items to get counts\n          return this.azureDevOpsService.getWorkItemCounts(workItems);\n        }), catchError(err => {\n          this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\n          console.error('Error loading Azure DevOps work items:', err);\n          return of({\n            totalTasks: 0,\n            devNew: 0,\n            inProgress: 0,\n            codeReview: 0,\n            devComplete: 0,\n            completed: 0,\n            blocked: 0\n          });\n        }));\n      }), finalize(() => {\n        this.loadingAzureDevOps = false;\n      })).subscribe(counts => {\n        // Store the counts\n        this.workItemCounts = counts;\n        // Also store the work items if available\n        if (Array.isArray(counts.workItems)) {\n          this.azureDevOpsWorkItems = counts.workItems;\n        }\n        // Update the summary data with the Azure DevOps counts\n        this.updateSummaryWithAzureDevOpsCounts();\n      });\n    }\n    /**\r\n     * Update summary data with the counts from Azure DevOps\r\n     */\n    updateSummaryWithAzureDevOpsCounts() {\n      console.log('Updating summary with Azure DevOps counts:', this.workItemCounts);\n      // Always create a new summary object with the latest counts to ensure reactivity\n      this.sprintSummary = {\n        totalTasks: this.workItemCounts.totalTasks || 0,\n        inProgress: this.workItemCounts.inProgress || 0,\n        completed: this.workItemCounts.completed || 0,\n        blocked: this.workItemCounts.blocked || 0,\n        completionPercentage: this.calculateCompletionPercentage()\n      };\n      // Also update task status board with Azure DevOps data\n      this.updateTaskStatusBoardWithAzureDevOpsCounts();\n      // Create tasksByStatus data for the pie chart\n      if (this.azureDevOpsWorkItems && this.azureDevOpsWorkItems.length > 0) {\n        // Group work items by state\n        const stateGroups = this.azureDevOpsWorkItems.reduce((acc, item) => {\n          const state = item.state || 'Unknown';\n          if (!acc[state]) {\n            acc[state] = [];\n          }\n          acc[state].push(item);\n          return acc;\n        }, {});\n        // Convert to tasksByStatus format\n        this.tasksByStatus = Object.keys(stateGroups).map(state => ({\n          status: state,\n          count: stateGroups[state].length,\n          color: this.getStatusColor(state)\n        })).sort((a, b) => b.count - a.count);\n        // Also update taskStatusBoard for compatibility\n        this.taskStatusBoard = [...this.tasksByStatus];\n      }\n    }\n    /**\r\n     * Calculate completion percentage based on work item counts\r\n     */\n    calculateCompletionPercentage() {\n      const total = this.workItemCounts.totalTasks;\n      if (total === 0) return 0;\n      const completed = this.workItemCounts.completed;\n      return Math.round(completed / total * 100);\n    }\n    /**\r\n     * Update task status board with counts from Azure DevOps\r\n     * This method is now only used for compatibility with other parts of the code\r\n     */\n    updateTaskStatusBoardWithAzureDevOpsCounts() {\n      // Update pie chart with the Azure DevOps data\n      setTimeout(() => {\n        this.initializeStatusPieChart();\n      }, 100);\n    }\n    /**\r\n     * Get assignee data as an array for display in the UI\r\n     * @returns Array of assignee data with counts\r\n     */\n    getAssigneeDistribution() {\n      if (!this.assigneeDistribution) {\n        return [];\n      }\n      return Object.keys(this.assigneeDistribution).map(assignee => {\n        return {\n          name: assignee,\n          ...this.assigneeDistribution[assignee]\n        };\n      });\n    }\n    static {\n      this.ɵfac = function DashboardComponent_Factory(t) {\n        return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DashboardService), i0.ɵɵdirectiveInject(i2.AzureDevOpsService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: DashboardComponent,\n        selectors: [[\"app-dashboard\"]],\n        viewQuery: function DashboardComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n            i0.ɵɵviewQuery(_c1, 5);\n            i0.ɵɵviewQuery(_c2, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stateDistributionChartRef = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iterationDistributionChartRef = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusPieChartRef = _t.first);\n          }\n        },\n        decls: 43,\n        vars: 11,\n        consts: [[1, \"dashboard-container\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-md-8\"], [1, \"card\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [1, \"d-flex\", \"align-items-center\"], [1, \"input-group\", \"input-group-sm\", \"me-2\", 2, \"max-width\", \"250px\"], [\"type\", \"text\", \"placeholder\", \"Enter Iteration Path\", \"aria-label\", \"Iteration Path\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", \"title\", \"Load data for this iteration path\", 1, \"btn\", \"btn-outline-primary\", 3, \"click\"], [1, \"bi\", \"bi-search\"], [1, \"btn\", \"btn-outline-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-arrow-clockwise\"], [1, \"card-body\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"col-md-4\"], [1, \"card-header\"], [1, \"card-body\", \"d-flex\", \"flex-column\", 2, \"height\", \"350px\"], [1, \"chat-messages\", \"flex-grow-1\", \"overflow-auto\", \"mb-3\"], [\"class\", \"message mb-2\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"chat-input\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Type your message...\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"bi\", \"bi-send\"], [1, \"card\", \"mb-4\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"alert\", \"alert-danger\"], [1, \"sprint-title\"], [1, \"d-flex\", \"justify-content-between\", \"mt-3\"], [1, \"text-muted\", \"mb-1\"], [1, \"fw-bold\"], [1, \"fw-bold\", \"days-remaining\"], [1, \"text-muted\"], [1, \"text-muted\", \"small\"], [1, \"text-muted\", \"small\", \"text-start\"], [1, \"message\", \"mb-2\", 3, \"ngClass\"], [1, \"message-content\"], [1, \"message-text\"], [1, \"message-time\", \"small\", \"text-muted\"], [1, \"mt-2\"], [1, \"row\"], [1, \"col-md-8\", \"mx-auto\"], [\"statusPieChart\", \"\"], [1, \"col-md-12\", \"mt-4\"], [1, \"d-flex\", \"flex-wrap\", \"justify-content-center\"], [\"class\", \"status-legend-item me-4 mb-2\", 4, \"ngFor\", \"ngForOf\"], [1, \"status-legend-item\", \"me-4\", \"mb-2\"], [1, \"color-box\", \"me-2\"]],\n        template: function DashboardComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\", 5);\n            i0.ɵɵtext(6, \"Sprint Overview\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"div\")(8, \"div\", 6)(9, \"div\", 7)(10, \"input\", 8);\n            i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_10_listener($event) {\n              return ctx.selectedIterationPath = $event;\n            })(\"keyup.enter\", function DashboardComponent_Template_input_keyup_enter_10_listener() {\n              return ctx.loadIterationData();\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"button\", 9);\n            i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_11_listener() {\n              return ctx.loadIterationData();\n            });\n            i0.ɵɵelement(12, \"i\", 10);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(13, \"button\", 11);\n            i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_13_listener() {\n              return ctx.reload();\n            });\n            i0.ɵɵelement(14, \"i\", 12);\n            i0.ɵɵtext(15, \" Refresh \");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(16, \"div\", 13);\n            i0.ɵɵtemplate(17, DashboardComponent_div_17_Template, 4, 0, \"div\", 14);\n            i0.ɵɵtemplate(18, DashboardComponent_div_18_Template, 2, 1, \"div\", 15);\n            i0.ɵɵtemplate(19, DashboardComponent_div_19_Template, 21, 10, \"div\", 16);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(20, \"div\", 17)(21, \"div\", 3)(22, \"div\", 18)(23, \"h4\", 5);\n            i0.ɵɵtext(24, \"AI Assistant\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(25, \"div\", 19)(26, \"div\", 20);\n            i0.ɵɵtemplate(27, DashboardComponent_div_27_Template, 12, 0, \"div\", 14);\n            i0.ɵɵtemplate(28, DashboardComponent_div_28_Template, 7, 9, \"div\", 21);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(29, \"div\", 22)(30, \"div\", 23)(31, \"input\", 24);\n            i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_31_listener($event) {\n              return ctx.currentMessage = $event;\n            })(\"keyup.enter\", function DashboardComponent_Template_input_keyup_enter_31_listener() {\n              return ctx.sendChatMessage();\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"button\", 25);\n            i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_32_listener() {\n              return ctx.sendChatMessage();\n            });\n            i0.ɵɵelement(33, \"i\", 26);\n            i0.ɵɵelementEnd()()()()()()();\n            i0.ɵɵelementStart(34, \"div\", 27)(35, \"div\", 18)(36, \"h4\", 5);\n            i0.ɵɵtext(37, \"Work Items by State\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(38, \"div\", 13);\n            i0.ɵɵtemplate(39, DashboardComponent_div_39_Template, 6, 0, \"div\", 14);\n            i0.ɵɵtemplate(40, DashboardComponent_div_40_Template, 2, 1, \"div\", 15);\n            i0.ɵɵtemplate(41, DashboardComponent_div_41_Template, 3, 0, \"div\", 14);\n            i0.ɵɵtemplate(42, DashboardComponent_div_42_Template, 7, 1, \"div\", 28);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(10);\n            i0.ɵɵproperty(\"ngModel\", ctx.selectedIterationPath);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.sprint);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.sprint);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.sprint && !ctx.error.sprint && ctx.sprintOverview);\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngIf\", ctx.chatMessages.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngForOf\", ctx.chatMessages);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngModel\", ctx.currentMessage);\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngIf\", ctx.loadingTaskDetails);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.taskDetailsError);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loadingTaskDetails && (!ctx.tasksByStatus || ctx.tasksByStatus.length === 0) && !ctx.taskDetailsError);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loadingTaskDetails && ctx.tasksByStatus && ctx.tasksByStatus.length > 0);\n          }\n        },\n        dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i3.DatePipe],\n        styles: [\".dashboard-container[_ngcontent-%COMP%]{padding:20px}.card[_ngcontent-%COMP%]{border-radius:8px;box-shadow:0 2px 8px #0000001a;border:none;margin-bottom:20px}.card[_ngcontent-%COMP%]   .card-header[_ngcontent-%COMP%]{background-color:#fff;border-bottom:1px solid rgba(0,0,0,.05);font-weight:600;padding:12px 16px}.days-remaining[_ngcontent-%COMP%]{font-size:24px;color:#3050e6}.sprint-title[_ngcontent-%COMP%]{font-size:1.5rem;font-weight:600;color:#333;margin-bottom:1rem}.summary-card[_ngcontent-%COMP%]{text-align:center;border-radius:8px;transition:transform .2s;height:100%}.summary-card[_ngcontent-%COMP%]:hover{transform:translateY(-5px)}.summary-card[_ngcontent-%COMP%]   .card-value[_ngcontent-%COMP%]{font-size:2.5rem;font-weight:700}.total-card[_ngcontent-%COMP%]{border-top:4px solid #6c757d}.in-progress-card[_ngcontent-%COMP%]{border-top:4px solid #0078d4}.completed-card[_ngcontent-%COMP%]{border-top:4px solid #107c10}.blocked-card[_ngcontent-%COMP%]{border-top:4px solid #e81123}.status-card[_ngcontent-%COMP%]{transition:transform .2s;box-shadow:0 2px 5px #0000001a}.status-card[_ngcontent-%COMP%]:hover{transform:translateY(-5px);box-shadow:0 5px 15px #0000001a}.status-card[_ngcontent-%COMP%]   .status-count[_ngcontent-%COMP%]{font-size:2.5rem;font-weight:700}.status-card[_ngcontent-%COMP%]   .status-title[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.chat-messages[_ngcontent-%COMP%]{display:flex;flex-direction:column;max-height:250px;overflow-y:auto}.message[_ngcontent-%COMP%]{margin-bottom:10px;max-width:85%;padding:8px 12px;border-radius:12px;position:relative}.user-message[_ngcontent-%COMP%]{align-self:flex-end;background-color:#007bff;color:#fff;margin-left:auto;border-bottom-right-radius:2px}.user-message[_ngcontent-%COMP%]   .message-time[_ngcontent-%COMP%]{text-align:right;color:#ffffffb3!important}.assistant-message[_ngcontent-%COMP%]{align-self:flex-start;background-color:#f1f1f1;color:#333;margin-right:auto;border-bottom-left-radius:2px}.message-content[_ngcontent-%COMP%]{display:flex;flex-direction:column}.message-text[_ngcontent-%COMP%]{margin-bottom:4px}.activity-list[_ngcontent-%COMP%]{max-height:400px;overflow-y:auto}.activity-title[_ngcontent-%COMP%]{font-weight:500}.activity-details[_ngcontent-%COMP%]{font-size:.9rem;color:#666}.activity-meta[_ngcontent-%COMP%]{white-space:nowrap;margin-left:15px}.color-box[_ngcontent-%COMP%]{width:16px;height:16px;display:inline-block;border-radius:3px}.assignee-row[_ngcontent-%COMP%]{padding:12px;border-radius:6px;background-color:#f8f9fa;transition:all .2s ease}.assignee-row[_ngcontent-%COMP%]:hover{background-color:#f1f3f5;box-shadow:0 2px 5px #0000000d}.status-badge[_ngcontent-%COMP%]{display:inline-block;padding:4px 8px;border-radius:4px;font-size:.8rem;font-weight:500}.status-legend-item[_ngcontent-%COMP%]{font-size:14px;padding:5px 10px;border-radius:4px;background-color:#f8f9fa}\"]\n      });\n    }\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}