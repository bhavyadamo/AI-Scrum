{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TeamService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/tasks/team-members`;\n  }\n  /**\r\n   * Fetches all team members from the API\r\n   * @returns Observable of TeamMember array\r\n   */\n  getTeamMembers() {\n    return this.http.get(this.apiUrl).pipe(retry(1),\n    // Retry once on failure\n    catchError(this.handleError), map(response => this.processTeamMembersResponse(response)));\n  }\n  /**\r\n   * Fetches team members from a specific team\r\n   * @param teamName The name of the team to fetch members from (e.g., \"RND\")\r\n   * @param iterationPath Optional iteration path to filter by\r\n   * @returns Observable of TeamMember array\r\n   */\n  getTeamMembersByTeam(teamName, iterationPath) {\n    let params = new HttpParams().set('teamName', teamName);\n    if (iterationPath) {\n      params = params.set('iterationPath', iterationPath);\n    }\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(retry(1),\n    // Retry once on failure\n    catchError(this.handleError), map(response => this.processTeamMembersResponse(response)));\n  }\n  /**\r\n   * Handles HTTP errors and returns a user-friendly error message\r\n   * @param error The HTTP error response\r\n   * @returns An observable that errors with a user-friendly message\r\n   */\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred while fetching team members';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Server returned code ${error.status}: ${error.statusText}`;\n      if (error.error?.message) {\n        errorMessage += ` - ${error.error.message}`;\n      }\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  /**\r\n   * Processes the API response to ensure it conforms to the expected structure\r\n   * @param response The raw API response\r\n   * @returns An array of properly formatted TeamMember objects\r\n   */\n  processTeamMembersResponse(response) {\n    if (!Array.isArray(response)) {\n      console.warn('Unexpected response format for team members:', response);\n      return [];\n    }\n    return response.map(member => ({\n      id: member.id || '',\n      displayName: member.displayName || 'Unknown User',\n      uniqueName: member.uniqueName || '',\n      imageUrl: member.imageUrl || undefined,\n      // Add missing properties with default values\n      currentWorkload: member.currentWorkload || 0,\n      isActive: member.isActive !== undefined ? member.isActive : true,\n      email: member.email || member.uniqueName || '',\n      team: member.team || ''\n    }));\n  }\n  static {\n    this.ɵfac = function TeamService_Factory(t) {\n      return new (t || TeamService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TeamService,\n      factory: TeamService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpParams","throwError","catchError","retry","map","environment","TeamService","constructor","http","apiUrl","getTeamMembers","get","pipe","handleError","response","processTeamMembersResponse","getTeamMembersByTeam","teamName","iterationPath","params","set","error","errorMessage","ErrorEvent","message","status","statusText","console","Error","Array","isArray","warn","member","id","displayName","uniqueName","imageUrl","undefined","currentWorkload","isActive","email","team","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\team.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry, map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { TeamMember } from '../models/task.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamService {\r\n  private apiUrl = `${environment.apiUrl}/tasks/team-members`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Fetches all team members from the API\r\n   * @returns Observable of TeamMember array\r\n   */\r\n  getTeamMembers(): Observable<TeamMember[]> {\r\n    return this.http.get<TeamMember[]>(this.apiUrl)\r\n      .pipe(\r\n        retry(1), // Retry once on failure\r\n        catchError(this.handleError),\r\n        map(response => this.processTeamMembersResponse(response))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetches team members from a specific team\r\n   * @param teamName The name of the team to fetch members from (e.g., \"RND\")\r\n   * @param iterationPath Optional iteration path to filter by\r\n   * @returns Observable of TeamMember array\r\n   */\r\n  getTeamMembersByTeam(teamName: string, iterationPath?: string): Observable<TeamMember[]> {\r\n    let params = new HttpParams().set('teamName', teamName);\r\n    \r\n    if (iterationPath) {\r\n      params = params.set('iterationPath', iterationPath);\r\n    }\r\n    \r\n    return this.http.get<TeamMember[]>(this.apiUrl, { params })\r\n      .pipe(\r\n        retry(1), // Retry once on failure\r\n        catchError(this.handleError),\r\n        map(response => this.processTeamMembersResponse(response))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Handles HTTP errors and returns a user-friendly error message\r\n   * @param error The HTTP error response\r\n   * @returns An observable that errors with a user-friendly message\r\n   */\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'An unknown error occurred while fetching team members';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Server returned code ${error.status}: ${error.statusText}`;\r\n      if (error.error?.message) {\r\n        errorMessage += ` - ${error.error.message}`;\r\n      }\r\n    }\r\n    \r\n    console.error(errorMessage);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  /**\r\n   * Processes the API response to ensure it conforms to the expected structure\r\n   * @param response The raw API response\r\n   * @returns An array of properly formatted TeamMember objects\r\n   */\r\n  private processTeamMembersResponse(response: any): TeamMember[] {\r\n    if (!Array.isArray(response)) {\r\n      console.warn('Unexpected response format for team members:', response);\r\n      return [];\r\n    }\r\n    \r\n    return response.map(member => ({\r\n      id: member.id || '',\r\n      displayName: member.displayName || 'Unknown User',\r\n      uniqueName: member.uniqueName || '',\r\n      imageUrl: member.imageUrl || undefined,\r\n      // Add missing properties with default values\r\n      currentWorkload: member.currentWorkload || 0,\r\n      isActive: member.isActive !== undefined ? member.isActive : true,\r\n      email: member.email || member.uniqueName || '',\r\n      team: member.team || ''\r\n    }));\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}