{"ast":null,"code":"import { BehaviorSubject, interval } from 'rxjs';\nimport { switchMap, catchError, tap, startWith } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RecommendationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/recommendations`;\n    this.pollingInterval = 30000; // 30 seconds\n    this.recommendations$ = new BehaviorSubject([]);\n    this.loading$ = new BehaviorSubject(false);\n    this.error$ = new BehaviorSubject('');\n  }\n  startPolling() {\n    interval(this.pollingInterval).pipe(startWith(0),\n    // Start immediately\n    tap(() => this.loading$.next(true)), switchMap(() => this.fetchRecommendations()), catchError(error => {\n      this.error$.next(error.message || 'Failed to fetch recommendations');\n      this.loading$.next(false);\n      return [];\n    })).subscribe(recommendations => {\n      this.recommendations$.next(recommendations);\n      this.loading$.next(false);\n    });\n  }\n  fetchRecommendations() {\n    return this.http.get(this.apiUrl).pipe(catchError(error => {\n      this.error$.next(error.message || 'Failed to fetch recommendations');\n      return [];\n    }));\n  }\n  getRecommendations() {\n    return this.recommendations$.asObservable();\n  }\n  getLoading() {\n    return this.loading$.asObservable();\n  }\n  getError() {\n    return this.error$.asObservable();\n  }\n  static {\n    this.ɵfac = function RecommendationService_Factory(t) {\n      return new (t || RecommendationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RecommendationService,\n      factory: RecommendationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,eAAe,EAAEC,QAAQ,QAAQ,MAAM;AAC5D,SAASC,SAAS,EAAEC,UAAU,EAAEC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;AACtE,SAASC,WAAW,QAAQ,gCAAgC;;;AAY5D,OAAM,MAAOC,qBAAqB;EAOhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,kBAAkB;IAChD,oBAAe,GAAG,KAAK,CAAC,CAAC;IACzB,qBAAgB,GAAG,IAAIV,eAAe,CAAmB,EAAE,CAAC;IAC5D,aAAQ,GAAG,IAAIA,eAAe,CAAU,KAAK,CAAC;IAC9C,WAAM,GAAG,IAAIA,eAAe,CAAS,EAAE,CAAC;EAER;EAExCW,YAAY;IACVV,QAAQ,CAAC,IAAI,CAACW,eAAe,CAAC,CAC3BC,IAAI,CACHR,SAAS,CAAC,CAAC,CAAC;IAAE;IACdD,GAAG,CAAC,MAAM,IAAI,CAACU,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EACnCb,SAAS,CAAC,MAAM,IAAI,CAACc,oBAAoB,EAAE,CAAC,EAC5Cb,UAAU,CAACc,KAAK,IAAG;MACjB,IAAI,CAACC,MAAM,CAACH,IAAI,CAACE,KAAK,CAACE,OAAO,IAAI,iCAAiC,CAAC;MACpE,IAAI,CAACL,QAAQ,CAACC,IAAI,CAAC,KAAK,CAAC;MACzB,OAAO,EAAE;IACX,CAAC,CAAC,CACH,CACAK,SAAS,CAACC,eAAe,IAAG;MAC3B,IAAI,CAACC,gBAAgB,CAACP,IAAI,CAACM,eAAe,CAAC;MAC3C,IAAI,CAACP,QAAQ,CAACC,IAAI,CAAC,KAAK,CAAC;IAC3B,CAAC,CAAC;EACN;EAEAC,oBAAoB;IAClB,OAAO,IAAI,CAACP,IAAI,CAACc,GAAG,CAAmB,IAAI,CAACb,MAAM,CAAC,CAChDG,IAAI,CACHV,UAAU,CAACc,KAAK,IAAG;MACjB,IAAI,CAACC,MAAM,CAACH,IAAI,CAACE,KAAK,CAACE,OAAO,IAAI,iCAAiC,CAAC;MACpE,OAAO,EAAE;IACX,CAAC,CAAC,CACH;EACL;EAEAK,kBAAkB;IAChB,OAAO,IAAI,CAACF,gBAAgB,CAACG,YAAY,EAAE;EAC7C;EAEAC,UAAU;IACR,OAAO,IAAI,CAACZ,QAAQ,CAACW,YAAY,EAAE;EACrC;EAEAE,QAAQ;IACN,OAAO,IAAI,CAACT,MAAM,CAACO,YAAY,EAAE;EACnC;;;uBA/CWlB,qBAAqB;IAAA;EAAA;;;aAArBA,qBAAqB;MAAAqB,SAArBrB,qBAAqB;MAAAsB,YAFpB;IAAM;EAAA","names":["BehaviorSubject","interval","switchMap","catchError","tap","startWith","environment","RecommendationService","constructor","http","apiUrl","startPolling","pollingInterval","pipe","loading$","next","fetchRecommendations","error","error$","message","subscribe","recommendations","recommendations$","get","getRecommendations","asObservable","getLoading","getError","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\recommendation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, interval } from 'rxjs';\r\nimport { switchMap, catchError, tap, startWith } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface Recommendation {\r\n  id: string;\r\n  message: string;\r\n  severity: 'Info' | 'Warning' | 'Critical';\r\n  timestamp: Date;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RecommendationService {\r\n  private apiUrl = `${environment.apiUrl}/recommendations`;\r\n  private pollingInterval = 30000; // 30 seconds\r\n  private recommendations$ = new BehaviorSubject<Recommendation[]>([]);\r\n  private loading$ = new BehaviorSubject<boolean>(false);\r\n  private error$ = new BehaviorSubject<string>('');\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  startPolling(): void {\r\n    interval(this.pollingInterval)\r\n      .pipe(\r\n        startWith(0), // Start immediately\r\n        tap(() => this.loading$.next(true)),\r\n        switchMap(() => this.fetchRecommendations()),\r\n        catchError(error => {\r\n          this.error$.next(error.message || 'Failed to fetch recommendations');\r\n          this.loading$.next(false);\r\n          return [];\r\n        })\r\n      )\r\n      .subscribe(recommendations => {\r\n        this.recommendations$.next(recommendations);\r\n        this.loading$.next(false);\r\n      });\r\n  }\r\n\r\n  fetchRecommendations(): Observable<Recommendation[]> {\r\n    return this.http.get<Recommendation[]>(this.apiUrl)\r\n      .pipe(\r\n        catchError(error => {\r\n          this.error$.next(error.message || 'Failed to fetch recommendations');\r\n          return [];\r\n        })\r\n      );\r\n  }\r\n\r\n  getRecommendations(): Observable<Recommendation[]> {\r\n    return this.recommendations$.asObservable();\r\n  }\r\n\r\n  getLoading(): Observable<boolean> {\r\n    return this.loading$.asObservable();\r\n  }\r\n\r\n  getError(): Observable<string> {\r\n    return this.error$.asObservable();\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}