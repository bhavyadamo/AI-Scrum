{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { WorkItem } from '../../models/task.model';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/estimation.service\";\nimport * as i3 from \"../../services/task.service\";\nimport * as i4 from \"@angular/common\";\nfunction TaskEstimationComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.iterationError);\n  }\n}\nfunction TaskEstimationComponent_span_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 50);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.workItems.length, \" items\");\n  }\n}\nfunction TaskEstimationComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"div\", 52)(2, \"span\", 53);\n    i0.ɵɵtext(3, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 54);\n    i0.ɵɵtext(5, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"p\", 55);\n    i0.ɵɵtext(2, \"No work items found. Please select an iteration path and click \\\"Load Items\\\".\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_div_34_button_1_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 66);\n    i0.ɵɵelement(1, \"i\", 67);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r20 = i0.ɵɵnextContext().$implicit;\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r21.getAssigneeName(item_r20), \" \");\n  }\n}\nfunction TaskEstimationComponent_div_34_button_1_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 68);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r20 = i0.ɵɵnextContext().$implicit;\n    const ctx_r22 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r22.getStateDisplay(item_r20), \" \");\n  }\n}\nconst _c0 = function (a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    \"bg-danger\": a0,\n    \"bg-primary\": a1,\n    \"bg-warning\": a2,\n    \"bg-info\": a3,\n    \"bg-success\": a4,\n    \"bg-dark text-light\": a5,\n    \"bg-secondary\": a6\n  };\n};\nfunction TaskEstimationComponent_div_34_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 58);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_div_34_button_1_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const item_r20 = restoredCtx.$implicit;\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r25.selectWorkItem(item_r20));\n    });\n    i0.ɵɵelementStart(1, \"div\", 59)(2, \"div\", 60)(3, \"span\", 61);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 62);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"span\", 63);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\", 60);\n    i0.ɵɵtemplate(10, TaskEstimationComponent_div_34_button_1_span_10_Template, 3, 1, \"span\", 64);\n    i0.ɵɵtemplate(11, TaskEstimationComponent_div_34_button_1_span_11_Template, 2, 1, \"span\", 65);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"active\", (ctx_r19.selectedWorkItem == null ? null : ctx_r19.selectedWorkItem.id) === item_r20.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction7(8, _c0, item_r20.type === \"Bug\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Bug\", item_r20.type === \"Feature\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Feature\", item_r20.type === \"Change Request\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Change Request\", item_r20.type === \"Test\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Test\", item_r20.type === \"Requirement\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Requirement\", item_r20.type === \"User Story\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"User Story\", !item_r20.type && (!item_r20.fields || !item_r20.fields[\"System.WorkItemType\"])));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r20.fields && item_r20.fields[\"System.WorkItemType\"] || item_r20.type || \"Task\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"#\", item_r20.id, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r20.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r19.getAssigneeName(item_r20));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r19.getStateDisplay(item_r20));\n  }\n}\nfunction TaskEstimationComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtemplate(1, TaskEstimationComponent_div_34_button_1_Template, 12, 16, \"button\", 57);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.workItems);\n  }\n}\nfunction TaskEstimationComponent_span_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Task #\", ctx_r5.selectedWorkItem.id, \" Details\");\n  }\n}\nfunction TaskEstimationComponent_span_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Task Details\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_button_48_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 69);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_button_48_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.resetForm());\n    });\n    i0.ɵɵelement(1, \"i\", 70);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title must be at least 5 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 71);\n    i0.ɵɵtemplate(1, TaskEstimationComponent_div_49_small_1_Template, 2, 0, \"small\", 22);\n    i0.ɵɵtemplate(2, TaskEstimationComponent_div_49_small_2_Template, 2, 0, \"small\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r8.estimationForm.get(\"title\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r8.estimationForm.get(\"title\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nfunction TaskEstimationComponent_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Found matching work item #\", ctx_r9.selectedWorkItem.id, \"\");\n  }\n}\nfunction TaskEstimationComponent_option_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 73);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r31 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r31);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r31);\n  }\n}\nfunction TaskEstimationComponent_option_65_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 73);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r32 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", member_r32);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r32);\n  }\n}\nfunction TaskEstimationComponent_div_70_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 74);\n    i0.ɵɵelement(1, \"input\", 75);\n    i0.ɵɵelementStart(2, \"label\", 76);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const level_r33 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"complexity-\" + level_r33.toLowerCase())(\"value\", level_r33);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", \"complexity-\" + level_r33.toLowerCase());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", level_r33, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 77)(1, \"small\");\n    i0.ɵɵelement(2, \"i\", 78);\n    i0.ɵɵtext(3, \" Complexity automatically predicted based on work item attributes\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_span_77_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"i\", 79);\n    i0.ɵɵtext(2, \" Estimate Time \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_span_78_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 80);\n    i0.ɵɵtext(2, \" Estimating... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_81_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 81);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r16.error, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_82_li_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 94);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const factor_r35 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", factor_r35, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_82_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 82)(2, \"h4\", 7);\n    i0.ɵɵtext(3, \"Estimation Results\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 8)(5, \"div\", 17)(6, \"div\", 10)(7, \"div\", 83)(8, \"h2\", 84);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 55);\n    i0.ɵɵtext(11, \"Total estimated time\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 85)(13, \"div\", 86)(14, \"div\", 87)(15, \"h3\", 3);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"p\", 88);\n    i0.ɵɵtext(18, \"Development Time\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"div\", 86)(20, \"div\", 87)(21, \"h3\", 3);\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"p\", 88);\n    i0.ɵɵtext(24, \"Testing Time\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(25, \"div\", 89)(26, \"h5\");\n    i0.ɵɵtext(27, \"Prediction Confidence\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"div\", 90)(29, \"div\", 91);\n    i0.ɵɵtext(30);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(31, \"div\", 10)(32, \"h5\");\n    i0.ɵɵtext(33, \"Factors Considered\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"ul\", 56);\n    i0.ɵɵtemplate(35, TaskEstimationComponent_div_82_li_35_Template, 2, 1, \"li\", 92);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(36, \"div\", 93);\n    i0.ɵɵelement(37, \"i\", 78);\n    i0.ɵɵtext(38, \" These estimates are based on machine learning models analyzing historical task data. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r17.estimationResult.estimatedHours, \" hours\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r17.devTimeEstimate);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r17.testTimeEstimate);\n    i0.ɵɵadvance(7);\n    i0.ɵɵstyleProp(\"width\", ctx_r17.estimationResult.confidenceScore * 100, \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r17.getConfidenceClass(ctx_r17.estimationResult.confidenceScore));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r17.estimationResult.confidenceScore * 100);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.formatConfidence(ctx_r17.estimationResult.confidenceScore), \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r17.estimationResult.factors);\n  }\n}\nfunction TaskEstimationComponent_div_83_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 95)(1, \"div\", 96);\n    i0.ɵɵelement(2, \"i\", 97);\n    i0.ɵɵelementStart(3, \"h4\", 98);\n    i0.ɵɵtext(4, \"Task Time Prediction\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 55);\n    i0.ɵɵtext(6, \"Fill in the task details and click \\\"Estimate Time\\\" to get an ML-based time estimate\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"is-valid\": a0\n  };\n};\nexport let TaskEstimationComponent = /*#__PURE__*/(() => {\n  class TaskEstimationComponent {\n    constructor(fb, estimationService, taskService) {\n      this.fb = fb;\n      this.estimationService = estimationService;\n      this.taskService = taskService;\n      this.teamMembers = [];\n      // Include all available work item types from the enum\n      this.taskTypes = ['User Story', 'Task', 'Bug', 'Epic', 'Feature', 'Issue', 'Change Request', 'Documentation', 'Test', 'Research'];\n      this.complexityLevels = ['Low', 'Medium', 'High'];\n      this.loading = false;\n      this.error = null;\n      this.estimationResult = null;\n      this.showResult = false;\n      // New properties for iteration path functionality\n      this.manualIterationPath = ''; // Only use manual iteration path\n      this.workItems = [];\n      this.loadingIterationItems = false;\n      this.iterationError = null;\n      this.selectedWorkItem = null;\n      this.devTimeEstimate = 0;\n      this.testTimeEstimate = 0;\n      this.totalEstimate = 0;\n      this.estimationForm = this.fb.group({\n        title: ['', [Validators.required, Validators.minLength(5)]],\n        type: ['Feature', Validators.required],\n        assignee: [''],\n        complexity: ['Medium', Validators.required]\n      });\n    }\n    ngOnInit() {\n      // Load team members\n      this.loadTeamMembers();\n      // Listen for title changes to auto-fill fields\n      this.estimationForm.get('title')?.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe(title => {\n        if (title && title.length > 5) {\n          this.autoPopulateFormFields(title);\n        }\n      });\n    }\n    // Load team members with better error handling\n    loadTeamMembers() {\n      this.taskService.getTeamMembers().subscribe({\n        next: response => {\n          if (Array.isArray(response)) {\n            if (response.length === 0) {\n              console.warn('No team members returned from API');\n              return;\n            }\n            if (typeof response[0] === 'string') {\n              // It's an array of strings\n              this.teamMembers = response;\n            } else {\n              // It's an array of TeamMember objects\n              this.teamMembers = response.filter(m => m && m.displayName) // Filter out invalid entries\n              .map(m => m.displayName);\n            }\n            console.log(`Loaded ${this.teamMembers.length} team members`);\n          }\n        },\n        error: err => {\n          console.error('Error loading team members:', err);\n          this.error = 'Failed to load team members';\n        }\n      });\n    }\n    // Auto-populate form fields based on entered title\n    autoPopulateFormFields(title) {\n      if (!this.workItems || this.workItems.length === 0) {\n        return; // No items to search through\n      }\n      // Find matching work item by title (full or partial match)\n      const matchingItem = this.workItems.find(item => item.title.toLowerCase().includes(title.toLowerCase()) || title.toLowerCase().includes(item.title.toLowerCase()));\n      if (matchingItem) {\n        this.selectedWorkItem = matchingItem;\n        this.populateFormWithWorkItem(matchingItem);\n      }\n    }\n    // Load work items for the selected iteration path\n    loadWorkItemsByIteration() {\n      if (!this.manualIterationPath || this.manualIterationPath.trim() === '') {\n        this.iterationError = 'Please enter an iteration path';\n        return;\n      }\n      this.loadingIterationItems = true;\n      this.workItems = [];\n      this.selectedWorkItem = null;\n      this.iterationError = null;\n      this.taskService.getTasks(this.manualIterationPath.trim()).subscribe({\n        next: items => {\n          // Process items to clean up state information\n          this.workItems = items.map(item => {\n            // Process each item to ensure it has proper state\n            const processedItem = {\n              ...item\n            };\n            // Fix state display - remove \"Unknown\" prefix if present\n            if (processedItem.state && processedItem.state.toLowerCase().includes('unknown')) {\n              processedItem.state = processedItem.state.replace(/unknown/i, '').trim();\n            }\n            // Also check for state in fields\n            if (processedItem.fields && processedItem.fields['System.State']) {\n              let state = processedItem.fields['System.State'];\n              if (typeof state === 'string' && state.toLowerCase().includes('unknown')) {\n                state = state.replace(/unknown/i, '').trim();\n                processedItem.fields['System.State'] = state;\n              }\n              // If item has no state but has System.State, use it\n              if (!processedItem.state) {\n                processedItem.state = state;\n              }\n            }\n            return processedItem;\n          });\n          this.loadingIterationItems = false;\n          console.log(`Loaded ${this.workItems.length} work items for iteration ${this.manualIterationPath}`);\n        },\n        error: err => {\n          console.error('Error loading work items:', err);\n          this.iterationError = 'Failed to load work items for the specified iteration path';\n          this.loadingIterationItems = false;\n        }\n      });\n    }\n    // Select a work item for estimation\n    selectWorkItem(item) {\n      this.selectedWorkItem = item;\n      this.populateFormWithWorkItem(item);\n    }\n    // Populate the form with selected work item details\n    populateFormWithWorkItem(item) {\n      const complexity = this.determineComplexity(item);\n      // Extract assignee name, trying 'System.AssignedTo' first\n      let assignee = '';\n      // Check for fields property which might contain System.AssignedTo\n      if (item.fields && item.fields['System.AssignedTo']) {\n        const assignedTo = item.fields['System.AssignedTo'];\n        if (typeof assignedTo === 'string') {\n          assignee = assignedTo;\n        } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n          // Try to get displayName property\n          if (assignedTo.displayName) {\n            assignee = assignedTo.displayName;\n          }\n        }\n      }\n      // Fallback to assignedTo property if System.AssignedTo is not available\n      else if (item.assignedTo) {\n        if (typeof item.assignedTo === 'string') {\n          assignee = item.assignedTo;\n        } else if (typeof item.assignedTo === 'object' && item.assignedTo !== null) {\n          const assigneeObj = item.assignedTo;\n          if (assigneeObj.displayName) {\n            assignee = assigneeObj.displayName;\n          } else if (assigneeObj.name) {\n            assignee = assigneeObj.name;\n          }\n        }\n      }\n      // If we still don't have an assignee, try to find it in the team members by partial match\n      if (!assignee && item.assignedTo) {\n        const partialName = typeof item.assignedTo === 'string' ? item.assignedTo : item.assignedTo?.uniqueName || '';\n        if (partialName) {\n          // Find closest match in team members\n          const match = this.teamMembers.find(member => member.toLowerCase().includes(partialName.toLowerCase()) || partialName.toLowerCase().includes(member.toLowerCase()));\n          if (match) {\n            assignee = match;\n          }\n        }\n      }\n      // Get type, trying both System.WorkItemType and type property\n      let itemType = '';\n      // First try to get from Azure DevOps fields\n      if (item.fields) {\n        if (item.fields['System.WorkItemType']) {\n          itemType = item.fields['System.WorkItemType'];\n        }\n      }\n      // If not found, fallback to type property\n      if (!itemType && item.type) {\n        itemType = item.type;\n      }\n      // If still not found, try to determine from title\n      if (!itemType) {\n        const title = item.title.toLowerCase();\n        if (title.includes('bug') || title.includes('fix') || title.includes('issue')) {\n          itemType = 'Bug';\n        } else if (title.includes('feature') || title.includes('implement') || title.includes('add new')) {\n          itemType = 'Feature';\n        } else if (title.includes('change') || title.includes('modify') || title.includes('update')) {\n          itemType = 'Change Request';\n        } else if (title.includes('requirement') || title.includes('must have')) {\n          itemType = 'Requirement';\n        } else {\n          // Default to Feature\n          itemType = 'Feature';\n        }\n      }\n      // Ensure the type is available in our task types list\n      if (itemType && !this.taskTypes.includes(itemType)) {\n        // Add to taskTypes if not already there\n        this.taskTypes.push(itemType);\n      }\n      // Update form with extracted values\n      this.estimationForm.patchValue({\n        title: item.title,\n        type: itemType,\n        assignee: assignee,\n        complexity: complexity\n      });\n      console.log(`Populated form with: Type=${itemType}, Assignee=${assignee}, Complexity=${complexity}`);\n      // Pre-calculate estimates based on historical data if we have this information\n      if (this.estimationResult) {\n        this.calculateTimeEstimates(this.estimationResult.estimatedHours);\n      }\n    }\n    // Determine complexity based on work item properties with enhanced logic\n    determineComplexity(item) {\n      // Initialize with default complexity\n      let complexity = 'Medium';\n      // Try to determine from title keywords\n      const title = item.title.toLowerCase();\n      if (title.includes('critical') || title.includes('urgent') || title.includes('major') || title.includes('performance issue') || title.includes('security')) {\n        return 'High';\n      }\n      if (title.includes('minor') || title.includes('small') || title.includes('trivial') || title.includes('documentation') || title.includes('typo')) {\n        return 'Low';\n      }\n      // Determine from type\n      const itemType = this.getWorkItemType(item);\n      if (itemType === 'Bug' || itemType === 'Change Request' || itemType === 'Feature') {\n        // Bugs and change requests tend to be more complex\n        complexity = 'Medium';\n        // For bugs, increase complexity\n        if (itemType === 'Bug') {\n          complexity = 'High';\n        }\n      }\n      // Determine from priority if available\n      if (item.priority !== undefined) {\n        if (item.priority <= 1) {\n          complexity = 'High';\n        } else if (item.priority === 2) {\n          complexity = 'Medium';\n        } else {\n          complexity = 'Low';\n        }\n      }\n      // Check for complexity field if available in Azure DevOps fields\n      if (item.fields) {\n        // Different systems use different field names for complexity/effort\n        const complexityFields = ['Microsoft.VSTS.Common.Complexity', 'Microsoft.VSTS.Scheduling.Effort', 'Custom.Complexity', 'System.Complexity'];\n        for (const field of complexityFields) {\n          if (item.fields[field]) {\n            const fieldValue = item.fields[field];\n            if (typeof fieldValue === 'string') {\n              if (fieldValue.includes('High') || fieldValue.includes('1')) {\n                return 'High';\n              } else if (fieldValue.includes('Low') || fieldValue.includes('3')) {\n                return 'Low';\n              }\n            } else if (typeof fieldValue === 'number') {\n              if (fieldValue <= 1) {\n                return 'High';\n              } else if (fieldValue >= 3) {\n                return 'Low';\n              }\n            }\n          }\n        }\n      }\n      return complexity;\n    }\n    // Helper method to get work item type consistently\n    getWorkItemType(item) {\n      // Try to get from System.WorkItemType first\n      if (item.fields && item.fields['System.WorkItemType']) {\n        return item.fields['System.WorkItemType'];\n      }\n      // Fallback to type property\n      return item.type || 'Feature';\n    }\n    resetForm() {\n      this.estimationForm.reset({\n        type: 'Feature',\n        complexity: 'Medium'\n      });\n      this.error = null;\n      this.showResult = false;\n      this.estimationResult = null;\n    }\n    estimateTaskTime() {\n      if (this.estimationForm.invalid) {\n        // Mark all fields as touched to trigger validation messages\n        Object.keys(this.estimationForm.controls).forEach(key => {\n          this.estimationForm.get(key)?.markAsTouched();\n        });\n        return;\n      }\n      this.loading = true;\n      this.error = null;\n      this.estimationResult = null;\n      this.showResult = false;\n      const request = {\n        title: this.estimationForm.value.title,\n        type: this.estimationForm.value.type,\n        assignee: this.estimationForm.value.assignee,\n        complexity: this.estimationForm.value.complexity\n      };\n      // Add work item ID if we have a selected work item\n      if (this.selectedWorkItem) {\n        // Convert to number if it's a string, or use as is if it's already a number\n        const workItemId = typeof this.selectedWorkItem.id === 'string' ? parseInt(this.selectedWorkItem.id, 10) : this.selectedWorkItem.id;\n        if (!isNaN(workItemId)) {\n          request.workItemId = workItemId;\n        }\n        // Add fields data if available to provide more context for estimation\n        if (this.selectedWorkItem.fields) {\n          request.additionalFields = this.selectedWorkItem.fields;\n        }\n        // Include iteration path for historical context\n        if (this.selectedWorkItem.iterationPath) {\n          request.iterationPath = this.selectedWorkItem.iterationPath;\n        }\n      }\n      // Use iteration path if available, either from the work item or manual entry\n      const iterationPath = this.selectedWorkItem && this.selectedWorkItem.iterationPath || this.manualIterationPath;\n      if (iterationPath) {\n        request.includeHistory = true; // Signal to include work history analysis\n        this.estimationService.estimateTaskTimeWithWorkHistory(request, iterationPath).subscribe({\n          next: result => {\n            this.estimationResult = result;\n            this.showResult = true;\n            this.loading = false;\n            // If result includes dev and test time estimates, use them directly\n            if (result.devTimeHours && result.testTimeHours) {\n              this.devTimeEstimate = result.devTimeHours;\n              this.testTimeEstimate = result.testTimeHours;\n              this.totalEstimate = result.estimatedHours;\n            } else {\n              // Otherwise calculate them based on our algorithm\n              this.calculateTimeEstimates(result.estimatedHours);\n            }\n          },\n          error: err => {\n            this.error = err.message || 'An error occurred during estimation';\n            this.loading = false;\n          }\n        });\n      } else {\n        // Standard estimation without work history\n        this.estimationService.estimateTaskTime(request).subscribe({\n          next: result => {\n            this.estimationResult = result;\n            this.showResult = true;\n            this.loading = false;\n            // Calculate dev and test time estimates\n            this.calculateTimeEstimates(result.estimatedHours);\n          },\n          error: err => {\n            this.error = err.message || 'An error occurred during estimation';\n            this.loading = false;\n          }\n        });\n      }\n    }\n    // Calculate development and testing time estimates\n    calculateTimeEstimates(totalHours) {\n      // Typical distribution: dev 60-70%, testing 30-40%\n      const complexity = this.estimationForm.value.complexity;\n      let devRatio = 0.65; // Default dev ratio\n      // Adjust ratio based on complexity\n      if (complexity === 'High') {\n        devRatio = 0.7; // Higher complexity = more dev time\n      } else if (complexity === 'Low') {\n        devRatio = 0.6; // Lower complexity = less dev time\n      }\n\n      this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\n      this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\n      this.totalEstimate = totalHours;\n    }\n    // Format confidence score as percentage\n    formatConfidence(score) {\n      return `${Math.round(score * 100)}%`;\n    }\n    // Get appropriate class for confidence level\n    getConfidenceClass(score) {\n      if (score >= 0.8) {\n        return 'bg-success';\n      } else if (score >= 0.6) {\n        return 'bg-primary';\n      } else if (score >= 0.4) {\n        return 'bg-warning';\n      } else {\n        return 'bg-danger';\n      }\n    }\n    // Get assignee name for display\n    getAssigneeName(item) {\n      // Try to get from System.AssignedTo first\n      if (item.fields && item.fields['System.AssignedTo']) {\n        const assignedTo = item.fields['System.AssignedTo'];\n        if (typeof assignedTo === 'string') {\n          return assignedTo;\n        } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n          return assignedTo.displayName || '';\n        }\n      }\n      // Fallback to assignedTo property\n      if (item.assignedTo) {\n        if (typeof item.assignedTo === 'string') {\n          return item.assignedTo;\n        } else if (typeof item.assignedTo === 'object' && item.assignedTo !== null) {\n          const assigneeObj = item.assignedTo;\n          return assigneeObj.displayName || assigneeObj.name || '';\n        }\n      }\n      return '';\n    }\n    // Get the clean state display for a work item\n    getStateDisplay(item) {\n      // First check fields for System.State\n      if (item.fields && item.fields['System.State']) {\n        const state = item.fields['System.State'];\n        if (typeof state === 'string') {\n          // Remove \"Unknown\" prefix if present\n          return state.replace(/unknown/i, '').trim();\n        }\n      }\n      // Fallback to item.state if available\n      if (item.state) {\n        return item.state.replace(/unknown/i, '').trim();\n      }\n      return ''; // Default if no state available\n    }\n\n    static {\n      this.ɵfac = function TaskEstimationComponent_Factory(t) {\n        return new (t || TaskEstimationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EstimationService), i0.ɵɵdirectiveInject(i3.TaskService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TaskEstimationComponent,\n        selectors: [[\"app-task-estimation\"]],\n        decls: 84,\n        vars: 26,\n        consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"mb-0\"], [1, \"text-muted\", \"mt-2\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"mb-0\"], [1, \"card-body\"], [1, \"row\", \"g-3\", \"align-items-center\"], [1, \"col-md-6\"], [1, \"input-group\"], [\"for\", \"manualIterationPath\", 1, \"input-group-text\"], [\"type\", \"text\", \"id\", \"manualIterationPath\", \"placeholder\", \"Enter iteration path (e.g. Techoil\\\\2.3.23)\", \"aria-label\", \"Manual Iteration Path\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-search\"], [\"class\", \"text-danger mt-2\", 4, \"ngIf\"], [1, \"row\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [\"class\", \"badge bg-primary\", 4, \"ngIf\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"list-group\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"taskTitle\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"taskTitle\", \"formControlName\", \"title\", \"placeholder\", \"Enter or select task title\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"btn btn-outline-secondary\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"text-danger mt-1\", 4, \"ngIf\"], [\"class\", \"text-success mt-1\", 4, \"ngIf\"], [\"for\", \"taskType\", 1, \"form-label\"], [\"id\", \"taskType\", \"formControlName\", \"type\", 1, \"form-select\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"assignee\", 1, \"form-label\"], [\"id\", \"assignee\", \"formControlName\", \"assignee\", 1, \"form-select\"], [\"value\", \"\"], [1, \"form-label\"], [1, \"d-flex\"], [\"class\", \"form-check me-3\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-muted mt-1\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-between\", \"mt-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-arrow-counterclockwise\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"row\", \"mt-4\"], [1, \"col-md-12\"], [\"class\", \"alert alert-danger mb-4\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"class\", \"card bg-light\", 4, \"ngIf\"], [1, \"text-danger\", \"mt-2\"], [1, \"badge\", \"bg-primary\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"mt-2\", \"text-muted\"], [1, \"text-muted\"], [1, \"list-group\"], [\"class\", \"list-group-item list-group-item-action py-3\", 3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\", \"list-group-item-action\", \"py-3\", 3, \"click\"], [1, \"d-flex\", \"justify-content-between\"], [1, \"d-flex\", \"align-items-center\"], [1, \"badge\", \"rounded-pill\", \"me-2\", 3, \"ngClass\"], [1, \"fw-bold\"], [1, \"ms-2\"], [\"class\", \"badge bg-info me-2\", 4, \"ngIf\"], [\"class\", \"badge bg-secondary\", 4, \"ngIf\"], [1, \"badge\", \"bg-info\", \"me-2\"], [1, \"bi\", \"bi-person\", \"me-1\"], [1, \"badge\", \"bg-secondary\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"bi\", \"bi-x-lg\"], [1, \"text-danger\", \"mt-1\"], [1, \"text-success\", \"mt-1\"], [3, \"value\"], [1, \"form-check\", \"me-3\"], [\"type\", \"radio\", \"formControlName\", \"complexity\", 1, \"form-check-input\", 3, \"id\", \"value\"], [1, \"form-check-label\", 3, \"for\"], [1, \"text-muted\", \"mt-1\"], [1, \"bi\", \"bi-info-circle\"], [1, \"bi\", \"bi-stopwatch\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\", \"mb-4\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"mb-4\", \"text-center\"], [1, \"display-4\", \"mb-0\"], [1, \"row\", \"text-center\", \"mb-4\"], [1, \"col-6\"], [1, \"p-3\", \"bg-light\", \"rounded\"], [1, \"text-muted\", \"mb-0\"], [1, \"mb-4\"], [1, \"progress\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", 3, \"ngClass\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-footer\", \"text-muted\", \"small\"], [1, \"list-group-item\"], [1, \"card\", \"bg-light\"], [1, \"card-body\", \"text-center\", \"p-5\"], [1, \"bi\", \"bi-graph-up\", \"display-1\", \"text-muted\"], [1, \"mt-3\"]],\n        template: function TaskEstimationComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\", 3);\n            i0.ɵɵtext(4, \"ML-Based Task Estimation\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"p\", 4);\n            i0.ɵɵtext(6, \"Estimate task duration using machine learning predictions based on historical data\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 2)(9, \"div\", 5)(10, \"div\", 6)(11, \"h4\", 7);\n            i0.ɵɵtext(12, \"Enter Iteration Path\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(13, \"div\", 8)(14, \"div\", 9)(15, \"div\", 10)(16, \"div\", 11)(17, \"label\", 12);\n            i0.ɵɵtext(18, \"Iteration Path\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"input\", 13);\n            i0.ɵɵlistener(\"ngModelChange\", function TaskEstimationComponent_Template_input_ngModelChange_19_listener($event) {\n              return ctx.manualIterationPath = $event;\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(20, \"button\", 14);\n            i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_20_listener() {\n              return ctx.loadWorkItemsByIteration();\n            });\n            i0.ɵɵelement(21, \"i\", 15);\n            i0.ɵɵtext(22, \" Load Items \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(23, TaskEstimationComponent_div_23_Template, 3, 1, \"div\", 16);\n            i0.ɵɵelementEnd()()()()()();\n            i0.ɵɵelementStart(24, \"div\", 17)(25, \"div\", 10)(26, \"div\", 5)(27, \"div\", 18)(28, \"h4\", 7);\n            i0.ɵɵtext(29, \"Work Items\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(30, TaskEstimationComponent_span_30_Template, 2, 1, \"span\", 19);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(31, \"div\", 8);\n            i0.ɵɵtemplate(32, TaskEstimationComponent_div_32_Template, 6, 0, \"div\", 20);\n            i0.ɵɵtemplate(33, TaskEstimationComponent_div_33_Template, 3, 0, \"div\", 20);\n            i0.ɵɵtemplate(34, TaskEstimationComponent_div_34_Template, 2, 1, \"div\", 21);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(35, \"div\", 10)(36, \"div\", 5)(37, \"div\", 6)(38, \"h4\", 7);\n            i0.ɵɵtemplate(39, TaskEstimationComponent_span_39_Template, 2, 1, \"span\", 22);\n            i0.ɵɵtemplate(40, TaskEstimationComponent_span_40_Template, 2, 0, \"span\", 22);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(41, \"div\", 8)(42, \"form\", 23);\n            i0.ɵɵlistener(\"ngSubmit\", function TaskEstimationComponent_Template_form_ngSubmit_42_listener() {\n              return ctx.estimateTaskTime();\n            });\n            i0.ɵɵelementStart(43, \"div\", 24)(44, \"label\", 25);\n            i0.ɵɵtext(45, \"Task Title\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(46, \"div\", 11);\n            i0.ɵɵelement(47, \"input\", 26);\n            i0.ɵɵtemplate(48, TaskEstimationComponent_button_48_Template, 2, 0, \"button\", 27);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(49, TaskEstimationComponent_div_49_Template, 3, 2, \"div\", 28);\n            i0.ɵɵtemplate(50, TaskEstimationComponent_div_50_Template, 3, 1, \"div\", 29);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(51, \"div\", 17)(52, \"div\", 10)(53, \"div\", 24)(54, \"label\", 30);\n            i0.ɵɵtext(55, \"Task Type\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(56, \"select\", 31);\n            i0.ɵɵtemplate(57, TaskEstimationComponent_option_57_Template, 2, 2, \"option\", 32);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(58, \"div\", 10)(59, \"div\", 24)(60, \"label\", 33);\n            i0.ɵɵtext(61, \"Assignee\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(62, \"select\", 34)(63, \"option\", 35);\n            i0.ɵɵtext(64, \"-- Unassigned --\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(65, TaskEstimationComponent_option_65_Template, 2, 2, \"option\", 32);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(66, \"div\", 24)(67, \"label\", 36);\n            i0.ɵɵtext(68, \"Complexity\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(69, \"div\", 37);\n            i0.ɵɵtemplate(70, TaskEstimationComponent_div_70_Template, 4, 4, \"div\", 38);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(71, TaskEstimationComponent_div_71_Template, 4, 0, \"div\", 39);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(72, \"div\", 40)(73, \"button\", 41);\n            i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_73_listener() {\n              return ctx.resetForm();\n            });\n            i0.ɵɵelement(74, \"i\", 42);\n            i0.ɵɵtext(75, \" Reset \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(76, \"button\", 43);\n            i0.ɵɵtemplate(77, TaskEstimationComponent_span_77_Template, 3, 0, \"span\", 22);\n            i0.ɵɵtemplate(78, TaskEstimationComponent_span_78_Template, 3, 0, \"span\", 22);\n            i0.ɵɵelementEnd()()()()()()();\n            i0.ɵɵelementStart(79, \"div\", 44)(80, \"div\", 45);\n            i0.ɵɵtemplate(81, TaskEstimationComponent_div_81_Template, 2, 1, \"div\", 46);\n            i0.ɵɵtemplate(82, TaskEstimationComponent_div_82_Template, 39, 9, \"div\", 47);\n            i0.ɵɵtemplate(83, TaskEstimationComponent_div_83_Template, 7, 0, \"div\", 48);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            let tmp_11_0;\n            let tmp_12_0;\n            i0.ɵɵadvance(19);\n            i0.ɵɵproperty(\"ngModel\", ctx.manualIterationPath);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"disabled\", !ctx.manualIterationPath);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.iterationError);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngIf\", ctx.workItems.length > 0);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.loadingIterationItems);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length === 0 && !ctx.iterationError);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length > 0);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.selectedWorkItem);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"formGroup\", ctx.estimationForm);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(24, _c1, ctx.selectedWorkItem !== null));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", (tmp_11_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_11_0.value);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ((tmp_12_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_12_0.invalid) && ((tmp_12_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_12_0.touched));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngForOf\", ctx.taskTypes);\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngForOf\", ctx.teamMembers);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngForOf\", ctx.complexityLevels);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"disabled\", ctx.loading);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.error);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.showResult && ctx.estimationResult);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.showResult && !ctx.error);\n          }\n        },\n        dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.NgModel, i1.FormGroupDirective, i1.FormControlName],\n        styles: [\"h2[_ngcontent-%COMP%]{margin-bottom:1.5rem;color:#2c3e50}.container[_ngcontent-%COMP%]{padding-top:1.5rem}.display-4[_ngcontent-%COMP%]{font-weight:600}.card[_ngcontent-%COMP%]{box-shadow:0 4px 6px #0000001a;transition:all .3s ease}.card[_ngcontent-%COMP%]:hover{box-shadow:0 6px 10px #00000026}.progress[_ngcontent-%COMP%]{height:25px;font-weight:600}.list-group-item[_ngcontent-%COMP%]:first-child{font-weight:500}.bg-light[_ngcontent-%COMP%]{opacity:.8}.bg-light[_ngcontent-%COMP%]   i.bi-graph-up[_ngcontent-%COMP%]{opacity:.5}.form-check[_ngcontent-%COMP%], .form-check[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%], .form-check[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%]{cursor:pointer}@keyframes _ngcontent-%COMP%_fadeIn{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.alert[_ngcontent-%COMP%], .card[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_fadeIn .3s ease-out}\"]\n      });\n    }\n  }\n  return TaskEstimationComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}