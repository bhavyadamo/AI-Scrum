{"ast":null,"code":"import { throwError, of } from 'rxjs';\nimport { catchError, delay } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { UserRole } from '../models/settings.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SettingsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/settings`;\n    this.useLocalMock = true; // Always use mock data for demo purposes\n    // Mock data for demo\n    this.mockUserRoles = [{\n      userId: '1',\n      userName: 'John Doe',\n      email: 'john.doe@example.com',\n      role: UserRole.Admin\n    }, {\n      userId: '2',\n      userName: 'Jane Smith',\n      email: 'jane.smith@example.com',\n      role: UserRole.ScrumMaster\n    }, {\n      userId: '3',\n      userName: 'Bob Johnson',\n      email: 'bob.johnson@example.com',\n      role: UserRole.Member\n    }, {\n      userId: '4',\n      userName: 'Alice Williams',\n      email: 'alice.williams@example.com',\n      role: UserRole.Viewer\n    }];\n    this.mockAzureDevOpsSettings = {\n      organization: 'demo-organization',\n      organizationUrl: 'https://dev.azure.com/demo-organization',\n      project: 'Demo Project',\n      personalAccessToken: '•••••••••••••••••••••••••••••'\n    };\n    this.mockAiModelSettings = {\n      modelType: 'openai',\n      modelEndpoint: '',\n      apiKey: '•••••••••••••••••••••••••••••',\n      enableRecommendations: true,\n      enableAutoUpdate: true\n    };\n  }\n  // Get all settings (admin only)\n  getAllSettings() {\n    if (this.useLocalMock) {\n      const mockData = {\n        userRoles: this.mockUserRoles,\n        azureDevOpsSettings: this.mockAzureDevOpsSettings,\n        aiModelSettings: this.mockAiModelSettings\n      };\n      return of(mockData).pipe(delay(300));\n    }\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n  }\n  // User role management\n  getUserRoles() {\n    if (this.useLocalMock) {\n      return of(this.mockUserRoles).pipe(delay(300));\n    }\n    return this.http.get(`${this.apiUrl}/users`).pipe(catchError(this.handleError));\n  }\n  updateUserRole(request) {\n    if (this.useLocalMock) {\n      // Update the local mock data\n      const userIndex = this.mockUserRoles.findIndex(u => u.userId === request.userId);\n      if (userIndex >= 0) {\n        this.mockUserRoles[userIndex].role = request.role;\n      }\n      return of({\n        success: true\n      }).pipe(delay(300));\n    }\n    return this.http.post(`${this.apiUrl}/users`, request).pipe(catchError(this.handleError));\n  }\n  // Azure DevOps settings\n  getAzureDevOpsSettings() {\n    if (this.useLocalMock) {\n      return of(this.mockAzureDevOpsSettings).pipe(delay(300));\n    }\n    return this.http.get(`${this.apiUrl}/azure-devops-pat`).pipe(catchError(this.handleError));\n  }\n  updateAzureDevOpsPAT(request) {\n    if (this.useLocalMock) {\n      // Update the mock data (but don't actually store the real PAT)\n      this.mockAzureDevOpsSettings.personalAccessToken = '•••••••••••••••••••••••••••••';\n      return of({\n        success: true\n      }).pipe(delay(300));\n    }\n    return this.http.post(`${this.apiUrl}/azure-devops-pat`, request).pipe(catchError(this.handleError));\n  }\n  // AI model settings\n  getAiModelSettings() {\n    if (this.useLocalMock) {\n      return of(this.mockAiModelSettings).pipe(delay(300));\n    }\n    return this.http.get(`${this.apiUrl}/ai-model`).pipe(catchError(this.handleError));\n  }\n  updateAiModelSettings(request) {\n    if (this.useLocalMock) {\n      // Update mock data\n      this.mockAiModelSettings = {\n        ...this.mockAiModelSettings,\n        modelType: request.modelType || this.mockAiModelSettings.modelType,\n        modelEndpoint: request.modelEndpoint || this.mockAiModelSettings.modelEndpoint,\n        enableRecommendations: request.enableRecommendations !== undefined ? request.enableRecommendations : this.mockAiModelSettings.enableRecommendations,\n        enableAutoUpdate: request.enableAutoUpdate\n      };\n      // Don't store the real API key\n      if (request.apiKey) {\n        this.mockAiModelSettings.apiKey = '•••••••••••••••••••••••••••••';\n      }\n      return of({\n        success: true\n      }).pipe(delay(300));\n    }\n    return this.http.post(`${this.apiUrl}/ai-model`, request).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('Settings service error:', error);\n    let errorMessage = 'An unknown error occurred';\n    if (error.error && error.error.message) {\n      errorMessage = error.error.message;\n    } else if (error.status === 403) {\n      errorMessage = 'You do not have permission to access this resource';\n    } else if (error.status === 401) {\n      errorMessage = 'Please log in to access this resource';\n    } else if (error.status === 404) {\n      errorMessage = 'Resource not found';\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function SettingsService_Factory(t) {\n      return new (t || SettingsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SettingsService,\n      factory: SettingsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","of","catchError","delay","environment","UserRole","SettingsService","constructor","http","apiUrl","userId","userName","email","role","Admin","ScrumMaster","Member","Viewer","organization","organizationUrl","project","personalAccessToken","modelType","modelEndpoint","apiKey","enableRecommendations","enableAutoUpdate","getAllSettings","useLocalMock","mockData","userRoles","mockUserRoles","azureDevOpsSettings","mockAzureDevOpsSettings","aiModelSettings","mockAiModelSettings","pipe","get","handleError","getUserRoles","updateUserRole","request","userIndex","findIndex","u","success","post","getAzureDevOpsSettings","updateAzureDevOpsPAT","getAiModelSettings","updateAiModelSettings","undefined","error","console","errorMessage","message","status","Error","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\settings.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError, of } from 'rxjs';\r\nimport { catchError, delay } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport {\r\n  AiModelSettingsDto,\r\n  AzureDevOpsSettingsDto,\r\n  SettingsDto,\r\n  UpdateAiModelSettingsRequest,\r\n  UpdateAzureDevOpsPATRequest,\r\n  UpdateUserRoleRequest,\r\n  UserRoleDto,\r\n  UserRole\r\n} from '../models/settings.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SettingsService {\r\n  private apiUrl = `${environment.apiUrl}/settings`;\r\n  private useLocalMock = true; // Always use mock data for demo purposes\r\n\r\n  // Mock data for demo\r\n  private mockUserRoles: UserRoleDto[] = [\r\n    { userId: '1', userName: 'John Doe', email: 'john.doe@example.com', role: UserRole.Admin },\r\n    { userId: '2', userName: 'Jane Smith', email: 'jane.smith@example.com', role: UserRole.ScrumMaster },\r\n    { userId: '3', userName: 'Bob Johnson', email: 'bob.johnson@example.com', role: UserRole.Member },\r\n    { userId: '4', userName: 'Alice Williams', email: 'alice.williams@example.com', role: UserRole.Viewer }\r\n  ];\r\n\r\n  private mockAzureDevOpsSettings: AzureDevOpsSettingsDto = {\r\n    organization: 'demo-organization',\r\n    organizationUrl: 'https://dev.azure.com/demo-organization',\r\n    project: 'Demo Project',\r\n    personalAccessToken: '•••••••••••••••••••••••••••••'\r\n  };\r\n\r\n  private mockAiModelSettings: AiModelSettingsDto = {\r\n    modelType: 'openai',\r\n    modelEndpoint: '',\r\n    apiKey: '•••••••••••••••••••••••••••••',\r\n    enableRecommendations: true,\r\n    enableAutoUpdate: true\r\n  };\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Get all settings (admin only)\r\n  getAllSettings(): Observable<SettingsDto> {\r\n    if (this.useLocalMock) {\r\n      const mockData: SettingsDto = {\r\n        userRoles: this.mockUserRoles,\r\n        azureDevOpsSettings: this.mockAzureDevOpsSettings,\r\n        aiModelSettings: this.mockAiModelSettings\r\n      };\r\n      return of(mockData).pipe(delay(300));\r\n    }\r\n\r\n    return this.http.get<SettingsDto>(this.apiUrl)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // User role management\r\n  getUserRoles(): Observable<UserRoleDto[]> {\r\n    if (this.useLocalMock) {\r\n      return of(this.mockUserRoles).pipe(delay(300));\r\n    }\r\n\r\n    return this.http.get<UserRoleDto[]>(`${this.apiUrl}/users`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateUserRole(request: UpdateUserRoleRequest): Observable<any> {\r\n    if (this.useLocalMock) {\r\n      // Update the local mock data\r\n      const userIndex = this.mockUserRoles.findIndex(u => u.userId === request.userId);\r\n      if (userIndex >= 0) {\r\n        this.mockUserRoles[userIndex].role = request.role;\r\n      }\r\n      return of({ success: true }).pipe(delay(300));\r\n    }\r\n\r\n    return this.http.post(`${this.apiUrl}/users`, request)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // Azure DevOps settings\r\n  getAzureDevOpsSettings(): Observable<AzureDevOpsSettingsDto> {\r\n    if (this.useLocalMock) {\r\n      return of(this.mockAzureDevOpsSettings).pipe(delay(300));\r\n    }\r\n\r\n    return this.http.get<AzureDevOpsSettingsDto>(`${this.apiUrl}/azure-devops-pat`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateAzureDevOpsPAT(request: UpdateAzureDevOpsPATRequest): Observable<any> {\r\n    if (this.useLocalMock) {\r\n      // Update the mock data (but don't actually store the real PAT)\r\n      this.mockAzureDevOpsSettings.personalAccessToken = '•••••••••••••••••••••••••••••';\r\n      return of({ success: true }).pipe(delay(300));\r\n    }\r\n\r\n    return this.http.post(`${this.apiUrl}/azure-devops-pat`, request)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // AI model settings\r\n  getAiModelSettings(): Observable<AiModelSettingsDto> {\r\n    if (this.useLocalMock) {\r\n      return of(this.mockAiModelSettings).pipe(delay(300));\r\n    }\r\n\r\n    return this.http.get<AiModelSettingsDto>(`${this.apiUrl}/ai-model`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateAiModelSettings(request: UpdateAiModelSettingsRequest): Observable<any> {\r\n    if (this.useLocalMock) {\r\n      // Update mock data\r\n      this.mockAiModelSettings = {\r\n        ...this.mockAiModelSettings,\r\n        modelType: request.modelType || this.mockAiModelSettings.modelType,\r\n        modelEndpoint: request.modelEndpoint || this.mockAiModelSettings.modelEndpoint,\r\n        enableRecommendations: request.enableRecommendations !== undefined ? \r\n            request.enableRecommendations : this.mockAiModelSettings.enableRecommendations,\r\n        enableAutoUpdate: request.enableAutoUpdate\r\n      };\r\n      // Don't store the real API key\r\n      if (request.apiKey) {\r\n        this.mockAiModelSettings.apiKey = '•••••••••••••••••••••••••••••';\r\n      }\r\n      return of({ success: true }).pipe(delay(300));\r\n    }\r\n\r\n    return this.http.post(`${this.apiUrl}/ai-model`, request)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('Settings service error:', error);\r\n    \r\n    let errorMessage = 'An unknown error occurred';\r\n    if (error.error && error.error.message) {\r\n      errorMessage = error.error.message;\r\n    } else if (error.status === 403) {\r\n      errorMessage = 'You do not have permission to access this resource';\r\n    } else if (error.status === 401) {\r\n      errorMessage = 'Please log in to access this resource';\r\n    } else if (error.status === 404) {\r\n      errorMessage = 'Resource not found';\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    \r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}