{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, finalize, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/dashboard.service\";\nimport * as i2 from \"../../services/azure-devops.service\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nconst _c0 = [\"stateDistributionChart\"];\nconst _c1 = [\"iterationDistributionChart\"];\nconst _c2 = [\"statusPieChart\"];\nfunction DashboardComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33)(1, \"div\", 34)(2, \"span\", 35);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.error.sprint, \" \");\n  }\n}\nfunction DashboardComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 37);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 38)(4, \"div\")(5, \"p\", 39);\n    i0.ɵɵtext(6, \"Start Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\", 40);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\")(11, \"p\", 39);\n    i0.ɵɵtext(12, \"End Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\", 40);\n    i0.ɵɵtext(14);\n    i0.ɵɵpipe(15, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\")(17, \"p\", 39);\n    i0.ɵɵtext(18, \"Days Remaining\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p\", 41);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(21, \"div\", 42)(22, \"p\", 39);\n    i0.ɵɵtext(23, \"Iteration Path\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"p\", 40);\n    i0.ɵɵtext(25);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.decodeIterationPath(ctx_r2.sprintOverview.sprintName));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 5, ctx_r2.sprintOverview.startDate, \"longDate\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(15, 8, ctx_r2.sprintOverview.endDate, \"longDate\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r2.sprintOverview.daysRemaining);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r2.decodeIterationPath(ctx_r2.sprintOverview.iterationPath));\n  }\n}\nfunction DashboardComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33)(1, \"p\", 43);\n    i0.ɵɵtext(2, \"Ask me anything about your project or tasks.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 44)(4, \"h4\");\n    i0.ɵɵtext(5, \"Try asking me:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"ul\")(7, \"li\");\n    i0.ɵɵtext(8, \"What are the current sprint details?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"li\");\n    i0.ɵɵtext(10, \"How many tasks are in this sprint?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"li\");\n    i0.ɵɵtext(12, \"Show me the work distribution by team member\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"li\");\n    i0.ɵɵtext(14, \"Who has the most tasks assigned?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"li\");\n    i0.ɵɵtext(16, \"Can you assign task #123 to John?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"li\");\n    i0.ɵɵtext(18, \"Suggest someone for the next task assignment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"li\");\n    i0.ɵɵtext(20, \"What's the current sprint progress?\");\n    i0.ɵɵelementEnd()()()();\n  }\n}\nconst _c3 = function (a0, a1) {\n  return {\n    \"user-message\": a0,\n    \"assistant-message\": a1\n  };\n};\nfunction DashboardComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 45)(1, \"div\", 46)(2, \"div\", 47);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 48);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const msg_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c3, msg_r11.role === \"user\", msg_r11.role === \"assistant\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(msg_r11.content);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 3, msg_r11.timestamp, \"shortTime\"));\n  }\n}\nfunction DashboardComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33)(1, \"div\", 34)(2, \"span\", 35);\n    i0.ɵɵtext(3, \"Loading work item data...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 49);\n    i0.ɵɵtext(5, \"Fetching real-time work item counts from API...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.taskDetailsError, \" \");\n  }\n}\nfunction DashboardComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33)(1, \"p\", 43);\n    i0.ɵɵtext(2, \"No work item state data available. Please select an iteration and click Search.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c4 = function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n  return {\n    \"status-active\": a0,\n    \"status-code-review\": a1,\n    \"status-dev-progress\": a2,\n    \"status-dev-new\": a3,\n    \"status-planned\": a4,\n    \"status-cs-new\": a5,\n    \"status-proposed\": a6,\n    \"status-clarification\": a7,\n    \"status-resolved\": a8,\n    \"status-verified\": a9\n  };\n};\nfunction DashboardComponent_div_50_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52)(1, \"div\", 53)(2, \"div\", 54)(3, \"div\", 55);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 56);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const status_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunctionV(3, _c4, [status_r13.status === \"Active\", status_r13.status === \"Code Review\", status_r13.status === \"Dev In Progress\" || status_r13.status === \"Dev In progress\" || status_r13.status.toLowerCase().includes(\"dev\") && status_r13.status.toLowerCase().includes(\"progress\"), status_r13.status === \"Dev-New\", status_r13.status === \"Planned\", status_r13.status === \"CS-New\", status_r13.status === \"Proposed\", status_r13.status === \"Require Clarification\", status_r13.status === \"Resolved\", status_r13.status === \"Verified\"]));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(status_r13.count);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(status_r13.status);\n  }\n}\nfunction DashboardComponent_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 50);\n    i0.ɵɵtemplate(1, DashboardComponent_div_50_div_1_Template, 7, 14, \"div\", 51);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.taskStatusBoard);\n  }\n}\nfunction DashboardComponent_div_56_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 59)(1, \"div\", 60)(2, \"div\", 61)(3, \"div\", 62)(4, \"h5\", 63);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"span\", 64);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 65);\n    i0.ɵɵelement(9, \"div\", 66);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const typeItem_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border-left-color\", typeItem_r15.color);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(typeItem_r15.type);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", typeItem_r15.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(typeItem_r15.count);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", typeItem_r15.count / ctx_r14.getTotalWorkItems() * 100, \"%\")(\"background-color\", typeItem_r15.color);\n  }\n}\nfunction DashboardComponent_div_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 57);\n    i0.ɵɵtemplate(1, DashboardComponent_div_56_div_1_Template, 10, 10, \"div\", 58);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r9.tasksByType);\n  }\n}\nfunction DashboardComponent_div_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33)(1, \"p\", 43);\n    i0.ɵɵtext(2, \"No work item type data available.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class DashboardComponent {\n  // Method to decode iteration path for display\n  decodeIterationPath(path) {\n    if (!path) return '';\n    // Replace the encoded backslash with an actual backslash\n    // Handle both double-encoded (%255C) and single-encoded (%5C) backslashes\n    let decoded = path.replace(/%255C/g, '\\\\');\n    decoded = decoded.replace(/%5C/g, '\\\\');\n    decoded = decoded.replace(/%5c/g, '\\\\');\n    return decoded;\n  }\n  constructor(dashboardService, azureDevOpsService, http) {\n    this.dashboardService = dashboardService;\n    this.azureDevOpsService = azureDevOpsService;\n    this.http = http;\n    this.sprintOverview = null;\n    this.sprintSummary = null;\n    this.activityFeed = null;\n    this.dailyTip = '';\n    this.workItemDistribution = null;\n    this.stateDistributions = [];\n    this.longTermDevNewItems = [];\n    this.supportItems = [];\n    this.aiTips = null;\n    // Define state colors for consistency\n    this.stateColors = {\n      'Proposed': '#e6e6e6',\n      'New': '#b4d7a8',\n      'Dev-New': '#b4d7a8',\n      'Active': '#4a86e8',\n      'Dev-WIP': '#4a86e8',\n      'In Progress': '#4a86e8',\n      'Resolved': '#ffd966',\n      'Code Review': '#9fc5e8',\n      'QA': '#d5a6bd',\n      'Testing': '#d5a6bd',\n      'Done': '#93c47d',\n      'Closed': '#6aa84f',\n      'Completed': '#6aa84f',\n      'Blocked': '#e06666',\n      'Removed': '#999999'\n    };\n    // Default chart colors if state not found in mapping\n    this.defaultChartColors = ['#4a86e8', '#6aa84f', '#ffd966', '#e06666', '#9fc5e8', '#d5a6bd', '#b4d7a8', '#e6e6e6', '#93c47d', '#6fa8dc'];\n    // Properties for the new task board\n    this.taskStatusBoard = [];\n    // Properties for task details\n    this.loadingTaskDetails = false;\n    this.taskDetailsError = '';\n    this.tasksByStatus = [];\n    // Chat properties\n    this.chatMessages = [];\n    this.currentMessage = '';\n    // Define status colors based on Azure DevOps board from the image\n    this.statusColors = {\n      'PMG - Proposed': '#e0e0e0',\n      'DEV - Yet to Start': '#9a9a9a',\n      'DEV - WIP': '#0078d4',\n      'DEV - Code Review': '#324e93',\n      'DEV - Done': '#00b7c3',\n      'DEV/QC - Reopened': '#e81123',\n      'Clarifications': '#fff100',\n      'On Hold': '#e3008c',\n      'QC - In Test Bed': '#8764b8',\n      'Completed': '#107c10'\n    };\n    // Track loading and error states\n    this.loading = {\n      sprint: true,\n      summary: true,\n      activity: true,\n      tip: true,\n      distribution: true,\n      stateDistribution: true,\n      longTermDevNew: true,\n      supportItems: true,\n      aiTips: true,\n      taskStatusBoard: true\n    };\n    this.error = {\n      sprint: '',\n      summary: '',\n      activity: '',\n      tip: '',\n      distribution: '',\n      stateDistribution: '',\n      longTermDevNew: '',\n      supportItems: '',\n      aiTips: '',\n      taskStatusBoard: ''\n    };\n    // Starting with a default Iteration Path that can be changed\n    this.selectedIterationPath = 'Techoil\\\\2.3.23';\n    this.availableIterationPaths = ['Techoil\\\\2.3.23'];\n    // Work item status counts from Azure DevOps\n    this.azureDevOpsWorkItems = [];\n    this.workItemCounts = {\n      totalTasks: 0,\n      devNew: 0,\n      inProgress: 0,\n      codeReview: 0,\n      devComplete: 0,\n      completed: 0,\n      blocked: 0\n    };\n    // Assignee distribution data\n    this.assigneeDistribution = {};\n    // Loading and error states\n    this.loadingAzureDevOps = false;\n    this.azureDevOpsError = '';\n    // Stats grouping for types and statuses\n    this.tasksByType = [];\n  }\n  ngOnInit() {\n    this.loadDashboardData();\n  }\n  ngAfterViewInit() {\n    // Charts will be initialized after data is loaded\n  }\n  loadDashboardData() {\n    this.loadSprintOverview();\n    this.loadAiTips();\n    // Load Azure DevOps data for the initial iteration path\n    this.loadingTaskDetails = true;\n    this.taskDetailsError = '';\n    this.loadTaskStatusBoard();\n  }\n  loadIterationData() {\n    // Validate iteration path\n    if (!this.selectedIterationPath) {\n      return;\n    }\n    // Trim whitespace and ensure consistent formatting\n    this.selectedIterationPath = this.selectedIterationPath.trim();\n    // Reset loading and error states\n    this.loading.sprint = true;\n    this.error.sprint = '';\n    this.loadingTaskDetails = true;\n    this.taskDetailsError = '';\n    console.log(`Loading data for iteration path: ${this.selectedIterationPath}`);\n    // Load sprint details for the selected iteration path\n    this.dashboardService.getSprintDetailsByIterationPath(this.selectedIterationPath).subscribe({\n      next: data => {\n        console.log('Sprint details loaded:', data);\n        // Ensure proper display by decoding the iteration path\n        if (data.iterationPath) {\n          data.sprintName = this.decodeIterationPath(data.sprintName);\n        }\n        this.sprintOverview = data;\n        this.loading.sprint = false;\n      },\n      error: err => {\n        this.error.sprint = 'Failed to load sprint details';\n        this.loading.sprint = false;\n        console.error('Error loading sprint details:', err);\n      }\n    });\n    // Load Azure DevOps work items directly first to get live data\n    this.loadAzureDevOpsWorkItemsWithWiql();\n    // Load other dashboard data\n    this.loadSprintSummary(this.selectedIterationPath);\n    this.loadTaskStatusBoard();\n    // Update available paths if this is a new one\n    if (!this.availableIterationPaths.includes(this.selectedIterationPath)) {\n      this.availableIterationPaths.push(this.selectedIterationPath);\n    }\n  }\n  loadSprintOverview() {\n    this.loading.sprint = true;\n    this.dashboardService.getCurrentSprint().subscribe({\n      next: data => {\n        this.sprintOverview = data;\n        // Use hard-coded iteration path instead of data.iterationPath\n        // this.selectedIterationPath = data.iterationPath;\n        this.loading.sprint = false;\n        this.loadSprintSummary(this.selectedIterationPath);\n        this.loadActivityFeed();\n        this.loadWorkItemDistribution(this.selectedIterationPath);\n        this.loadStateDistributions();\n      },\n      error: err => {\n        this.error.sprint = 'Failed to load sprint data';\n        this.loading.sprint = false;\n        console.error('Error loading sprint data:', err);\n      }\n    });\n  }\n  loadSprintSummary(iterationPath) {\n    this.loading.summary = true;\n    this.dashboardService.getSprintSummary(iterationPath).subscribe({\n      next: data => {\n        this.sprintSummary = data;\n        this.loading.summary = false;\n      },\n      error: err => {\n        this.error.summary = 'Failed to load summary data';\n        this.loading.summary = false;\n        console.error('Error loading summary data:', err);\n      }\n    });\n  }\n  loadActivityFeed() {\n    this.loading.activity = true;\n    this.dashboardService.getActivityFeed().subscribe({\n      next: data => {\n        this.activityFeed = data;\n        this.loading.activity = false;\n      },\n      error: err => {\n        this.error.activity = 'Failed to load activity feed';\n        this.loading.activity = false;\n        console.error('Error loading activity feed:', err);\n      }\n    });\n  }\n  loadDailyTip() {\n    this.loading.tip = true;\n    this.dashboardService.getDailyTip().subscribe({\n      next: data => {\n        this.dailyTip = data.tip;\n        this.loading.tip = false;\n      },\n      error: err => {\n        this.error.tip = 'Failed to load daily tip';\n        this.loading.tip = false;\n        console.error('Error loading daily tip:', err);\n      }\n    });\n  }\n  loadWorkItemDistribution(iterationPath) {\n    this.loading.distribution = true;\n    this.dashboardService.getWorkItemDistribution(iterationPath).subscribe({\n      next: data => {\n        this.workItemDistribution = data;\n        this.loading.distribution = false;\n        // Initialize distribution chart after data is loaded\n        setTimeout(() => {\n          this.initializeWorkItemDistributionChart();\n        }, 100);\n      },\n      error: err => {\n        this.error.distribution = 'Failed to load work item distribution';\n        this.loading.distribution = false;\n        console.error('Error loading work item distribution:', err);\n      }\n    });\n  }\n  loadStateDistributions() {\n    this.loading.stateDistribution = true;\n    this.dashboardService.getStateDistribution(this.selectedIterationPath).subscribe({\n      next: data => {\n        this.stateDistributions = data;\n        // Keep hard-coded iteration paths instead of dynamically loading them\n        // this.availableIterationPaths = data.map(d => d.iterationPath);\n        this.loading.stateDistribution = false;\n        // Initialize state distribution chart after data is loaded\n        setTimeout(() => {\n          this.initializeStateDistributionsChart();\n        }, 100);\n      },\n      error: err => {\n        this.error.stateDistribution = 'Failed to load state distributions';\n        this.loading.stateDistribution = false;\n        console.error('Error loading state distributions:', err);\n      }\n    });\n  }\n  loadLongTermDevNewItems() {\n    this.loading.longTermDevNew = true;\n    this.dashboardService.getLongTermDevNewItems(5).subscribe({\n      next: data => {\n        this.longTermDevNewItems = data;\n        this.loading.longTermDevNew = false;\n      },\n      error: err => {\n        this.error.longTermDevNew = 'Failed to load long-term Dev-New items';\n        this.loading.longTermDevNew = false;\n        console.error('Error loading long-term Dev-New items:', err);\n      }\n    });\n  }\n  loadSupportItems() {\n    this.loading.supportItems = true;\n    this.dashboardService.getSupportItems(6).subscribe({\n      next: data => {\n        this.supportItems = data;\n        this.loading.supportItems = false;\n      },\n      error: err => {\n        this.error.supportItems = 'Failed to load support items';\n        this.loading.supportItems = false;\n        console.error('Error loading support items:', err);\n      }\n    });\n  }\n  loadAiTips() {\n    this.loading.aiTips = true;\n    this.dashboardService.getAiTips().subscribe({\n      next: data => {\n        this.aiTips = data;\n        this.longTermDevNewItems = data.longTermDevNewItems;\n        this.supportItems = data.supportItems;\n        this.dailyTip = data.tip;\n        this.loading.aiTips = false;\n      },\n      error: err => {\n        this.error.aiTips = 'Failed to load AI tips';\n        this.loading.aiTips = false;\n        console.error('Error loading AI tips:', err);\n        // Fall back to individual methods\n        this.loadDailyTip();\n        this.loadLongTermDevNewItems();\n        this.loadSupportItems();\n      }\n    });\n  }\n  initializeWorkItemDistributionChart() {\n    if (!this.workItemDistribution || !this.stateDistributionChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.stateDistributionChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    const labels = this.workItemDistribution.states.map(s => s.state);\n    const data = this.workItemDistribution.states.map(s => s.count);\n    const colors = this.workItemDistribution.states.map(s => this.stateColors[s.state] || this.getRandomColor());\n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            backgroundColor: colors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right'\n            },\n            title: {\n              display: true,\n              text: `Work Item States - ${this.workItemDistribution.iterationPath}`\n            }\n          }\n        }\n      });\n    }\n  }\n  initializeStateDistributionsChart() {\n    if (this.stateDistributions.length === 0 || !this.iterationDistributionChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.iterationDistributionChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    // Prepare data for stacked bar chart\n    const iterationLabels = this.stateDistributions.map(d => d.iterationPath);\n    // Find all unique states across all iterations\n    const allStates = new Set();\n    this.stateDistributions.forEach(dist => {\n      dist.states.forEach(state => {\n        allStates.add(state.state);\n      });\n    });\n    // Create datasets, one for each state\n    const datasets = Array.from(allStates).map(stateName => {\n      // Find color for this state\n      const stateColor = this.stateColors[stateName] || this.getRandomColor();\n      // Create dataset for this state across all iterations\n      return {\n        label: stateName,\n        data: this.stateDistributions.map(dist => {\n          const stateData = dist.states.find(s => s.state === stateName);\n          return stateData ? stateData.count : 0;\n        }),\n        backgroundColor: stateColor\n      };\n    });\n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: iterationLabels,\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'right'\n            },\n            title: {\n              display: true,\n              text: 'Work Item Distribution by Iteration'\n            }\n          }\n        }\n      });\n    }\n  }\n  changeIterationPath(iterationPath) {\n    // Even with hardcoded path, keep the method in case it's called from elsewhere\n    if (iterationPath !== this.selectedIterationPath) {\n      this.selectedIterationPath = iterationPath;\n      this.loadWorkItemDistribution(iterationPath);\n      this.loadSprintSummary(iterationPath);\n    }\n  }\n  getStateColor(state) {\n    return this.stateColors[state] || this.getRandomColor();\n  }\n  getRandomColor() {\n    const randomIndex = Math.floor(Math.random() * this.defaultChartColors.length);\n    return this.defaultChartColors[randomIndex];\n  }\n  reload() {\n    this.loadDashboardData();\n  }\n  loadTaskStatusBoard() {\n    this.loading.taskStatusBoard = true;\n    this.error.taskStatusBoard = '';\n    this.loadingTaskDetails = true;\n    this.taskDetailsError = '';\n    // Define the expected status order to match the image\n    const expectedStatuses = ['PMG - Proposed', 'DEV - Yet to Start', 'DEV - WIP', 'DEV - Code Review', 'DEV - Done', 'DEV/QC - Reopened'];\n    // Type colors for visualization\n    const typeColors = {\n      'Bug': '#e74c3c',\n      'Requirement': '#3498db',\n      'Change Request': '#2ecc71',\n      'Task': '#f39c12',\n      'Epic': '#9b59b6',\n      'User Story': '#1abc9c'\n    };\n    // Use the direct API endpoint as specified\n    const encodedPath = encodeURIComponent(this.selectedIterationPath).replace(/%5C/g, '%255C');\n    const url = `http://localhost:5000/api/tasks?iterationPath=${encodedPath}`;\n    this.http.get(url).pipe(finalize(() => {\n      this.loading.taskStatusBoard = false;\n      this.loadingTaskDetails = false;\n    })).subscribe({\n      next: workItems => {\n        if (workItems && workItems.length > 0) {\n          // Group by status\n          const statusGroups = workItems.reduce((acc, item) => {\n            const status = item.status || 'Unknown';\n            if (!acc[status]) {\n              acc[status] = [];\n            }\n            acc[status].push(item);\n            return acc;\n          }, {});\n          // Group by type\n          const typeGroups = workItems.reduce((acc, item) => {\n            const type = item.type || 'Unknown';\n            if (!acc[type]) {\n              acc[type] = [];\n            }\n            acc[type].push(item);\n            return acc;\n          }, {});\n          // Create status items\n          let statusItems = Object.keys(statusGroups).map(status => ({\n            status: status,\n            count: statusGroups[status].length,\n            color: this.statusColors[status] || this.getStateColor(status)\n          }));\n          // Create type items\n          this.tasksByType = Object.keys(typeGroups).map(type => ({\n            type: type,\n            count: typeGroups[type].length,\n            color: typeColors[type] || this.getRandomColor()\n          })).sort((a, b) => b.count - a.count);\n          // Sort statuses based on expected status order\n          statusItems = statusItems.sort((a, b) => {\n            const indexA = expectedStatuses.indexOf(a.status);\n            const indexB = expectedStatuses.indexOf(b.status);\n            // If both are in expectedStatuses, sort by that order\n            if (indexA !== -1 && indexB !== -1) {\n              return indexA - indexB;\n            }\n            // If only one is in expectedStatuses, prioritize it\n            if (indexA !== -1) return -1;\n            if (indexB !== -1) return 1;\n            // For any other statuses, sort alphabetically\n            return a.status.localeCompare(b.status);\n          });\n          // Update the task status board\n          this.taskStatusBoard = statusItems;\n          // Also update tasksByStatus for compatibility with older code\n          this.tasksByStatus = [...this.taskStatusBoard];\n          console.log('Task counts by type:', this.tasksByType);\n          console.log('Task counts by status:', this.taskStatusBoard);\n        } else {\n          this.error.taskStatusBoard = 'No tasks found for this iteration';\n          this.taskDetailsError = 'No tasks found for this iteration';\n          // Create dummy data as a last resort\n          this.createDummyTaskBoard();\n        }\n      },\n      error: err => {\n        console.error('Error loading task board data:', err);\n        this.error.taskStatusBoard = 'Failed to load task board data';\n        this.taskDetailsError = 'Failed to load task data';\n        // Fallback to dummy data\n        this.createDummyTaskBoard();\n      }\n    });\n  }\n  createDummyTaskBoard() {\n    // Create dummy data to match the image\n    this.taskStatusBoard = [{\n      status: 'PMG - Proposed',\n      count: 0,\n      color: '#e0e0e0'\n    }, {\n      status: 'DEV - Yet to Start',\n      count: 2,\n      color: '#9a9a9a'\n    }, {\n      status: 'DEV - WIP',\n      count: 4,\n      color: '#0078d4'\n    }, {\n      status: 'DEV - Code Review',\n      count: 2,\n      color: '#324e93'\n    }, {\n      status: 'DEV - Done',\n      count: 5,\n      color: '#00b7c3'\n    }, {\n      status: 'DEV/QC - Reopened',\n      count: 1,\n      color: '#e81123'\n    }];\n    // Create dummy data for types\n    this.tasksByType = [{\n      type: 'Bug',\n      count: 8,\n      color: '#e74c3c'\n    }, {\n      type: 'Requirement',\n      count: 6,\n      color: '#3498db'\n    }, {\n      type: 'Change Request',\n      count: 3,\n      color: '#2ecc71'\n    }, {\n      type: 'Task',\n      count: 5,\n      color: '#f39c12'\n    }];\n    // Also update tasksByStatus for compatibility\n    this.tasksByStatus = [...this.taskStatusBoard];\n    // Clear any loading and error states\n    this.loadingTaskDetails = false;\n    this.taskDetailsError = '';\n  }\n  initializeStatusPieChart() {\n    if (!this.statusPieChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.statusPieChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    // Setup data for pie chart from work item counts\n    const statusData = [{\n      status: 'Dev-New',\n      count: this.workItemCounts.devNew,\n      color: '#00a8e8'\n    }, {\n      status: 'In Progress',\n      count: this.workItemCounts.inProgress,\n      color: '#0078d4'\n    }, {\n      status: 'Code Review',\n      count: this.workItemCounts.codeReview,\n      color: '#8764b8'\n    }, {\n      status: 'Dev Complete',\n      count: this.workItemCounts.devComplete,\n      color: '#107c10'\n    }, {\n      status: 'Completed',\n      count: this.workItemCounts.completed,\n      color: '#00b7c3'\n    }, {\n      status: 'Blocked',\n      count: this.workItemCounts.blocked,\n      color: '#e81123'\n    }];\n    // Filter out states with 0 count for better visualization\n    const filteredStatuses = statusData.filter(item => item.count > 0);\n    const labels = filteredStatuses.map(s => s.status);\n    const data = filteredStatuses.map(s => s.count);\n    const colors = filteredStatuses.map(s => s.color);\n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            backgroundColor: colors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n              display: true\n            },\n            title: {\n              display: true,\n              text: 'Work Item States Distribution'\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  const total = context.dataset.data.reduce((a, b) => Number(a) + Number(b), 0);\n                  const percentage = Math.round(value / total * 100);\n                  return `${label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  getStatusColor(status) {\n    return this.statusColors[status] || '#9a9a9a'; // Default gray color\n  }\n  // Chat methods\n  sendChatMessage() {\n    if (!this.currentMessage.trim()) return;\n    // Add user message\n    const userMessage = {\n      role: 'user',\n      content: this.currentMessage.trim(),\n      timestamp: new Date()\n    };\n    this.chatMessages.push(userMessage);\n    // Store message and clear input\n    const message = this.currentMessage;\n    this.currentMessage = '';\n    // Show loading indicator\n    this.chatMessages.push({\n      role: 'assistant',\n      content: 'Thinking...',\n      timestamp: new Date()\n    });\n    // Call API to get response\n    this.dashboardService.sendChatMessage({\n      message: message,\n      currentIterationPath: this.selectedIterationPath\n    }).subscribe({\n      next: response => {\n        // Remove the loading indicator\n        this.chatMessages.pop();\n        // Add the actual response\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.message,\n          timestamp: new Date()\n        };\n        this.chatMessages.push(assistantMessage);\n      },\n      error: err => {\n        // Remove the loading indicator\n        this.chatMessages.pop();\n        console.error('Error getting chat response:', err);\n        // Add fallback response\n        const fallbackMessage = {\n          role: 'assistant',\n          content: 'Sorry, I encountered an error processing your request. Please try again later.',\n          timestamp: new Date()\n        };\n        this.chatMessages.push(fallbackMessage);\n      }\n    });\n  }\n  /**\r\n   * Load work items from Azure DevOps for the selected iteration using WIQL API\r\n   */\n  loadAzureDevOpsWorkItemsWithWiql() {\n    this.loadingAzureDevOps = true;\n    this.azureDevOpsError = '';\n    this.azureDevOpsService.getWorkItemsByWiql(this.selectedIterationPath).pipe(finalize(() => {\n      this.loadingAzureDevOps = false;\n    })).subscribe({\n      next: dashboardStats => {\n        // Store the work item counts\n        this.workItemCounts = {\n          totalTasks: dashboardStats.totalTasks,\n          devNew: dashboardStats.devNew,\n          inProgress: dashboardStats.inProgress,\n          codeReview: dashboardStats.codeReview,\n          devComplete: dashboardStats.devComplete,\n          completed: dashboardStats.completed,\n          blocked: dashboardStats.blocked\n        };\n        // Store the work items if available\n        if (dashboardStats.workItems) {\n          this.azureDevOpsWorkItems = dashboardStats.workItems;\n        }\n        // Store assignee distribution data\n        if (dashboardStats.statsByAssignee) {\n          this.assigneeDistribution = dashboardStats.statsByAssignee;\n        }\n        // Update the summary data with the Azure DevOps counts\n        this.updateSummaryWithAzureDevOpsCounts();\n        // Update pie chart\n        setTimeout(() => {\n          this.initializeStatusPieChart();\n        }, 100);\n      },\n      error: error => {\n        console.error('Error loading Azure DevOps work items with WIQL:', error);\n        this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\n        // Fall back to the legacy method if WIQL fails\n        this.loadAzureDevOpsWorkItems();\n      }\n    });\n  }\n  /**\r\n   * Load work items from Azure DevOps for the selected iteration\r\n   */\n  loadAzureDevOpsWorkItems() {\n    this.loadingAzureDevOps = true;\n    this.azureDevOpsError = '';\n    // First try to get the status counts directly from the backend proxy\n    this.azureDevOpsService.getWorkItemStatusCounts(this.selectedIterationPath).pipe(catchError(error => {\n      console.error('Error loading status counts, falling back to work items:', error);\n      // Fall back to getting work items and counting them\n      return this.azureDevOpsService.getWorkItemsByIteration(this.selectedIterationPath).pipe(map(workItems => {\n        // Process the work items to get counts\n        return this.azureDevOpsService.getWorkItemCounts(workItems);\n      }), catchError(err => {\n        this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\n        console.error('Error loading Azure DevOps work items:', err);\n        return of({\n          totalTasks: 0,\n          devNew: 0,\n          inProgress: 0,\n          codeReview: 0,\n          devComplete: 0,\n          completed: 0,\n          blocked: 0\n        });\n      }));\n    }), finalize(() => {\n      this.loadingAzureDevOps = false;\n    })).subscribe(counts => {\n      // Store the counts\n      this.workItemCounts = counts;\n      // Also store the work items if available\n      if (Array.isArray(counts.workItems)) {\n        this.azureDevOpsWorkItems = counts.workItems;\n      }\n      // Update the summary data with the Azure DevOps counts\n      this.updateSummaryWithAzureDevOpsCounts();\n    });\n  }\n  /**\r\n   * Update summary data with the counts from Azure DevOps\r\n   */\n  updateSummaryWithAzureDevOpsCounts() {\n    console.log('Updating summary with Azure DevOps counts:', this.workItemCounts);\n    // Always create a new summary object with the latest counts to ensure reactivity\n    this.sprintSummary = {\n      totalTasks: this.workItemCounts.totalTasks || 0,\n      inProgress: this.workItemCounts.inProgress || 0,\n      completed: this.workItemCounts.completed || 0,\n      blocked: this.workItemCounts.blocked || 0,\n      completionPercentage: this.calculateCompletionPercentage()\n    };\n    // Also update task status board with Azure DevOps data\n    this.updateTaskStatusBoardWithAzureDevOpsCounts();\n    // Create tasksByStatus data for the pie chart\n    if (this.azureDevOpsWorkItems && this.azureDevOpsWorkItems.length > 0) {\n      // Group work items by state\n      const stateGroups = this.azureDevOpsWorkItems.reduce((acc, item) => {\n        const state = item.state || 'Unknown';\n        if (!acc[state]) {\n          acc[state] = [];\n        }\n        acc[state].push(item);\n        return acc;\n      }, {});\n      // Convert to tasksByStatus format\n      this.tasksByStatus = Object.keys(stateGroups).map(state => ({\n        status: state,\n        count: stateGroups[state].length,\n        color: this.getStatusColor(state)\n      })).sort((a, b) => b.count - a.count);\n      // Also update taskStatusBoard for compatibility\n      this.taskStatusBoard = [...this.tasksByStatus];\n    }\n  }\n  /**\r\n   * Calculate completion percentage based on work item counts\r\n   */\n  calculateCompletionPercentage() {\n    const total = this.workItemCounts.totalTasks;\n    if (total === 0) return 0;\n    const completed = this.workItemCounts.completed;\n    return Math.round(completed / total * 100);\n  }\n  /**\r\n   * Update task status board with counts from Azure DevOps\r\n   * This method is now only used for compatibility with other parts of the code\r\n   */\n  updateTaskStatusBoardWithAzureDevOpsCounts() {\n    // Update task status board with the latest data\n    this.loadTaskStatusBoard();\n  }\n  /**\r\n   * Get assignee data as an array for display in the UI\r\n   * @returns Array of assignee data with counts\r\n   */\n  getAssigneeDistribution() {\n    if (!this.assigneeDistribution) {\n      return [];\n    }\n    return Object.keys(this.assigneeDistribution).map(assignee => {\n      return {\n        name: assignee,\n        ...this.assigneeDistribution[assignee]\n      };\n    });\n  }\n  // Get total work items for percentage calculation\n  getTotalWorkItems() {\n    return this.tasksByType.reduce((total, item) => total + item.count, 0);\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DashboardService), i0.ɵɵdirectiveInject(i2.AzureDevOpsService), i0.ɵɵdirectiveInject(i3.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      viewQuery: function DashboardComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n          i0.ɵɵviewQuery(_c2, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stateDistributionChartRef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iterationDistributionChartRef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusPieChartRef = _t.first);\n        }\n      },\n      decls: 58,\n      vars: 13,\n      consts: [[1, \"dashboard-container\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"mb-0\"], [1, \"text-muted\", \"mt-2\"], [1, \"col-md-8\"], [1, \"card\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"d-flex\", \"align-items-center\"], [1, \"input-group\", \"input-group-sm\", \"me-2\", 2, \"max-width\", \"250px\"], [\"for\", \"dashboardIterationPath\", 1, \"input-group-text\"], [\"id\", \"dashboardIterationPath\", \"type\", \"text\", \"placeholder\", \"Enter Iteration Path\", \"aria-label\", \"Iteration Path\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", \"title\", \"Load data for this iteration path\", 1, \"btn\", \"btn-outline-primary\", 3, \"click\"], [1, \"bi\", \"bi-search\"], [1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-arrow-clockwise\"], [1, \"card-body\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"col-md-4\"], [1, \"card-header\"], [1, \"card-body\", \"d-flex\", \"flex-column\", 2, \"height\", \"350px\"], [1, \"chat-messages\", \"flex-grow-1\", \"overflow-auto\", \"mb-3\"], [\"class\", \"message mb-2\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"chat-input\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Type your message...\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"bi\", \"bi-send\"], [1, \"card\", \"mb-4\"], [\"class\", \"row g-3\", 4, \"ngIf\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"alert\", \"alert-danger\"], [1, \"sprint-title\"], [1, \"d-flex\", \"justify-content-between\", \"mt-3\"], [1, \"text-muted\", \"mb-1\"], [1, \"fw-bold\"], [1, \"fw-bold\", \"days-remaining\"], [1, \"mt-3\"], [1, \"text-muted\"], [1, \"chat-examples\"], [1, \"message\", \"mb-2\", 3, \"ngClass\"], [1, \"message-content\"], [1, \"message-text\"], [1, \"message-time\", \"small\", \"text-muted\"], [1, \"mt-2\"], [1, \"row\", \"g-3\"], [\"class\", \"col-md-2 col-sm-4 col-6 mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-2\", \"col-sm-4\", \"col-6\", \"mb-3\"], [1, \"card\", \"task-state-card\", \"h-100\", 3, \"ngClass\"], [1, \"card-body\", \"text-center\", \"text-white\", \"p-3\"], [1, \"text-2xl\", \"font-bold\", \"mb-1\"], [1, \"text-lg\"], [1, \"row\"], [\"class\", \"col-md-3 mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-3\", \"mb-3\"], [1, \"card\", \"task-type-card\", \"h-100\"], [1, \"card-body\", \"p-3\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-2\"], [1, \"mb-0\", \"card-title\"], [1, \"badge\", \"rounded-pill\"], [1, \"progress\"], [1, \"progress-bar\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\", 3);\n          i0.ɵɵtext(4, \"AI Scrum Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p\", 4);\n          i0.ɵɵtext(6, \"Overview of sprint progress, work item distribution, and team performance\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 5)(9, \"div\", 6)(10, \"div\", 7)(11, \"h4\", 3);\n          i0.ɵɵtext(12, \"Sprint Overview\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\")(14, \"div\", 8)(15, \"div\", 9)(16, \"label\", 10);\n          i0.ɵɵtext(17, \"Iteration Path\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"input\", 11);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_18_listener($event) {\n            return ctx.selectedIterationPath = $event;\n          })(\"keyup.enter\", function DashboardComponent_Template_input_keyup_enter_18_listener() {\n            return ctx.loadIterationData();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_19_listener() {\n            return ctx.loadIterationData();\n          });\n          i0.ɵɵelement(20, \"i\", 13);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(21, \"button\", 14);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_21_listener() {\n            return ctx.reload();\n          });\n          i0.ɵɵelement(22, \"i\", 15);\n          i0.ɵɵtext(23, \" Refresh \");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(24, \"div\", 16);\n          i0.ɵɵtemplate(25, DashboardComponent_div_25_Template, 4, 0, \"div\", 17);\n          i0.ɵɵtemplate(26, DashboardComponent_div_26_Template, 2, 1, \"div\", 18);\n          i0.ɵɵtemplate(27, DashboardComponent_div_27_Template, 26, 11, \"div\", 19);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(28, \"div\", 20)(29, \"div\", 6)(30, \"div\", 21)(31, \"h4\", 3);\n          i0.ɵɵtext(32, \"AI Assistant\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(33, \"div\", 22)(34, \"div\", 23);\n          i0.ɵɵtemplate(35, DashboardComponent_div_35_Template, 21, 0, \"div\", 17);\n          i0.ɵɵtemplate(36, DashboardComponent_div_36_Template, 7, 9, \"div\", 24);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(37, \"div\", 25)(38, \"div\", 26)(39, \"input\", 27);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_39_listener($event) {\n            return ctx.currentMessage = $event;\n          })(\"keyup.enter\", function DashboardComponent_Template_input_keyup_enter_39_listener() {\n            return ctx.sendChatMessage();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(40, \"button\", 28);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_40_listener() {\n            return ctx.sendChatMessage();\n          });\n          i0.ɵɵelement(41, \"i\", 29);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(42, \"div\", 30)(43, \"div\", 21)(44, \"h4\", 3);\n          i0.ɵɵtext(45, \"Task Distribution by Status\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(46, \"div\", 16);\n          i0.ɵɵtemplate(47, DashboardComponent_div_47_Template, 6, 0, \"div\", 17);\n          i0.ɵɵtemplate(48, DashboardComponent_div_48_Template, 2, 1, \"div\", 18);\n          i0.ɵɵtemplate(49, DashboardComponent_div_49_Template, 3, 0, \"div\", 17);\n          i0.ɵɵtemplate(50, DashboardComponent_div_50_Template, 2, 1, \"div\", 31);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(51, \"div\", 30)(52, \"div\", 21)(53, \"h4\", 3);\n          i0.ɵɵtext(54, \"Work Items by Type\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(55, \"div\", 16);\n          i0.ɵɵtemplate(56, DashboardComponent_div_56_Template, 2, 1, \"div\", 32);\n          i0.ɵɵtemplate(57, DashboardComponent_div_57_Template, 3, 0, \"div\", 17);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(18);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedIterationPath);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.sprint);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.sprint);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.sprint && !ctx.error.sprint && ctx.sprintOverview);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.chatMessages.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.chatMessages);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.currentMessage);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.loadingTaskDetails);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.taskDetailsError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingTaskDetails && (!ctx.taskStatusBoard || ctx.taskStatusBoard.length === 0) && !ctx.taskDetailsError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingTaskDetails && ctx.taskStatusBoard && ctx.taskStatusBoard.length > 0);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingTaskDetails && ctx.tasksByType && ctx.tasksByType.length > 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingTaskDetails && (!ctx.tasksByType || ctx.tasksByType.length === 0) && !ctx.taskDetailsError);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i4.DatePipe],\n      styles: [\"[_nghost-%COMP%] {\\n  display: block;\\n  background-color: #e8eaf6;\\n}\\n\\n.dashboard-container[_ngcontent-%COMP%] {\\n  padding: 20px;\\n  background-color: #e8eaf6;\\n}\\n\\nh2[_ngcontent-%COMP%], .sprint-title[_ngcontent-%COMP%] {\\n  margin-bottom: 1.5rem;\\n  color: #2c3e50;\\n  font-weight: 600;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n  border-radius: 8px;\\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  transition: all 0.3s ease;\\n  background-color: #f5f7ff;\\n  margin-bottom: 20px;\\n  border: none;\\n}\\n.card[_ngcontent-%COMP%]:hover {\\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\\n}\\n.card[_ngcontent-%COMP%]   .card-header[_ngcontent-%COMP%] {\\n  background-color: #c5cae9;\\n  color: #3949ab;\\n  font-weight: 600;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\\n  padding: 12px 16px;\\n}\\n.card[_ngcontent-%COMP%]   .card-body[_ngcontent-%COMP%] {\\n  background-color: #f5f7ff;\\n}\\n\\n@keyframes _ngcontent-%COMP%_fadeIn {\\n  from {\\n    opacity: 0;\\n    transform: translateY(10px);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n}\\n.alert[_ngcontent-%COMP%], .card[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_fadeIn 0.3s ease-out;\\n}\\n\\n.days-remaining[_ngcontent-%COMP%] {\\n  font-size: 24px;\\n  color: #3949ab;\\n}\\n\\n\\n.summary-card[_ngcontent-%COMP%] {\\n  text-align: center;\\n  border-radius: 8px;\\n  transition: all 0.3s ease;\\n  height: 100%;\\n  background-color: #f5f7ff;\\n}\\n.summary-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\\n}\\n.summary-card[_ngcontent-%COMP%]   .card-value[_ngcontent-%COMP%] {\\n  font-size: 2.5rem;\\n  font-weight: 700;\\n}\\n\\n.total-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #3949ab;\\n}\\n\\n.in-progress-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #3f51b5;\\n}\\n\\n.completed-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #4caf50;\\n}\\n\\n.blocked-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #f44336;\\n}\\n\\n\\n.status-card[_ngcontent-%COMP%] {\\n  transition: all 0.3s ease;\\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  background-color: #f5f7ff;\\n}\\n.status-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\\n}\\n.status-card[_ngcontent-%COMP%]   .status-count[_ngcontent-%COMP%] {\\n  font-size: 2.5rem;\\n  font-weight: bold;\\n  color: #3949ab;\\n}\\n.status-card[_ngcontent-%COMP%]   .status-title[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  color: #2c3e50;\\n}\\n\\n\\n.chat-messages[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 250px;\\n  overflow-y: auto;\\n  background-color: #f5f7ff;\\n  border-radius: 8px;\\n  padding: 10px;\\n}\\n\\n.message[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n  max-width: 85%;\\n  padding: 8px 12px;\\n  border-radius: 12px;\\n  position: relative;\\n}\\n\\n.user-message[_ngcontent-%COMP%] {\\n  align-self: flex-end;\\n  background-color: #3949ab;\\n  color: white;\\n  margin-left: auto;\\n  border-bottom-right-radius: 2px;\\n}\\n.user-message[_ngcontent-%COMP%]   .message-time[_ngcontent-%COMP%] {\\n  text-align: right;\\n  color: rgba(255, 255, 255, 0.7) !important;\\n}\\n\\n.assistant-message[_ngcontent-%COMP%] {\\n  align-self: flex-start;\\n  background-color: #e8eaf6;\\n  color: #333;\\n  margin-right: auto;\\n  border-bottom-left-radius: 2px;\\n}\\n\\n.message-content[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.message-text[_ngcontent-%COMP%] {\\n  margin-bottom: 4px;\\n}\\n\\n\\n.activity-list[_ngcontent-%COMP%] {\\n  max-height: 400px;\\n  overflow-y: auto;\\n  background-color: #f5f7ff;\\n  border-radius: 8px;\\n  padding: 10px;\\n}\\n\\n.activity-title[_ngcontent-%COMP%] {\\n  font-weight: 500;\\n  color: #3949ab;\\n}\\n\\n.activity-details[_ngcontent-%COMP%] {\\n  font-size: 0.9rem;\\n  color: #666;\\n}\\n\\n.activity-meta[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  margin-left: 15px;\\n  color: #9fa8da;\\n}\\n\\n\\n.color-box[_ngcontent-%COMP%] {\\n  width: 16px;\\n  height: 16px;\\n  display: inline-block;\\n  border-radius: 3px;\\n}\\n\\n\\n.assignee-row[_ngcontent-%COMP%] {\\n  padding: 12px;\\n  border-radius: 6px;\\n  background-color: #e8eaf6;\\n  transition: all 0.2s ease;\\n  margin-bottom: 8px;\\n}\\n.assignee-row[_ngcontent-%COMP%]:hover {\\n  background-color: #d1d9ff;\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\\n}\\n\\n.status-badge[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  padding: 4px 8px;\\n  border-radius: 4px;\\n  font-size: 0.8rem;\\n  font-weight: 500;\\n}\\n\\n.status-legend-item[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  padding: 5px 10px;\\n  border-radius: 4px;\\n  background-color: #e8eaf6;\\n}\\n\\n\\n.task-state-card[_ngcontent-%COMP%] {\\n  border: none;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  transition: all 0.3s ease;\\n  overflow: hidden;\\n  min-height: 120px; \\n  \\n}\\n.task-state-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\\n}\\n.task-state-card[_ngcontent-%COMP%]   .card-body[_ngcontent-%COMP%] {\\n  padding: 1.25rem 1rem;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100%;\\n}\\n.task-state-card[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\\n  font-size: 3rem;\\n  font-weight: 700;\\n  line-height: 1;\\n  margin-bottom: 0.5rem;\\n}\\n.task-state-card[_ngcontent-%COMP%]   .status-label[_ngcontent-%COMP%] {\\n  font-size: 0.8rem;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  max-width: 100%;\\n}\\n.task-state-card[_ngcontent-%COMP%]   .text-2xl[_ngcontent-%COMP%], .task-state-card[_ngcontent-%COMP%]   .text-lg[_ngcontent-%COMP%] {\\n  color: white !important;\\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\\n}\\n\\n\\n.status-active[_ngcontent-%COMP%] {\\n  background-color: #3949ab !important; \\n  box-shadow: 0 4px 6px rgba(57, 73, 171, 0.5);\\n}\\n.status-active[_ngcontent-%COMP%]:hover {\\n  box-shadow: 0 6px 10px rgba(57, 73, 171, 0.7);\\n}\\n\\n.status-code-review[_ngcontent-%COMP%] {\\n  background-color: #00897b !important; \\n  box-shadow: 0 4px 6px rgba(0, 137, 123, 0.5);\\n}\\n.status-code-review[_ngcontent-%COMP%]:hover {\\n  box-shadow: 0 6px 10px rgba(0, 137, 123, 0.7);\\n}\\n\\n\\n.task-type-card[_ngcontent-%COMP%] {\\n  border: 1px solid #c5cae9;\\n  border-left-width: 5px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  transition: all 0.3s ease;\\n  background-color: #f5f7ff;\\n  overflow: hidden;\\n}\\n.task-type-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\\n}\\n.task-type-card[_ngcontent-%COMP%]   .card-title[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n  font-weight: 600;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  color: #3949ab;\\n}\\n.task-type-card[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%] {\\n  font-size: 0.9rem;\\n  font-weight: 500;\\n  padding: 0.35rem 0.7rem;\\n}\\n.task-type-card[_ngcontent-%COMP%]   .progress[_ngcontent-%COMP%] {\\n  height: 6px;\\n  background-color: #e8eaf6;\\n}\\n\\n.btn-primary[_ngcontent-%COMP%] {\\n  background-color: #3949ab;\\n  border-color: #3949ab;\\n}\\n.btn-primary[_ngcontent-%COMP%]:hover, .btn-primary[_ngcontent-%COMP%]:focus {\\n  background-color: #303f9f;\\n  border-color: #303f9f;\\n}\\n.btn-primary.btn-sm[_ngcontent-%COMP%] {\\n  padding: 0.25rem 0.5rem;\\n  font-size: 0.875rem;\\n  line-height: 1.5;\\n  border-radius: 0.2rem;\\n  transition: all 0.2s ease;\\n}\\n.btn-primary.btn-sm[_ngcontent-%COMP%]:hover {\\n  background-color: #303f9f;\\n  transform: translateY(-1px);\\n}\\n.btn-primary.btn-sm[_ngcontent-%COMP%]:active {\\n  transform: translateY(0);\\n}\\n.btn-primary.btn-sm[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\\n  margin-right: 4px;\\n}\\n\\n\\n.text-lg[_ngcontent-%COMP%]:contains(\\\"Dev   In[_ngcontent-%COMP%]   progress\\\")[_ngcontent-%COMP%] {\\n  color: #ffffff !important;\\n}\\n\\n\\n.card-body[_ngcontent-%COMP%]:has(.text-lg:contains(\\\"Dev   In[_ngcontent-%COMP%]   progress\\\"))[_ngcontent-%COMP%] {\\n  background-color: #d81b60 !important;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["of","catchError","finalize","map","i0","DashboardComponent","decodeIterationPath","path","decoded","replace","constructor","dashboardService","azureDevOpsService","http","sprint","summary","activity","tip","distribution","stateDistribution","longTermDevNew","supportItems","aiTips","taskStatusBoard","totalTasks","devNew","inProgress","codeReview","devComplete","completed","blocked","ngOnInit","loadDashboardData","ngAfterViewInit","loadSprintOverview","loadAiTips","loadingTaskDetails","taskDetailsError","loadTaskStatusBoard","loadIterationData","selectedIterationPath","trim","loading","error","console","log","getSprintDetailsByIterationPath","subscribe","next","data","iterationPath","sprintName","sprintOverview","err","loadAzureDevOpsWorkItemsWithWiql","loadSprintSummary","availableIterationPaths","includes","push","getCurrentSprint","loadActivityFeed","loadWorkItemDistribution","loadStateDistributions","getSprintSummary","sprintSummary","getActivityFeed","activityFeed","loadDailyTip","getDailyTip","dailyTip","getWorkItemDistribution","workItemDistribution","setTimeout","initializeWorkItemDistributionChart","getStateDistribution","stateDistributions","initializeStateDistributionsChart","loadLongTermDevNewItems","getLongTermDevNewItems","longTermDevNewItems","loadSupportItems","getSupportItems","getAiTips","stateDistributionChartRef","nativeElement","ctx","getContext","labels","states","s","state","count","colors","stateColors","getRandomColor","window","Chart","chart","destroy","type","datasets","backgroundColor","borderWidth","options","responsive","plugins","legend","position","title","display","text","length","iterationDistributionChartRef","iterationLabels","d","allStates","Set","forEach","dist","add","Array","from","stateName","stateColor","label","stateData","find","scales","x","stacked","y","beginAtZero","changeIterationPath","getStateColor","randomIndex","Math","floor","random","defaultChartColors","reload","expectedStatuses","typeColors","encodedPath","encodeURIComponent","url","get","pipe","workItems","statusGroups","reduce","acc","item","status","typeGroups","statusItems","Object","keys","color","statusColors","tasksByType","sort","a","b","indexA","indexOf","indexB","localeCompare","tasksByStatus","createDummyTaskBoard","initializeStatusPieChart","statusPieChartRef","statusData","workItemCounts","filteredStatuses","filter","tooltip","callbacks","context","value","raw","total","dataset","Number","percentage","round","getStatusColor","sendChatMessage","currentMessage","userMessage","role","content","timestamp","Date","chatMessages","message","currentIterationPath","response","pop","assistantMessage","fallbackMessage","loadingAzureDevOps","azureDevOpsError","getWorkItemsByWiql","dashboardStats","azureDevOpsWorkItems","statsByAssignee","assigneeDistribution","updateSummaryWithAzureDevOpsCounts","loadAzureDevOpsWorkItems","getWorkItemStatusCounts","getWorkItemsByIteration","getWorkItemCounts","counts","isArray","completionPercentage","calculateCompletionPercentage","updateTaskStatusBoardWithAzureDevOpsCounts","stateGroups","getAssigneeDistribution","assignee","name","getTotalWorkItems","selectors","viewQuery"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\dashboard\\dashboard.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\dashboard\\dashboard.component.html"],"sourcesContent":["import { Component, OnInit, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { DashboardService } from '../../services/dashboard.service';\nimport { AzureDevOpsService } from '../../services/azure-devops.service';\nimport { \n  SprintOverview, \n  SprintSummary, \n  ActivityFeed, \n  WorkItemDistribution, \n  LongTermDevNewItem, \n  SupportItem,\n  AiDashboardTip,\n  StateCount,\n  TaskStatusBoard,\n  TaskStatusItem,\n  ChatMessage\n} from '../../models/sprint.model';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, finalize, map } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\n\ndeclare global {\n  interface Window {\n    Chart: any;\n  }\n}\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit, AfterViewInit {\n  @ViewChild('stateDistributionChart') stateDistributionChartRef!: ElementRef;\n  @ViewChild('iterationDistributionChart') iterationDistributionChartRef!: ElementRef;\n  @ViewChild('statusPieChart') statusPieChartRef!: ElementRef;\n  \n  sprintOverview: SprintOverview | null = null;\n  sprintSummary: SprintSummary | null = null;\n  activityFeed: ActivityFeed | null = null;\n  dailyTip: string = '';\n  workItemDistribution: WorkItemDistribution | null = null;\n  stateDistributions: WorkItemDistribution[] = [];\n  longTermDevNewItems: LongTermDevNewItem[] = [];\n  supportItems: SupportItem[] = [];\n  aiTips: AiDashboardTip | null = null;\n  \n  // Define state colors for consistency\n  stateColors: Record<string, string> = {\n    'Proposed': '#e6e6e6',\n    'New': '#b4d7a8',\n    'Dev-New': '#b4d7a8',\n    'Active': '#4a86e8',\n    'Dev-WIP': '#4a86e8',\n    'In Progress': '#4a86e8',\n    'Resolved': '#ffd966',\n    'Code Review': '#9fc5e8',\n    'QA': '#d5a6bd',\n    'Testing': '#d5a6bd',\n    'Done': '#93c47d',\n    'Closed': '#6aa84f',\n    'Completed': '#6aa84f',\n    'Blocked': '#e06666',\n    'Removed': '#999999'\n  };\n  \n  // Default chart colors if state not found in mapping\n  defaultChartColors = [\n    '#4a86e8', '#6aa84f', '#ffd966', '#e06666', '#9fc5e8', \n    '#d5a6bd', '#b4d7a8', '#e6e6e6', '#93c47d', '#6fa8dc'\n  ];\n  \n  // Properties for the new task board\n  taskStatusBoard: TaskStatusItem[] = [];\n  \n  // Properties for task details\n  loadingTaskDetails = false;\n  taskDetailsError = '';\n  tasksByStatus: { status: string; count: number; color: string }[] = [];\n  \n  // Chat properties\n  chatMessages: ChatMessage[] = [];\n  currentMessage: string = '';\n  \n  // Define status colors based on Azure DevOps board from the image\n  statusColors: Record<string, string> = {\n    'PMG - Proposed': '#e0e0e0',\n    'DEV - Yet to Start': '#9a9a9a',\n    'DEV - WIP': '#0078d4',\n    'DEV - Code Review': '#324e93',\n    'DEV - Done': '#00b7c3',\n    'DEV/QC - Reopened': '#e81123',\n    'Clarifications': '#fff100',\n    'On Hold': '#e3008c',\n    'QC - In Test Bed': '#8764b8',\n    'Completed': '#107c10'\n  };\n  \n  // Track loading and error states\n  loading = {\n    sprint: true,\n    summary: true,\n    activity: true,\n    tip: true,\n    distribution: true,\n    stateDistribution: true,\n    longTermDevNew: true,\n    supportItems: true,\n    aiTips: true,\n    taskStatusBoard: true\n  };\n  \n  error = {\n    sprint: '',\n    summary: '',\n    activity: '',\n    tip: '',\n    distribution: '',\n    stateDistribution: '',\n    longTermDevNew: '',\n    supportItems: '',\n    aiTips: '',\n    taskStatusBoard: ''\n  };\n\n  // Starting with a default Iteration Path that can be changed\n  selectedIterationPath: string = 'Techoil\\\\2.3.23';\n  availableIterationPaths: string[] = ['Techoil\\\\2.3.23'];\n\n  // Work item status counts from Azure DevOps\n  azureDevOpsWorkItems: any[] = [];\n  workItemCounts = {\n    totalTasks: 0,\n    devNew: 0,\n    inProgress: 0,\n    codeReview: 0,\n    devComplete: 0,\n    completed: 0,\n    blocked: 0\n  };\n  \n  // Assignee distribution data\n  assigneeDistribution: any = {};\n  \n  // Loading and error states\n  loadingAzureDevOps = false;\n  azureDevOpsError = '';\n\n  // Stats grouping for types and statuses\n  tasksByType: { type: string; count: number; color: string }[] = [];\n\n  // Method to decode iteration path for display\n  decodeIterationPath(path: string): string {\n    if (!path) return '';\n    // Replace the encoded backslash with an actual backslash\n    // Handle both double-encoded (%255C) and single-encoded (%5C) backslashes\n    let decoded = path.replace(/%255C/g, '\\\\');\n    decoded = decoded.replace(/%5C/g, '\\\\');\n    decoded = decoded.replace(/%5c/g, '\\\\');\n    return decoded;\n  }\n\n  constructor(\n    private dashboardService: DashboardService,\n    private azureDevOpsService: AzureDevOpsService,\n    private http: HttpClient\n  ) { }\n\n  ngOnInit(): void {\n    this.loadDashboardData();\n  }\n\n  ngAfterViewInit(): void {\n    // Charts will be initialized after data is loaded\n  }\n\n  loadDashboardData(): void {\n    this.loadSprintOverview();\n    this.loadAiTips();\n    \n    // Load Azure DevOps data for the initial iteration path\n    this.loadingTaskDetails = true;\n    this.taskDetailsError = '';\n    this.loadTaskStatusBoard();\n  }\n\n  loadIterationData(): void {\n    // Validate iteration path\n    if (!this.selectedIterationPath) {\n      return;\n    }\n    \n    // Trim whitespace and ensure consistent formatting\n    this.selectedIterationPath = this.selectedIterationPath.trim();\n    \n    // Reset loading and error states\n    this.loading.sprint = true;\n    this.error.sprint = '';\n    this.loadingTaskDetails = true;\n    this.taskDetailsError = '';\n    \n    console.log(`Loading data for iteration path: ${this.selectedIterationPath}`);\n    \n    // Load sprint details for the selected iteration path\n    this.dashboardService.getSprintDetailsByIterationPath(this.selectedIterationPath)\n      .subscribe({\n        next: (data) => {\n          console.log('Sprint details loaded:', data);\n          // Ensure proper display by decoding the iteration path\n          if (data.iterationPath) {\n            data.sprintName = this.decodeIterationPath(data.sprintName);\n          }\n          this.sprintOverview = data;\n          this.loading.sprint = false;\n        },\n        error: (err) => {\n          this.error.sprint = 'Failed to load sprint details';\n          this.loading.sprint = false;\n          console.error('Error loading sprint details:', err);\n        }\n      });\n    \n    // Load Azure DevOps work items directly first to get live data\n    this.loadAzureDevOpsWorkItemsWithWiql();\n    \n    // Load other dashboard data\n    this.loadSprintSummary(this.selectedIterationPath);\n    this.loadTaskStatusBoard();\n    \n    // Update available paths if this is a new one\n    if (!this.availableIterationPaths.includes(this.selectedIterationPath)) {\n      this.availableIterationPaths.push(this.selectedIterationPath);\n    }\n  }\n\n  loadSprintOverview(): void {\n    this.loading.sprint = true;\n    this.dashboardService.getCurrentSprint().subscribe({\n      next: (data) => {\n        this.sprintOverview = data;\n        // Use hard-coded iteration path instead of data.iterationPath\n        // this.selectedIterationPath = data.iterationPath;\n        this.loading.sprint = false;\n        this.loadSprintSummary(this.selectedIterationPath);\n        this.loadActivityFeed();\n        this.loadWorkItemDistribution(this.selectedIterationPath);\n        this.loadStateDistributions();\n      },\n      error: (err) => {\n        this.error.sprint = 'Failed to load sprint data';\n        this.loading.sprint = false;\n        console.error('Error loading sprint data:', err);\n      }\n    });\n  }\n\n  loadSprintSummary(iterationPath: string): void {\n    this.loading.summary = true;\n    this.dashboardService.getSprintSummary(iterationPath).subscribe({\n      next: (data) => {\n        this.sprintSummary = data;\n        this.loading.summary = false;\n      },\n      error: (err) => {\n        this.error.summary = 'Failed to load summary data';\n        this.loading.summary = false;\n        console.error('Error loading summary data:', err);\n      }\n    });\n  }\n\n  loadActivityFeed(): void {\n    this.loading.activity = true;\n    this.dashboardService.getActivityFeed().subscribe({\n      next: (data) => {\n        this.activityFeed = data;\n        this.loading.activity = false;\n      },\n      error: (err) => {\n        this.error.activity = 'Failed to load activity feed';\n        this.loading.activity = false;\n        console.error('Error loading activity feed:', err);\n      }\n    });\n  }\n\n  loadDailyTip(): void {\n    this.loading.tip = true;\n    this.dashboardService.getDailyTip().subscribe({\n      next: (data) => {\n        this.dailyTip = data.tip;\n        this.loading.tip = false;\n      },\n      error: (err) => {\n        this.error.tip = 'Failed to load daily tip';\n        this.loading.tip = false;\n        console.error('Error loading daily tip:', err);\n      }\n    });\n  }\n  \n  loadWorkItemDistribution(iterationPath?: string): void {\n    this.loading.distribution = true;\n    this.dashboardService.getWorkItemDistribution(iterationPath).subscribe({\n      next: (data) => {\n        this.workItemDistribution = data;\n        this.loading.distribution = false;\n        \n        // Initialize distribution chart after data is loaded\n        setTimeout(() => {\n          this.initializeWorkItemDistributionChart();\n        }, 100);\n      },\n      error: (err) => {\n        this.error.distribution = 'Failed to load work item distribution';\n        this.loading.distribution = false;\n        console.error('Error loading work item distribution:', err);\n      }\n    });\n  }\n  \n  loadStateDistributions(): void {\n    this.loading.stateDistribution = true;\n    this.dashboardService.getStateDistribution(this.selectedIterationPath).subscribe({\n      next: (data) => {\n        this.stateDistributions = data;\n        // Keep hard-coded iteration paths instead of dynamically loading them\n        // this.availableIterationPaths = data.map(d => d.iterationPath);\n        this.loading.stateDistribution = false;\n        \n        // Initialize state distribution chart after data is loaded\n        setTimeout(() => {\n          this.initializeStateDistributionsChart();\n        }, 100);\n      },\n      error: (err) => {\n        this.error.stateDistribution = 'Failed to load state distributions';\n        this.loading.stateDistribution = false;\n        console.error('Error loading state distributions:', err);\n      }\n    });\n  }\n  \n  loadLongTermDevNewItems(): void {\n    this.loading.longTermDevNew = true;\n    this.dashboardService.getLongTermDevNewItems(5).subscribe({\n      next: (data) => {\n        this.longTermDevNewItems = data;\n        this.loading.longTermDevNew = false;\n      },\n      error: (err) => {\n        this.error.longTermDevNew = 'Failed to load long-term Dev-New items';\n        this.loading.longTermDevNew = false;\n        console.error('Error loading long-term Dev-New items:', err);\n      }\n    });\n  }\n  \n  loadSupportItems(): void {\n    this.loading.supportItems = true;\n    this.dashboardService.getSupportItems(6).subscribe({\n      next: (data) => {\n        this.supportItems = data;\n        this.loading.supportItems = false;\n      },\n      error: (err) => {\n        this.error.supportItems = 'Failed to load support items';\n        this.loading.supportItems = false;\n        console.error('Error loading support items:', err);\n      }\n    });\n  }\n  \n  loadAiTips(): void {\n    this.loading.aiTips = true;\n    this.dashboardService.getAiTips().subscribe({\n      next: (data) => {\n        this.aiTips = data;\n        this.longTermDevNewItems = data.longTermDevNewItems;\n        this.supportItems = data.supportItems;\n        this.dailyTip = data.tip;\n        this.loading.aiTips = false;\n      },\n      error: (err) => {\n        this.error.aiTips = 'Failed to load AI tips';\n        this.loading.aiTips = false;\n        console.error('Error loading AI tips:', err);\n        // Fall back to individual methods\n        this.loadDailyTip();\n        this.loadLongTermDevNewItems();\n        this.loadSupportItems();\n      }\n    });\n  }\n  \n  initializeWorkItemDistributionChart(): void {\n    if (!this.workItemDistribution || !this.stateDistributionChartRef?.nativeElement) {\n      return;\n    }\n    \n    // Get canvas element\n    const ctx = this.stateDistributionChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    \n    const labels = this.workItemDistribution.states.map(s => s.state);\n    const data = this.workItemDistribution.states.map(s => s.count);\n    const colors = this.workItemDistribution.states.map(s => \n      this.stateColors[s.state] || this.getRandomColor()\n    );\n    \n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    \n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            backgroundColor: colors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n            },\n            title: {\n              display: true,\n              text: `Work Item States - ${this.workItemDistribution.iterationPath}`\n            }\n          }\n        }\n      });\n    }\n  }\n  \n  initializeStateDistributionsChart(): void {\n    if (this.stateDistributions.length === 0 || !this.iterationDistributionChartRef?.nativeElement) {\n      return;\n    }\n    \n    // Get canvas element\n    const ctx = this.iterationDistributionChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    \n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    \n    // Prepare data for stacked bar chart\n    const iterationLabels = this.stateDistributions.map(d => d.iterationPath);\n    \n    // Find all unique states across all iterations\n    const allStates = new Set<string>();\n    this.stateDistributions.forEach(dist => {\n      dist.states.forEach(state => {\n        allStates.add(state.state);\n      });\n    });\n    \n    // Create datasets, one for each state\n    const datasets = Array.from(allStates).map(stateName => {\n      // Find color for this state\n      const stateColor = this.stateColors[stateName] || this.getRandomColor();\n      \n      // Create dataset for this state across all iterations\n      return {\n        label: stateName,\n        data: this.stateDistributions.map(dist => {\n          const stateData = dist.states.find(s => s.state === stateName);\n          return stateData ? stateData.count : 0;\n        }),\n        backgroundColor: stateColor\n      };\n    });\n    \n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: iterationLabels,\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              stacked: true,\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'right',\n            },\n            title: {\n              display: true,\n              text: 'Work Item Distribution by Iteration'\n            }\n          }\n        }\n      });\n    }\n  }\n  \n  changeIterationPath(iterationPath: string): void {\n    // Even with hardcoded path, keep the method in case it's called from elsewhere\n    if (iterationPath !== this.selectedIterationPath) {\n      this.selectedIterationPath = iterationPath;\n      this.loadWorkItemDistribution(iterationPath);\n      this.loadSprintSummary(iterationPath);\n    }\n  }\n  \n  getStateColor(state: string): string {\n    return this.stateColors[state] || this.getRandomColor();\n  }\n  \n  getRandomColor(): string {\n    const randomIndex = Math.floor(Math.random() * this.defaultChartColors.length);\n    return this.defaultChartColors[randomIndex];\n  }\n\n  reload(): void {\n    this.loadDashboardData();\n  }\n\n  loadTaskStatusBoard(): void {\n    this.loading.taskStatusBoard = true;\n    this.error.taskStatusBoard = '';\n    this.loadingTaskDetails = true;\n    this.taskDetailsError = '';\n    \n    // Define the expected status order to match the image\n    const expectedStatuses = [\n      'PMG - Proposed',\n      'DEV - Yet to Start', \n      'DEV - WIP', \n      'DEV - Code Review', \n      'DEV - Done',\n      'DEV/QC - Reopened'\n    ];\n    \n    // Type colors for visualization\n    const typeColors: {[key: string]: string} = {\n      'Bug': '#e74c3c',\n      'Requirement': '#3498db',\n      'Change Request': '#2ecc71',\n      'Task': '#f39c12',\n      'Epic': '#9b59b6',\n      'User Story': '#1abc9c'\n    };\n    \n    // Use the direct API endpoint as specified\n    const encodedPath = encodeURIComponent(this.selectedIterationPath).replace(/%5C/g, '%255C');\n    const url = `http://localhost:5000/api/tasks?iterationPath=${encodedPath}`;\n    \n    this.http.get<any[]>(url)\n      .pipe(\n        finalize(() => {\n          this.loading.taskStatusBoard = false;\n          this.loadingTaskDetails = false;\n        })\n      )\n      .subscribe({\n        next: (workItems) => {\n          if (workItems && workItems.length > 0) {\n            // Group by status\n            const statusGroups: {[key: string]: any[]} = workItems.reduce((acc: {[key: string]: any[]}, item) => {\n              const status = item.status || 'Unknown';\n              if (!acc[status]) {\n                acc[status] = [];\n              }\n              acc[status].push(item);\n              return acc;\n            }, {});\n            \n            // Group by type\n            const typeGroups: {[key: string]: any[]} = workItems.reduce((acc: {[key: string]: any[]}, item) => {\n              const type = item.type || 'Unknown';\n              if (!acc[type]) {\n                acc[type] = [];\n              }\n              acc[type].push(item);\n              return acc;\n            }, {});\n            \n            // Create status items\n            let statusItems = Object.keys(statusGroups).map(status => ({\n              status: status,\n              count: statusGroups[status].length,\n              color: this.statusColors[status] || this.getStateColor(status)\n            }));\n            \n            // Create type items\n            this.tasksByType = Object.keys(typeGroups).map(type => ({\n              type: type,\n              count: typeGroups[type].length,\n              color: typeColors[type] || this.getRandomColor()\n            })).sort((a, b) => b.count - a.count);\n            \n            // Sort statuses based on expected status order\n            statusItems = statusItems.sort((a, b) => {\n              const indexA = expectedStatuses.indexOf(a.status);\n              const indexB = expectedStatuses.indexOf(b.status);\n              \n              // If both are in expectedStatuses, sort by that order\n              if (indexA !== -1 && indexB !== -1) {\n                return indexA - indexB;\n              }\n              \n              // If only one is in expectedStatuses, prioritize it\n              if (indexA !== -1) return -1;\n              if (indexB !== -1) return 1;\n              \n              // For any other statuses, sort alphabetically\n              return a.status.localeCompare(b.status);\n            });\n            \n            // Update the task status board\n            this.taskStatusBoard = statusItems;\n            \n            // Also update tasksByStatus for compatibility with older code\n            this.tasksByStatus = [...this.taskStatusBoard];\n            \n            console.log('Task counts by type:', this.tasksByType);\n            console.log('Task counts by status:', this.taskStatusBoard);\n          } else {\n            this.error.taskStatusBoard = 'No tasks found for this iteration';\n            this.taskDetailsError = 'No tasks found for this iteration';\n            \n            // Create dummy data as a last resort\n            this.createDummyTaskBoard();\n          }\n        },\n        error: (err) => {\n          console.error('Error loading task board data:', err);\n          this.error.taskStatusBoard = 'Failed to load task board data';\n          this.taskDetailsError = 'Failed to load task data';\n          \n          // Fallback to dummy data\n          this.createDummyTaskBoard();\n        }\n      });\n  }\n  \n  createDummyTaskBoard(): void {\n    // Create dummy data to match the image\n    this.taskStatusBoard = [\n      { status: 'PMG - Proposed', count: 0, color: '#e0e0e0' },\n      { status: 'DEV - Yet to Start', count: 2, color: '#9a9a9a' },\n      { status: 'DEV - WIP', count: 4, color: '#0078d4' },\n      { status: 'DEV - Code Review', count: 2, color: '#324e93' },\n      { status: 'DEV - Done', count: 5, color: '#00b7c3' },\n      { status: 'DEV/QC - Reopened', count: 1, color: '#e81123' }\n    ];\n    \n    // Create dummy data for types\n    this.tasksByType = [\n      { type: 'Bug', count: 8, color: '#e74c3c' },\n      { type: 'Requirement', count: 6, color: '#3498db' },\n      { type: 'Change Request', count: 3, color: '#2ecc71' },\n      { type: 'Task', count: 5, color: '#f39c12' }\n    ];\n    \n    // Also update tasksByStatus for compatibility\n    this.tasksByStatus = [...this.taskStatusBoard];\n    \n    // Clear any loading and error states\n    this.loadingTaskDetails = false;\n    this.taskDetailsError = '';\n  }\n  \n  initializeStatusPieChart(): void {\n    if (!this.statusPieChartRef?.nativeElement) {\n      return;\n    }\n    \n    // Get canvas element\n    const ctx = this.statusPieChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    \n    // Setup data for pie chart from work item counts\n    const statusData = [\n      { status: 'Dev-New', count: this.workItemCounts.devNew, color: '#00a8e8' },\n      { status: 'In Progress', count: this.workItemCounts.inProgress, color: '#0078d4' },\n      { status: 'Code Review', count: this.workItemCounts.codeReview, color: '#8764b8' },\n      { status: 'Dev Complete', count: this.workItemCounts.devComplete, color: '#107c10' },\n      { status: 'Completed', count: this.workItemCounts.completed, color: '#00b7c3' },\n      { status: 'Blocked', count: this.workItemCounts.blocked, color: '#e81123' }\n    ];\n    \n    // Filter out states with 0 count for better visualization\n    const filteredStatuses = statusData.filter(item => item.count > 0);\n    \n    const labels = filteredStatuses.map(s => s.status);\n    const data = filteredStatuses.map(s => s.count);\n    const colors = filteredStatuses.map(s => s.color);\n    \n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    \n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            backgroundColor: colors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n              display: true\n            },\n            title: {\n              display: true,\n              text: 'Work Item States Distribution'\n            },\n            tooltip: {\n              callbacks: {\n                label: function(context: any) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  const total = context.dataset.data.reduce((a: number, b: number) => Number(a) + Number(b), 0);\n                  const percentage = Math.round((value / total) * 100);\n                  return `${label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  \n  getStatusColor(status: string): string {\n    return this.statusColors[status] || '#9a9a9a'; // Default gray color\n  }\n  \n  // Chat methods\n  sendChatMessage(): void {\n    if (!this.currentMessage.trim()) return;\n    \n    // Add user message\n    const userMessage: ChatMessage = {\n      role: 'user',\n      content: this.currentMessage.trim(),\n      timestamp: new Date()\n    };\n    this.chatMessages.push(userMessage);\n    \n    // Store message and clear input\n    const message = this.currentMessage;\n    this.currentMessage = '';\n    \n    // Show loading indicator\n    this.chatMessages.push({\n      role: 'assistant',\n      content: 'Thinking...',\n      timestamp: new Date()\n    });\n    \n    // Call API to get response\n    this.dashboardService.sendChatMessage({\n      message: message,\n      currentIterationPath: this.selectedIterationPath\n    }).subscribe({\n      next: (response) => {\n        // Remove the loading indicator\n        this.chatMessages.pop();\n        \n        // Add the actual response\n        const assistantMessage: ChatMessage = {\n          role: 'assistant',\n          content: response.message,\n          timestamp: new Date()\n        };\n        this.chatMessages.push(assistantMessage);\n      },\n      error: (err) => {\n        // Remove the loading indicator\n        this.chatMessages.pop();\n        \n        console.error('Error getting chat response:', err);\n        // Add fallback response\n        const fallbackMessage: ChatMessage = {\n          role: 'assistant',\n          content: 'Sorry, I encountered an error processing your request. Please try again later.',\n          timestamp: new Date()\n        };\n        this.chatMessages.push(fallbackMessage);\n      }\n    });\n  }\n\n  /**\n   * Load work items from Azure DevOps for the selected iteration using WIQL API\n   */\n  loadAzureDevOpsWorkItemsWithWiql(): void {\n    this.loadingAzureDevOps = true;\n    this.azureDevOpsError = '';\n    \n    this.azureDevOpsService.getWorkItemsByWiql(this.selectedIterationPath)\n      .pipe(\n        finalize(() => {\n          this.loadingAzureDevOps = false;\n        })\n      )\n      .subscribe({\n        next: (dashboardStats) => {\n          // Store the work item counts\n          this.workItemCounts = {\n            totalTasks: dashboardStats.totalTasks,\n            devNew: dashboardStats.devNew,\n            inProgress: dashboardStats.inProgress,\n            codeReview: dashboardStats.codeReview,\n            devComplete: dashboardStats.devComplete,\n            completed: dashboardStats.completed,\n            blocked: dashboardStats.blocked\n          };\n          \n          // Store the work items if available\n          if (dashboardStats.workItems) {\n            this.azureDevOpsWorkItems = dashboardStats.workItems;\n          }\n          \n          // Store assignee distribution data\n          if (dashboardStats.statsByAssignee) {\n            this.assigneeDistribution = dashboardStats.statsByAssignee;\n          }\n          \n          // Update the summary data with the Azure DevOps counts\n          this.updateSummaryWithAzureDevOpsCounts();\n          \n          // Update pie chart\n          setTimeout(() => {\n            this.initializeStatusPieChart();\n          }, 100);\n        },\n        error: (error) => {\n          console.error('Error loading Azure DevOps work items with WIQL:', error);\n          this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\n          \n          // Fall back to the legacy method if WIQL fails\n          this.loadAzureDevOpsWorkItems();\n        }\n      });\n  }\n  \n  /**\n   * Load work items from Azure DevOps for the selected iteration\n   */\n  loadAzureDevOpsWorkItems(): void {\n    this.loadingAzureDevOps = true;\n    this.azureDevOpsError = '';\n    \n    // First try to get the status counts directly from the backend proxy\n    this.azureDevOpsService.getWorkItemStatusCounts(this.selectedIterationPath)\n      .pipe(\n        catchError(error => {\n          console.error('Error loading status counts, falling back to work items:', error);\n          // Fall back to getting work items and counting them\n          return this.azureDevOpsService.getWorkItemsByIteration(this.selectedIterationPath)\n            .pipe(\n              map(workItems => {\n                // Process the work items to get counts\n                return this.azureDevOpsService.getWorkItemCounts(workItems);\n              }),\n              catchError(err => {\n                this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\n                console.error('Error loading Azure DevOps work items:', err);\n                return of({\n                  totalTasks: 0,\n                  devNew: 0,\n                  inProgress: 0,\n                  codeReview: 0,\n                  devComplete: 0,\n                  completed: 0,\n                  blocked: 0\n                });\n              })\n            );\n        }),\n        finalize(() => {\n          this.loadingAzureDevOps = false;\n        })\n      )\n      .subscribe(counts => {\n        // Store the counts\n        this.workItemCounts = counts;\n        \n        // Also store the work items if available\n        if (Array.isArray(counts.workItems)) {\n          this.azureDevOpsWorkItems = counts.workItems;\n        }\n        \n        // Update the summary data with the Azure DevOps counts\n        this.updateSummaryWithAzureDevOpsCounts();\n      });\n  }\n  \n  /**\n   * Update summary data with the counts from Azure DevOps\n   */\n  updateSummaryWithAzureDevOpsCounts(): void {\n    console.log('Updating summary with Azure DevOps counts:', this.workItemCounts);\n    \n    // Always create a new summary object with the latest counts to ensure reactivity\n    this.sprintSummary = {\n      totalTasks: this.workItemCounts.totalTasks || 0,\n      inProgress: this.workItemCounts.inProgress || 0,\n      completed: this.workItemCounts.completed || 0,\n      blocked: this.workItemCounts.blocked || 0,\n      completionPercentage: this.calculateCompletionPercentage()\n    };\n    \n    // Also update task status board with Azure DevOps data\n    this.updateTaskStatusBoardWithAzureDevOpsCounts();\n    \n    // Create tasksByStatus data for the pie chart\n    if (this.azureDevOpsWorkItems && this.azureDevOpsWorkItems.length > 0) {\n      // Group work items by state\n      const stateGroups = this.azureDevOpsWorkItems.reduce((acc, item) => {\n        const state = item.state || 'Unknown';\n        if (!acc[state]) {\n          acc[state] = [];\n        }\n        acc[state].push(item);\n        return acc;\n      }, {});\n      \n      // Convert to tasksByStatus format\n      this.tasksByStatus = Object.keys(stateGroups).map(state => ({\n        status: state,\n        count: stateGroups[state].length,\n        color: this.getStatusColor(state)\n      })).sort((a, b) => b.count - a.count);\n      \n      // Also update taskStatusBoard for compatibility\n      this.taskStatusBoard = [...this.tasksByStatus];\n    }\n  }\n  \n  /**\n   * Calculate completion percentage based on work item counts\n   */\n  calculateCompletionPercentage(): number {\n    const total = this.workItemCounts.totalTasks;\n    if (total === 0) return 0;\n    \n    const completed = this.workItemCounts.completed;\n    return Math.round((completed / total) * 100);\n  }\n  \n  /**\n   * Update task status board with counts from Azure DevOps\n   * This method is now only used for compatibility with other parts of the code\n   */\n  updateTaskStatusBoardWithAzureDevOpsCounts(): void {\n    // Update task status board with the latest data\n    this.loadTaskStatusBoard();\n  }\n  \n  /**\n   * Get assignee data as an array for display in the UI\n   * @returns Array of assignee data with counts\n   */\n  getAssigneeDistribution(): any[] {\n    if (!this.assigneeDistribution) {\n      return [];\n    }\n    \n    return Object.keys(this.assigneeDistribution).map(assignee => {\n      return {\n        name: assignee,\n        ...this.assigneeDistribution[assignee]\n      };\n    });\n  }\n\n  // Get total work items for percentage calculation\n  getTotalWorkItems(): number {\n    return this.tasksByType.reduce((total, item) => total + item.count, 0);\n  }\n} ","<div class=\"dashboard-container p-4\">\n  <div class=\"row mb-4\">\n    <div class=\"col-12\">\n      <h2 class=\"mb-0\">AI Scrum Dashboard</h2>\n      <p class=\"text-muted mt-2\">Overview of sprint progress, work item distribution, and team performance</p>\n    </div>\n  </div>\n\n  <div class=\"row mb-4\">\n    <div class=\"col-md-8\">\n      <div class=\"card\">\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\n          <h4 class=\"mb-0\">Sprint Overview</h4>\n          <div>\n            <div class=\"d-flex align-items-center\">\n              <div class=\"input-group input-group-sm me-2\" style=\"max-width: 250px;\">\n                <label class=\"input-group-text\" for=\"dashboardIterationPath\">Iteration Path</label>\n                <input \n                  id=\"dashboardIterationPath\"\n                  type=\"text\" \n                  class=\"form-control\" \n                  placeholder=\"Enter Iteration Path\" \n                  [(ngModel)]=\"selectedIterationPath\"\n                  (keyup.enter)=\"loadIterationData()\"\n                  aria-label=\"Iteration Path\">\n                <button \n                  class=\"btn btn-outline-primary\" \n                  type=\"button\" \n                  (click)=\"loadIterationData()\"\n                  title=\"Load data for this iteration path\">\n                  <i class=\"bi bi-search\"></i>\n                </button>\n              </div>\n              <button class=\"btn btn-primary btn-sm\" (click)=\"reload()\">\n                <i class=\"bi bi-arrow-clockwise\"></i> Refresh\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <div *ngIf=\"loading.sprint\" class=\"text-center py-4\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n              <span class=\"visually-hidden\">Loading...</span>\n            </div>\n          </div>\n          \n          <div *ngIf=\"error.sprint\" class=\"alert alert-danger\">\n            {{ error.sprint }}\n          </div>\n          \n          <div *ngIf=\"!loading.sprint && !error.sprint && sprintOverview\">\n            <h2 class=\"sprint-title\">{{ decodeIterationPath(sprintOverview.sprintName) }}</h2>\n            <div class=\"d-flex justify-content-between mt-3\">\n              <div>\n                <p class=\"text-muted mb-1\">Start Date</p>\n                <p class=\"fw-bold\">{{ sprintOverview.startDate | date:'longDate' }}</p>\n              </div>\n              <div>\n                <p class=\"text-muted mb-1\">End Date</p>\n                <p class=\"fw-bold\">{{ sprintOverview.endDate | date:'longDate' }}</p>\n              </div>\n              <div>\n                <p class=\"text-muted mb-1\">Days Remaining</p>\n                <p class=\"fw-bold days-remaining\">{{ sprintOverview.daysRemaining }}</p>\n              </div>\n            </div>\n            <div class=\"mt-3\">\n              <p class=\"text-muted mb-1\">Iteration Path</p>\n              <p class=\"fw-bold\">{{ decodeIterationPath(sprintOverview.iterationPath) }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"col-md-4\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h4 class=\"mb-0\">AI Assistant</h4>\n        </div>\n        <div class=\"card-body d-flex flex-column\" style=\"height: 350px;\">\n          <!-- Chat Messages -->\n          <div class=\"chat-messages flex-grow-1 overflow-auto mb-3\">\n            <div *ngIf=\"chatMessages.length === 0\" class=\"text-center py-4\">\n              <p class=\"text-muted\">Ask me anything about your project or tasks.</p>\n              <div class=\"chat-examples\">\n                <h4>Try asking me:</h4>\n                <ul>\n                  <li>What are the current sprint details?</li>\n                  <li>How many tasks are in this sprint?</li>\n                  <li>Show me the work distribution by team member</li>\n                  <li>Who has the most tasks assigned?</li>\n                  <li>Can you assign task #123 to John?</li>\n                  <li>Suggest someone for the next task assignment</li>\n                  <li>What's the current sprint progress?</li>\n                </ul>\n              </div>\n            </div>\n            \n            <div *ngFor=\"let msg of chatMessages\" class=\"message mb-2\"\n                 [ngClass]=\"{'user-message': msg.role === 'user', 'assistant-message': msg.role === 'assistant'}\">\n              <div class=\"message-content\">\n                <div class=\"message-text\">{{ msg.content }}</div>\n                <div class=\"message-time small text-muted\">{{ msg.timestamp | date:'shortTime' }}</div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Chat Input -->\n          <div class=\"chat-input\">\n            <div class=\"input-group\">\n              <input type=\"text\" class=\"form-control\" \n                     placeholder=\"Type your message...\" \n                     [(ngModel)]=\"currentMessage\"\n                     (keyup.enter)=\"sendChatMessage()\">\n              <button class=\"btn btn-primary\" type=\"button\" (click)=\"sendChatMessage()\">\n                <i class=\"bi bi-send\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Task Distribution Cards -->\n  <div class=\"card mb-4\">\n    <div class=\"card-header\">\n      <h4 class=\"mb-0\">Task Distribution by Status</h4>\n    </div>\n    <div class=\"card-body\">\n      <!-- Loading indicator -->\n      <div *ngIf=\"loadingTaskDetails\" class=\"text-center py-4\">\n        <div class=\"spinner-border text-primary\" role=\"status\">\n          <span class=\"visually-hidden\">Loading work item data...</span>\n        </div>\n        <p class=\"mt-2\">Fetching real-time work item counts from API...</p>\n      </div>\n      \n      <!-- Error message -->\n      <div *ngIf=\"taskDetailsError\" class=\"alert alert-danger\">\n        {{ taskDetailsError }}\n      </div>\n      \n      <!-- No data message -->\n      <div *ngIf=\"!loadingTaskDetails && (!taskStatusBoard || taskStatusBoard.length === 0) && !taskDetailsError\" class=\"text-center py-4\">\n        <p class=\"text-muted\">No work item state data available. Please select an iteration and click Search.</p>\n      </div>\n      \n      <!-- Task Status Cards -->\n      <div *ngIf=\"!loadingTaskDetails && taskStatusBoard && taskStatusBoard.length > 0\" class=\"row g-3\">\n        <div *ngFor=\"let status of taskStatusBoard\" class=\"col-md-2 col-sm-4 col-6 mb-3\">\n          <div class=\"card task-state-card h-100\" \n               [ngClass]=\"{\n                 'status-active': status.status === 'Active',\n                 'status-code-review': status.status === 'Code Review',\n                 'status-dev-progress': status.status === 'Dev In Progress' || status.status === 'Dev In progress' || status.status.toLowerCase().includes('dev') && status.status.toLowerCase().includes('progress'),\n                 'status-dev-new': status.status === 'Dev-New',\n                 'status-planned': status.status === 'Planned',\n                 'status-cs-new': status.status === 'CS-New',\n                 'status-proposed': status.status === 'Proposed',\n                 'status-clarification': status.status === 'Require Clarification',\n                 'status-resolved': status.status === 'Resolved',\n                 'status-verified': status.status === 'Verified'\n               }\">\n            <div class=\"card-body text-center text-white p-3\">\n              <div class=\"text-2xl font-bold mb-1\">{{ status.count }}</div>\n              <div class=\"text-lg\">{{ status.status }}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <!-- Task Distribution by Type -->\n  <div class=\"card mb-4\">\n    <div class=\"card-header\">\n      <h4 class=\"mb-0\">Work Items by Type</h4>\n    </div>\n    <div class=\"card-body\">\n      <!-- Type Distribution Cards -->\n      <div *ngIf=\"!loadingTaskDetails && tasksByType && tasksByType.length > 0\" class=\"row\">\n        <div *ngFor=\"let typeItem of tasksByType\" class=\"col-md-3 mb-3\">\n          <div class=\"card task-type-card h-100\" [style.border-left-color]=\"typeItem.color\">\n            <div class=\"card-body p-3\">\n              <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                <h5 class=\"mb-0 card-title\">{{ typeItem.type }}</h5>\n                <span class=\"badge rounded-pill\" [style.background-color]=\"typeItem.color\">{{ typeItem.count }}</span>\n              </div>\n              <div class=\"progress\">\n                <div class=\"progress-bar\" [style.width.%]=\"(typeItem.count / getTotalWorkItems()) * 100\" \n                     [style.background-color]=\"typeItem.color\">\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- No data message -->\n      <div *ngIf=\"!loadingTaskDetails && (!tasksByType || tasksByType.length === 0) && !taskDetailsError\" class=\"text-center py-4\">\n        <p class=\"text-muted\">No work item type data available.</p>\n      </div>\n    </div>\n  </div>\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}