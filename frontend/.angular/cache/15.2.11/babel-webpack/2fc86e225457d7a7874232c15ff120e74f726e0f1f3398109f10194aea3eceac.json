{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TeamService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/tasks/team-members`;\n  }\n  /**\r\n   * Fetches all team members from the API\r\n   * @returns Observable of TeamMember array\r\n   */\n  getTeamMembers() {\n    console.log(`Calling API endpoint: ${this.apiUrl}`);\n    return this.http.get(this.apiUrl).pipe(retry(1),\n    // Retry once on failure\n    catchError(this.handleError), map(response => {\n      console.log('Raw API response:', response);\n      return this.processTeamMembersResponse(response);\n    }));\n  }\n  /**\r\n   * Fetches team members from a specific team\r\n   * @param teamName The name of the team to fetch members from (e.g., \"RND\")\r\n   * @param iterationPath Optional iteration path to filter by\r\n   * @returns Observable of TeamMember array\r\n   */\n  getTeamMembersByTeam(teamName, iterationPath) {\n    let params = new HttpParams().set('teamName', teamName);\n    if (iterationPath) {\n      params = params.set('iterationPath', iterationPath);\n    }\n    console.log(`Calling team-specific API endpoint: ${this.apiUrl} with params:`, params.toString());\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(retry(1),\n    // Retry once on failure\n    catchError(this.handleError), map(response => {\n      console.log(`Raw API response for team ${teamName}:`, response);\n      return this.processTeamMembersResponse(response);\n    }));\n  }\n  /**\r\n   * Handles HTTP errors and returns a user-friendly error message\r\n   * @param error The HTTP error response\r\n   * @returns An observable that errors with a user-friendly message\r\n   */\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred while fetching team members';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Server returned code ${error.status}: ${error.statusText}`;\n      if (error.error?.message) {\n        errorMessage += ` - ${error.error.message}`;\n      }\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  /**\r\n   * Processes the API response to ensure it conforms to the expected structure\r\n   * @param response The raw API response\r\n   * @returns An array of properly formatted TeamMember objects\r\n   */\n  processTeamMembersResponse(response) {\n    console.log('Raw team members response:', response);\n    if (!Array.isArray(response)) {\n      console.warn('Unexpected response format for team members (not an array):', response);\n      return [];\n    }\n    // Handle case where response is array of strings (just names)\n    if (response.length > 0 && typeof response[0] === 'string') {\n      console.log('Processing string array response:', response);\n      return response.map((name, index) => ({\n        id: `member-${index}`,\n        displayName: name,\n        uniqueName: name,\n        imageUrl: undefined,\n        currentWorkload: 0,\n        isActive: true,\n        email: '',\n        team: 'RND Team' // Assume these are all RND team members\n      }));\n    }\n    // Handle case where response is array of objects\n    return response.map(member => ({\n      id: member.id || `member-${Math.random().toString(36).substring(2, 9)}`,\n      displayName: member.displayName || 'Unknown User',\n      uniqueName: member.uniqueName || '',\n      imageUrl: member.imageUrl || undefined,\n      // Add missing properties with default values\n      currentWorkload: member.currentWorkload || 0,\n      isActive: member.isActive !== undefined ? member.isActive : true,\n      email: member.email || member.uniqueName || '',\n      team: member.team || 'RND Team'\n    }));\n  }\n  static {\n    this.ɵfac = function TeamService_Factory(t) {\n      return new (t || TeamService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TeamService,\n      factory: TeamService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpParams","throwError","catchError","retry","map","environment","TeamService","constructor","http","apiUrl","getTeamMembers","console","log","get","pipe","handleError","response","processTeamMembersResponse","getTeamMembersByTeam","teamName","iterationPath","params","set","toString","error","errorMessage","ErrorEvent","message","status","statusText","Error","Array","isArray","warn","length","name","index","id","displayName","uniqueName","imageUrl","undefined","currentWorkload","isActive","email","team","member","Math","random","substring","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\team.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry, map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { TeamMember } from '../models/task.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamService {\r\n  private apiUrl = `${environment.apiUrl}/tasks/team-members`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Fetches all team members from the API\r\n   * @returns Observable of TeamMember array\r\n   */\r\n  getTeamMembers(): Observable<TeamMember[]> {\r\n    console.log(`Calling API endpoint: ${this.apiUrl}`);\r\n    return this.http.get<TeamMember[]>(this.apiUrl)\r\n      .pipe(\r\n        retry(1), // Retry once on failure\r\n        catchError(this.handleError),\r\n        map(response => {\r\n          console.log('Raw API response:', response);\r\n          return this.processTeamMembersResponse(response);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetches team members from a specific team\r\n   * @param teamName The name of the team to fetch members from (e.g., \"RND\")\r\n   * @param iterationPath Optional iteration path to filter by\r\n   * @returns Observable of TeamMember array\r\n   */\r\n  getTeamMembersByTeam(teamName: string, iterationPath?: string): Observable<TeamMember[]> {\r\n    let params = new HttpParams().set('teamName', teamName);\r\n    \r\n    if (iterationPath) {\r\n      params = params.set('iterationPath', iterationPath);\r\n    }\r\n    \r\n    console.log(`Calling team-specific API endpoint: ${this.apiUrl} with params:`, params.toString());\r\n    \r\n    return this.http.get<TeamMember[]>(this.apiUrl, { params })\r\n      .pipe(\r\n        retry(1), // Retry once on failure\r\n        catchError(this.handleError),\r\n        map(response => {\r\n          console.log(`Raw API response for team ${teamName}:`, response);\r\n          return this.processTeamMembersResponse(response);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Handles HTTP errors and returns a user-friendly error message\r\n   * @param error The HTTP error response\r\n   * @returns An observable that errors with a user-friendly message\r\n   */\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'An unknown error occurred while fetching team members';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Server returned code ${error.status}: ${error.statusText}`;\r\n      if (error.error?.message) {\r\n        errorMessage += ` - ${error.error.message}`;\r\n      }\r\n    }\r\n    \r\n    console.error(errorMessage);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  /**\r\n   * Processes the API response to ensure it conforms to the expected structure\r\n   * @param response The raw API response\r\n   * @returns An array of properly formatted TeamMember objects\r\n   */\r\n  private processTeamMembersResponse(response: any): TeamMember[] {\r\n    console.log('Raw team members response:', response);\r\n    \r\n    if (!Array.isArray(response)) {\r\n      console.warn('Unexpected response format for team members (not an array):', response);\r\n      return [];\r\n    }\r\n    \r\n    // Handle case where response is array of strings (just names)\r\n    if (response.length > 0 && typeof response[0] === 'string') {\r\n      console.log('Processing string array response:', response);\r\n      return response.map((name: string, index: number) => ({\r\n        id: `member-${index}`,\r\n        displayName: name,\r\n        uniqueName: name,\r\n        imageUrl: undefined,\r\n        currentWorkload: 0,\r\n        isActive: true,\r\n        email: '',\r\n        team: 'RND Team' // Assume these are all RND team members\r\n      }));\r\n    }\r\n    \r\n    // Handle case where response is array of objects\r\n    return response.map(member => ({\r\n      id: member.id || `member-${Math.random().toString(36).substring(2, 9)}`,\r\n      displayName: member.displayName || 'Unknown User',\r\n      uniqueName: member.uniqueName || '',\r\n      imageUrl: member.imageUrl || undefined,\r\n      // Add missing properties with default values\r\n      currentWorkload: member.currentWorkload || 0,\r\n      isActive: member.isActive !== undefined ? member.isActive : true,\r\n      email: member.email || member.uniqueName || '',\r\n      team: member.team || 'RND Team'\r\n    }));\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}