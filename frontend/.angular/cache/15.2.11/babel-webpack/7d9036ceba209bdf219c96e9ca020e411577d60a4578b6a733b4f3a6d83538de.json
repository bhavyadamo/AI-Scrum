{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UserRole } from '../../../models/settings.model';\nlet UserRolesComponent = class UserRolesComponent {\n  constructor(authService, settingsService, fb) {\n    this.authService = authService;\n    this.settingsService = settingsService;\n    this.fb = fb;\n    this.userRoles = [];\n    this.loading = false;\n    this.error = '';\n    this.success = '';\n    // Role options for dropdown\n    this.roleOptions = [{\n      value: UserRole.Admin,\n      label: 'Admin'\n    }, {\n      value: UserRole.ScrumMaster,\n      label: 'Scrum Master'\n    }, {\n      value: UserRole.Member,\n      label: 'Member'\n    }];\n  }\n  ngOnInit() {\n    this.loadUserRoles();\n  }\n  loadUserRoles() {\n    if (!this.authService.canViewUserRoles()) {\n      this.error = 'You do not have permission to view user roles';\n      return;\n    }\n    this.loading = true;\n    this.error = '';\n    this.success = '';\n    this.settingsService.getUserRoles().subscribe({\n      next: roles => {\n        this.userRoles = roles;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = err.message || 'Failed to load user roles';\n        this.loading = false;\n      }\n    });\n  }\n  updateUserRole(user, newRole) {\n    if (!this.authService.canEditUserRoles()) {\n      this.error = 'You do not have permission to change user roles';\n      return;\n    }\n    if (user.role === newRole) {\n      return; // No change needed\n    }\n\n    this.loading = true;\n    this.error = '';\n    this.success = '';\n    const request = {\n      userId: user.userId,\n      role: newRole\n    };\n    this.settingsService.updateUserRole(request).subscribe({\n      next: () => {\n        user.role = newRole; // Update locally\n        this.success = `Successfully updated ${user.userName}'s role to ${newRole}`;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = err.message || 'Failed to update user role';\n        this.loading = false;\n      }\n    });\n  }\n  getRoleBadgeClass(role) {\n    switch (role) {\n      case UserRole.Admin:\n        return 'badge bg-danger';\n      case UserRole.ScrumMaster:\n        return 'badge bg-warning text-dark';\n      case UserRole.Member:\n        return 'badge bg-info text-dark';\n      default:\n        return 'badge bg-secondary';\n    }\n  }\n};\nUserRolesComponent = __decorate([Component({\n  selector: 'app-user-roles',\n  templateUrl: './user-roles.component.html',\n  styleUrls: ['./user-roles.component.scss']\n})], UserRolesComponent);\nexport { UserRolesComponent };","map":{"version":3,"mappings":"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","names":["Component","UserRole","UserRolesComponent","constructor","authService","settingsService","fb","value","Admin","label","ScrumMaster","Member","ngOnInit","loadUserRoles","canViewUserRoles","error","loading","success","getUserRoles","subscribe","next","roles","userRoles","err","message","updateUserRole","user","newRole","canEditUserRoles","role","request","userId","userName","getRoleBadgeClass","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\settings\\user-roles\\user-roles.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { SettingsService } from '../../../services/settings.service';\r\nimport { UserRole, UserRoleDto, UpdateUserRoleRequest } from '../../../models/settings.model';\r\n\r\n@Component({\r\n  selector: 'app-user-roles',\r\n  templateUrl: './user-roles.component.html',\r\n  styleUrls: ['./user-roles.component.scss']\r\n})\r\nexport class UserRolesComponent implements OnInit {\r\n  userRoles: UserRoleDto[] = [];\r\n  loading = false;\r\n  error = '';\r\n  success = '';\r\n  \r\n  // Role options for dropdown\r\n  roleOptions = [\r\n    { value: UserRole.Admin, label: 'Admin' },\r\n    { value: UserRole.ScrumMaster, label: 'Scrum Master' },\r\n    { value: UserRole.Member, label: 'Member' }\r\n  ];\r\n\r\n  constructor(\r\n    public authService: AuthService,\r\n    private settingsService: SettingsService,\r\n    private fb: FormBuilder\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadUserRoles();\r\n  }\r\n\r\n  loadUserRoles(): void {\r\n    if (!this.authService.canViewUserRoles()) {\r\n      this.error = 'You do not have permission to view user roles';\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.error = '';\r\n    this.success = '';\r\n\r\n    this.settingsService.getUserRoles().subscribe({\r\n      next: (roles) => {\r\n        this.userRoles = roles;\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        this.error = err.message || 'Failed to load user roles';\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  updateUserRole(user: UserRoleDto, newRole: UserRole): void {\r\n    if (!this.authService.canEditUserRoles()) {\r\n      this.error = 'You do not have permission to change user roles';\r\n      return;\r\n    }\r\n\r\n    if (user.role === newRole) {\r\n      return; // No change needed\r\n    }\r\n\r\n    this.loading = true;\r\n    this.error = '';\r\n    this.success = '';\r\n\r\n    const request: UpdateUserRoleRequest = {\r\n      userId: user.userId,\r\n      role: newRole\r\n    };\r\n\r\n    this.settingsService.updateUserRole(request).subscribe({\r\n      next: () => {\r\n        user.role = newRole; // Update locally\r\n        this.success = `Successfully updated ${user.userName}'s role to ${newRole}`;\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        this.error = err.message || 'Failed to update user role';\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  getRoleBadgeClass(role: UserRole): string {\r\n    switch (role) {\r\n      case UserRole.Admin:\r\n        return 'badge bg-danger';\r\n      case UserRole.ScrumMaster:\r\n        return 'badge bg-warning text-dark';\r\n      case UserRole.Member:\r\n        return 'badge bg-info text-dark';\r\n      default:\r\n        return 'badge bg-secondary';\r\n    }\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}