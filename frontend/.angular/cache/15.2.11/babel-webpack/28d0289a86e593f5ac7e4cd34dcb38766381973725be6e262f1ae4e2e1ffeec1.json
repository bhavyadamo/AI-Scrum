{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/task.service\";\nimport * as i2 from \"../../services/team.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction TaskDistributionComponent_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"option\", 68);\n  }\n  if (rf & 2) {\n    const path_r32 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", path_r32);\n  }\n}\nfunction TaskDistributionComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Search\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 69);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Auto-Assign Tasks\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 69);\n    i0.ɵɵtext(2, \" Loading Preview... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 69);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 70);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.error.autoAssign);\n  }\n}\nfunction TaskDistributionComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 71);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r7.error.iterationPaths);\n  }\n}\nfunction TaskDistributionComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 70);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.error.tasks);\n  }\n}\nfunction TaskDistributionComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 70);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r9.error.members);\n  }\n}\nfunction TaskDistributionComponent_div_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72)(1, \"div\", 73)(2, \"span\", 74);\n    i0.ɵɵtext(3, \"Loading tasks...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction TaskDistributionComponent_div_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 70);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r11.error.tasks);\n  }\n}\nfunction TaskDistributionComponent_div_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72)(1, \"p\", 12);\n    i0.ɵɵtext(2, \"No tasks found for the current iteration path.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_57_tr_17_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 87);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r34 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r34.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_57_tr_17_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 88);\n    i0.ɵɵtext(1, \"Unassigned\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_57_tr_17_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 89)(1, \"small\", 90);\n    i0.ɵɵelement(2, \"i\", 91);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r34 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Suggest: \", task_r34.autoAssignSuggestion, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_57_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r41 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\")(2, \"a\", 78);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_57_tr_17_Template_a_click_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r41);\n      const task_r34 = restoredCtx.$implicit;\n      const ctx_r40 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r40.openTaskInAzureDevOps(task_r34.id, $event));\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\")(7, \"span\", 79);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"td\")(10, \"div\", 80);\n    i0.ɵɵtemplate(11, TaskDistributionComponent_div_57_tr_17_span_11_Template, 2, 1, \"span\", 81);\n    i0.ɵɵtemplate(12, TaskDistributionComponent_div_57_tr_17_span_12_Template, 2, 0, \"span\", 82);\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_57_tr_17_div_13_Template, 4, 1, \"div\", 83);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"td\")(15, \"span\", 84);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"td\")(18, \"button\", 85);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_57_tr_17_Template_button_click_18_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r41);\n      const task_r34 = restoredCtx.$implicit;\n      const ctx_r42 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r42.openAssignModal(task_r34.id));\n    });\n    i0.ɵɵelement(19, \"i\", 86);\n    i0.ɵɵtext(20, \" Assign \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const task_r34 = ctx.$implicit;\n    const ctx_r33 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r34.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r34.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r33.getPriorityClass(task_r34.priority));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r34.priority, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", task_r34.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r34.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r34.autoAssignSuggestion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r33.getStatusClass(task_r34.status));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r34.status, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 75)(1, \"table\", 76)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Priority\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Assigned To\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\");\n    i0.ɵɵtext(13, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"th\");\n    i0.ɵɵtext(15, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"tbody\");\n    i0.ɵɵtemplate(17, TaskDistributionComponent_div_57_tr_17_Template, 21, 9, \"tr\", 77);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(17);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r13.filteredTasks);\n  }\n}\nfunction TaskDistributionComponent_div_69_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72)(1, \"div\", 73)(2, \"span\", 74);\n    i0.ɵɵtext(3, \"Loading team members...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction TaskDistributionComponent_div_70_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 70);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r15.error.members);\n  }\n}\nfunction TaskDistributionComponent_div_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72)(1, \"p\", 12);\n    i0.ɵɵtext(2, \"No team members found for the current iteration path.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_72_div_1_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 100);\n    i0.ɵɵelement(1, \"i\", 101);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r44 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", member_r44.email, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"bg-light\": a0\n  };\n};\nfunction TaskDistributionComponent_div_72_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 93)(1, \"div\", 94)(2, \"div\", 36)(3, \"h5\", 95);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 96)(6, \"span\", 79);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 97);\n    i0.ɵɵelement(9, \"div\", 98);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, TaskDistributionComponent_div_72_div_1_div_10_Template, 3, 1, \"div\", 99);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const member_r44 = ctx.$implicit;\n    const ctx_r43 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r43.getTaskCount(member_r44.displayName) === 0));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(member_r44.displayName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r43.getTeamMemberWorkloadClass(ctx_r43.getTaskCount(member_r44.displayName)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r43.getTaskCount(member_r44.displayName), \" Tasks \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r43.getWorkloadPercentage(ctx_r43.getTaskCount(member_r44.displayName)), \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r43.getProgressBarClass(ctx_r43.getTaskCount(member_r44.displayName)));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r43.getTaskCount(member_r44.displayName));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", member_r44.email);\n  }\n}\nfunction TaskDistributionComponent_div_72_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtemplate(1, TaskDistributionComponent_div_72_div_1_Template, 11, 11, \"div\", 92);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r17.filteredTeamMembers);\n  }\n}\nfunction TaskDistributionComponent_div_81_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 102);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r18.error.assign);\n  }\n}\nfunction TaskDistributionComponent_div_82_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 103)(2, \"label\", 104);\n    i0.ɵɵtext(3, \"Task ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 105);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 103)(7, \"label\", 104);\n    i0.ɵɵtext(8, \"Task Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 105);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r19.selectedTask);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r19.getSelectedTaskTitle(), \" \");\n  }\n}\nfunction TaskDistributionComponent_div_87_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r49 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 106)(1, \"input\", 107);\n    i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_div_87_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r49);\n      const ctx_r48 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r48.selectedMember = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 108)(3, \"div\", 3)(4, \"span\", 109);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"span\", 79);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const member_r47 = ctx.$implicit;\n    const ctx_r20 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"member-\" + member_r47.id)(\"value\", member_r47.displayName)(\"ngModel\", ctx_r20.selectedMember);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"for\", \"member-\" + member_r47.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(member_r47.displayName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r20.getTeamMemberWorkloadClass(ctx_r20.getTaskCount(member_r47.displayName)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.getTaskCount(member_r47.displayName), \" Tasks \");\n  }\n}\nfunction TaskDistributionComponent_span_92_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Assign\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_93_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 69);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_94_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 110);\n  }\n}\nfunction TaskDistributionComponent_div_104_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 102);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r24.error.preview);\n  }\n}\nfunction TaskDistributionComponent_div_110_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72)(1, \"div\", 73)(2, \"span\", 74);\n    i0.ɵɵtext(3, \"Loading assignment suggestions...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 111);\n    i0.ɵɵtext(5, \"Analyzing tasks and developer performance...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_111_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 112);\n    i0.ɵɵelement(1, \"i\", 65);\n    i0.ɵɵtext(2, \" No \\\"Dev-New\\\" tasks available for assignment. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r55 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", status_r55.status, \": \", status_r55.count, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_div_7_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r57 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r57.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r57.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r57.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r57.assignedTo || \"Unassigned\");\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 75)(1, \"table\", 121)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Assigned To\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"tbody\");\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_112_div_13_div_7_tr_13_Template, 9, 4, \"tr\", 77);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r52 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r52.getDevNewTasks());\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 71);\n    i0.ɵɵtext(1, \" No tasks with 'Dev-New' status found in the data. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 71);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r54 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Found \", ctx_r54.getDevNewTasks().length, \" Dev-New tasks, but all are already assigned. \");\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h6\");\n    i0.ɵɵtext(2, \"Status Distribution:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, TaskDistributionComponent_div_112_div_13_li_4_Template, 2, 2, \"li\", 77);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"h6\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, TaskDistributionComponent_div_112_div_13_div_7_Template, 14, 1, \"div\", 38);\n    i0.ɵɵtemplate(8, TaskDistributionComponent_div_112_div_13_div_8_Template, 2, 0, \"div\", 25);\n    i0.ɵɵtemplate(9, TaskDistributionComponent_div_112_div_13_div_9_Template, 2, 1, \"div\", 25);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r50 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r50.getStatusDistribution());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Dev-New Tasks (\", ctx_r50.getDevNewTasks().length, \"):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r50.getDevNewTasks().length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r50.getDevNewTasks().length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r50.getUnassignedDevNewTasks().length === 0 && ctx_r50.getDevNewTasks().length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_112_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 113)(1, \"div\", 114)(2, \"div\", 115)(3, \"h2\", 116)(4, \"button\", 117);\n    i0.ɵɵelement(5, \"i\", 118);\n    i0.ɵɵtext(6, \" Debug Information \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 119)(8, \"div\", 120)(9, \"h6\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"h6\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_112_div_13_Template, 10, 5, \"div\", 19);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r27 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate1(\"Total Tasks: \", ctx_r27.tasks.length, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Total Tasks: \", ctx_r27.filteredTasks.length, \" (filtered from \", ctx_r27.tasks.length, \" total)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r27.filteredTasks.length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r59 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r59.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 134);\n    i0.ɵɵtext(1, \"Unassigned\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_ng_container_15_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 137);\n    i0.ɵɵtext(1, \"Reassignment\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 80)(2, \"span\", 135);\n    i0.ɵɵtext(3, \"AI Pick\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"strong\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, TaskDistributionComponent_div_113_tr_20_ng_container_15_span_6_Template, 2, 0, \"span\", 136);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const task_r59 = i0.ɵɵnextContext().$implicit;\n    const ctx_r62 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r62.extractDeveloperName(ctx_r62.assignPreviewSuggestions[task_r59.id]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r62.extractDeveloperName(ctx_r62.assignPreviewSuggestions[task_r59.id]) !== task_r59.assignedTo && task_r59.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \"No suggestion available\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 138);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r59 = i0.ɵɵnextContext().$implicit;\n    const ctx_r64 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r64.extractLogicExplanation(ctx_r64.assignPreviewSuggestions[task_r59.id]), \" \");\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\")(4, \"span\", 129);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"span\", 130);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtemplate(12, TaskDistributionComponent_div_113_tr_20_span_12_Template, 2, 1, \"span\", 131);\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_113_tr_20_span_13_Template, 2, 0, \"span\", 132);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtemplate(15, TaskDistributionComponent_div_113_tr_20_ng_container_15_Template, 7, 2, \"ng-container\", 19);\n    i0.ɵɵtemplate(16, TaskDistributionComponent_div_113_tr_20_span_16_Template, 2, 0, \"span\", 131);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"td\");\n    i0.ɵɵtemplate(18, TaskDistributionComponent_div_113_tr_20_span_18_Template, 2, 1, \"span\", 133);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r59 = ctx.$implicit;\n    const ctx_r58 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r59.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r59.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r59.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r59.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", task_r59.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r59.assignedTo);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r58.assignPreviewSuggestions[task_r59.id]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r58.assignPreviewSuggestions[task_r59.id]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r58.assignPreviewSuggestions[task_r59.id]);\n  }\n}\nfunction TaskDistributionComponent_div_113_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 75)(2, \"table\", 76)(3, \"thead\")(4, \"tr\")(5, \"th\");\n    i0.ɵɵtext(6, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14, \"Current Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16, \"Suggested Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"th\");\n    i0.ɵɵtext(18, \"Assignment Logic\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"tbody\");\n    i0.ɵɵtemplate(20, TaskDistributionComponent_div_113_tr_20_Template, 19, 9, \"tr\", 77);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(21, \"div\", 122)(22, \"h6\");\n    i0.ɵɵtext(23, \"Assignment Logic Explanation:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"ul\", 123)(25, \"li\", 124);\n    i0.ɵɵelement(26, \"i\", 125);\n    i0.ɵɵelementStart(27, \"small\")(28, \"strong\");\n    i0.ɵɵtext(29, \"Past Expertise\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(30, \" - Completed similar tasks in the past 3 months\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"li\", 124);\n    i0.ɵɵelement(32, \"i\", 126);\n    i0.ɵɵelementStart(33, \"small\")(34, \"strong\");\n    i0.ɵɵtext(35, \"Recent Completion\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(36, \" - Recently completed tasks with no active work\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(37, \"li\", 124);\n    i0.ɵɵelement(38, \"i\", 127);\n    i0.ɵɵelementStart(39, \"small\")(40, \"strong\");\n    i0.ɵɵtext(41, \"Low Workload\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(42, \" - Developer with few active tasks\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(43, \"li\", 124);\n    i0.ɵɵelement(44, \"i\", 128);\n    i0.ɵɵelementStart(45, \"small\")(46, \"strong\");\n    i0.ɵɵtext(47, \"Least Assigned\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(48, \" - Developer with lowest total task count\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r28 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(20);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r28.assignPreviewTasks);\n  }\n}\nfunction TaskDistributionComponent_span_119_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Confirm & Assign\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_120_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 69);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_121_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 110);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"show\": a0\n  };\n};\nexport class TaskDistributionComponent {\n  constructor(taskService, teamService) {\n    this.taskService = taskService;\n    this.teamService = teamService;\n    this.tasks = [];\n    this.filteredTasks = [];\n    this.teamMembers = [];\n    this.filteredTeamMembers = []; // New property for filtered team members\n    this.selectedTaskId = null;\n    this.selectedTeamMemberId = '';\n    this.selectedTask = null; // Added for modal display\n    this.selectedMember = ''; // Added for member selection in modal\n    this.currentIterationPath = 'Techoil\\\\2.3.23'; // Default value\n    this.manualIterationPath = ''; // For manual input\n    this.teamName = 'RND'; // Default team name\n    this.iterationPaths = []; // Will be loaded from API\n    this.teamMemberTaskCounts = {}; // Added for task counts\n    this.applyTeamFilter = true; // Whether to apply team name filter\n    // Auto-assign preview properties\n    this.showingPreview = false;\n    this.assignPreviewTasks = [];\n    this.assignPreviewSuggestions = {};\n    // Track the active tab\n    this.activeTab = 'distribution';\n    // Convert simple boolean to object with specific loading states\n    this.loading = {\n      tasks: false,\n      members: false,\n      assign: false,\n      autoAssign: false,\n      iterationPaths: false,\n      taskCounts: false,\n      preview: false // Added for auto-assign preview loading\n    };\n    // Convert simple string to object with specific error states\n    this.error = {\n      tasks: null,\n      members: null,\n      assign: null,\n      autoAssign: null,\n      iterationPaths: null,\n      taskCounts: null,\n      preview: null // Added for auto-assign preview errors\n    };\n    // Azure DevOps URL components from environment\n    this.azureDevOpsUrl = environment.azureDevOpsUrl;\n    this.organization = environment.organization;\n    this.project = environment.project;\n  }\n  ngOnInit() {\n    this.loadIterationPaths();\n  }\n  /**\r\n   * Handle tab change events\r\n   * @param tabId The ID of the selected tab\r\n   */\n  onTabChange(tabId) {\n    console.log(`Tab changed to: ${tabId}`);\n    this.activeTab = tabId;\n    // Load specific data based on the selected tab\n    if (tabId === 'workload') {\n      // Force refresh team members and workload data\n      this.loadTeamMembers();\n      this.loadTeamMemberTaskCounts();\n      console.log('Refreshing team workload data');\n    } else if (tabId === 'distribution') {\n      // Refresh tasks if needed\n      if (this.filteredTasks.length === 0 && !this.loading.tasks) {\n        this.loadTasks();\n        console.log('Refreshing task distribution data');\n      }\n    }\n  }\n  ngAfterViewInit() {\n    // Initialize Bootstrap tabs\n    this.initializeBootstrapTabs();\n  }\n  /**\r\n   * Initialize Bootstrap tabs programmatically\r\n   */\n  initializeBootstrapTabs() {\n    try {\n      // Check if Bootstrap's Tab class is available globally\n      if (typeof window.bootstrap !== 'undefined' && window.bootstrap.Tab) {\n        // Initialize all tabs\n        const tabElements = document.querySelectorAll('[data-bs-toggle=\"tab\"]');\n        tabElements.forEach(tabEl => {\n          // Create tab instance\n          const tab = new window.bootstrap.Tab(tabEl);\n          // Add event listener for tab shown event\n          tabEl.addEventListener('shown.bs.tab', event => {\n            // Extract tab ID from the target\n            const targetId = event.target.getAttribute('data-bs-target');\n            const tabId = targetId === '#task-distribution' ? 'distribution' : 'workload';\n            console.log(`Tab shown event: ${tabId}`);\n            // Update active tab and ensure data is loaded\n            this.activeTab = tabId;\n            // Ensure tab content is loaded/refreshed\n            if (tabId === 'workload' && this.filteredTeamMembers.length === 0 && !this.loading.members) {\n              this.loadTeamMembers();\n              this.loadTeamMemberTaskCounts();\n            }\n          });\n        });\n        console.log('Bootstrap tabs initialized successfully with event listeners');\n      } else {\n        console.warn('Bootstrap JavaScript not found. Tabs may not function properly.');\n      }\n    } catch (error) {\n      console.error('Error initializing Bootstrap tabs:', error);\n    }\n  }\n  loadIterationPaths() {\n    this.loading.iterationPaths = true;\n    this.error.iterationPaths = null;\n    this.taskService.getIterationPaths().subscribe({\n      next: paths => {\n        this.iterationPaths = paths;\n        this.loading.iterationPaths = false;\n        if (paths.length > 0) {\n          // Use the first path as default if available\n          this.currentIterationPath = paths[0];\n          this.manualIterationPath = paths[0];\n        }\n        // We no longer automatically load data after loading iteration paths\n        // Data will be loaded when the search button is clicked\n      },\n\n      error: err => {\n        console.error('Error loading iteration paths:', err);\n        this.error.iterationPaths = `Failed to load iteration paths: ${err.message}`;\n        this.loading.iterationPaths = false;\n        // Add fallback iteration paths if API call fails\n        this.iterationPaths = ['Techoil\\\\2.3.23', 'Techoil\\\\2.3.24', 'Techoil\\\\2.3.25', 'Techoil\\\\2.3.26'];\n        console.log('Using fallback iteration paths:', this.iterationPaths);\n        // We no longer automatically load data after loading iteration paths\n        // Data will be loaded when the search button is clicked\n      }\n    });\n  }\n  /**\r\n   * Search button handler - loads data based on manual inputs\r\n   */\n  searchClicked() {\n    // Normalize the manual input iteration path\n    const normalizedPath = this.manualIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    // Update the current iteration path with the normalized manual input\n    this.currentIterationPath = normalizedPath;\n    this.manualIterationPath = normalizedPath; // Update the displayed value too\n    // Clear previous errors\n    this.error.tasks = null;\n    this.error.members = null;\n    console.log(`Searching with team filter ${this.applyTeamFilter ? 'enabled' : 'disabled'}`);\n    console.log(`Using normalized iteration path: ${normalizedPath}`);\n    // Load data based on the manual inputs\n    this.loadTasks();\n    this.loadTeamMembers();\n  }\n  loadTasks() {\n    this.loading.tasks = true;\n    this.error.tasks = null;\n    // Normalize the iteration path to handle any double backslashes\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    console.log(`Loading tasks for iteration path: ${normalizedPath}`);\n    this.taskService.getTasks(normalizedPath).subscribe({\n      next: tasks => {\n        this.tasks = tasks;\n        this.loading.tasks = false;\n        console.log(`Loaded ${tasks.length} tasks for iteration path ${normalizedPath}`);\n        // After loading tasks, update team workload and filter tasks\n        if (this.teamMembers.length > 0) {\n          this.updateTeamWorkload();\n          this.filterTasksByRnDTeamMembers();\n        }\n      },\n      error: err => {\n        console.error(`Error loading tasks for iteration path ${normalizedPath}:`, err);\n        this.error.tasks = `Failed to load tasks: ${err.message}`;\n        this.loading.tasks = false;\n      }\n    });\n  }\n  loadTeamMembers() {\n    this.loading.members = true;\n    this.error.members = null;\n    // Normalize the iteration path to handle any double backslashes\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    // Use the teamService directly to get team members by team name if filter is applied\n    // Otherwise, just get all team members\n    if (this.applyTeamFilter) {\n      this.teamService.getTeamMembersByTeam(this.teamName, normalizedPath).subscribe({\n        next: teamMembers => {\n          this.teamMembers = teamMembers;\n          console.log(`Loaded ${this.teamName} team members:`, this.teamMembers);\n          this.loading.members = false;\n          // Filter out non-R&D team members\n          this.filterRnDTeamMembers();\n          // Load team member task counts after loading team members\n          this.loadTeamMemberTaskCounts();\n          // If tasks are already loaded, update workload\n          if (this.tasks.length > 0) {\n            this.updateTeamWorkload();\n          } else {\n            // If no tasks are loaded yet, still show the team members\n            console.log('No tasks loaded yet, showing filtered team members');\n          }\n        },\n        error: err => {\n          console.error(`Error loading ${this.teamName} team members:`, err);\n          // Fallback to regular team members if team-specific call fails\n          this.loadAllTeamMembers(normalizedPath);\n        }\n      });\n    } else {\n      // If team filter is not applied, load all team members\n      this.loadAllTeamMembers(normalizedPath);\n    }\n  }\n  /**\r\n   * Helper method to load all team members without team filter\r\n   */\n  loadAllTeamMembers(normalizedPath) {\n    this.taskService.getTeamMembers(normalizedPath).subscribe({\n      next: response => {\n        // Process the response as an array of TeamMember objects\n        if (Array.isArray(response)) {\n          // Handle string array response - convert strings to TeamMember objects\n          if (response.length > 0 && typeof response[0] === 'string') {\n            this.teamMembers = response.map((name, index) => ({\n              id: `member-${index}`,\n              displayName: name,\n              uniqueName: '',\n              currentWorkload: 0,\n              isActive: true,\n              email: '',\n              team: this.applyTeamFilter ? this.teamName : ''\n            }));\n          } else {\n            // It's already an array of TeamMember objects\n            this.teamMembers = response;\n          }\n          // If team filter is applied, still filter out non-R&D team members\n          if (this.applyTeamFilter) {\n            this.filterRnDTeamMembers();\n          } else {\n            // If not applying team filter, all team members are filtered\n            this.filteredTeamMembers = this.teamMembers;\n          }\n          // If tasks are already loaded, update team workload data\n          if (this.tasks.length > 0) {\n            this.updateTeamWorkload();\n          }\n        } else {\n          console.error('Unexpected response format from getTeamMembers:', response);\n          this.error.members = 'Failed to load team members: Invalid response format';\n        }\n        this.loading.members = false;\n      },\n      error: memberErr => {\n        console.error(`Error loading team members for iteration path ${normalizedPath}:`, memberErr);\n        this.error.members = `Failed to load team members: ${memberErr.message}`;\n        this.loading.members = false;\n      }\n    });\n  }\n  /**\r\n   * Filter team members to only include R&D team members\r\n   */\n  filterRnDTeamMembers() {\n    // Convert any string team members to objects first\n    this.teamMembers = this.teamMembers.map((member, index) => {\n      if (typeof member === 'string') {\n        return {\n          id: `member-${index}`,\n          displayName: member,\n          uniqueName: '',\n          currentWorkload: 0,\n          isActive: true,\n          email: '',\n          team: this.applyTeamFilter ? this.teamName : ''\n        };\n      }\n      return member;\n    });\n    // Filter out members that don't have an R&D-related team property\n    this.filteredTeamMembers = this.teamMembers.filter(member => {\n      // Ensure member is an object\n      if (typeof member !== 'object') {\n        console.warn(`Unexpected member type in filterRnDTeamMembers: ${typeof member}`);\n        return false;\n      }\n      // If member has a team property and it contains R&D-related terms\n      if (member.team) {\n        return member.team.toLowerCase().includes('r&d') || member.team.toLowerCase().includes('rnd') || member.team.toLowerCase().includes('research');\n      }\n      // Log members without team info\n      console.log(`Team member without team info: ${member.displayName}`);\n      // If no team property, default to including the member (backend should have already filtered)\n      return true;\n    });\n    // Log the results\n    console.log(`Filtered ${this.teamMembers.length} team members down to ${this.filteredTeamMembers.length} R&D members`);\n  }\n  /**\r\n   * Load task counts for each team member from the API\r\n   */\n  loadTeamMemberTaskCounts() {\n    this.loading.taskCounts = true;\n    this.error.taskCounts = null;\n    // Normalize the iteration path\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    this.taskService.getTeamMemberTaskCounts(normalizedPath).subscribe({\n      next: counts => {\n        this.teamMemberTaskCounts = counts;\n        this.loading.taskCounts = false;\n        console.log('Loaded team member task counts:', this.teamMemberTaskCounts);\n        // Update the team members with their task counts\n        this.updateTeamWorkload();\n      },\n      error: err => {\n        console.error('Error loading team member task counts:', err);\n        this.error.taskCounts = `Failed to load task counts: ${err.message}`;\n        this.loading.taskCounts = false;\n        // Fall back to counting tasks manually\n        this.updateTeamWorkload();\n      }\n    });\n  }\n  /**\r\n   * Calculate and update team members' workload based on task assignments\r\n   */\n  updateTeamWorkload() {\n    console.log('Updating team workload');\n    // Reset all workloads to 0 for all team members\n    this.teamMembers.forEach(member => {\n      // Ensure member is a TeamMember object and not a string\n      if (typeof member === 'string') {\n        console.warn(`Found string member instead of object: ${member}`);\n        // Convert string to TeamMember object if needed\n        const index = this.teamMembers.indexOf(member);\n        if (index >= 0) {\n          this.teamMembers[index] = {\n            id: `member-${index}`,\n            displayName: member,\n            uniqueName: '',\n            currentWorkload: 0,\n            isActive: true,\n            email: '',\n            team: this.applyTeamFilter ? this.teamName : ''\n          };\n        }\n      } else {\n        // Reset workload for object\n        member.currentWorkload = 0;\n      }\n    });\n    // If we have task counts from the API, use those\n    if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n      this.teamMembers.forEach(member => {\n        // Skip if member is not an object\n        if (typeof member === 'string') return;\n        // Try to find this member in the task counts\n        const counts = Object.entries(this.teamMemberTaskCounts).find(([name, _]) => name.toLowerCase() === member.displayName.toLowerCase());\n        if (counts) {\n          member.currentWorkload = counts[1]; // Set the count from the API\n        }\n      });\n    } else {\n      // Fall back to counting from tasks array\n      this.tasks.forEach(task => {\n        if (task.assignedTo) {\n          // Normalize the assignedTo value\n          const normalizedAssignedTo = task.assignedTo.trim().toLowerCase();\n          // Find matching team member\n          const matchedMember = this.teamMembers.find(member => typeof member === 'object' && member.displayName.toLowerCase() === normalizedAssignedTo);\n          if (matchedMember) {\n            matchedMember.currentWorkload++;\n          }\n        }\n      });\n    }\n    // Only filter for R&D team members if team filter is applied\n    if (this.applyTeamFilter) {\n      // Re-apply R&D filter to ensure we only show R&D team members\n      this.filterRnDTeamMembers();\n    } else {\n      // If filter not applied, use all team members\n      this.filteredTeamMembers = this.teamMembers;\n    }\n    // Also filter tasks to match team members or show all if filter not applied\n    this.filterTasksByRnDTeamMembers();\n    console.log('Updated team workload for filtered members:', this.filteredTeamMembers);\n  }\n  /**\r\n   * Check if a team member is part of the current iteration team\r\n   * This is a placeholder - you may need to implement actual logic based on your data model\r\n   */\n  isPartOfCurrentIterationTeam(member) {\n    // By default, include all team members\n    // You might want to enhance this with actual iteration team membership logic\n    return true;\n  }\n  assignTask() {\n    if (!this.selectedTask) {\n      this.error.assign = 'Error: No task selected for assignment';\n      return;\n    }\n    if (!this.selectedMember) {\n      this.error.assign = 'Please select a team member for assignment';\n      return;\n    }\n    this.loading.assign = true;\n    this.error.assign = null;\n    // Use the selected member name directly for the API call\n    console.log(`Assigning task ${this.selectedTask} to member ${this.selectedMember}`);\n    this.taskService.assignTask(this.selectedTask, this.selectedMember).subscribe({\n      next: response => {\n        console.log('Task assignment successful:', response);\n        // Close the modal\n        this.cancelAssign();\n        // Show success message (could be implemented with a toast/snackbar service)\n        this.showSuccessMessage('Task assigned successfully');\n        // Reload tasks and task counts to reflect changes\n        this.loadTasks();\n        this.loadTeamMemberTaskCounts();\n      },\n      error: err => {\n        console.error('Error assigning task:', err);\n        this.error.assign = `Failed to assign task: ${err.message}`;\n        this.loading.assign = false;\n      }\n    });\n  }\n  // Helper method to show success message (placeholder for toast/snackbar)\n  showSuccessMessage(message) {\n    console.log('SUCCESS:', message);\n    // In a real implementation, you would use a toast/snackbar service\n    // Example: this.toastService.show(message, { classname: 'bg-success' });\n    // For now, create a simple alert element that disappears after a few seconds\n    const alertDiv = document.createElement('div');\n    alertDiv.className = 'alert alert-success position-fixed top-0 end-0 m-3';\n    alertDiv.textContent = message;\n    alertDiv.style.zIndex = '9999';\n    document.body.appendChild(alertDiv);\n    // Remove after 3 seconds\n    setTimeout(() => {\n      alertDiv.remove();\n    }, 3000);\n  }\n  /**\r\n   * Show preview of auto-assign suggestions before performing the assignment\r\n   */\n  showAutoAssignPreview() {\n    this.loading.preview = true;\n    this.error.preview = null;\n    this.showingPreview = true;\n    this.assignPreviewTasks = [];\n    this.assignPreviewSuggestions = {};\n    // Normalize the iteration path to handle any double backslashes\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    console.log('Using normalized iteration path for auto-assign preview:', normalizedPath);\n    // First, get all Dev-New tasks for the current iteration\n    this.taskService.getTasks(normalizedPath).subscribe({\n      next: tasks => {\n        // Enhanced filtering for Dev-New tasks - handle various status formats\n        const allDevNewTasks = tasks.filter(task => {\n          // Skip tasks without status\n          if (!task.status) return false;\n          // Normalize status by removing spaces, hyphens, and converting to lowercase\n          const normalizedStatus = task.status.toLowerCase().replace(/[\\s\\-]/g, ''); // Remove spaces and hyphens\n          // Match against various formats of \"Dev-New\"\n          return normalizedStatus === 'devnew' || normalizedStatus === 'newdev' || normalizedStatus.includes('devnew') || normalizedStatus.includes('newdev') || normalizedStatus.includes('developmentnew') || normalizedStatus.includes('newdevelopment');\n        });\n        console.log(`Found ${allDevNewTasks.length} Dev-New tasks for auto-assign preview out of ${tasks.length} total tasks`);\n        console.log('Dev-New tasks:', allDevNewTasks);\n        if (allDevNewTasks.length === 0) {\n          this.error.preview = 'No Dev-New tasks found in the current iteration. Auto-assign requires tasks with Dev-New status.';\n          this.loading.preview = false;\n          return;\n        }\n        // If RnD team filter is applied, get team-specific suggestions\n        if (this.applyTeamFilter && this.teamName === 'RND') {\n          // Get RnD team members first\n          this.teamService.getTeamMembersByTeam('RND', normalizedPath).subscribe({\n            next: teamMembers => {\n              console.log('Got RnD team members for auto-assign:', teamMembers);\n              // Extract team member names\n              const teamMemberNames = teamMembers.map(member => member.displayName);\n              // Get auto-assign suggestions specifically for RnD team\n              this.taskService.getAutoAssignSuggestionsForTeam(normalizedPath, teamMemberNames).subscribe({\n                next: suggestions => {\n                  this.assignPreviewSuggestions = suggestions;\n                  console.log('Got team-specific suggestions:', suggestions);\n                  // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n                  const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n                  this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(task.id));\n                  console.log('Filtered tasks to be reassigned:', this.assignPreviewTasks);\n                  // If no matches, try fallback to standard suggestions\n                  if (this.assignPreviewTasks.length === 0 && Object.keys(suggestions).length > 0) {\n                    console.warn('No matching tasks found for team-specific suggestions. Trying standard suggestions.');\n                    this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n                  } else {\n                    this.loading.preview = false;\n                  }\n                },\n                error: err => {\n                  console.error('Error loading team-specific auto-assign suggestions:', err);\n                  // Fall back to standard auto-assign if team-specific fails\n                  this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n                }\n              });\n            },\n            error: err => {\n              console.error('Error loading RnD team members for auto-assign:', err);\n              // Fall back to the standard auto-assign if RnD team member loading fails\n              this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n            }\n          });\n        } else {\n          // Get standard auto-assign suggestions\n          this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n        }\n      },\n      error: err => {\n        this.error.preview = `Failed to load tasks: ${err.message}`;\n        this.loading.preview = false;\n      }\n    });\n  }\n  /**\r\n   * Fallback method to get standard auto-assign suggestions if RnD-specific fails\r\n   */\n  getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath) {\n    console.log('Getting standard auto-assign suggestions with path:', normalizedPath);\n    console.log('Dev-New tasks available for assignment:', allDevNewTasks);\n    this.taskService.getAutoAssignSuggestions(normalizedPath).subscribe({\n      next: suggestions => {\n        this.assignPreviewSuggestions = suggestions;\n        console.log('Got standard suggestions (fallback):', suggestions);\n        // Check if we have any suggestions\n        if (Object.keys(suggestions).length === 0) {\n          console.warn('No suggestions returned from the API');\n          this.error.preview = 'No task assignment suggestions were generated. There may be no available tasks to assign.';\n          this.loading.preview = false;\n          return;\n        }\n        // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n        const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n        console.log('Suggestion task IDs:', suggestedTaskIds);\n        // Try more flexible matching if necessary\n        if (suggestedTaskIds.length > 0 && allDevNewTasks.length > 0) {\n          console.log('Applying task to suggestion matching...');\n          console.log('Task IDs available:', allDevNewTasks.map(t => t.id));\n          this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(task.id));\n          // If no matches found, try string matching\n          if (this.assignPreviewTasks.length === 0) {\n            console.warn('No direct ID matches found, trying string matching');\n            this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(Number(task.id)));\n            // If still no matches, try more flexible matching\n            if (this.assignPreviewTasks.length === 0) {\n              console.warn('No matches found even with string conversion, using available Dev-New tasks');\n              // Just use the first few Dev-New tasks that aren't assigned\n              this.assignPreviewTasks = allDevNewTasks.filter(task => !task.assignedTo || task.assignedTo.trim() === '').slice(0, Math.min(5, allDevNewTasks.length));\n              // Create suggestions for them\n              if (this.assignPreviewTasks.length > 0) {\n                console.log('Using', this.assignPreviewTasks.length, 'unassigned Dev-New tasks as fallback');\n                // Create empty suggestions object\n                this.assignPreviewSuggestions = {};\n                // Get team members to suggest\n                const availableMembers = this.filteredTeamMembers.sort((a, b) => (a.currentWorkload || 0) - (b.currentWorkload || 0)).map(m => m.displayName).filter(Boolean);\n                // Assign members to tasks\n                this.assignPreviewTasks.forEach((task, index) => {\n                  const memberIndex = index % availableMembers.length;\n                  const member = availableMembers[memberIndex];\n                  this.assignPreviewSuggestions[task.id] = `${member} (least assigned)`;\n                });\n              }\n            }\n          }\n        }\n        console.log('Filtered tasks to be reassigned (fallback):', this.assignPreviewTasks);\n        if (this.assignPreviewTasks.length === 0) {\n          this.error.preview = 'No tasks available for assignment. Check if there are Dev-New tasks in the current iteration.';\n        }\n        this.loading.preview = false;\n      },\n      error: err => {\n        this.error.preview = `Failed to load auto-assign suggestions: ${err.message}`;\n        this.loading.preview = false;\n      }\n    });\n  }\n  /**\r\n   * Check if there are valid assignment suggestions\r\n   */\n  hasAssignmentSuggestions() {\n    return this.assignPreviewSuggestions && Object.keys(this.assignPreviewSuggestions).length > 0;\n  }\n  /**\r\n   * Cancel auto-assign preview and close the modal\r\n   */\n  cancelAutoAssignPreview() {\n    this.showingPreview = false;\n    this.assignPreviewTasks = [];\n    this.assignPreviewSuggestions = {};\n    this.error.preview = null;\n  }\n  /**\r\n   * Confirm and perform the auto-assignments\r\n   */\n  confirmAutoAssign() {\n    this.loading.autoAssign = true;\n    this.error.autoAssign = null;\n    // Normalize the path for consistent handling\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    const assignmentPromises = [];\n    let assignmentCount = 0;\n    // For each task with a suggestion, create an assignment\n    for (const task of this.assignPreviewTasks) {\n      if (this.assignPreviewSuggestions[task.id]) {\n        const developerName = this.extractDeveloperName(this.assignPreviewSuggestions[task.id]);\n        console.log(`Assigning task #${task.id} (${task.title}) to ${developerName}`);\n        assignmentPromises.push(this.taskService.assignTask(task.id, developerName));\n        assignmentCount++;\n      }\n    }\n    // If we have assignments to make, execute them all in parallel\n    if (assignmentPromises.length > 0) {\n      forkJoin(assignmentPromises).subscribe({\n        next: () => {\n          // Hide the preview after successful assignment\n          this.showingPreview = false;\n          // Refresh the task list with normalized path\n          this.loadTasks();\n          // Also refresh the task counts to show updated workload\n          this.loadTeamMemberTaskCounts();\n          // Show success message\n          this.showSuccessMessage(`Successfully assigned ${assignmentCount} tasks.`);\n          this.loading.autoAssign = false;\n        },\n        error: err => {\n          this.error.autoAssign = `Error assigning tasks: ${err.message}`;\n          this.loading.autoAssign = false;\n        }\n      });\n    } else {\n      this.loading.autoAssign = false;\n      this.error.preview = \"No tasks available for assignment.\";\n    }\n  }\n  /**\r\n   * Extract just the developer name from the suggestion string\r\n   * Format is typically \"Name (explanation)\"\r\n   */\n  extractDeveloperName(suggestion) {\n    if (!suggestion) return '';\n    // Handle new format: \"Developer Name (expert in Bug, low load)\"\n    if (suggestion.includes('(')) {\n      return suggestion.substring(0, suggestion.indexOf('(')).trim();\n    }\n    // Fallback for simpler formats\n    const parts = suggestion.split(' ');\n    return parts[0]; // Just return the first word as the name\n  }\n  /**\r\n   * Extract the logic explanation from the suggestion string\r\n   * Format is typically \"Name (explanation)\"\r\n   */\n  extractLogicExplanation(suggestion) {\n    if (!suggestion) return '';\n    // Match content inside parentheses\n    const match = suggestion.match(/\\((.*?)\\)/);\n    if (match && match[1]) {\n      return match[1];\n    }\n    // If no parentheses, return the part after the first space\n    const spaceIndex = suggestion.indexOf(' ');\n    if (spaceIndex !== -1) {\n      return suggestion.substring(spaceIndex + 1).trim();\n    }\n    return '';\n  }\n  /**\r\n   * Original auto-assign tasks method - replaced with preview workflow\r\n   */\n  autoAssignTasks() {\n    this.loading.autoAssign = true;\n    this.error.autoAssign = null;\n    this.taskService.autoAssignTasks(this.currentIterationPath).subscribe({\n      next: () => {\n        // Reload tasks and task counts to reflect changes\n        this.loadTasks();\n        this.loadTeamMemberTaskCounts();\n        this.loading.autoAssign = false;\n      },\n      error: err => {\n        this.error.autoAssign = `Failed to auto-assign tasks: ${err.message}`;\n        this.loading.autoAssign = false;\n      }\n    });\n  }\n  openAssignModal(taskId) {\n    this.selectedTask = taskId;\n    this.selectedMember = '';\n    this.error.assign = null;\n    // Get the iteration path for this specific task - first try filtered tasks\n    let task = this.filteredTasks.find(t => t.id === taskId);\n    // If not found, check all tasks (in case this is accessing a non-filtered task)\n    if (!task) {\n      task = this.tasks.find(t => t.id === taskId);\n    }\n    if (task && task.iterationPath) {\n      // Fetch R&D team members specifically for this task's iteration path\n      this.loading.members = true;\n      this.teamService.getTeamMembersByTeam('RND', task.iterationPath).subscribe({\n        next: members => {\n          this.teamMembers = members;\n          this.loading.members = false;\n          // Filter to R&D team members\n          this.filterRnDTeamMembers();\n          // Load task counts after team members are loaded\n          if (task && task.iterationPath) {\n            this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n          }\n        },\n        error: err => {\n          console.error(`Error loading R&D team members for iteration path ${task?.iterationPath ?? 'unknown'}:`, err);\n          this.error.members = `Failed to load team members: ${err.message}`;\n          this.loading.members = false;\n          // Fallback to regular team members if R&D team fetch fails\n          if (task && task.iterationPath) {\n            this.taskService.getTeamMembers(task.iterationPath).subscribe({\n              next: response => {\n                if (Array.isArray(response) && response.length > 0) {\n                  if (typeof response[0] === 'string') {\n                    // String array response\n                    const names = response;\n                    this.teamMembers = names.map((name, index) => ({\n                      id: `member-${index}`,\n                      displayName: name,\n                      uniqueName: '',\n                      currentWorkload: 0,\n                      isActive: true,\n                      email: '',\n                      team: this.applyTeamFilter ? this.teamName : ''\n                    }));\n                  } else {\n                    // TeamMember array response\n                    this.teamMembers = response;\n                  }\n                } else {\n                  this.teamMembers = [];\n                }\n                this.loading.members = false;\n                // Filter to R&D team members even with fallback response\n                this.filterRnDTeamMembers();\n                if (task && task.iterationPath) {\n                  this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n                }\n              },\n              error: fallbackErr => {\n                console.error(`Error loading fallback team members:`, fallbackErr);\n                this.error.members = `Failed to load team members: ${fallbackErr.message}`;\n                this.loading.members = false;\n              }\n            });\n          } else {\n            console.error('Cannot load team members: task or iterationPath is undefined');\n            this.loading.members = false;\n          }\n        }\n      });\n    } else {\n      // Ensure we have team members loaded before showing the modal\n      if (this.filteredTeamMembers.length === 0 && !this.loading.members) {\n        this.loadTeamMembers();\n      }\n      // Make sure we have task counts loaded\n      if (Object.keys(this.teamMemberTaskCounts).length === 0) {\n        this.loadTeamMemberTaskCounts();\n      }\n    }\n  }\n  /**\r\n   * Load task counts specifically for the modal dialogue\r\n   * This ensures counts are up-to-date when assigning tasks\r\n   */\n  loadTeamMemberTaskCountsForModal(iterationPath) {\n    this.loading.taskCounts = true;\n    // Normalize the iteration path\n    const normalizedPath = iterationPath.replace(/\\\\\\\\/g, '\\\\');\n    this.taskService.getTeamMemberTaskCounts(normalizedPath).subscribe({\n      next: counts => {\n        this.teamMemberTaskCounts = counts;\n        this.loading.taskCounts = false;\n        console.log('Loaded team member task counts for modal:', this.teamMemberTaskCounts);\n      },\n      error: err => {\n        console.error('Error loading team member task counts for modal:', err);\n        this.loading.taskCounts = false;\n      }\n    });\n  }\n  cancelAssign() {\n    this.selectedTask = null;\n    this.selectedMember = '';\n    this.error.assign = null;\n    this.loading.assign = false;\n  }\n  /**\r\n   * Get CSS class for priority badge\r\n   * @param priority Priority value (number or string)\r\n   * @returns CSS class name\r\n   */\n  getPriorityClass(priority) {\n    // Convert priority to number if it's a string\n    const priorityNum = typeof priority === 'string' ? parseInt(priority, 10) : priority;\n    if (isNaN(priorityNum)) {\n      return 'bg-secondary'; // Default for invalid priority\n    }\n\n    switch (priorityNum) {\n      case 1:\n        return 'bg-danger';\n      case 2:\n        return 'bg-warning text-dark';\n      case 3:\n        return 'bg-info text-dark';\n      case 4:\n        return 'bg-success';\n      default:\n        return 'bg-secondary';\n    }\n  }\n  /**\r\n   * Get CSS class for status badge\r\n   * @param status Status string or undefined\r\n   * @returns CSS class name\r\n   */\n  getStatusClass(status) {\n    if (!status) {\n      return 'status-to-do'; // Default for undefined status\n    }\n\n    const statusLower = status.toLowerCase();\n    // Return the appropriate custom status class based on requested colors\n    if (statusLower === 'active') {\n      return 'status-active'; // Yellow\n    } else if (statusLower === 'completed' || statusLower === 'done' || statusLower === 'closed' || statusLower === 'dev complete') {\n      return 'status-dev-complete'; // Green\n    } else if (statusLower === 'blocked') {\n      return 'status-blocked'; // Red\n    } else if (statusLower === 'dev-new' || statusLower === 'dev new') {\n      return 'status-dev-new'; // Blue\n    } else if (statusLower === 'code review') {\n      return 'status-code-review'; // Purple\n    } else if (statusLower === 'proposed') {\n      return 'status-proposed'; // Gray\n    } else if (statusLower === 'planned') {\n      return 'status-planned'; // Orange\n    } else if (statusLower === 'resolved') {\n      return 'status-resolved'; // Teal\n    } else if (statusLower.includes('progress')) {\n      return 'status-in-progress'; // Cyan\n    } else if (statusLower === 'to do' || statusLower === 'new') {\n      return 'status-to-do'; // Gray\n    } else {\n      return 'status-to-do'; // Default for any other status\n    }\n  }\n  /**\r\n   * Get CSS class for team member workload indicator\r\n   * @param workload Current workload value\r\n   * @returns CSS class name\r\n   */\n  getTeamMemberWorkloadClass(workload) {\n    if (workload === 0) {\n      return 'bg-secondary';\n    } else if (workload < 3) {\n      return 'bg-success';\n    } else if (workload < 7) {\n      return 'bg-warning text-dark';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  /**\r\n   * Get the progress bar class based on workload\r\n   * @param workload Current workload\r\n   * @returns Bootstrap progress bar class\r\n   */\n  getProgressBarClass(workload) {\n    if (workload === 0) {\n      return 'bg-secondary';\n    } else if (workload < 3) {\n      return 'bg-success';\n    } else if (workload < 7) {\n      return 'bg-warning';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  /**\r\n   * Calculate workload as a percentage (for progress bar width)\r\n   * @param workload Current workload\r\n   * @returns Percentage value (0-100)\r\n   */\n  getWorkloadPercentage(workload) {\n    // Using 10 as maximum reasonable workload\n    const maxWorkload = 10;\n    return Math.min(100, workload / maxWorkload * 100);\n  }\n  /**\r\n   * Handle changing the iteration path\r\n   * @param iterationPath The new iteration path\r\n   */\n  changeIterationPath(iterationPath) {\n    console.log(`Changing iteration path to: ${iterationPath}`);\n    if (this.currentIterationPath === iterationPath) {\n      console.log('Iteration path unchanged, skipping reload');\n      return;\n    }\n    // Update both the current and manual iteration paths\n    this.currentIterationPath = iterationPath;\n    this.manualIterationPath = iterationPath;\n    // For backward compatibility, trigger the search (load data)\n    this.searchClicked();\n  }\n  /**\r\n   * Get the title of the currently selected task\r\n   * @returns The task title or a fallback message\r\n   */\n  getSelectedTaskTitle() {\n    if (this.selectedTask === null) {\n      return 'No task selected';\n    }\n    const selectedTaskId = this.selectedTask;\n    // First try to find in filtered tasks\n    let task = this.filteredTasks.find(t => t.id === selectedTaskId);\n    // If not found (could be a non-R&D task), look in all tasks\n    if (!task) {\n      task = this.tasks.find(t => t.id === selectedTaskId);\n    }\n    return task ? task.title : 'Unknown Task';\n  }\n  /**\r\n   * Get the task count for a specific team member\r\n   * @param memberName The name of the team member\r\n   * @returns The number of tasks assigned to that member\r\n   */\n  getTaskCount(memberName) {\n    if (!memberName) {\n      console.warn('Called getTaskCount with empty memberName');\n      return 0;\n    }\n    // First check if we have task counts from the API\n    if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n      // Look for an exact match\n      if (this.teamMemberTaskCounts[memberName] !== undefined) {\n        return this.teamMemberTaskCounts[memberName];\n      }\n      // Try case-insensitive match\n      const key = Object.keys(this.teamMemberTaskCounts).find(k => k && k.toLowerCase() === memberName.toLowerCase());\n      if (key) {\n        return this.teamMemberTaskCounts[key];\n      }\n    }\n    // Fall back to the currentWorkload from team members\n    const member = this.teamMembers.find(m => typeof m === 'object' && m.displayName && m.displayName.toLowerCase() === memberName.toLowerCase());\n    return member && typeof member === 'object' ? member.currentWorkload : 0;\n  }\n  /**\r\n   * Get a list of all tasks with Dev-New status\r\n   * @returns List of Dev-New tasks\r\n   */\n  getDevNewTasks() {\n    return this.filteredTasks.filter(task => task.status && (task.status.toLowerCase() === 'dev-new' || task.status.toLowerCase() === 'dev new' || task.status.toLowerCase().includes('dev-new') || task.status.toLowerCase().includes('dev new') || task.status.toLowerCase() === 'development - new'));\n  }\n  /**\r\n   * Get a list of unassigned Dev-New tasks\r\n   * @returns List of unassigned Dev-New tasks\r\n   */\n  getUnassignedDevNewTasks() {\n    return this.filteredTasks.filter(task => task.status && (task.status.toLowerCase() === 'dev-new' || task.status.toLowerCase() === 'dev new' || task.status.toLowerCase().includes('dev-new') || task.status.toLowerCase().includes('dev new') || task.status.toLowerCase() === 'development - new') && !task.assignedTo);\n  }\n  /**\r\n   * Get a summary of task status distribution\r\n   * @returns Array of status counts\r\n   */\n  getStatusDistribution() {\n    const statusCounts = {};\n    this.filteredTasks.forEach(task => {\n      const status = task.status || 'Unknown';\n      statusCounts[status] = (statusCounts[status] || 0) + 1;\n    });\n    return Object.entries(statusCounts).map(([status, count]) => ({\n      status,\n      count\n    })).sort((a, b) => b.count - a.count);\n  }\n  /**\r\n   * Filter tasks to only show those assigned to R&D team members\r\n   */\n  filterTasksByRnDTeamMembers() {\n    // If team filter is not applied, show all tasks\n    if (!this.applyTeamFilter) {\n      this.filteredTasks = this.tasks;\n      console.log(`Team filter disabled. Showing all ${this.tasks.length} tasks.`);\n      return;\n    }\n    // First ensure we have filtered team members\n    if (this.filteredTeamMembers.length === 0) {\n      this.filterRnDTeamMembers();\n    }\n    // Get a list of display names of filtered R&D team members\n    const rndMemberNames = this.filteredTeamMembers.map(member => member.displayName.toLowerCase());\n    console.log('R&D team member names for task filtering:', rndMemberNames);\n    // Filter tasks to only include those assigned to R&D members and unassigned tasks\n    this.filteredTasks = this.tasks.filter(task => {\n      // Always include unassigned tasks\n      if (!task.assignedTo) {\n        return true;\n      }\n      // Check if task is assigned to an R&D team member\n      return rndMemberNames.includes(task.assignedTo.toLowerCase());\n    });\n    console.log(`Filtered ${this.tasks.length} tasks down to ${this.filteredTasks.length} tasks assigned to R&D members or unassigned`);\n  }\n  /**\r\n   * Generates an Azure DevOps URL for a specific work item ID\r\n   * @param taskId The ID of the work item to link to\r\n   * @returns A URL to the work item in Azure DevOps\r\n   */\n  getAzureDevOpsTaskUrl(taskId) {\n    return `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_workitems/edit/${taskId}/`;\n  }\n  /**\r\n   * Open task in Azure DevOps in a new tab\r\n   * @param taskId The ID of the task to open\r\n   * @param event The click event\r\n   */\n  openTaskInAzureDevOps(taskId, event) {\n    // Prevent default behavior to avoid interference with other actions\n    event.preventDefault();\n    event.stopPropagation();\n    // Open task in new tab\n    const url = this.getAzureDevOpsTaskUrl(taskId);\n    window.open(url, '_blank');\n    console.log(`Opening task ${taskId} in Azure DevOps`);\n  }\n  static {\n    this.ɵfac = function TaskDistributionComponent_Factory(t) {\n      return new (t || TaskDistributionComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.TeamService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskDistributionComponent,\n      selectors: [[\"app-task-distribution\"]],\n      decls: 122,\n      vars: 52,\n      consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [1, \"search-section\"], [1, \"input-group-container\"], [1, \"filter-checkbox\"], [\"type\", \"checkbox\", \"id\", \"applyTeamFilter\", 1, \"form-check-input\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [\"for\", \"applyTeamFilter\", 1, \"form-check-label\"], [1, \"search-input\", \"team-input\"], [\"type\", \"text\", \"placeholder\", \"Team Name\", 1, \"form-control\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [1, \"text-muted\"], [1, \"search-input\"], [\"type\", \"text\", \"placeholder\", \"Iteration Path\", \"list\", \"iterationPathsList\", 1, \"form-control\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [\"id\", \"iterationPathsList\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", \"search-btn\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-search\", \"me-1\"], [4, \"ngIf\"], [1, \"action-buttons\"], [1, \"btn\", \"btn-primary\", \"auto-assign-btn\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-magic\"], [1, \"text-muted\", \"mt-2\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [\"id\", \"taskTabs\", \"role\", \"tablist\", 1, \"nav\", \"nav-tabs\", \"mb-4\"], [\"role\", \"presentation\", 1, \"nav-item\"], [\"id\", \"task-distribution-tab\", \"data-bs-toggle\", \"tab\", \"data-bs-target\", \"#task-distribution\", \"type\", \"button\", \"role\", \"tab\", \"aria-controls\", \"task-distribution\", \"aria-selected\", \"true\", 1, \"nav-link\", \"active\", 3, \"click\"], [1, \"bi\", \"bi-list-task\", \"me-2\"], [\"id\", \"task-workload-tab\", \"data-bs-toggle\", \"tab\", \"data-bs-target\", \"#task-workload\", \"type\", \"button\", \"role\", \"tab\", \"aria-controls\", \"task-workload\", \"aria-selected\", \"false\", 1, \"nav-link\", 3, \"click\"], [1, \"bi\", \"bi-bar-chart-line\", \"me-2\"], [\"id\", \"taskTabsContent\", 1, \"tab-content\"], [\"id\", \"task-distribution\", \"role\", \"tabpanel\", \"aria-labelledby\", \"task-distribution-tab\", 1, \"tab-pane\", \"fade\", \"show\", \"active\"], [1, \"row\"], [1, \"card\"], [1, \"card-body\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [\"id\", \"task-workload\", \"role\", \"tabpanel\", \"aria-labelledby\", \"task-workload-tab\", 1, \"tab-pane\", \"fade\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"btn\", \"btn-outline-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-arrow-clockwise\", \"me-1\"], [\"class\", \"row\", 4, \"ngIf\"], [\"tabindex\", \"-1\", 1, \"modal\", 3, \"ngClass\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\"], [\"class\", \"alert alert-danger mb-3\", 4, \"ngIf\"], [1, \"mb-4\"], [\"for\", \"teamMemberSelect\", 1, \"form-label\", \"fw-bold\", \"mb-2\"], [1, \"team-member-options\"], [\"class\", \"form-check mb-2 border p-2 rounded\", 4, \"ngFor\", \"ngForOf\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"class\", \"modal-backdrop fade show\", 4, \"ngIf\"], [1, \"modal-dialog\", \"modal-lg\"], [1, \"modal-header\", \"bg-primary\", \"text-white\"], [1, \"bi\", \"bi-magic\", \"me-2\"], [\"type\", \"button\", 1, \"btn-close\", \"btn-close-white\", 3, \"click\"], [1, \"alert\", \"alert-primary\", \"mb-3\"], [1, \"bi\", \"bi-info-circle\", \"me-2\"], [\"class\", \"alert alert-info\", 4, \"ngIf\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [3, \"value\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-warning\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\"], [4, \"ngFor\", \"ngForOf\"], [\"href\", \"#\", 1, \"task-id-link\", 3, \"click\"], [1, \"badge\", \"rounded-pill\", 3, \"ngClass\"], [1, \"d-flex\", \"align-items-center\"], [\"class\", \"me-2\", 4, \"ngIf\"], [\"class\", \"text-muted me-2\", 4, \"ngIf\"], [\"class\", \"ms-1 suggestion-box\", 4, \"ngIf\"], [1, \"status-badge\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-person-plus\"], [1, \"me-2\"], [1, \"text-muted\", \"me-2\"], [1, \"ms-1\", \"suggestion-box\"], [1, \"text-primary\"], [1, \"bi\", \"bi-lightbulb-fill\"], [\"class\", \"col-md-3 col-sm-6 mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-3\", \"col-sm-6\", \"mb-3\"], [1, \"card\", \"team-member-card\", \"h-100\", 3, \"ngClass\"], [1, \"card-title\"], [1, \"workload-stats\", \"mt-2\"], [1, \"progress\", \"mt-2\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"10\", 1, \"progress-bar\", 3, \"ngClass\"], [\"class\", \"text-muted mt-2 small\", 4, \"ngIf\"], [1, \"text-muted\", \"mt-2\", \"small\"], [1, \"bi\", \"bi-envelope\"], [1, \"alert\", \"alert-danger\", \"mb-3\"], [1, \"mb-3\"], [1, \"form-label\", \"fw-bold\"], [1, \"py-2\", \"px-3\", \"bg-light\", \"rounded\"], [1, \"form-check\", \"mb-2\", \"border\", \"p-2\", \"rounded\"], [\"type\", \"radio\", \"name\", \"teamMemberRadio\", 1, \"form-check-input\", 3, \"id\", \"value\", \"ngModel\", \"ngModelChange\"], [1, \"form-check-label\", \"w-100\"], [1, \"member-name\"], [1, \"modal-backdrop\", \"fade\", \"show\"], [1, \"mt-2\"], [1, \"alert\", \"alert-info\"], [1, \"mt-3\"], [\"id\", \"debugAccordion\", 1, \"accordion\"], [1, \"accordion-item\"], [\"id\", \"headingOne\", 1, \"accordion-header\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#collapseOne\", \"aria-expanded\", \"false\", \"aria-controls\", \"collapseOne\", 1, \"accordion-button\", \"collapsed\"], [1, \"bi\", \"bi-bug\", \"me-2\"], [\"id\", \"collapseOne\", \"aria-labelledby\", \"headingOne\", \"data-bs-parent\", \"#debugAccordion\", 1, \"accordion-collapse\", \"collapse\"], [1, \"accordion-body\"], [1, \"table\", \"table-sm\", \"table-bordered\"], [1, \"mt-4\"], [1, \"list-unstyled\", \"row\"], [1, \"col-md-6\", \"mb-2\"], [1, \"bi\", \"bi-trophy\", \"text-warning\", \"me-2\"], [1, \"bi\", \"bi-check-circle\", \"text-success\", \"me-2\"], [1, \"bi\", \"bi-speedometer2\", \"text-info\", \"me-2\"], [1, \"bi\", \"bi-person-plus\", \"text-primary\", \"me-2\"], [1, \"badge\", \"bg-info\", \"text-dark\"], [1, \"badge\", \"bg-secondary\"], [\"class\", \"text-muted\", 4, \"ngIf\"], [\"class\", \"badge bg-warning text-dark\", 4, \"ngIf\"], [\"class\", \"text-muted small\", 4, \"ngIf\"], [1, \"badge\", \"bg-warning\", \"text-dark\"], [1, \"badge\", \"bg-success\", \"me-2\"], [\"class\", \"ms-2 badge bg-warning text-dark\", 4, \"ngIf\"], [1, \"ms-2\", \"badge\", \"bg-warning\", \"text-dark\"], [1, \"text-muted\", \"small\"]],\n      template: function TaskDistributionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\", 4);\n          i0.ɵɵtext(5, \"Task Distribution\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\")(7, \"div\", 5)(8, \"div\", 6)(9, \"div\", 7)(10, \"input\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_Template_input_ngModelChange_10_listener($event) {\n            return ctx.applyTeamFilter = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"label\", 9);\n          i0.ɵɵtext(12, \"Apply Team Filter\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 10)(14, \"input\", 11);\n          i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_Template_input_ngModelChange_14_listener($event) {\n            return ctx.teamName = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"small\", 12);\n          i0.ɵɵtext(16, \"TeamName\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"div\", 13)(18, \"input\", 14);\n          i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_Template_input_ngModelChange_18_listener($event) {\n            return ctx.manualIterationPath = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"small\", 12);\n          i0.ɵɵtext(20, \"IterationPath\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"datalist\", 15);\n          i0.ɵɵtemplate(22, TaskDistributionComponent_option_22_Template, 1, 1, \"option\", 16);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"button\", 17);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_23_listener() {\n            return ctx.searchClicked();\n          });\n          i0.ɵɵelement(24, \"i\", 18);\n          i0.ɵɵtemplate(25, TaskDistributionComponent_span_25_Template, 2, 0, \"span\", 19);\n          i0.ɵɵtemplate(26, TaskDistributionComponent_span_26_Template, 3, 0, \"span\", 19);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(27, \"div\", 20)(28, \"button\", 21);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_28_listener() {\n            return ctx.showAutoAssignPreview();\n          });\n          i0.ɵɵelement(29, \"i\", 22);\n          i0.ɵɵtemplate(30, TaskDistributionComponent_span_30_Template, 2, 0, \"span\", 19);\n          i0.ɵɵtemplate(31, TaskDistributionComponent_span_31_Template, 3, 0, \"span\", 19);\n          i0.ɵɵtemplate(32, TaskDistributionComponent_span_32_Template, 3, 0, \"span\", 19);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(33, \"p\", 23);\n          i0.ɵɵtext(34, \"Manage and assign tasks for the current sprint\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(35, TaskDistributionComponent_div_35_Template, 2, 1, \"div\", 24);\n          i0.ɵɵtemplate(36, TaskDistributionComponent_div_36_Template, 2, 1, \"div\", 25);\n          i0.ɵɵtemplate(37, TaskDistributionComponent_div_37_Template, 2, 1, \"div\", 24);\n          i0.ɵɵtemplate(38, TaskDistributionComponent_div_38_Template, 2, 1, \"div\", 24);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(39, \"ul\", 26)(40, \"li\", 27)(41, \"button\", 28);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_41_listener() {\n            return ctx.onTabChange(\"distribution\");\n          });\n          i0.ɵɵelement(42, \"i\", 29);\n          i0.ɵɵtext(43, \"Task Distribution \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(44, \"li\", 27)(45, \"button\", 30);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_45_listener() {\n            return ctx.onTabChange(\"workload\");\n          });\n          i0.ɵɵelement(46, \"i\", 31);\n          i0.ɵɵtext(47, \"Task Workload \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(48, \"div\", 32)(49, \"div\", 33)(50, \"div\", 34)(51, \"div\", 2)(52, \"div\", 35)(53, \"div\", 36);\n          i0.ɵɵtemplate(54, TaskDistributionComponent_div_54_Template, 4, 0, \"div\", 37);\n          i0.ɵɵtemplate(55, TaskDistributionComponent_div_55_Template, 2, 1, \"div\", 24);\n          i0.ɵɵtemplate(56, TaskDistributionComponent_div_56_Template, 3, 0, \"div\", 37);\n          i0.ɵɵtemplate(57, TaskDistributionComponent_div_57_Template, 18, 1, \"div\", 38);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(58, \"div\", 39)(59, \"div\", 34)(60, \"div\", 2)(61, \"div\", 35)(62, \"div\", 40)(63, \"h4\", 4);\n          i0.ɵɵtext(64, \"Team Workload\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(65, \"button\", 41);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_65_listener() {\n            ctx.loadTeamMembers();\n            return ctx.loadTeamMemberTaskCounts();\n          });\n          i0.ɵɵelement(66, \"i\", 42);\n          i0.ɵɵtext(67, \" Refresh Data \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(68, \"div\", 36);\n          i0.ɵɵtemplate(69, TaskDistributionComponent_div_69_Template, 4, 0, \"div\", 37);\n          i0.ɵɵtemplate(70, TaskDistributionComponent_div_70_Template, 2, 1, \"div\", 24);\n          i0.ɵɵtemplate(71, TaskDistributionComponent_div_71_Template, 3, 0, \"div\", 37);\n          i0.ɵɵtemplate(72, TaskDistributionComponent_div_72_Template, 2, 1, \"div\", 43);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(73, \"div\", 44)(74, \"div\", 45)(75, \"div\", 46)(76, \"div\", 47)(77, \"h5\", 48);\n          i0.ɵɵtext(78, \"Assign Task\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(79, \"button\", 49);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_79_listener() {\n            return ctx.cancelAssign();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(80, \"div\", 50);\n          i0.ɵɵtemplate(81, TaskDistributionComponent_div_81_Template, 2, 1, \"div\", 51);\n          i0.ɵɵtemplate(82, TaskDistributionComponent_div_82_Template, 11, 2, \"div\", 19);\n          i0.ɵɵelementStart(83, \"div\", 52)(84, \"label\", 53);\n          i0.ɵɵtext(85, \"Select Team Member\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(86, \"div\", 54);\n          i0.ɵɵtemplate(87, TaskDistributionComponent_div_87_Template, 8, 7, \"div\", 55);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(88, \"div\", 56)(89, \"button\", 57);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_89_listener() {\n            return ctx.cancelAssign();\n          });\n          i0.ɵɵtext(90, \"Cancel\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(91, \"button\", 58);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_91_listener() {\n            return ctx.assignTask();\n          });\n          i0.ɵɵtemplate(92, TaskDistributionComponent_span_92_Template, 2, 0, \"span\", 19);\n          i0.ɵɵtemplate(93, TaskDistributionComponent_span_93_Template, 3, 0, \"span\", 19);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(94, TaskDistributionComponent_div_94_Template, 1, 0, \"div\", 59);\n          i0.ɵɵelementStart(95, \"div\", 44)(96, \"div\", 60)(97, \"div\", 46)(98, \"div\", 61)(99, \"h5\", 48);\n          i0.ɵɵelement(100, \"i\", 62);\n          i0.ɵɵtext(101, \" Auto-Assign Preview \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(102, \"button\", 63);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_102_listener() {\n            return ctx.cancelAutoAssignPreview();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(103, \"div\", 50);\n          i0.ɵɵtemplate(104, TaskDistributionComponent_div_104_Template, 2, 1, \"div\", 51);\n          i0.ɵɵelementStart(105, \"div\", 64);\n          i0.ɵɵelement(106, \"i\", 65);\n          i0.ɵɵelementStart(107, \"strong\");\n          i0.ɵɵtext(108, \"Preview Mode:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(109, \" Review AI-suggested assignments before confirming. No changes will be made until you click \\\"Confirm & Assign\\\". \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(110, TaskDistributionComponent_div_110_Template, 6, 0, \"div\", 37);\n          i0.ɵɵtemplate(111, TaskDistributionComponent_div_111_Template, 3, 0, \"div\", 66);\n          i0.ɵɵtemplate(112, TaskDistributionComponent_div_112_Template, 14, 4, \"div\", 67);\n          i0.ɵɵtemplate(113, TaskDistributionComponent_div_113_Template, 49, 1, \"div\", 19);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(114, \"div\", 56)(115, \"button\", 57);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_115_listener() {\n            return ctx.cancelAutoAssignPreview();\n          });\n          i0.ɵɵtext(116, \"Cancel\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(117, \"button\", 58);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_117_listener() {\n            return ctx.confirmAutoAssign();\n          });\n          i0.ɵɵelement(118, \"i\", 62);\n          i0.ɵɵtemplate(119, TaskDistributionComponent_span_119_Template, 2, 0, \"span\", 19);\n          i0.ɵɵtemplate(120, TaskDistributionComponent_span_120_Template, 3, 0, \"span\", 19);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(121, TaskDistributionComponent_div_121_Template, 1, 0, \"div\", 59);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngModel\", ctx.applyTeamFilter)(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.teamName)(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.manualIterationPath)(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.iterationPaths);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.loading.members);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.tasks || ctx.loading.members);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", ctx.loading.autoAssign || ctx.loading.preview);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.autoAssign && !ctx.loading.preview);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.preview);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.autoAssign);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.autoAssign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.iterationPaths);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.tasks);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.members);\n          i0.ɵɵadvance(16);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.tasks);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.tasks);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.error.tasks && ctx.tasks.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.error.tasks && ctx.tasks.length > 0);\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.members);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.members);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.members && !ctx.error.members && ctx.filteredTeamMembers.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.members && !ctx.error.members && ctx.filteredTeamMembers.length > 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleProp(\"display\", ctx.selectedTask !== null ? \"block\" : \"none\");\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(48, _c1, ctx.selectedTask !== null));\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.assign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTask !== null);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.filteredTeamMembers);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", ctx.loading.assign || !ctx.selectedMember);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.assign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.assign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTask !== null);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleProp(\"display\", ctx.showingPreview ? \"block\" : \"none\");\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(50, _c1, ctx.showingPreview));\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.preview);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.preview);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length > 0);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", ctx.loading.autoAssign || !ctx.assignPreviewTasks || ctx.assignPreviewTasks.length === 0 || !ctx.hasAssignmentSuggestions());\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.autoAssign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.autoAssign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showingPreview);\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.CheckboxControlValueAccessor, i4.RadioControlValueAccessor, i4.NgControlStatus, i4.NgModel],\n      styles: [\".card[_ngcontent-%COMP%] {\\n  border-radius: 8px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n  margin-bottom: 20px;\\n}\\n\\n\\n.nav-tabs[_ngcontent-%COMP%] {\\n  border-bottom: 1px solid #dee2e6;\\n}\\n\\n.nav-tabs[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%] {\\n  border: none;\\n  color: #495057;\\n  font-weight: 500;\\n  padding: 10px 16px;\\n  margin-right: 4px;\\n  border-radius: 4px 4px 0 0;\\n  transition: all 0.2s ease;\\n}\\n\\n.nav-tabs[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%]:hover {\\n  background-color: rgba(13, 110, 253, 0.05);\\n  border-color: transparent;\\n}\\n\\n.nav-tabs[_ngcontent-%COMP%]   .nav-link.active[_ngcontent-%COMP%] {\\n  color: #0d6efd;\\n  background-color: #fff;\\n  border-bottom: 3px solid #0d6efd;\\n  font-weight: 600;\\n}\\n\\n.tab-content[_ngcontent-%COMP%] {\\n  padding: 20px 0;\\n}\\n\\n.card-header[_ngcontent-%COMP%] {\\n  background-color: #f8f9fa;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\\n  padding: 12px 16px;\\n}\\n\\n.table[_ngcontent-%COMP%] {\\n  margin-bottom: 0;\\n}\\n\\n.table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n  color: #495057;\\n}\\n\\n.suggestion-box[_ngcontent-%COMP%] {\\n  background-color: rgba(13, 110, 253, 0.05);\\n  padding: 3px 6px;\\n  border-radius: 4px;\\n  border-left: 2px solid #0d6efd;\\n  font-size: 0.8rem;\\n}\\n\\n\\n.team-member-card[_ngcontent-%COMP%] {\\n  transition: all 0.3s ease;\\n  border-radius: 8px;\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\\n}\\n.team-member-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\\n}\\n.team-member-card[_ngcontent-%COMP%]   .card-title[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n  margin-bottom: 0.5rem;\\n}\\n\\n\\n.workload-indicator[_ngcontent-%COMP%] {\\n  position: relative;\\n  height: 24px;\\n  border-radius: 12px;\\n  background-color: #f0f0f0;\\n  overflow: hidden;\\n  margin-top: 10px;\\n}\\n\\n.workload-bar[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  height: 100%;\\n  z-index: 1;\\n}\\n\\n.workload-label[_ngcontent-%COMP%] {\\n  position: relative;\\n  z-index: 2;\\n  display: block;\\n  text-align: center;\\n  line-height: 24px;\\n  font-size: 0.8rem;\\n  font-weight: 500;\\n  color: #333;\\n}\\n\\n.low-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%] {\\n  background-color: #28a745;\\n}\\n\\n.medium-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%] {\\n  background-color: #ffc107;\\n}\\n\\n.high-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%] {\\n  background-color: #dc3545;\\n}\\n\\n.workload-stats[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  justify-content: flex-start;\\n  margin-bottom: 0.5rem;\\n}\\n.workload-stats[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%] {\\n  font-size: 0.8rem;\\n  padding: 5px 10px;\\n}\\n\\n.progress[_ngcontent-%COMP%] {\\n  height: 8px;\\n  background-color: #f0f0f0;\\n}\\n\\n\\n.modal-backdrop[_ngcontent-%COMP%] {\\n  opacity: 0.5;\\n}\\n\\n.modal-content[_ngcontent-%COMP%] {\\n  border-radius: 8px;\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\\n}\\n\\n\\n#teamMemberSelect[_ngcontent-%COMP%] {\\n  max-height: 300px;\\n  width: 100%;\\n}\\n\\n#teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%] {\\n  padding: 8px 12px;\\n  cursor: pointer;\\n}\\n\\n#teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]:hover, #teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]:focus {\\n  background-color: #e9ecef;\\n}\\n\\n\\nselect.form-select[_ngcontent-%COMP%] {\\n  height: auto !important;\\n}\\n\\nselect.form-select[_ngcontent-%COMP%]   option[_ngcontent-%COMP%] {\\n  display: block;\\n  font-size: 16px;\\n  line-height: 1.5;\\n  padding: 8px 12px;\\n}\\n\\n\\n@keyframes _ngcontent-%COMP%_pulse {\\n  0% {\\n    box-shadow: 0 0 0 0 rgba(13, 110, 253, 0.4);\\n  }\\n  70% {\\n    box-shadow: 0 0 0 10px rgba(13, 110, 253, 0);\\n  }\\n  100% {\\n    box-shadow: 0 0 0 0 rgba(13, 110, 253, 0);\\n  }\\n}\\n\\n.team-member-options[_ngcontent-%COMP%] {\\n  max-height: 300px;\\n  overflow-y: auto;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%] {\\n  transition: all 0.2s ease;\\n  cursor: pointer;\\n  border: 1px solid #dee2e6 !important;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]:hover {\\n  background-color: #f8f9fa;\\n  transform: translateY(-2px);\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n  padding: 4px 0;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .member-name[_ngcontent-%COMP%] {\\n  font-weight: 500;\\n}\\n\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]:checked    + .form-check-label[_ngcontent-%COMP%] {\\n  color: #0d6efd;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]:checked    + .form-check-label[_ngcontent-%COMP%]   .member-name[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]:has(.form-check-input:checked) {\\n  background-color: rgba(13, 110, 253, 0.05);\\n  border-color: #0d6efd !important;\\n}\\n\\n\\n.search-section[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  gap: 12px;\\n  flex-wrap: nowrap;\\n  margin-bottom: 1rem;\\n}\\n\\n.input-group-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  background-color: #CCEBFF;\\n  border: 1px solid #A8D8F0;\\n  border-radius: 4px;\\n  padding: 8px 12px;\\n  gap: 12px;\\n  flex-grow: 1;\\n  color: #333;\\n}\\n.input-group-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::placeholder {\\n  color: #6c757d;\\n}\\n.input-group-container[_ngcontent-%COMP%]   small.text-muted[_ngcontent-%COMP%] {\\n  color: #6c757d !important;\\n}\\n.input-group-container[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%] {\\n  background-color: white;\\n  border-color: #a8d8f0;\\n}\\n.input-group-container[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%] {\\n  color: #333;\\n}\\n.input-group-container[_ngcontent-%COMP%]   .search-btn[_ngcontent-%COMP%] {\\n  background-color: #0d6efd;\\n  color: white;\\n  border: none;\\n  font-weight: 500;\\n}\\n.input-group-container[_ngcontent-%COMP%]   .search-btn[_ngcontent-%COMP%]:hover {\\n  background-color: #0b5ed7;\\n  color: white;\\n}\\n\\n.search-input[_ngcontent-%COMP%] {\\n  min-width: 180px;\\n  margin-bottom: 0;\\n}\\n\\n\\n.search-input[_ngcontent-%COMP%]   input[disabled][_ngcontent-%COMP%] {\\n  background-color: #e9ecef;\\n  opacity: 0.65;\\n}\\n\\n.filter-checkbox[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  white-space: nowrap;\\n  margin-right: 8px;\\n}\\n\\n.filter-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%] {\\n  transform: scale(1.2);\\n  margin-right: 6px;\\n  cursor: pointer;\\n}\\n\\n.filter-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked {\\n  background-color: #0d6efd;\\n  border-color: #0d6efd;\\n}\\n\\n.filter-checkbox[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  cursor: pointer;\\n}\\n\\n.action-buttons[_ngcontent-%COMP%] {\\n  display: flex;\\n  gap: 8px;\\n  white-space: nowrap;\\n}\\n\\n.search-btn[_ngcontent-%COMP%], .auto-assign-btn[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n}\\n\\n\\n@media (max-width: 1200px) {\\n  .search-section[_ngcontent-%COMP%] {\\n    flex-wrap: wrap;\\n  }\\n  .input-group-container[_ngcontent-%COMP%] {\\n    width: 100%;\\n    margin-bottom: 10px;\\n  }\\n  .action-buttons[_ngcontent-%COMP%] {\\n    margin-left: auto;\\n  }\\n}\\n@media (max-width: 992px) {\\n  .input-group-container[_ngcontent-%COMP%] {\\n    flex-wrap: wrap;\\n  }\\n  .filter-checkbox[_ngcontent-%COMP%] {\\n    width: 100%;\\n    margin-bottom: 8px;\\n  }\\n  .search-input[_ngcontent-%COMP%] {\\n    min-width: 160px;\\n  }\\n  .action-buttons[_ngcontent-%COMP%] {\\n    display: flex;\\n    gap: 8px;\\n    margin-left: 0;\\n    width: 100%;\\n  }\\n  .search-btn[_ngcontent-%COMP%], .auto-assign-btn[_ngcontent-%COMP%] {\\n    flex: 1;\\n  }\\n}\\n@media (max-width: 768px) {\\n  .search-section[_ngcontent-%COMP%] {\\n    flex-direction: column;\\n    align-items: stretch;\\n  }\\n  .search-input[_ngcontent-%COMP%] {\\n    width: 100%;\\n  }\\n}\\n.team-input[_ngcontent-%COMP%] {\\n  margin-left: 8px;\\n}\\n\\n\\n.filter-checkbox[_ngcontent-%COMP%]:hover   .form-check-input[_ngcontent-%COMP%] {\\n  border-color: #0d6efd;\\n}\\n\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge[_ngcontent-%COMP%] {\\n  padding: 0.5em 0.85em;\\n  border-radius: 30px;\\n  font-size: 0.8rem;\\n  font-weight: 500;\\n  display: inline-block;\\n  text-align: center;\\n  min-width: 100px;\\n  border: none;\\n}\\n\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-dev-new[_ngcontent-%COMP%] {\\n  background-color: #1976d2 !important; \\n  color: white !important;\\n}\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-dev-complete[_ngcontent-%COMP%] {\\n  background-color: #4CAF50 !important; \\n  color: white !important;\\n}\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-planned[_ngcontent-%COMP%] {\\n  background-color: #FF9800 !important; \\n  color: white !important;\\n}\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-proposed[_ngcontent-%COMP%] {\\n  background-color: #9E9E9E !important; \\n  color: white !important;\\n}\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-resolved[_ngcontent-%COMP%] {\\n  background-color: #009688 !important; \\n  color: white !important;\\n}\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-code-review[_ngcontent-%COMP%] {\\n  background-color: #9C27B0 !important; \\n  color: white !important;\\n}\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-in-progress[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-dev-in-progress[_ngcontent-%COMP%] {\\n  background-color: #00BCD4 !important; \\n  color: white !important;\\n}\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-active[_ngcontent-%COMP%] {\\n  background-color: #FFC107 !important; \\n  color: black !important; \\n}\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-blocked[_ngcontent-%COMP%] {\\n  background-color: #F44336 !important; \\n  color: white !important;\\n}\\n\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-completed[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-done[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-closed[_ngcontent-%COMP%] {\\n  background-color: #4CAF50 !important; \\n  color: white !important;\\n}\\n\\n.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-to-do[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-new[_ngcontent-%COMP%] {\\n  background-color: #9E9E9E !important; \\n  color: white !important;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["forkJoin","environment","i0","TaskDistributionComponent","constructor","taskService","teamService","tasks","members","assign","autoAssign","iterationPaths","taskCounts","preview","azureDevOpsUrl","organization","project","ngOnInit","loadIterationPaths","onTabChange","tabId","console","log","activeTab","loadTeamMembers","loadTeamMemberTaskCounts","filteredTasks","length","loading","loadTasks","ngAfterViewInit","initializeBootstrapTabs","window","bootstrap","Tab","tabElements","document","querySelectorAll","forEach","tabEl","tab","addEventListener","event","targetId","target","getAttribute","filteredTeamMembers","warn","error","getIterationPaths","subscribe","next","paths","currentIterationPath","manualIterationPath","err","message","searchClicked","normalizedPath","replace","applyTeamFilter","getTasks","teamMembers","updateTeamWorkload","filterTasksByRnDTeamMembers","getTeamMembersByTeam","teamName","filterRnDTeamMembers","loadAllTeamMembers","getTeamMembers","response","Array","isArray","map","name","index","id","displayName","uniqueName","currentWorkload","isActive","email","team","memberErr","member","filter","toLowerCase","includes","getTeamMemberTaskCounts","counts","teamMemberTaskCounts","indexOf","Object","keys","entries","find","_","task","assignedTo","normalizedAssignedTo","trim","matchedMember","isPartOfCurrentIterationTeam","assignTask","selectedTask","selectedMember","cancelAssign","showSuccessMessage","alertDiv","createElement","className","textContent","style","zIndex","body","appendChild","setTimeout","remove","showAutoAssignPreview","showingPreview","assignPreviewTasks","assignPreviewSuggestions","allDevNewTasks","status","normalizedStatus","teamMemberNames","getAutoAssignSuggestionsForTeam","suggestions","suggestedTaskIds","parseInt","getStandardAutoAssignSuggestions","getAutoAssignSuggestions","t","Number","slice","Math","min","availableMembers","sort","a","b","m","Boolean","memberIndex","hasAssignmentSuggestions","cancelAutoAssignPreview","confirmAutoAssign","assignmentPromises","assignmentCount","developerName","extractDeveloperName","title","push","suggestion","substring","parts","split","extractLogicExplanation","match","spaceIndex","autoAssignTasks","openAssignModal","taskId","iterationPath","loadTeamMemberTaskCountsForModal","names","fallbackErr","getPriorityClass","priority","priorityNum","isNaN","getStatusClass","statusLower","getTeamMemberWorkloadClass","workload","getProgressBarClass","getWorkloadPercentage","maxWorkload","changeIterationPath","getSelectedTaskTitle","selectedTaskId","getTaskCount","memberName","undefined","key","k","getDevNewTasks","getUnassignedDevNewTasks","getStatusDistribution","statusCounts","count","rndMemberNames","getAzureDevOpsTaskUrl","openTaskInAzureDevOps","preventDefault","stopPropagation","url","open","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-distribution\\task-distribution.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-distribution\\task-distribution.component.html"],"sourcesContent":["import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { TaskService } from '../../services/task.service';\nimport { TeamService } from '../../services/team.service';\nimport { WorkItem, TeamMember } from '../../models/task.model';\nimport { forkJoin } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\n// Declare the global bootstrap variable for TypeScript\ndeclare global {\n  interface Window {\n    bootstrap: any;\n  }\n}\n\n@Component({\n  selector: 'app-task-distribution',\n  templateUrl: './task-distribution.component.html',\n  styleUrls: ['./task-distribution.component.scss']\n})\nexport class TaskDistributionComponent implements OnInit, AfterViewInit {\n  tasks: WorkItem[] = [];\n  filteredTasks: WorkItem[] = [];\n  teamMembers: TeamMember[] = [];\n  filteredTeamMembers: TeamMember[] = []; // New property for filtered team members\n  selectedTaskId: number | null = null;\n  selectedTeamMemberId: string = '';\n  selectedTask: number | null = null; // Added for modal display\n  selectedMember: string = ''; // Added for member selection in modal\n  currentIterationPath: string = 'Techoil\\\\2.3.23'; // Default value\n  manualIterationPath: string = ''; // For manual input\n  teamName: string = 'RND'; // Default team name\n  iterationPaths: string[] = []; // Will be loaded from API\n  teamMemberTaskCounts: Record<string, number> = {}; // Added for task counts\n  applyTeamFilter: boolean = true; // Whether to apply team name filter\n  \n  // Auto-assign preview properties\n  showingPreview: boolean = false;\n  assignPreviewTasks: WorkItem[] = [];\n  assignPreviewSuggestions: Record<string, string> = {};\n  \n  // Track the active tab\n  activeTab: string = 'distribution';\n  \n  // Convert simple boolean to object with specific loading states\n  loading: { \n    tasks: boolean; \n    members: boolean; \n    assign: boolean; \n    autoAssign: boolean;\n    iterationPaths: boolean;\n    taskCounts: boolean; // Added for task counts loading\n    preview: boolean; // Added for auto-assign preview loading\n  } = {\n    tasks: false,\n    members: false,\n    assign: false,\n    autoAssign: false,\n    iterationPaths: false,\n    taskCounts: false, // Added for task counts loading\n    preview: false // Added for auto-assign preview loading\n  };\n  \n  // Convert simple string to object with specific error states\n  error: { \n    tasks: string | null; \n    members: string | null; \n    assign: string | null; \n    autoAssign: string | null;\n    iterationPaths: string | null;\n    taskCounts: string | null; // Added for task counts errors\n    preview: string | null; // Added for auto-assign preview errors\n  } = {\n    tasks: null,\n    members: null,\n    assign: null,\n    autoAssign: null,\n    iterationPaths: null,\n    taskCounts: null, // Added for task counts errors\n    preview: null // Added for auto-assign preview errors\n  };\n\n  // Azure DevOps URL components from environment\n  private azureDevOpsUrl: string = environment.azureDevOpsUrl;\n  private organization: string = environment.organization;\n  private project: string = environment.project;\n\n  constructor(\n    private taskService: TaskService,\n    private teamService: TeamService\n  ) {}\n\n  ngOnInit(): void {\n    this.loadIterationPaths();\n  }\n\n  /**\n   * Handle tab change events\n   * @param tabId The ID of the selected tab\n   */\n  onTabChange(tabId: string): void {\n    console.log(`Tab changed to: ${tabId}`);\n    this.activeTab = tabId;\n    \n    // Load specific data based on the selected tab\n    if (tabId === 'workload') {\n      // Force refresh team members and workload data\n      this.loadTeamMembers();\n      this.loadTeamMemberTaskCounts();\n      console.log('Refreshing team workload data');\n    } else if (tabId === 'distribution') {\n      // Refresh tasks if needed\n      if (this.filteredTasks.length === 0 && !this.loading.tasks) {\n        this.loadTasks();\n        console.log('Refreshing task distribution data');\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // Initialize Bootstrap tabs\n    this.initializeBootstrapTabs();\n  }\n\n  /**\n   * Initialize Bootstrap tabs programmatically\n   */\n  private initializeBootstrapTabs(): void {\n    try {\n      // Check if Bootstrap's Tab class is available globally\n      if (typeof window.bootstrap !== 'undefined' && window.bootstrap.Tab) {\n        // Initialize all tabs\n        const tabElements = document.querySelectorAll('[data-bs-toggle=\"tab\"]');\n        tabElements.forEach(tabEl => {\n          // Create tab instance\n          const tab = new window.bootstrap.Tab(tabEl);\n          \n          // Add event listener for tab shown event\n          tabEl.addEventListener('shown.bs.tab', (event: any) => {\n            // Extract tab ID from the target\n            const targetId = event.target.getAttribute('data-bs-target');\n            const tabId = targetId === '#task-distribution' ? 'distribution' : 'workload';\n            console.log(`Tab shown event: ${tabId}`);\n            \n            // Update active tab and ensure data is loaded\n            this.activeTab = tabId;\n            \n            // Ensure tab content is loaded/refreshed\n            if (tabId === 'workload' && this.filteredTeamMembers.length === 0 && !this.loading.members) {\n              this.loadTeamMembers();\n              this.loadTeamMemberTaskCounts();\n            }\n          });\n        });\n        \n        console.log('Bootstrap tabs initialized successfully with event listeners');\n      } else {\n        console.warn('Bootstrap JavaScript not found. Tabs may not function properly.');\n      }\n    } catch (error) {\n      console.error('Error initializing Bootstrap tabs:', error);\n    }\n  }\n\n  loadIterationPaths(): void {\n    this.loading.iterationPaths = true;\n    this.error.iterationPaths = null;\n\n    this.taskService.getIterationPaths().subscribe({\n      next: (paths) => {\n        this.iterationPaths = paths;\n        this.loading.iterationPaths = false;\n        \n        if (paths.length > 0) {\n          // Use the first path as default if available\n          this.currentIterationPath = paths[0];\n          this.manualIterationPath = paths[0];\n        }\n        \n        // We no longer automatically load data after loading iteration paths\n        // Data will be loaded when the search button is clicked\n      },\n      error: (err) => {\n        console.error('Error loading iteration paths:', err);\n        this.error.iterationPaths = `Failed to load iteration paths: ${err.message}`;\n        this.loading.iterationPaths = false;\n        \n        // Add fallback iteration paths if API call fails\n        this.iterationPaths = [\n          'Techoil\\\\2.3.23',\n          'Techoil\\\\2.3.24',\n          'Techoil\\\\2.3.25',\n          'Techoil\\\\2.3.26'\n        ];\n        console.log('Using fallback iteration paths:', this.iterationPaths);\n        \n        // We no longer automatically load data after loading iteration paths\n        // Data will be loaded when the search button is clicked\n      }\n    });\n  }\n\n  /**\n   * Search button handler - loads data based on manual inputs\n   */\n  searchClicked(): void {\n    // Normalize the manual input iteration path\n    const normalizedPath = this.manualIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    \n    // Update the current iteration path with the normalized manual input\n    this.currentIterationPath = normalizedPath;\n    this.manualIterationPath = normalizedPath; // Update the displayed value too\n    \n    // Clear previous errors\n    this.error.tasks = null;\n    this.error.members = null;\n    \n    console.log(`Searching with team filter ${this.applyTeamFilter ? 'enabled' : 'disabled'}`);\n    console.log(`Using normalized iteration path: ${normalizedPath}`);\n    \n    // Load data based on the manual inputs\n    this.loadTasks();\n    this.loadTeamMembers();\n  }\n\n  loadTasks(): void {\n    this.loading.tasks = true;\n    this.error.tasks = null;\n    \n    // Normalize the iteration path to handle any double backslashes\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    \n    console.log(`Loading tasks for iteration path: ${normalizedPath}`);\n    \n    this.taskService.getTasks(normalizedPath).subscribe({\n      next: (tasks) => {\n        this.tasks = tasks;\n        this.loading.tasks = false;\n        console.log(`Loaded ${tasks.length} tasks for iteration path ${normalizedPath}`);\n        \n        // After loading tasks, update team workload and filter tasks\n        if (this.teamMembers.length > 0) {\n          this.updateTeamWorkload();\n          this.filterTasksByRnDTeamMembers();\n        }\n      },\n      error: (err) => {\n        console.error(`Error loading tasks for iteration path ${normalizedPath}:`, err);\n        this.error.tasks = `Failed to load tasks: ${err.message}`;\n        this.loading.tasks = false;\n      }\n    });\n  }\n\n  loadTeamMembers(): void {\n    this.loading.members = true;\n    this.error.members = null;\n\n    // Normalize the iteration path to handle any double backslashes\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n\n    // Use the teamService directly to get team members by team name if filter is applied\n    // Otherwise, just get all team members\n    if (this.applyTeamFilter) {\n      this.teamService.getTeamMembersByTeam(this.teamName, normalizedPath).subscribe({\n        next: (teamMembers) => {\n          this.teamMembers = teamMembers;\n          console.log(`Loaded ${this.teamName} team members:`, this.teamMembers);\n          this.loading.members = false;\n          \n          // Filter out non-R&D team members\n          this.filterRnDTeamMembers();\n          \n          // Load team member task counts after loading team members\n          this.loadTeamMemberTaskCounts();\n          \n          // If tasks are already loaded, update workload\n          if (this.tasks.length > 0) {\n            this.updateTeamWorkload();\n          } else {\n            // If no tasks are loaded yet, still show the team members\n            console.log('No tasks loaded yet, showing filtered team members');\n          }\n        },\n        error: (err) => {\n          console.error(`Error loading ${this.teamName} team members:`, err);\n          \n          // Fallback to regular team members if team-specific call fails\n          this.loadAllTeamMembers(normalizedPath);\n        }\n      });\n    } else {\n      // If team filter is not applied, load all team members\n      this.loadAllTeamMembers(normalizedPath);\n    }\n  }\n\n  /**\n   * Helper method to load all team members without team filter\n   */\n  private loadAllTeamMembers(normalizedPath: string): void {\n    this.taskService.getTeamMembers(normalizedPath).subscribe({\n      next: (response) => {\n        // Process the response as an array of TeamMember objects\n        if (Array.isArray(response)) {\n          // Handle string array response - convert strings to TeamMember objects\n          if (response.length > 0 && typeof response[0] === 'string') {\n            this.teamMembers = (response as string[]).map((name, index) => ({\n              id: `member-${index}`,\n              displayName: name,\n              uniqueName: '',\n              currentWorkload: 0,\n              isActive: true,\n              email: '',\n              team: this.applyTeamFilter ? this.teamName : ''\n            }));\n          } else {\n            // It's already an array of TeamMember objects\n            this.teamMembers = response as TeamMember[];\n          }\n          \n          // If team filter is applied, still filter out non-R&D team members\n          if (this.applyTeamFilter) {\n            this.filterRnDTeamMembers();\n          } else {\n            // If not applying team filter, all team members are filtered\n            this.filteredTeamMembers = this.teamMembers;\n          }\n          \n          // If tasks are already loaded, update team workload data\n          if (this.tasks.length > 0) {\n            this.updateTeamWorkload();\n          }\n        } else {\n          console.error('Unexpected response format from getTeamMembers:', response);\n          this.error.members = 'Failed to load team members: Invalid response format';\n        }\n        \n        this.loading.members = false;\n      },\n      error: (memberErr) => {\n        console.error(`Error loading team members for iteration path ${normalizedPath}:`, memberErr);\n        this.error.members = `Failed to load team members: ${memberErr.message}`;\n        this.loading.members = false;\n      }\n    });\n  }\n\n  /**\n   * Filter team members to only include R&D team members\n   */\n  filterRnDTeamMembers(): void {\n    // Convert any string team members to objects first\n    this.teamMembers = this.teamMembers.map((member, index) => {\n      if (typeof member === 'string') {\n        return {\n          id: `member-${index}`,\n          displayName: member,\n          uniqueName: '',\n          currentWorkload: 0,\n          isActive: true,\n          email: '',\n          team: this.applyTeamFilter ? this.teamName : ''\n        };\n      }\n      return member;\n    });\n    \n    // Filter out members that don't have an R&D-related team property\n    this.filteredTeamMembers = this.teamMembers.filter(member => {\n      // Ensure member is an object\n      if (typeof member !== 'object') {\n        console.warn(`Unexpected member type in filterRnDTeamMembers: ${typeof member}`);\n        return false;\n      }\n      \n      // If member has a team property and it contains R&D-related terms\n      if (member.team) {\n        return member.team.toLowerCase().includes('r&d') || \n               member.team.toLowerCase().includes('rnd') || \n               member.team.toLowerCase().includes('research');\n      }\n      \n      // Log members without team info\n      console.log(`Team member without team info: ${member.displayName}`);\n      \n      // If no team property, default to including the member (backend should have already filtered)\n      return true;\n    });\n    \n    // Log the results\n    console.log(`Filtered ${this.teamMembers.length} team members down to ${this.filteredTeamMembers.length} R&D members`);\n  }\n\n  /**\n   * Load task counts for each team member from the API\n   */\n  loadTeamMemberTaskCounts(): void {\n    this.loading.taskCounts = true;\n    this.error.taskCounts = null;\n    \n    // Normalize the iteration path\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    \n    this.taskService.getTeamMemberTaskCounts(normalizedPath).subscribe({\n      next: (counts) => {\n        this.teamMemberTaskCounts = counts;\n        this.loading.taskCounts = false;\n        console.log('Loaded team member task counts:', this.teamMemberTaskCounts);\n        \n        // Update the team members with their task counts\n        this.updateTeamWorkload();\n      },\n      error: (err) => {\n        console.error('Error loading team member task counts:', err);\n        this.error.taskCounts = `Failed to load task counts: ${err.message}`;\n        this.loading.taskCounts = false;\n        \n        // Fall back to counting tasks manually\n        this.updateTeamWorkload();\n      }\n    });\n  }\n\n  /**\n   * Calculate and update team members' workload based on task assignments\n   */\n  updateTeamWorkload(): void {\n    console.log('Updating team workload');\n    \n    // Reset all workloads to 0 for all team members\n    this.teamMembers.forEach(member => {\n      // Ensure member is a TeamMember object and not a string\n      if (typeof member === 'string') {\n        console.warn(`Found string member instead of object: ${member}`);\n        // Convert string to TeamMember object if needed\n        const index = this.teamMembers.indexOf(member);\n        if (index >= 0) {\n          this.teamMembers[index] = {\n            id: `member-${index}`,\n            displayName: member,\n            uniqueName: '',\n            currentWorkload: 0,\n            isActive: true,\n            email: '',\n            team: this.applyTeamFilter ? this.teamName : ''\n          };\n        }\n      } else {\n        // Reset workload for object\n        member.currentWorkload = 0;\n      }\n    });\n    \n    // If we have task counts from the API, use those\n    if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n      this.teamMembers.forEach(member => {\n        // Skip if member is not an object\n        if (typeof member === 'string') return;\n        \n        // Try to find this member in the task counts\n        const counts = Object.entries(this.teamMemberTaskCounts).find(\n          ([name, _]) => name.toLowerCase() === member.displayName.toLowerCase()\n        );\n        \n        if (counts) {\n          member.currentWorkload = counts[1]; // Set the count from the API\n        }\n      });\n    } else {\n      // Fall back to counting from tasks array\n      this.tasks.forEach(task => {\n        if (task.assignedTo) {\n          // Normalize the assignedTo value\n          const normalizedAssignedTo = task.assignedTo.trim().toLowerCase();\n          \n          // Find matching team member\n          const matchedMember = this.teamMembers.find(member => \n            typeof member === 'object' && member.displayName.toLowerCase() === normalizedAssignedTo\n          );\n          \n          if (matchedMember) {\n            matchedMember.currentWorkload++;\n          }\n        }\n      });\n    }\n    \n    // Only filter for R&D team members if team filter is applied\n    if (this.applyTeamFilter) {\n      // Re-apply R&D filter to ensure we only show R&D team members\n      this.filterRnDTeamMembers();\n    } else {\n      // If filter not applied, use all team members\n      this.filteredTeamMembers = this.teamMembers;\n    }\n    \n    // Also filter tasks to match team members or show all if filter not applied\n    this.filterTasksByRnDTeamMembers();\n    \n    console.log('Updated team workload for filtered members:', this.filteredTeamMembers);\n  }\n\n  /**\n   * Check if a team member is part of the current iteration team\n   * This is a placeholder - you may need to implement actual logic based on your data model\n   */\n  isPartOfCurrentIterationTeam(member: TeamMember): boolean {\n    // By default, include all team members\n    // You might want to enhance this with actual iteration team membership logic\n    return true;\n  }\n\n  assignTask(): void {\n    if (!this.selectedTask) {\n      this.error.assign = 'Error: No task selected for assignment';\n      return;\n    }\n    \n    if (!this.selectedMember) {\n      this.error.assign = 'Please select a team member for assignment';\n      return;\n    }\n\n    this.loading.assign = true;\n    this.error.assign = null;\n    \n    // Use the selected member name directly for the API call\n    console.log(`Assigning task ${this.selectedTask} to member ${this.selectedMember}`);\n    \n    this.taskService.assignTask(this.selectedTask, this.selectedMember).subscribe({\n      next: (response) => {\n        console.log('Task assignment successful:', response);\n        // Close the modal\n        this.cancelAssign();\n        // Show success message (could be implemented with a toast/snackbar service)\n        this.showSuccessMessage('Task assigned successfully');\n        // Reload tasks and task counts to reflect changes\n        this.loadTasks();\n        this.loadTeamMemberTaskCounts();\n      },\n      error: (err) => {\n        console.error('Error assigning task:', err);\n        this.error.assign = `Failed to assign task: ${err.message}`;\n        this.loading.assign = false;\n      }\n    });\n  }\n\n  // Helper method to show success message (placeholder for toast/snackbar)\n  showSuccessMessage(message: string): void {\n    console.log('SUCCESS:', message);\n    // In a real implementation, you would use a toast/snackbar service\n    // Example: this.toastService.show(message, { classname: 'bg-success' });\n    \n    // For now, create a simple alert element that disappears after a few seconds\n    const alertDiv = document.createElement('div');\n    alertDiv.className = 'alert alert-success position-fixed top-0 end-0 m-3';\n    alertDiv.textContent = message;\n    alertDiv.style.zIndex = '9999';\n    document.body.appendChild(alertDiv);\n    \n    // Remove after 3 seconds\n    setTimeout(() => {\n      alertDiv.remove();\n    }, 3000);\n  }\n\n  /**\n   * Show preview of auto-assign suggestions before performing the assignment\n   */\n  showAutoAssignPreview(): void {\n    this.loading.preview = true;\n    this.error.preview = null;\n    this.showingPreview = true;\n    this.assignPreviewTasks = [];\n    this.assignPreviewSuggestions = {};\n    \n    // Normalize the iteration path to handle any double backslashes\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    console.log('Using normalized iteration path for auto-assign preview:', normalizedPath);\n    \n    // First, get all Dev-New tasks for the current iteration\n    this.taskService.getTasks(normalizedPath).subscribe({\n      next: (tasks) => {\n        // Enhanced filtering for Dev-New tasks - handle various status formats\n        const allDevNewTasks = tasks.filter(task => {\n          // Skip tasks without status\n          if (!task.status) return false;\n          \n          // Normalize status by removing spaces, hyphens, and converting to lowercase\n          const normalizedStatus = task.status.toLowerCase()\n            .replace(/[\\s\\-]/g, ''); // Remove spaces and hyphens\n          \n          // Match against various formats of \"Dev-New\"\n          return normalizedStatus === 'devnew' || \n                 normalizedStatus === 'newdev' ||\n                 normalizedStatus.includes('devnew') ||\n                 normalizedStatus.includes('newdev') ||\n                 normalizedStatus.includes('developmentnew') ||\n                 normalizedStatus.includes('newdevelopment');\n        });\n        \n        console.log(`Found ${allDevNewTasks.length} Dev-New tasks for auto-assign preview out of ${tasks.length} total tasks`);\n        console.log('Dev-New tasks:', allDevNewTasks);\n        \n        if (allDevNewTasks.length === 0) {\n          this.error.preview = 'No Dev-New tasks found in the current iteration. Auto-assign requires tasks with Dev-New status.';\n          this.loading.preview = false;\n          return;\n        }\n        \n        // If RnD team filter is applied, get team-specific suggestions\n        if (this.applyTeamFilter && this.teamName === 'RND') {\n          // Get RnD team members first\n          this.teamService.getTeamMembersByTeam('RND', normalizedPath).subscribe({\n            next: (teamMembers) => {\n              console.log('Got RnD team members for auto-assign:', teamMembers);\n              \n              // Extract team member names\n              const teamMemberNames = teamMembers.map(member => member.displayName);\n              \n              // Get auto-assign suggestions specifically for RnD team\n              this.taskService.getAutoAssignSuggestionsForTeam(normalizedPath, teamMemberNames).subscribe({\n                next: (suggestions) => {\n                  this.assignPreviewSuggestions = suggestions;\n                  console.log('Got team-specific suggestions:', suggestions);\n                  \n                  // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n                  const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n                  this.assignPreviewTasks = allDevNewTasks.filter(task => \n                    suggestedTaskIds.includes(task.id)\n                  );\n                  \n                  console.log('Filtered tasks to be reassigned:', this.assignPreviewTasks);\n                  \n                  // If no matches, try fallback to standard suggestions\n                  if (this.assignPreviewTasks.length === 0 && Object.keys(suggestions).length > 0) {\n                    console.warn('No matching tasks found for team-specific suggestions. Trying standard suggestions.');\n                    this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n                  } else {\n                    this.loading.preview = false;\n                  }\n                },\n                error: (err) => {\n                  console.error('Error loading team-specific auto-assign suggestions:', err);\n                  // Fall back to standard auto-assign if team-specific fails\n                  this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n                }\n              });\n            },\n            error: (err) => {\n              console.error('Error loading RnD team members for auto-assign:', err);\n              // Fall back to the standard auto-assign if RnD team member loading fails\n              this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n            }\n          });\n        } else {\n          // Get standard auto-assign suggestions\n          this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n        }\n      },\n      error: (err) => {\n        this.error.preview = `Failed to load tasks: ${err.message}`;\n        this.loading.preview = false;\n      }\n    });\n  }\n  \n  /**\n   * Fallback method to get standard auto-assign suggestions if RnD-specific fails\n   */\n  private getStandardAutoAssignSuggestions(allDevNewTasks: WorkItem[], normalizedPath: string): void {\n    console.log('Getting standard auto-assign suggestions with path:', normalizedPath);\n    console.log('Dev-New tasks available for assignment:', allDevNewTasks);\n    \n    this.taskService.getAutoAssignSuggestions(normalizedPath).subscribe({\n      next: (suggestions) => {\n        this.assignPreviewSuggestions = suggestions;\n        console.log('Got standard suggestions (fallback):', suggestions);\n        \n        // Check if we have any suggestions\n        if (Object.keys(suggestions).length === 0) {\n          console.warn('No suggestions returned from the API');\n          this.error.preview = 'No task assignment suggestions were generated. There may be no available tasks to assign.';\n          this.loading.preview = false;\n          return;\n        }\n        \n        // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n        const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n        console.log('Suggestion task IDs:', suggestedTaskIds);\n        \n        // Try more flexible matching if necessary\n        if (suggestedTaskIds.length > 0 && allDevNewTasks.length > 0) {\n          console.log('Applying task to suggestion matching...');\n          console.log('Task IDs available:', allDevNewTasks.map(t => t.id));\n          \n          this.assignPreviewTasks = allDevNewTasks.filter(task => \n            suggestedTaskIds.includes(task.id)\n          );\n          \n          // If no matches found, try string matching\n          if (this.assignPreviewTasks.length === 0) {\n            console.warn('No direct ID matches found, trying string matching');\n            this.assignPreviewTasks = allDevNewTasks.filter(task => \n              suggestedTaskIds.includes(Number(task.id))\n            );\n            \n            // If still no matches, try more flexible matching\n            if (this.assignPreviewTasks.length === 0) {\n              console.warn('No matches found even with string conversion, using available Dev-New tasks');\n              // Just use the first few Dev-New tasks that aren't assigned\n              this.assignPreviewTasks = allDevNewTasks\n                .filter(task => !task.assignedTo || task.assignedTo.trim() === '')\n                .slice(0, Math.min(5, allDevNewTasks.length));\n              \n              // Create suggestions for them\n              if (this.assignPreviewTasks.length > 0) {\n                console.log('Using', this.assignPreviewTasks.length, 'unassigned Dev-New tasks as fallback');\n                // Create empty suggestions object\n                this.assignPreviewSuggestions = {};\n                \n                // Get team members to suggest\n                const availableMembers = this.filteredTeamMembers\n                  .sort((a, b) => (a.currentWorkload || 0) - (b.currentWorkload || 0))\n                  .map(m => m.displayName)\n                  .filter(Boolean);\n                \n                // Assign members to tasks\n                this.assignPreviewTasks.forEach((task, index) => {\n                  const memberIndex = index % availableMembers.length;\n                  const member = availableMembers[memberIndex];\n                  this.assignPreviewSuggestions[task.id] = `${member} (least assigned)`;\n                });\n              }\n            }\n          }\n        }\n        \n        console.log('Filtered tasks to be reassigned (fallback):', this.assignPreviewTasks);\n        \n        if (this.assignPreviewTasks.length === 0) {\n          this.error.preview = 'No tasks available for assignment. Check if there are Dev-New tasks in the current iteration.';\n        }\n        \n        this.loading.preview = false;\n      },\n      error: (err) => {\n        this.error.preview = `Failed to load auto-assign suggestions: ${err.message}`;\n        this.loading.preview = false;\n      }\n    });\n  }\n  \n  /**\n   * Check if there are valid assignment suggestions\n   */\n  hasAssignmentSuggestions(): boolean {\n    return this.assignPreviewSuggestions && Object.keys(this.assignPreviewSuggestions).length > 0;\n  }\n  \n  /**\n   * Cancel auto-assign preview and close the modal\n   */\n  cancelAutoAssignPreview(): void {\n    this.showingPreview = false;\n    this.assignPreviewTasks = [];\n    this.assignPreviewSuggestions = {};\n    this.error.preview = null;\n  }\n  \n  /**\n   * Confirm and perform the auto-assignments\n   */\n  confirmAutoAssign(): void {\n    this.loading.autoAssign = true;\n    this.error.autoAssign = null;\n    \n    // Normalize the path for consistent handling\n    const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n    \n    const assignmentPromises = [];\n    let assignmentCount = 0;\n    \n    // For each task with a suggestion, create an assignment\n    for (const task of this.assignPreviewTasks) {\n      if (this.assignPreviewSuggestions[task.id]) {\n        const developerName = this.extractDeveloperName(this.assignPreviewSuggestions[task.id]);\n        \n        console.log(`Assigning task #${task.id} (${task.title}) to ${developerName}`);\n        \n        assignmentPromises.push(\n          this.taskService.assignTask(task.id, developerName)\n        );\n        assignmentCount++;\n      }\n    }\n    \n    // If we have assignments to make, execute them all in parallel\n    if (assignmentPromises.length > 0) {\n      forkJoin(assignmentPromises).subscribe({\n        next: () => {\n          // Hide the preview after successful assignment\n          this.showingPreview = false;\n          \n          // Refresh the task list with normalized path\n          this.loadTasks();\n          \n          // Also refresh the task counts to show updated workload\n          this.loadTeamMemberTaskCounts();\n          \n          // Show success message\n          this.showSuccessMessage(`Successfully assigned ${assignmentCount} tasks.`);\n          \n          this.loading.autoAssign = false;\n        },\n        error: (err) => {\n          this.error.autoAssign = `Error assigning tasks: ${err.message}`;\n          this.loading.autoAssign = false;\n        }\n      });\n    } else {\n      this.loading.autoAssign = false;\n      this.error.preview = \"No tasks available for assignment.\";\n    }\n  }\n  \n  /**\n   * Extract just the developer name from the suggestion string\n   * Format is typically \"Name (explanation)\"\n   */\n  extractDeveloperName(suggestion: string): string {\n    if (!suggestion) return '';\n    \n    // Handle new format: \"Developer Name (expert in Bug, low load)\"\n    if (suggestion.includes('(')) {\n      return suggestion.substring(0, suggestion.indexOf('(')).trim();\n    } \n    \n    // Fallback for simpler formats\n    const parts = suggestion.split(' ');\n    return parts[0]; // Just return the first word as the name\n  }\n  \n  /**\n   * Extract the logic explanation from the suggestion string\n   * Format is typically \"Name (explanation)\"\n   */\n  extractLogicExplanation(suggestion: string): string {\n    if (!suggestion) return '';\n    \n    // Match content inside parentheses\n    const match = suggestion.match(/\\((.*?)\\)/);\n    if (match && match[1]) {\n      return match[1];\n    }\n    \n    // If no parentheses, return the part after the first space\n    const spaceIndex = suggestion.indexOf(' ');\n    if (spaceIndex !== -1) {\n      return suggestion.substring(spaceIndex + 1).trim();\n    }\n    \n    return '';\n  }\n\n  /**\n   * Original auto-assign tasks method - replaced with preview workflow\n   */\n  autoAssignTasks(): void {\n    this.loading.autoAssign = true;\n    this.error.autoAssign = null;\n    \n    this.taskService.autoAssignTasks(this.currentIterationPath).subscribe({\n      next: () => {\n        // Reload tasks and task counts to reflect changes\n        this.loadTasks();\n        this.loadTeamMemberTaskCounts();\n        this.loading.autoAssign = false;\n      },\n      error: (err) => {\n        this.error.autoAssign = `Failed to auto-assign tasks: ${err.message}`;\n        this.loading.autoAssign = false;\n      }\n    });\n  }\n\n  openAssignModal(taskId: number): void {\n    this.selectedTask = taskId;\n    this.selectedMember = '';\n    this.error.assign = null;\n\n    // Get the iteration path for this specific task - first try filtered tasks\n    let task = this.filteredTasks.find(t => t.id === taskId);\n    \n    // If not found, check all tasks (in case this is accessing a non-filtered task)\n    if (!task) {\n      task = this.tasks.find(t => t.id === taskId);\n    }\n    \n    if (task && task.iterationPath) {\n      // Fetch R&D team members specifically for this task's iteration path\n      this.loading.members = true;\n      \n      this.teamService.getTeamMembersByTeam('RND', task.iterationPath).subscribe({\n        next: (members) => {\n          this.teamMembers = members;\n          this.loading.members = false;\n          \n          // Filter to R&D team members\n          this.filterRnDTeamMembers();\n          \n          // Load task counts after team members are loaded\n          if (task && task.iterationPath) {\n            this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n          }\n        },\n        error: (err) => {\n          console.error(`Error loading R&D team members for iteration path ${task?.iterationPath ?? 'unknown'}:`, err);\n          this.error.members = `Failed to load team members: ${err.message}`;\n          this.loading.members = false;\n          \n          // Fallback to regular team members if R&D team fetch fails\n          if (task && task.iterationPath) {\n            this.taskService.getTeamMembers(task.iterationPath).subscribe({\n              next: (response) => {\n                if (Array.isArray(response) && response.length > 0) {\n                  if (typeof response[0] === 'string') {\n                    // String array response\n                    const names = response as string[];\n                    this.teamMembers = names.map((name, index) => ({\n                      id: `member-${index}`,\n                      displayName: name,\n                      uniqueName: '',\n                      currentWorkload: 0,\n                      isActive: true,\n                      email: '',\n                      team: this.applyTeamFilter ? this.teamName : ''\n                    }));\n                  } else {\n                    // TeamMember array response\n                    this.teamMembers = response as TeamMember[];\n                  }\n                } else {\n                  this.teamMembers = [];\n                }\n                \n                this.loading.members = false;\n                \n                // Filter to R&D team members even with fallback response\n                this.filterRnDTeamMembers();\n                \n                if (task && task.iterationPath) {\n                  this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n                }\n              },\n              error: (fallbackErr) => {\n                console.error(`Error loading fallback team members:`, fallbackErr);\n                this.error.members = `Failed to load team members: ${fallbackErr.message}`;\n                this.loading.members = false;\n              }\n            });\n          } else {\n            console.error('Cannot load team members: task or iterationPath is undefined');\n            this.loading.members = false;\n          }\n        }\n      });\n    } else {\n      // Ensure we have team members loaded before showing the modal\n      if (this.filteredTeamMembers.length === 0 && !this.loading.members) {\n        this.loadTeamMembers();\n      }\n      \n      // Make sure we have task counts loaded\n      if (Object.keys(this.teamMemberTaskCounts).length === 0) {\n        this.loadTeamMemberTaskCounts();\n      }\n    }\n  }\n\n  /**\n   * Load task counts specifically for the modal dialogue\n   * This ensures counts are up-to-date when assigning tasks\n   */\n  loadTeamMemberTaskCountsForModal(iterationPath: string): void {\n    this.loading.taskCounts = true;\n    \n    // Normalize the iteration path\n    const normalizedPath = iterationPath.replace(/\\\\\\\\/g, '\\\\');\n    \n    this.taskService.getTeamMemberTaskCounts(normalizedPath).subscribe({\n      next: (counts) => {\n        this.teamMemberTaskCounts = counts;\n        this.loading.taskCounts = false;\n        console.log('Loaded team member task counts for modal:', this.teamMemberTaskCounts);\n      },\n      error: (err) => {\n        console.error('Error loading team member task counts for modal:', err);\n        this.loading.taskCounts = false;\n      }\n    });\n  }\n\n  cancelAssign(): void {\n    this.selectedTask = null;\n    this.selectedMember = '';\n    this.error.assign = null;\n    this.loading.assign = false;\n  }\n\n  /**\n   * Get CSS class for priority badge\n   * @param priority Priority value (number or string)\n   * @returns CSS class name\n   */\n  getPriorityClass(priority: number | string): string {\n    // Convert priority to number if it's a string\n    const priorityNum = typeof priority === 'string' ? parseInt(priority, 10) : priority;\n    \n    if (isNaN(priorityNum)) {\n      return 'bg-secondary'; // Default for invalid priority\n    }\n    \n    switch (priorityNum) {\n      case 1:\n        return 'bg-danger';\n      case 2:\n        return 'bg-warning text-dark';\n      case 3:\n        return 'bg-info text-dark';\n      case 4:\n        return 'bg-success';\n      default:\n        return 'bg-secondary';\n    }\n  }\n\n  /**\n   * Get CSS class for status badge\n   * @param status Status string or undefined\n   * @returns CSS class name\n   */\n  getStatusClass(status: string | undefined): string {\n    if (!status) {\n      return 'status-to-do'; // Default for undefined status\n    }\n    \n    const statusLower = status.toLowerCase();\n    \n    // Return the appropriate custom status class based on requested colors\n    if (statusLower === 'active') {\n      return 'status-active'; // Yellow\n    } else if (statusLower === 'completed' || statusLower === 'done' || statusLower === 'closed' || statusLower === 'dev complete') {\n      return 'status-dev-complete'; // Green\n    } else if (statusLower === 'blocked') {\n      return 'status-blocked'; // Red\n    } else if (statusLower === 'dev-new' || statusLower === 'dev new') {\n      return 'status-dev-new'; // Blue\n    } else if (statusLower === 'code review') {\n      return 'status-code-review'; // Purple\n    } else if (statusLower === 'proposed') {\n      return 'status-proposed'; // Gray\n    } else if (statusLower === 'planned') {\n      return 'status-planned'; // Orange\n    } else if (statusLower === 'resolved') {\n      return 'status-resolved'; // Teal\n    } else if (statusLower.includes('progress')) {\n      return 'status-in-progress'; // Cyan\n    } else if (statusLower === 'to do' || statusLower === 'new') {\n      return 'status-to-do'; // Gray\n    } else {\n      return 'status-to-do'; // Default for any other status\n    }\n  }\n\n  /**\n   * Get CSS class for team member workload indicator\n   * @param workload Current workload value\n   * @returns CSS class name\n   */\n  getTeamMemberWorkloadClass(workload: number): string {\n    if (workload === 0) {\n      return 'bg-secondary';\n    } else if (workload < 3) {\n      return 'bg-success';\n    } else if (workload < 7) {\n      return 'bg-warning text-dark';\n    } else {\n      return 'bg-danger';\n    }\n  }\n\n  /**\n   * Get the progress bar class based on workload\n   * @param workload Current workload\n   * @returns Bootstrap progress bar class\n   */\n  getProgressBarClass(workload: number): string {\n    if (workload === 0) {\n      return 'bg-secondary';\n    } else if (workload < 3) {\n      return 'bg-success';\n    } else if (workload < 7) {\n      return 'bg-warning';\n    } else {\n      return 'bg-danger';\n    }\n  }\n\n  /**\n   * Calculate workload as a percentage (for progress bar width)\n   * @param workload Current workload\n   * @returns Percentage value (0-100)\n   */\n  getWorkloadPercentage(workload: number): number {\n    // Using 10 as maximum reasonable workload\n    const maxWorkload = 10;\n    return Math.min(100, (workload / maxWorkload) * 100);\n  }\n\n  /**\n   * Handle changing the iteration path\n   * @param iterationPath The new iteration path\n   */\n  changeIterationPath(iterationPath: string): void {\n    console.log(`Changing iteration path to: ${iterationPath}`);\n    \n    if (this.currentIterationPath === iterationPath) {\n      console.log('Iteration path unchanged, skipping reload');\n      return;\n    }\n    \n    // Update both the current and manual iteration paths\n    this.currentIterationPath = iterationPath;\n    this.manualIterationPath = iterationPath;\n    \n    // For backward compatibility, trigger the search (load data)\n    this.searchClicked();\n  }\n\n  /**\n   * Get the title of the currently selected task\n   * @returns The task title or a fallback message\n   */\n  getSelectedTaskTitle(): string {\n    if (this.selectedTask === null) {\n      return 'No task selected';\n    }\n    \n    const selectedTaskId = this.selectedTask;\n    // First try to find in filtered tasks\n    let task = this.filteredTasks.find(t => t.id === selectedTaskId);\n    \n    // If not found (could be a non-R&D task), look in all tasks\n    if (!task) {\n      task = this.tasks.find(t => t.id === selectedTaskId);\n    }\n    \n    return task ? task.title : 'Unknown Task';\n  }\n\n  /**\n   * Get the task count for a specific team member\n   * @param memberName The name of the team member\n   * @returns The number of tasks assigned to that member\n   */\n  getTaskCount(memberName: string): number {\n    if (!memberName) {\n      console.warn('Called getTaskCount with empty memberName');\n      return 0;\n    }\n    \n    // First check if we have task counts from the API\n    if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n      // Look for an exact match\n      if (this.teamMemberTaskCounts[memberName] !== undefined) {\n        return this.teamMemberTaskCounts[memberName];\n      }\n      \n      // Try case-insensitive match\n      const key = Object.keys(this.teamMemberTaskCounts).find(\n        k => k && k.toLowerCase() === memberName.toLowerCase()\n      );\n      \n      if (key) {\n        return this.teamMemberTaskCounts[key];\n      }\n    }\n    \n    // Fall back to the currentWorkload from team members\n    const member = this.teamMembers.find(\n      m => typeof m === 'object' && m.displayName && m.displayName.toLowerCase() === memberName.toLowerCase()\n    );\n    \n    return member && typeof member === 'object' ? member.currentWorkload : 0;\n  }\n\n  /**\n   * Get a list of all tasks with Dev-New status\n   * @returns List of Dev-New tasks\n   */\n  getDevNewTasks(): WorkItem[] {\n    return this.filteredTasks.filter(task => \n      task.status && \n      (task.status.toLowerCase() === 'dev-new' ||\n       task.status.toLowerCase() === 'dev new' ||\n       task.status.toLowerCase().includes('dev-new') ||\n       task.status.toLowerCase().includes('dev new') ||\n       task.status.toLowerCase() === 'development - new')\n    );\n  }\n\n  /**\n   * Get a list of unassigned Dev-New tasks\n   * @returns List of unassigned Dev-New tasks\n   */\n  getUnassignedDevNewTasks(): WorkItem[] {\n    return this.filteredTasks.filter(task => \n      task.status && \n      (task.status.toLowerCase() === 'dev-new' ||\n       task.status.toLowerCase() === 'dev new' ||\n       task.status.toLowerCase().includes('dev-new') ||\n       task.status.toLowerCase().includes('dev new') ||\n       task.status.toLowerCase() === 'development - new') && \n      !task.assignedTo\n    );\n  }\n  \n  /**\n   * Get a summary of task status distribution\n   * @returns Array of status counts\n   */\n  getStatusDistribution(): {status: string, count: number}[] {\n    const statusCounts: {[key: string]: number} = {};\n    \n    this.filteredTasks.forEach(task => {\n      const status = task.status || 'Unknown';\n      statusCounts[status] = (statusCounts[status] || 0) + 1;\n    });\n    \n    return Object.entries(statusCounts).map(([status, count]) => ({\n      status, \n      count\n    })).sort((a, b) => b.count - a.count);\n  }\n\n  /**\n   * Filter tasks to only show those assigned to R&D team members\n   */\n  filterTasksByRnDTeamMembers(): void {\n    // If team filter is not applied, show all tasks\n    if (!this.applyTeamFilter) {\n      this.filteredTasks = this.tasks;\n      console.log(`Team filter disabled. Showing all ${this.tasks.length} tasks.`);\n      return;\n    }\n    \n    // First ensure we have filtered team members\n    if (this.filteredTeamMembers.length === 0) {\n      this.filterRnDTeamMembers();\n    }\n    \n    // Get a list of display names of filtered R&D team members\n    const rndMemberNames = this.filteredTeamMembers.map(member => \n      member.displayName.toLowerCase()\n    );\n    \n    console.log('R&D team member names for task filtering:', rndMemberNames);\n    \n    // Filter tasks to only include those assigned to R&D members and unassigned tasks\n    this.filteredTasks = this.tasks.filter(task => {\n      // Always include unassigned tasks\n      if (!task.assignedTo) {\n        return true;\n      }\n      \n      // Check if task is assigned to an R&D team member\n      return rndMemberNames.includes(task.assignedTo.toLowerCase());\n    });\n    \n    console.log(`Filtered ${this.tasks.length} tasks down to ${this.filteredTasks.length} tasks assigned to R&D members or unassigned`);\n  }\n\n  /**\n   * Generates an Azure DevOps URL for a specific work item ID\n   * @param taskId The ID of the work item to link to\n   * @returns A URL to the work item in Azure DevOps\n   */\n  getAzureDevOpsTaskUrl(taskId: number): string {\n    return `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_workitems/edit/${taskId}/`;\n  }\n\n  /**\n   * Open task in Azure DevOps in a new tab\n   * @param taskId The ID of the task to open\n   * @param event The click event\n   */\n  openTaskInAzureDevOps(taskId: number, event: Event): void {\n    // Prevent default behavior to avoid interference with other actions\n    event.preventDefault();\n    event.stopPropagation();\n    \n    // Open task in new tab\n    const url = this.getAzureDevOpsTaskUrl(taskId);\n    window.open(url, '_blank');\n    \n    console.log(`Opening task ${taskId} in Azure DevOps`);\n  }\n}","<div class=\"container-fluid p-4\">\n  <div class=\"row mb-4\">\n    <div class=\"col-12\">\n      <div class=\"d-flex justify-content-between align-items-center\">\n        <h2 class=\"mb-0\">Task Distribution</h2>\n        <div>\n          <!-- Manual Input Form -->\n          <div class=\"search-section\">\n            <!-- Grouped inputs with blue background -->\n            <div class=\"input-group-container\">\n              <!-- Team Filter Checkbox and Label -->\n              <div class=\"filter-checkbox\">\n                <input type=\"checkbox\" class=\"form-check-input\" id=\"applyTeamFilter\" [(ngModel)]=\"applyTeamFilter\"\n                  [disabled]=\"loading.tasks || loading.members\">\n                <label class=\"form-check-label\" for=\"applyTeamFilter\">Apply Team Filter</label>\n              </div>\n              \n              <!-- Team Name Input -->\n              <div class=\"search-input team-input\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Team Name\" [(ngModel)]=\"teamName\" \n                  [disabled]=\"loading.tasks || loading.members\">\n                <small class=\"text-muted\">TeamName</small>\n              </div>\n              \n              <!-- Iteration Path Input -->\n              <div class=\"search-input\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Iteration Path\" [(ngModel)]=\"manualIterationPath\" \n                  [disabled]=\"loading.tasks || loading.members\" list=\"iterationPathsList\">\n                <small class=\"text-muted\">IterationPath</small>\n                \n                <!-- Datalist for iteration path suggestions -->\n                <datalist id=\"iterationPathsList\">\n                  <option *ngFor=\"let path of iterationPaths\" [value]=\"path\"></option>\n                </datalist>\n              </div>\n              \n              <!-- Search Button -->\n              <button class=\"btn btn-primary search-btn\" (click)=\"searchClicked()\" [disabled]=\"loading.tasks || loading.members\">\n                <i class=\"bi bi-search me-1\"></i>\n                <span *ngIf=\"!loading.tasks && !loading.members\">Search</span>\n                <span *ngIf=\"loading.tasks || loading.members\">\n                  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                  Loading...\n                </span>\n              </button>\n            </div>\n            \n            <!-- Action Buttons -->\n            <div class=\"action-buttons\">\n              <!-- Auto Assign Button -->\n              <button class=\"btn btn-primary auto-assign-btn\" (click)=\"showAutoAssignPreview()\" [disabled]=\"loading.autoAssign || loading.preview\">\n                <i class=\"bi bi-magic\"></i> \n                <span *ngIf=\"!loading.autoAssign && !loading.preview\">Auto-Assign Tasks</span>\n                <span *ngIf=\"loading.preview\">\n                  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                  Loading Preview...\n                </span>\n                <span *ngIf=\"loading.autoAssign\">\n                  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                  Assigning...\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <p class=\"text-muted mt-2\">Manage and assign tasks for the current sprint</p>\n      <div *ngIf=\"error.autoAssign\" class=\"alert alert-danger\">{{ error.autoAssign }}</div>\n      <div *ngIf=\"error.iterationPaths\" class=\"alert alert-warning\">{{ error.iterationPaths }}</div>\n      <div *ngIf=\"error.tasks\" class=\"alert alert-danger\">{{ error.tasks }}</div>\n      <div *ngIf=\"error.members\" class=\"alert alert-danger\">{{ error.members }}</div>\n    </div>\n  </div>\n\n  <!-- Tab Navigation -->\n  <ul class=\"nav nav-tabs mb-4\" id=\"taskTabs\" role=\"tablist\">\n    <li class=\"nav-item\" role=\"presentation\">\n      <button class=\"nav-link active\" id=\"task-distribution-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#task-distribution\" type=\"button\" role=\"tab\" aria-controls=\"task-distribution\" aria-selected=\"true\" (click)=\"onTabChange('distribution')\">\n        <i class=\"bi bi-list-task me-2\"></i>Task Distribution\n      </button>\n    </li>\n    <li class=\"nav-item\" role=\"presentation\">\n      <button class=\"nav-link\" id=\"task-workload-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#task-workload\" type=\"button\" role=\"tab\" aria-controls=\"task-workload\" aria-selected=\"false\" (click)=\"onTabChange('workload')\">\n        <i class=\"bi bi-bar-chart-line me-2\"></i>Task Workload\n      </button>\n    </li>\n  </ul>\n\n  <!-- Tab Content -->\n  <div class=\"tab-content\" id=\"taskTabsContent\">\n    <!-- Task Distribution Tab -->\n    <div class=\"tab-pane fade show active\" id=\"task-distribution\" role=\"tabpanel\" aria-labelledby=\"task-distribution-tab\">\n      <!-- Tasks Table -->\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <div *ngIf=\"loading.tasks\" class=\"text-center py-4\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                  <span class=\"visually-hidden\">Loading tasks...</span>\n                </div>\n              </div>\n\n              <div *ngIf=\"error.tasks\" class=\"alert alert-danger\">{{ error.tasks }}</div>\n\n              <div *ngIf=\"!loading.tasks && !error.tasks && tasks.length === 0\" class=\"text-center py-4\">\n                <p class=\"text-muted\">No tasks found for the current iteration path.</p>\n              </div>\n\n              <div *ngIf=\"!loading.tasks && !error.tasks && tasks.length > 0\" class=\"table-responsive\">\n                <table class=\"table table-hover\">\n                  <thead>\n                    <tr>\n                      <th>ID</th>\n                      <th>Title</th>\n                      <th>Priority</th>\n                      <th>Assigned To</th>\n                      <th>Status</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let task of filteredTasks\">\n                      <td>\n                        <a href=\"#\" (click)=\"openTaskInAzureDevOps(task.id, $event)\" class=\"task-id-link\">{{ task.id }}</a>\n                      </td>\n                      <td>{{ task.title }}</td>\n                      <td>\n                        <span class=\"badge rounded-pill\" [ngClass]=\"getPriorityClass(task.priority)\">\n                          {{ task.priority }}\n                        </span>\n                      </td>\n                      <td>\n                        <div class=\"d-flex align-items-center\">\n                          <span *ngIf=\"task.assignedTo\" class=\"me-2\">{{ task.assignedTo }}</span>\n                          <span *ngIf=\"!task.assignedTo\" class=\"text-muted me-2\">Unassigned</span>\n                          <div *ngIf=\"task.autoAssignSuggestion\" class=\"ms-1 suggestion-box\">\n                            <small class=\"text-primary\">\n                              <i class=\"bi bi-lightbulb-fill\"></i> \n                              Suggest: {{ task.autoAssignSuggestion }}\n                            </small>\n                          </div>\n                        </div>\n                      </td>\n                      <td>\n                        <span class=\"status-badge\" [ngClass]=\"getStatusClass(task.status)\">\n                          {{ task.status }}\n                        </span>\n                      </td>\n                      <td>\n                        <button class=\"btn btn-primary btn-sm\" (click)=\"openAssignModal(task.id)\">\n                          <i class=\"bi bi-person-plus\"></i> Assign\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Task Workload Tab -->\n    <div class=\"tab-pane fade\" id=\"task-workload\" role=\"tabpanel\" aria-labelledby=\"task-workload-tab\">\n      <!-- Team Workload Overview -->\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"card\">\n            <div class=\"card-header d-flex justify-content-between align-items-center\">\n              <h4 class=\"mb-0\">Team Workload</h4>\n              <button class=\"btn btn-outline-primary btn-sm\" (click)=\"loadTeamMembers(); loadTeamMemberTaskCounts()\">\n                <i class=\"bi bi-arrow-clockwise me-1\"></i> Refresh Data\n              </button>\n            </div>\n            <div class=\"card-body\">\n              <div *ngIf=\"loading.members\" class=\"text-center py-4\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                  <span class=\"visually-hidden\">Loading team members...</span>\n                </div>\n              </div>\n\n              <div *ngIf=\"error.members\" class=\"alert alert-danger\">{{ error.members }}</div>\n\n              <div *ngIf=\"!loading.members && !error.members && filteredTeamMembers.length === 0\" class=\"text-center py-4\">\n                <p class=\"text-muted\">No team members found for the current iteration path.</p>\n              </div>\n\n              <div *ngIf=\"!loading.members && !error.members && filteredTeamMembers.length > 0\" class=\"row\">\n                <div *ngFor=\"let member of filteredTeamMembers\" class=\"col-md-3 col-sm-6 mb-3\">\n                  <div class=\"card team-member-card h-100\" [ngClass]=\"{'bg-light': getTaskCount(member.displayName) === 0}\">\n                    <div class=\"card-body\">\n                      <h5 class=\"card-title\">{{ member.displayName }}</h5>\n                      <div class=\"workload-stats mt-2\">\n                        <span class=\"badge rounded-pill\" [ngClass]=\"getTeamMemberWorkloadClass(getTaskCount(member.displayName))\">\n                          {{ getTaskCount(member.displayName) }} Tasks\n                        </span>\n                      </div>\n                      <div class=\"progress mt-2\">\n                        <div class=\"progress-bar\" \n                            [ngClass]=\"getProgressBarClass(getTaskCount(member.displayName))\"\n                            [style.width.%]=\"getWorkloadPercentage(getTaskCount(member.displayName))\" \n                            role=\"progressbar\" \n                            [attr.aria-valuenow]=\"getTaskCount(member.displayName)\" \n                            aria-valuemin=\"0\" \n                            aria-valuemax=\"10\">\n                        </div>\n                      </div>\n                      <div *ngIf=\"member.email\" class=\"text-muted mt-2 small\">\n                        <i class=\"bi bi-envelope\"></i> {{ member.email }}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Assign Task Modal -->\n  <div class=\"modal\" [ngClass]=\"{'show': selectedTask !== null}\" [style.display]=\"selectedTask !== null ? 'block' : 'none'\" tabindex=\"-1\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\">Assign Task</h5>\n          <button type=\"button\" class=\"btn-close\" (click)=\"cancelAssign()\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <div *ngIf=\"error.assign\" class=\"alert alert-danger mb-3\">{{ error.assign }}</div>\n          \n          <div *ngIf=\"selectedTask !== null\">\n            <div class=\"mb-3\">\n              <label class=\"form-label fw-bold\">Task ID</label>\n              <div class=\"py-2 px-3 bg-light rounded\">{{ selectedTask }}</div>\n            </div>\n            \n            <div class=\"mb-3\">\n              <label class=\"form-label fw-bold\">Task Title</label>\n              <div class=\"py-2 px-3 bg-light rounded\">\n                {{ getSelectedTaskTitle() }}\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"mb-4\">\n            <label for=\"teamMemberSelect\" class=\"form-label fw-bold mb-2\">Select Team Member</label>\n            \n            <!-- Team Member Selection List -->\n            <div class=\"team-member-options\">\n              <div class=\"form-check mb-2 border p-2 rounded\" *ngFor=\"let member of filteredTeamMembers\">\n                <input \n                  class=\"form-check-input\" \n                  type=\"radio\" \n                  [id]=\"'member-' + member.id\" \n                  [value]=\"member.displayName\" \n                  [(ngModel)]=\"selectedMember\" \n                  name=\"teamMemberRadio\">\n                <label class=\"form-check-label w-100\" [attr.for]=\"'member-' + member.id\">\n                  <div class=\"d-flex justify-content-between align-items-center\">\n                    <span class=\"member-name\">{{ member.displayName }}</span>\n                    <span class=\"badge rounded-pill\" [ngClass]=\"getTeamMemberWorkloadClass(getTaskCount(member.displayName))\">\n                      {{ getTaskCount(member.displayName) }} Tasks\n                    </span>\n                  </div>\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancelAssign()\">Cancel</button>\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"assignTask()\" [disabled]=\"loading.assign || !selectedMember\">\n            <span *ngIf=\"!loading.assign\">Assign</span>\n            <span *ngIf=\"loading.assign\">\n              <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n              Assigning...\n            </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-backdrop fade show\" *ngIf=\"selectedTask !== null\"></div>\n  \n  <!-- Auto-Assign Preview Modal -->\n  <div class=\"modal\" [ngClass]=\"{'show': showingPreview}\" [style.display]=\"showingPreview ? 'block' : 'none'\" tabindex=\"-1\">\n    <div class=\"modal-dialog modal-lg\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header bg-primary text-white\">\n          <h5 class=\"modal-title\">\n            <i class=\"bi bi-magic me-2\"></i> Auto-Assign Preview\n          </h5>\n          <button type=\"button\" class=\"btn-close btn-close-white\" (click)=\"cancelAutoAssignPreview()\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <div *ngIf=\"error.preview\" class=\"alert alert-danger mb-3\">{{ error.preview }}</div>\n          \n          <div class=\"alert alert-primary mb-3\">\n            <i class=\"bi bi-info-circle me-2\"></i>\n            <strong>Preview Mode:</strong> Review AI-suggested assignments before confirming. No changes will be made until you click \"Confirm & Assign\".\n          </div>\n          \n          <!-- Loading state -->\n          <div *ngIf=\"loading.preview\" class=\"text-center py-4\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n              <span class=\"visually-hidden\">Loading assignment suggestions...</span>\n            </div>\n            <p class=\"mt-2\">Analyzing tasks and developer performance...</p>\n          </div>\n          \n          <!-- No tasks to assign -->\n          <div *ngIf=\"!loading.preview && assignPreviewTasks.length === 0\" class=\"alert alert-info\">\n            <i class=\"bi bi-info-circle me-2\"></i>\n            No \"Dev-New\" tasks available for assignment.\n          </div>\n          \n          <!-- Debugging information -->\n          <div *ngIf=\"!loading.preview && assignPreviewTasks.length === 0\" class=\"mt-3\">\n            <div class=\"accordion\" id=\"debugAccordion\">\n              <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\" id=\"headingOne\">\n                  <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\n                    <i class=\"bi bi-bug me-2\"></i> Debug Information\n                  </button>\n                </h2>\n                <div id=\"collapseOne\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#debugAccordion\">\n                  <div class=\"accordion-body\">\n                    <h6>Total Tasks: {{ tasks.length }}</h6>\n                    <h6>Total Tasks: {{ filteredTasks.length }} (filtered from {{ tasks.length }} total)</h6>\n                    <div *ngIf=\"filteredTasks.length > 0\">\n                      <h6>Status Distribution:</h6>\n                      <ul>\n                        <li *ngFor=\"let status of getStatusDistribution()\">\n                          {{ status.status }}: {{ status.count }}\n                        </li>\n                      </ul>\n                      \n                      <h6>Dev-New Tasks ({{ getDevNewTasks().length }}):</h6>\n                      <div class=\"table-responsive\" *ngIf=\"getDevNewTasks().length > 0\">\n                        <table class=\"table table-sm table-bordered\">\n                          <thead>\n                            <tr>\n                              <th>ID</th>\n                              <th>Title</th>\n                              <th>Status</th>\n                              <th>Assigned To</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <tr *ngFor=\"let task of getDevNewTasks()\">\n                              <td>{{ task.id }}</td>\n                              <td>{{ task.title }}</td>\n                              <td>{{ task.status }}</td>\n                              <td>{{ task.assignedTo || 'Unassigned' }}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </div>\n                      \n                      <div *ngIf=\"getDevNewTasks().length === 0\" class=\"alert alert-warning\">\n                        No tasks with 'Dev-New' status found in the data.\n                      </div>\n                      \n                      <div *ngIf=\"getUnassignedDevNewTasks().length === 0 && getDevNewTasks().length > 0\" class=\"alert alert-warning\">\n                        Found {{ getDevNewTasks().length }} Dev-New tasks, but all are already assigned.\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Preview table -->\n          <div *ngIf=\"!loading.preview && assignPreviewTasks.length > 0\">\n            <div class=\"table-responsive\">\n              <table class=\"table table-hover\">\n                <thead>\n                  <tr>\n                    <th>ID</th>\n                    <th>Type</th>\n                    <th>Title</th>\n                    <th>Status</th>\n                    <th>Current Assignee</th>\n                    <th>Suggested Assignee</th>\n                    <th>Assignment Logic</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let task of assignPreviewTasks\">\n                    <td>{{ task.id }}</td>\n                    <td>\n                      <span class=\"badge bg-info text-dark\">{{ task.type }}</span>\n                    </td>\n                    <td>{{ task.title }}</td>\n                    <td>\n                      <span class=\"badge bg-secondary\">{{ task.status }}</span>\n                    </td>\n                    <td>\n                      <span *ngIf=\"task.assignedTo\" class=\"text-muted\">{{ task.assignedTo }}</span>\n                      <span *ngIf=\"!task.assignedTo\" class=\"badge bg-warning text-dark\">Unassigned</span>\n                    </td>\n                    <td>\n                      <ng-container *ngIf=\"assignPreviewSuggestions[task.id]\">\n                        <div class=\"d-flex align-items-center\">\n                          <span class=\"badge bg-success me-2\">AI Pick</span>\n                          <strong>{{ extractDeveloperName(assignPreviewSuggestions[task.id]) }}</strong>\n                          <span *ngIf=\"extractDeveloperName(assignPreviewSuggestions[task.id]) !== task.assignedTo && task.assignedTo\" \n                                class=\"ms-2 badge bg-warning text-dark\">Reassignment</span>\n                        </div>\n                      </ng-container>\n                      <span *ngIf=\"!assignPreviewSuggestions[task.id]\" class=\"text-muted\">No suggestion available</span>\n                    </td>\n                    <td>\n                      <span *ngIf=\"assignPreviewSuggestions[task.id]\" class=\"text-muted small\">\n                        {{ extractLogicExplanation(assignPreviewSuggestions[task.id]) }}\n                      </span>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            \n            <!-- Assignment Logic Legend -->\n            <div class=\"mt-4\">\n              <h6>Assignment Logic Explanation:</h6>\n              <ul class=\"list-unstyled row\">\n                <li class=\"col-md-6 mb-2\">\n                  <i class=\"bi bi-trophy text-warning me-2\"></i>\n                  <small><strong>Past Expertise</strong> - Completed similar tasks in the past 3 months</small>\n                </li>\n                <li class=\"col-md-6 mb-2\">\n                  <i class=\"bi bi-check-circle text-success me-2\"></i>\n                  <small><strong>Recent Completion</strong> - Recently completed tasks with no active work</small>\n                </li>\n                <li class=\"col-md-6 mb-2\">\n                  <i class=\"bi bi-speedometer2 text-info me-2\"></i>\n                  <small><strong>Low Workload</strong> - Developer with few active tasks</small>\n                </li>\n                <li class=\"col-md-6 mb-2\">\n                  <i class=\"bi bi-person-plus text-primary me-2\"></i>\n                  <small><strong>Least Assigned</strong> - Developer with lowest total task count</small>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancelAutoAssignPreview()\">Cancel</button>\n          <button \n            type=\"button\" \n            class=\"btn btn-primary\" \n            (click)=\"confirmAutoAssign()\" \n            [disabled]=\"loading.autoAssign || !assignPreviewTasks || assignPreviewTasks.length === 0 || !hasAssignmentSuggestions()\">\n            <i class=\"bi bi-magic me-2\"></i>\n            <span *ngIf=\"!loading.autoAssign\">Confirm & Assign</span>\n            <span *ngIf=\"loading.autoAssign\">\n              <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n              Assigning...\n            </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-backdrop fade show\" *ngIf=\"showingPreview\"></div>\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}