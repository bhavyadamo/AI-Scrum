{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { UserRole } from '../models/settings.model';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor() {\n      // For demo purposes, we'll use a mock user\n      this.currentUserSubject = new BehaviorSubject({\n        id: 'current-user',\n        name: 'Demo User',\n        email: 'demo@example.com',\n        role: UserRole.Admin // Set as Admin for demo purposes\n      });\n\n      this.currentUser$ = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    isAuthenticated() {\n      return !!this.currentUserSubject.value;\n    }\n    hasRole(role) {\n      const user = this.currentUserSubject.value;\n      if (!user) return false;\n      return user.role === role;\n    }\n    isAdmin() {\n      return this.hasRole(UserRole.Admin);\n    }\n    isScrumMaster() {\n      return this.hasRole(UserRole.ScrumMaster);\n    }\n    isMember() {\n      return this.hasRole(UserRole.Member);\n    }\n    canEditUserRoles() {\n      return this.isAdmin();\n    }\n    canViewUserRoles() {\n      return this.isAdmin() || this.isScrumMaster();\n    }\n    canEditAzureDevOpsPat() {\n      return this.isAdmin();\n    }\n    canViewAzureDevOpsPat() {\n      return this.isAdmin() || this.isScrumMaster();\n    }\n    canEditAiModelSettings() {\n      return this.isAdmin() || this.isScrumMaster();\n    }\n    canViewAiModelSettings() {\n      return true; // All roles can view\n    }\n    // For demo purposes, this method allows changing the current user's role\n    changeUserRole(role) {\n      const user = this.currentUserSubject.value;\n      if (user) {\n        user.role = role;\n        this.currentUserSubject.next(user);\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}