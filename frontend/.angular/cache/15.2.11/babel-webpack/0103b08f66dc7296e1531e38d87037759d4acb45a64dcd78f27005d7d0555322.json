{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/estimation.service\";\nimport * as i3 from \"../../services/task.service\";\nimport * as i4 from \"@angular/common\";\nfunction TaskEstimationComponent_div_19_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_19_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title must be at least 5 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtemplate(1, TaskEstimationComponent_div_19_small_1_Template, 2, 0, \"small\", 29);\n    i0.ɵɵtemplate(2, TaskEstimationComponent_div_19_small_2_Template, 2, 0, \"small\", 29);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.estimationForm.get(\"title\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.estimationForm.get(\"title\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nfunction TaskEstimationComponent_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r11);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r11);\n  }\n}\nfunction TaskEstimationComponent_option_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", member_r12);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r12);\n  }\n}\nfunction TaskEstimationComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵelement(1, \"input\", 36);\n    i0.ɵɵelementStart(2, \"label\", 37);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const level_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"complexity-\" + level_r13.toLowerCase())(\"value\", level_r13);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", \"complexity-\" + level_r13.toLowerCase());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", level_r13, \" \");\n  }\n}\nfunction TaskEstimationComponent_span_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"i\", 38);\n    i0.ɵɵtext(2, \" Estimate Time \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_span_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 39);\n    i0.ɵɵtext(2, \" Estimating... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 40);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.error, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_46_li_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 52);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const factor_r15 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", factor_r15, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 41)(2, \"h4\", 9);\n    i0.ɵɵtext(3, \"Estimation Results\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 10)(5, \"div\", 42)(6, \"h2\", 43);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"p\", 44);\n    i0.ɵɵtext(9, \"Estimated time to complete the task\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\", 45)(11, \"h5\");\n    i0.ɵɵtext(12, \"Prediction Confidence\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 46)(14, \"div\", 47);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"div\")(17, \"h5\");\n    i0.ɵɵtext(18, \"Factors Considered\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"ul\", 48);\n    i0.ɵɵtemplate(20, TaskEstimationComponent_div_46_li_20_Template, 2, 1, \"li\", 49);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(21, \"div\", 50);\n    i0.ɵɵelement(22, \"i\", 51);\n    i0.ɵɵtext(23, \" These estimates are based on machine learning models analyzing historical task data. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r7.estimationResult.estimatedHours, \" hours\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵstyleProp(\"width\", ctx_r7.estimationResult.confidenceScore * 100, \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r7.getConfidenceClass(ctx_r7.estimationResult.confidenceScore));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r7.estimationResult.confidenceScore * 100);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.formatConfidence(ctx_r7.estimationResult.confidenceScore), \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.estimationResult.factors);\n  }\n}\nfunction TaskEstimationComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 53)(1, \"div\", 54);\n    i0.ɵɵelement(2, \"i\", 55);\n    i0.ɵɵelementStart(3, \"h4\", 56);\n    i0.ɵɵtext(4, \"Task Time Prediction\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 44);\n    i0.ɵɵtext(6, \"Fill in the task details and click \\\"Estimate Time\\\" to get an ML-based time estimate\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport class TaskEstimationComponent {\n  constructor(fb, estimationService, taskService) {\n    this.fb = fb;\n    this.estimationService = estimationService;\n    this.taskService = taskService;\n    this.teamMembers = [];\n    this.taskTypes = ['Bug', 'Change Request', 'Feature', 'Documentation', 'Test', 'Research'];\n    this.complexityLevels = ['Low', 'Medium', 'High'];\n    this.loading = false;\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n    // New properties for iteration path functionality\n    this.availableIterationPaths = [];\n    this.selectedIterationPath = '';\n    this.workItems = [];\n    this.loadingIterationItems = false;\n    this.iterationError = null;\n    this.selectedWorkItem = null;\n    this.devTimeEstimate = 0;\n    this.testTimeEstimate = 0;\n    this.totalEstimate = 0;\n    this.estimationForm = this.fb.group({\n      title: ['', [Validators.required, Validators.minLength(5)]],\n      type: ['Feature', Validators.required],\n      assignee: [''],\n      complexity: ['Medium', Validators.required]\n    });\n  }\n  ngOnInit() {\n    // Load team members\n    this.taskService.getTeamMembers().subscribe(members => {\n      this.teamMembers = members;\n    });\n    // Load available iteration paths\n    this.loadIterationPaths();\n  }\n  // Load available iteration paths\n  loadIterationPaths() {\n    this.taskService.getIterationPaths().subscribe({\n      next: paths => {\n        this.availableIterationPaths = paths;\n      },\n      error: err => {\n        console.error('Error loading iteration paths:', err);\n        this.iterationError = 'Failed to load iteration paths';\n      }\n    });\n  }\n  // Load work items for the selected iteration path\n  loadWorkItemsByIteration() {\n    if (!this.selectedIterationPath) {\n      this.iterationError = 'Please select an iteration path';\n      return;\n    }\n    this.loadingIterationItems = true;\n    this.workItems = [];\n    this.selectedWorkItem = null;\n    this.iterationError = null;\n    this.taskService.getTasks(this.selectedIterationPath).subscribe({\n      next: items => {\n        this.workItems = items;\n        this.loadingIterationItems = false;\n      },\n      error: err => {\n        console.error('Error loading work items:', err);\n        this.iterationError = 'Failed to load work items for the selected iteration';\n        this.loadingIterationItems = false;\n      }\n    });\n  }\n  // Select a work item for estimation\n  selectWorkItem(item) {\n    this.selectedWorkItem = item;\n    this.populateFormWithWorkItem(item);\n  }\n  // Populate the form with selected work item details\n  populateFormWithWorkItem(item) {\n    const complexity = this.determineComplexity(item);\n    this.estimationForm.patchValue({\n      title: item.title,\n      type: item.type || 'Feature',\n      assignee: item.assignedTo || '',\n      complexity: complexity\n    });\n  }\n  // Determine complexity based on work item properties\n  determineComplexity(item) {\n    // Logic to determine complexity based on priority or other factors\n    if (item.priority <= 1) {\n      return 'High';\n    } else if (item.priority === 2) {\n      return 'Medium';\n    } else {\n      return 'Low';\n    }\n  }\n  resetForm() {\n    this.estimationForm.reset({\n      type: 'Feature',\n      complexity: 'Medium'\n    });\n    this.error = null;\n    this.showResult = false;\n    this.estimationResult = null;\n  }\n  estimateTaskTime() {\n    if (this.estimationForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.estimationForm.controls).forEach(key => {\n        this.estimationForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n    this.loading = true;\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n    const request = {\n      title: this.estimationForm.value.title,\n      type: this.estimationForm.value.type,\n      assignee: this.estimationForm.value.assignee,\n      complexity: this.estimationForm.value.complexity\n    };\n    this.estimationService.estimateTaskTime(request).subscribe({\n      next: result => {\n        this.estimationResult = result;\n        this.showResult = true;\n        this.loading = false;\n        // Calculate dev and test time estimates\n        this.calculateTimeEstimates(result.estimatedHours);\n      },\n      error: err => {\n        this.error = err.message || 'An error occurred during estimation';\n        this.loading = false;\n      }\n    });\n  }\n  // Calculate development and testing time estimates\n  calculateTimeEstimates(totalHours) {\n    // Typical distribution: dev 60-70%, testing 30-40%\n    const complexity = this.estimationForm.value.complexity;\n    let devRatio = 0.65; // Default dev ratio\n    // Adjust ratio based on complexity\n    if (complexity === 'High') {\n      devRatio = 0.7; // Higher complexity = more dev time\n    } else if (complexity === 'Low') {\n      devRatio = 0.6; // Lower complexity = less dev time\n    }\n\n    this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\n    this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\n    this.totalEstimate = totalHours;\n  }\n  // Format confidence score as percentage\n  formatConfidence(score) {\n    return `${Math.round(score * 100)}%`;\n  }\n  // Get appropriate class for confidence level\n  getConfidenceClass(score) {\n    if (score >= 0.8) {\n      return 'bg-success';\n    } else if (score >= 0.6) {\n      return 'bg-primary';\n    } else if (score >= 0.4) {\n      return 'bg-warning';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  static {\n    this.ɵfac = function TaskEstimationComponent_Factory(t) {\n      return new (t || TaskEstimationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EstimationService), i0.ɵɵdirectiveInject(i3.TaskService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskEstimationComponent,\n      selectors: [[\"app-task-estimation\"]],\n      decls: 48,\n      vars: 11,\n      consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"mb-0\"], [1, \"text-muted\", \"mt-2\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"mb-0\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"taskTitle\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"taskTitle\", \"formControlName\", \"title\", \"placeholder\", \"Enter task title\", 1, \"form-control\"], [\"class\", \"text-danger mt-1\", 4, \"ngIf\"], [\"for\", \"taskType\", 1, \"form-label\"], [\"id\", \"taskType\", \"formControlName\", \"type\", 1, \"form-select\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"assignee\", 1, \"form-label\"], [\"id\", \"assignee\", \"formControlName\", \"assignee\", 1, \"form-select\"], [\"value\", \"\"], [1, \"form-label\"], [1, \"d-flex\"], [\"class\", \"form-check me-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"d-flex\", \"justify-content-between\", \"mt-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-arrow-counterclockwise\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [4, \"ngIf\"], [\"class\", \"alert alert-danger mb-4\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"class\", \"card bg-light\", 4, \"ngIf\"], [1, \"text-danger\", \"mt-1\"], [3, \"value\"], [1, \"form-check\", \"me-3\"], [\"type\", \"radio\", \"formControlName\", \"complexity\", 1, \"form-check-input\", 3, \"id\", \"value\"], [1, \"form-check-label\", 3, \"for\"], [1, \"bi\", \"bi-stopwatch\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\", \"mb-4\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"mb-4\", \"text-center\"], [1, \"display-4\", \"mb-0\"], [1, \"text-muted\"], [1, \"mb-4\"], [1, \"progress\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", 3, \"ngClass\"], [1, \"list-group\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-footer\", \"text-muted\", \"small\"], [1, \"bi\", \"bi-info-circle\"], [1, \"list-group-item\"], [1, \"card\", \"bg-light\"], [1, \"card-body\", \"text-center\", \"p-5\"], [1, \"bi\", \"bi-graph-up\", \"display-1\", \"text-muted\"], [1, \"mt-3\"]],\n      template: function TaskEstimationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\", 3);\n          i0.ɵɵtext(4, \"ML-Based Task Estimation\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p\", 4);\n          i0.ɵɵtext(6, \"Estimate task duration using machine learning predictions based on historical data\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"div\", 5)(8, \"div\", 6)(9, \"div\", 7)(10, \"div\", 8)(11, \"h4\", 9);\n          i0.ɵɵtext(12, \"Task Details\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 10)(14, \"form\", 11);\n          i0.ɵɵlistener(\"ngSubmit\", function TaskEstimationComponent_Template_form_ngSubmit_14_listener() {\n            return ctx.estimateTaskTime();\n          });\n          i0.ɵɵelementStart(15, \"div\", 12)(16, \"label\", 13);\n          i0.ɵɵtext(17, \"Task Title\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"input\", 14);\n          i0.ɵɵtemplate(19, TaskEstimationComponent_div_19_Template, 3, 2, \"div\", 15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"div\", 12)(21, \"label\", 16);\n          i0.ɵɵtext(22, \"Task Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"select\", 17);\n          i0.ɵɵtemplate(24, TaskEstimationComponent_option_24_Template, 2, 2, \"option\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"div\", 12)(26, \"label\", 19);\n          i0.ɵɵtext(27, \"Assignee\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"select\", 20)(29, \"option\", 21);\n          i0.ɵɵtext(30, \"-- Unassigned --\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(31, TaskEstimationComponent_option_31_Template, 2, 2, \"option\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(32, \"div\", 12)(33, \"label\", 22);\n          i0.ɵɵtext(34, \"Complexity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"div\", 23);\n          i0.ɵɵtemplate(36, TaskEstimationComponent_div_36_Template, 4, 4, \"div\", 24);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(37, \"div\", 25)(38, \"button\", 26);\n          i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_38_listener() {\n            return ctx.resetForm();\n          });\n          i0.ɵɵelement(39, \"i\", 27);\n          i0.ɵɵtext(40, \" Reset \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(41, \"button\", 28);\n          i0.ɵɵtemplate(42, TaskEstimationComponent_span_42_Template, 3, 0, \"span\", 29);\n          i0.ɵɵtemplate(43, TaskEstimationComponent_span_43_Template, 3, 0, \"span\", 29);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(44, \"div\", 6);\n          i0.ɵɵtemplate(45, TaskEstimationComponent_div_45_Template, 2, 1, \"div\", 30);\n          i0.ɵɵtemplate(46, TaskEstimationComponent_div_46_Template, 24, 7, \"div\", 31);\n          i0.ɵɵtemplate(47, TaskEstimationComponent_div_47_Template, 7, 0, \"div\", 32);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"formGroup\", ctx.estimationForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_1_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.taskTypes);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.teamMembers);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.complexityLevels);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"disabled\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showResult && ctx.estimationResult);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.showResult && !ctx.error);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"h2[_ngcontent-%COMP%] {\\n  margin-bottom: 1.5rem;\\n  color: #2c3e50;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  padding-top: 1.5rem;\\n}\\n\\n.display-4[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  transition: all 0.3s ease;\\n}\\n.card[_ngcontent-%COMP%]:hover {\\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\\n}\\n\\n.progress[_ngcontent-%COMP%] {\\n  height: 25px;\\n  font-weight: 600;\\n}\\n\\n.list-group-item[_ngcontent-%COMP%]:first-child {\\n  font-weight: 500;\\n}\\n\\n.bg-light[_ngcontent-%COMP%] {\\n  opacity: 0.8;\\n}\\n.bg-light[_ngcontent-%COMP%]   i.bi-graph-up[_ngcontent-%COMP%] {\\n  opacity: 0.5;\\n}\\n\\n.form-check[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n.form-check[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%], .form-check[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n\\n@keyframes _ngcontent-%COMP%_fadeIn {\\n  from {\\n    opacity: 0;\\n    transform: translateY(10px);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n}\\n.alert[_ngcontent-%COMP%], .card[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_fadeIn 0.3s ease-out;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWVzdGltYXRpb24vdGFzay1lc3RpbWF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UscUJBQUE7RUFDQSxjQUFBO0FBQ0Y7O0FBRUE7RUFDRSxtQkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLHdDQUFBO0VBQ0EseUJBQUE7QUFDRjtBQUNFO0VBQ0UsMENBQUE7QUFDSjs7QUFHQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUFGOztBQUlFO0VBQ0UsZ0JBQUE7QUFESjs7QUFLQTtFQUNFLFlBQUE7QUFGRjtBQUlFO0VBQ0UsWUFBQTtBQUZKOztBQU1BO0VBQ0UsZUFBQTtBQUhGO0FBS0U7RUFDRSxlQUFBO0FBSEo7O0FBUUE7RUFDRTtJQUFPLFVBQUE7SUFBWSwyQkFBQTtFQUhuQjtFQUlBO0lBQUssVUFBQTtJQUFZLHdCQUFBO0VBQWpCO0FBQ0Y7QUFFQTtFQUNFLCtCQUFBO0FBQUYiLCJzb3VyY2VzQ29udGVudCI6WyJoMiB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMS41cmVtO1xyXG4gIGNvbG9yOiAjMmMzZTUwO1xyXG59XHJcblxyXG4uY29udGFpbmVyIHtcclxuICBwYWRkaW5nLXRvcDogMS41cmVtO1xyXG59XHJcblxyXG4uZGlzcGxheS00IHtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcblxyXG4uY2FyZCB7XHJcbiAgYm94LXNoYWRvdzogMCA0cHggNnB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlO1xyXG4gIFxyXG4gICY6aG92ZXIge1xyXG4gICAgYm94LXNoYWRvdzogMCA2cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xyXG4gIH1cclxufVxyXG5cclxuLnByb2dyZXNzIHtcclxuICBoZWlnaHQ6IDI1cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG5cclxuLmxpc3QtZ3JvdXAtaXRlbSB7XHJcbiAgJjpmaXJzdC1jaGlsZCB7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gIH1cclxufVxyXG5cclxuLmJnLWxpZ2h0IHtcclxuICBvcGFjaXR5OiAwLjg7XHJcbiAgXHJcbiAgaS5iaS1ncmFwaC11cCB7XHJcbiAgICBvcGFjaXR5OiAwLjU7XHJcbiAgfVxyXG59XHJcblxyXG4uZm9ybS1jaGVjayB7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIFxyXG4gIC5mb3JtLWNoZWNrLWlucHV0LCAuZm9ybS1jaGVjay1sYWJlbCB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBBZGQgc29tZSBhbmltYXRpb24gZWZmZWN0c1xyXG5Aa2V5ZnJhbWVzIGZhZGVJbiB7XHJcbiAgZnJvbSB7IG9wYWNpdHk6IDA7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMHB4KTsgfVxyXG4gIHRvIHsgb3BhY2l0eTogMTsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyB9XHJcbn1cclxuXHJcbi5hbGVydCwgLmNhcmQge1xyXG4gIGFuaW1hdGlvbjogZmFkZUluIDAuM3MgZWFzZS1vdXQ7XHJcbn0gIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","TaskEstimationComponent","constructor","fb","estimationService","taskService","estimationForm","group","title","required","minLength","type","assignee","complexity","ngOnInit","getTeamMembers","subscribe","members","teamMembers","loadIterationPaths","getIterationPaths","next","paths","availableIterationPaths","error","err","console","iterationError","loadWorkItemsByIteration","selectedIterationPath","loadingIterationItems","workItems","selectedWorkItem","getTasks","items","selectWorkItem","item","populateFormWithWorkItem","determineComplexity","patchValue","assignedTo","priority","resetForm","reset","showResult","estimationResult","estimateTaskTime","invalid","Object","keys","controls","forEach","key","get","markAsTouched","loading","request","value","result","calculateTimeEstimates","estimatedHours","message","totalHours","devRatio","devTimeEstimate","Math","round","testTimeEstimate","totalEstimate","formatConfidence","score","getConfidenceClass","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { EstimationService, TaskEstimationResponse } from '../../services/estimation.service';\r\nimport { TaskService } from '../../services/task.service';\r\nimport { WorkItem } from '../../models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task-estimation',\r\n  templateUrl: './task-estimation.component.html',\r\n  styleUrls: ['./task-estimation.component.scss']\r\n})\r\nexport class TaskEstimationComponent implements OnInit {\r\n  estimationForm: FormGroup;\r\n  teamMembers: string[] = [];\r\n  taskTypes: string[] = [\r\n    'Bug',\r\n    'Change Request',\r\n    'Feature',\r\n    'Documentation',\r\n    'Test',\r\n    'Research'\r\n  ];\r\n  complexityLevels: string[] = [\r\n    'Low',\r\n    'Medium',\r\n    'High'\r\n  ];\r\n  \r\n  loading = false;\r\n  error: string | null = null;\r\n  estimationResult: TaskEstimationResponse | null = null;\r\n  showResult = false;\r\n\r\n  // New properties for iteration path functionality\r\n  availableIterationPaths: string[] = [];\r\n  selectedIterationPath: string = '';\r\n  workItems: WorkItem[] = [];\r\n  loadingIterationItems: boolean = false;\r\n  iterationError: string | null = null;\r\n  selectedWorkItem: WorkItem | null = null;\r\n  devTimeEstimate: number = 0;\r\n  testTimeEstimate: number = 0;\r\n  totalEstimate: number = 0;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private estimationService: EstimationService,\r\n    private taskService: TaskService\r\n  ) {\r\n    this.estimationForm = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(5)]],\r\n      type: ['Feature', Validators.required],\r\n      assignee: [''],\r\n      complexity: ['Medium', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Load team members\r\n    this.taskService.getTeamMembers().subscribe(members => {\r\n      this.teamMembers = members;\r\n    });\r\n\r\n    // Load available iteration paths\r\n    this.loadIterationPaths();\r\n  }\r\n\r\n  // Load available iteration paths\r\n  loadIterationPaths(): void {\r\n    this.taskService.getIterationPaths().subscribe({\r\n      next: (paths) => {\r\n        this.availableIterationPaths = paths;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading iteration paths:', err);\r\n        this.iterationError = 'Failed to load iteration paths';\r\n      }\r\n    });\r\n  }\r\n\r\n  // Load work items for the selected iteration path\r\n  loadWorkItemsByIteration(): void {\r\n    if (!this.selectedIterationPath) {\r\n      this.iterationError = 'Please select an iteration path';\r\n      return;\r\n    }\r\n\r\n    this.loadingIterationItems = true;\r\n    this.workItems = [];\r\n    this.selectedWorkItem = null;\r\n    this.iterationError = null;\r\n\r\n    this.taskService.getTasks(this.selectedIterationPath).subscribe({\r\n      next: (items) => {\r\n        this.workItems = items;\r\n        this.loadingIterationItems = false;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading work items:', err);\r\n        this.iterationError = 'Failed to load work items for the selected iteration';\r\n        this.loadingIterationItems = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Select a work item for estimation\r\n  selectWorkItem(item: WorkItem): void {\r\n    this.selectedWorkItem = item;\r\n    this.populateFormWithWorkItem(item);\r\n  }\r\n\r\n  // Populate the form with selected work item details\r\n  populateFormWithWorkItem(item: WorkItem): void {\r\n    const complexity = this.determineComplexity(item);\r\n    \r\n    this.estimationForm.patchValue({\r\n      title: item.title,\r\n      type: item.type || 'Feature',\r\n      assignee: item.assignedTo || '',\r\n      complexity: complexity\r\n    });\r\n  }\r\n\r\n  // Determine complexity based on work item properties\r\n  determineComplexity(item: WorkItem): string {\r\n    // Logic to determine complexity based on priority or other factors\r\n    if (item.priority <= 1) {\r\n      return 'High';\r\n    } else if (item.priority === 2) {\r\n      return 'Medium';\r\n    } else {\r\n      return 'Low';\r\n    }\r\n  }\r\n\r\n  resetForm(): void {\r\n    this.estimationForm.reset({\r\n      type: 'Feature',\r\n      complexity: 'Medium'\r\n    });\r\n    this.error = null;\r\n    this.showResult = false;\r\n    this.estimationResult = null;\r\n  }\r\n\r\n  estimateTaskTime(): void {\r\n    if (this.estimationForm.invalid) {\r\n      // Mark all fields as touched to trigger validation messages\r\n      Object.keys(this.estimationForm.controls).forEach(key => {\r\n        this.estimationForm.get(key)?.markAsTouched();\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.error = null;\r\n    this.estimationResult = null;\r\n    this.showResult = false;\r\n\r\n    const request = {\r\n      title: this.estimationForm.value.title,\r\n      type: this.estimationForm.value.type,\r\n      assignee: this.estimationForm.value.assignee,\r\n      complexity: this.estimationForm.value.complexity\r\n    };\r\n\r\n    this.estimationService.estimateTaskTime(request).subscribe({\r\n      next: (result) => {\r\n        this.estimationResult = result;\r\n        this.showResult = true;\r\n        this.loading = false;\r\n        \r\n        // Calculate dev and test time estimates\r\n        this.calculateTimeEstimates(result.estimatedHours);\r\n      },\r\n      error: (err) => {\r\n        this.error = err.message || 'An error occurred during estimation';\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Calculate development and testing time estimates\r\n  calculateTimeEstimates(totalHours: number): void {\r\n    // Typical distribution: dev 60-70%, testing 30-40%\r\n    const complexity = this.estimationForm.value.complexity;\r\n    let devRatio = 0.65; // Default dev ratio\r\n    \r\n    // Adjust ratio based on complexity\r\n    if (complexity === 'High') {\r\n      devRatio = 0.7; // Higher complexity = more dev time\r\n    } else if (complexity === 'Low') {\r\n      devRatio = 0.6; // Lower complexity = less dev time\r\n    }\r\n    \r\n    this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\r\n    this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\r\n    this.totalEstimate = totalHours;\r\n  }\r\n\r\n  // Format confidence score as percentage\r\n  formatConfidence(score: number): string {\r\n    return `${Math.round(score * 100)}%`;\r\n  }\r\n\r\n  // Get appropriate class for confidence level\r\n  getConfidenceClass(score: number): string {\r\n    if (score >= 0.8) {\r\n      return 'bg-success';\r\n    } else if (score >= 0.6) {\r\n      return 'bg-primary';\r\n    } else if (score >= 0.4) {\r\n      return 'bg-warning';\r\n    } else {\r\n      return 'bg-danger';\r\n    }\r\n  }\r\n} ","<div class=\"container-fluid p-4\">\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <h2 class=\"mb-0\">ML-Based Task Estimation</h2>\r\n      <p class=\"text-muted mt-2\">Estimate task duration using machine learning predictions based on historical data</p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6\">\r\n      <!-- Task Estimation Form -->\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"card-title mb-0\">Task Details</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <form [formGroup]=\"estimationForm\" (ngSubmit)=\"estimateTaskTime()\">\r\n            <!-- Task Title -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"taskTitle\" class=\"form-label\">Task Title</label>\r\n              <input \r\n                type=\"text\" \r\n                class=\"form-control\" \r\n                id=\"taskTitle\" \r\n                formControlName=\"title\"\r\n                placeholder=\"Enter task title\">\r\n              <div *ngIf=\"estimationForm.get('title')?.invalid && estimationForm.get('title')?.touched\" class=\"text-danger mt-1\">\r\n                <small *ngIf=\"estimationForm.get('title')?.errors?.['required']\">Title is required</small>\r\n                <small *ngIf=\"estimationForm.get('title')?.errors?.['minlength']\">Title must be at least 5 characters</small>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Task Type -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"taskType\" class=\"form-label\">Task Type</label>\r\n              <select class=\"form-select\" id=\"taskType\" formControlName=\"type\">\r\n                <option *ngFor=\"let type of taskTypes\" [value]=\"type\">{{ type }}</option>\r\n              </select>\r\n            </div>\r\n\r\n            <!-- Assignee -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"assignee\" class=\"form-label\">Assignee</label>\r\n              <select class=\"form-select\" id=\"assignee\" formControlName=\"assignee\">\r\n                <option value=\"\">-- Unassigned --</option>\r\n                <option *ngFor=\"let member of teamMembers\" [value]=\"member\">{{ member }}</option>\r\n              </select>\r\n            </div>\r\n\r\n            <!-- Complexity -->\r\n            <div class=\"mb-3\">\r\n              <label class=\"form-label\">Complexity</label>\r\n              <div class=\"d-flex\">\r\n                <div class=\"form-check me-3\" *ngFor=\"let level of complexityLevels\">\r\n                  <input \r\n                    class=\"form-check-input\" \r\n                    type=\"radio\" \r\n                    [id]=\"'complexity-' + level.toLowerCase()\" \r\n                    [value]=\"level\" \r\n                    formControlName=\"complexity\">\r\n                  <label class=\"form-check-label\" [for]=\"'complexity-' + level.toLowerCase()\">\r\n                    {{ level }}\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Action Buttons -->\r\n            <div class=\"d-flex justify-content-between mt-4\">\r\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"resetForm()\">\r\n                <i class=\"bi bi-arrow-counterclockwise\"></i> Reset\r\n              </button>\r\n              <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loading\">\r\n                <span *ngIf=\"!loading\">\r\n                  <i class=\"bi bi-stopwatch\"></i> Estimate Time\r\n                </span>\r\n                <span *ngIf=\"loading\">\r\n                  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                  Estimating...\r\n                </span>\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-md-6\">\r\n      <!-- Error Display -->\r\n      <div *ngIf=\"error\" class=\"alert alert-danger mb-4\">\r\n        {{ error }}\r\n      </div>\r\n\r\n      <!-- Estimation Results -->\r\n      <div *ngIf=\"showResult && estimationResult\" class=\"card\">\r\n        <div class=\"card-header bg-primary text-white\">\r\n          <h4 class=\"card-title mb-0\">Estimation Results</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"mb-4 text-center\">\r\n            <h2 class=\"display-4 mb-0\">{{ estimationResult.estimatedHours }} hours</h2>\r\n            <p class=\"text-muted\">Estimated time to complete the task</p>\r\n          </div>\r\n\r\n          <div class=\"mb-4\">\r\n            <h5>Prediction Confidence</h5>\r\n            <div class=\"progress\">\r\n              <div \r\n                class=\"progress-bar\" \r\n                [ngClass]=\"getConfidenceClass(estimationResult.confidenceScore)\"\r\n                [style.width.%]=\"estimationResult.confidenceScore * 100\" \r\n                role=\"progressbar\" \r\n                [attr.aria-valuenow]=\"estimationResult.confidenceScore * 100\" \r\n                aria-valuemin=\"0\" \r\n                aria-valuemax=\"100\">\r\n                {{ formatConfidence(estimationResult.confidenceScore) }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <h5>Factors Considered</h5>\r\n            <ul class=\"list-group\">\r\n              <li class=\"list-group-item\" *ngFor=\"let factor of estimationResult.factors\">\r\n                {{ factor }}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-footer text-muted small\">\r\n          <i class=\"bi bi-info-circle\"></i> These estimates are based on machine learning models analyzing historical task data.\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Placeholder when no result is shown -->\r\n      <div *ngIf=\"!showResult && !error\" class=\"card bg-light\">\r\n        <div class=\"card-body text-center p-5\">\r\n          <i class=\"bi bi-graph-up display-1 text-muted\"></i>\r\n          <h4 class=\"mt-3\">Task Time Prediction</h4>\r\n          <p class=\"text-muted\">Fill in the task details and click \"Estimate Time\" to get an ML-based time estimate</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}