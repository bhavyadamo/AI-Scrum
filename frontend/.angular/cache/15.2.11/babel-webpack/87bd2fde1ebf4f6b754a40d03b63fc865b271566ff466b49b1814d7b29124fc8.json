{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { WorkItem } from '../../models/task.model';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/estimation.service\";\nimport * as i3 from \"../../services/task.service\";\nimport * as i4 from \"@angular/common\";\nfunction TaskEstimationComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.iterationError);\n  }\n}\nfunction TaskEstimationComponent_span_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 50);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.workItems.length, \" items\");\n  }\n}\nfunction TaskEstimationComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"div\", 52)(2, \"span\", 53);\n    i0.ɵɵtext(3, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 54);\n    i0.ɵɵtext(5, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"p\", 55);\n    i0.ɵɵtext(2, \"No work items found. Please select an iteration path and click \\\"Load Items\\\".\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function (a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    \"bg-danger\": a0,\n    \"bg-primary\": a1,\n    \"bg-warning\": a2,\n    \"bg-info\": a3,\n    \"bg-success\": a4,\n    \"bg-dark text-light\": a5,\n    \"bg-secondary\": a6\n  };\n};\nconst _c1 = function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {\n  return {\n    \"badge-code-review\": a0,\n    \"badge-dev-new\": a1,\n    \"bg-info\": a2,\n    \"bg-primary\": a3,\n    \"bg-success\": a4,\n    \"bg-warning\": a5,\n    \"bg-danger\": a6,\n    \"bg-dark\": a7,\n    \"badge-ready\": a8,\n    \"badge-assigned\": a9,\n    \"bg-info text-white\": a10,\n    \"badge-na\": a11\n  };\n};\nfunction TaskEstimationComponent_div_34_tr_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 60);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_div_34_tr_15_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const item_r20 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.selectWorkItem(item_r20));\n    });\n    i0.ɵɵelementStart(1, \"td\", 61);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\")(4, \"span\", 62);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"small\");\n    i0.ɵɵelement(10, \"i\", 63);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"td\")(13, \"span\", 64);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"table-primary\", (ctx_r19.selectedWorkItem == null ? null : ctx_r19.selectedWorkItem.id) === item_r20.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"#\", item_r20.id, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction7(9, _c0, item_r20.type === \"Bug\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Bug\", item_r20.type === \"Feature\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Feature\", item_r20.type === \"Change Request\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Change Request\", item_r20.type === \"Test\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Test\", item_r20.type === \"Requirement\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Requirement\", item_r20.type === \"User Story\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"User Story\", !item_r20.type && (!item_r20.fields || !item_r20.fields[\"System.WorkItemType\"])));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r20.fields && item_r20.fields[\"System.WorkItemType\"] || item_r20.type || \"Task\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r20.title);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r19.getAssigneeName(item_r20) || \"Unassigned\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunctionV(17, _c1, [ctx_r19.getStateDisplay(item_r20) && ctx_r19.getStateDisplay(item_r20).toLowerCase() === \"code review\", ctx_r19.getStateDisplay(item_r20) && ctx_r19.getStateDisplay(item_r20).toLowerCase() === \"dev-new\", ctx_r19.getStateDisplay(item_r20) && ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"review\") && ctx_r19.getStateDisplay(item_r20).toLowerCase() !== \"code review\", ctx_r19.getStateDisplay(item_r20) && ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"progress\"), ctx_r19.getStateDisplay(item_r20) && (ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"complete\") || ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"done\")), ctx_r19.getStateDisplay(item_r20) && (ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"pending\") || ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"wait\")), ctx_r19.getStateDisplay(item_r20) && (ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"fail\") || ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"block\")), ctx_r19.getStateDisplay(item_r20) && ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"new\") && ctx_r19.getStateDisplay(item_r20).toLowerCase() !== \"dev-new\", ctx_r19.getStateDisplay(item_r20) && ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"ready\"), ctx_r19.getStateDisplay(item_r20) && ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"assign\"), ctx_r19.getStateDisplay(item_r20) && (ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"test\") || ctx_r19.getStateDisplay(item_r20).toLowerCase().includes(\"review\") && ctx_r19.getStateDisplay(item_r20).toLowerCase() !== \"code review\"), !ctx_r19.getStateDisplay(item_r20) || ctx_r19.getStateDisplay(item_r20) === \"N/A\"]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r19.getStateDisplay(item_r20) || \"N/A\");\n  }\n}\nfunction TaskEstimationComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56)(1, \"table\", 57)(2, \"thead\")(3, \"tr\")(4, \"th\", 58);\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\", 58);\n    i0.ɵɵtext(7, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\", 58);\n    i0.ɵɵtext(9, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\", 58);\n    i0.ɵɵtext(11, \"Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\", 58);\n    i0.ɵɵtext(13, \"State\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(14, \"tbody\");\n    i0.ɵɵtemplate(15, TaskEstimationComponent_div_34_tr_15_Template, 15, 30, \"tr\", 59);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.workItems);\n  }\n}\nfunction TaskEstimationComponent_span_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Task #\", ctx_r5.selectedWorkItem.id, \" Details\");\n  }\n}\nfunction TaskEstimationComponent_span_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Task Details\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_button_48_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 65);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_button_48_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.resetForm());\n    });\n    i0.ɵɵelement(1, \"i\", 66);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title must be at least 5 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 67);\n    i0.ɵɵtemplate(1, TaskEstimationComponent_div_49_small_1_Template, 2, 0, \"small\", 22);\n    i0.ɵɵtemplate(2, TaskEstimationComponent_div_49_small_2_Template, 2, 0, \"small\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r8.estimationForm.get(\"title\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r8.estimationForm.get(\"title\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nfunction TaskEstimationComponent_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 68)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Found matching work item #\", ctx_r9.selectedWorkItem.id, \"\");\n  }\n}\nfunction TaskEstimationComponent_option_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 69);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r27 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r27);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r27);\n  }\n}\nfunction TaskEstimationComponent_option_65_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 69);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r28 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", member_r28);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r28);\n  }\n}\nfunction TaskEstimationComponent_div_70_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 70);\n    i0.ɵɵelement(1, \"input\", 71);\n    i0.ɵɵelementStart(2, \"label\", 72);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const level_r29 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"complexity-\" + level_r29.toLowerCase())(\"value\", level_r29);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", \"complexity-\" + level_r29.toLowerCase());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", level_r29, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 73)(1, \"small\");\n    i0.ɵɵelement(2, \"i\", 74);\n    i0.ɵɵtext(3, \" Complexity automatically predicted based on work item attributes\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_span_77_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"i\", 75);\n    i0.ɵɵtext(2, \" Estimate Time \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_span_78_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 76);\n    i0.ɵɵtext(2, \" Estimating... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_81_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 77);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r16.error, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_82_li_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 91);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const factor_r31 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", factor_r31, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_82_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 78)(2, \"h4\", 7);\n    i0.ɵɵtext(3, \"Estimation Results\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 8)(5, \"div\", 17)(6, \"div\", 10)(7, \"div\", 79)(8, \"h2\", 80);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 55);\n    i0.ɵɵtext(11, \"Total estimated time\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 81)(13, \"div\", 82)(14, \"div\", 83)(15, \"h3\", 3);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"p\", 84);\n    i0.ɵɵtext(18, \"Development Time\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"div\", 82)(20, \"div\", 83)(21, \"h3\", 3);\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"p\", 84);\n    i0.ɵɵtext(24, \"Testing Time\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(25, \"div\", 85)(26, \"h5\");\n    i0.ɵɵtext(27, \"Prediction Confidence\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"div\", 86)(29, \"div\", 87);\n    i0.ɵɵtext(30);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(31, \"div\", 10)(32, \"h5\");\n    i0.ɵɵtext(33, \"Factors Considered\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"ul\", 88);\n    i0.ɵɵtemplate(35, TaskEstimationComponent_div_82_li_35_Template, 2, 1, \"li\", 89);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(36, \"div\", 90);\n    i0.ɵɵelement(37, \"i\", 74);\n    i0.ɵɵtext(38, \" These estimates are based on historical work item data from Azure DevOps, analyzing completed tasks with similar characteristics. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r17.estimationResult.estimatedHours, \" hours\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r17.devTimeEstimate);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r17.testTimeEstimate);\n    i0.ɵɵadvance(7);\n    i0.ɵɵstyleProp(\"width\", ctx_r17.estimationResult.confidenceScore * 100, \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r17.getConfidenceClass(ctx_r17.estimationResult.confidenceScore));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r17.estimationResult.confidenceScore * 100);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.formatConfidence(ctx_r17.estimationResult.confidenceScore), \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r17.estimationResult.factors);\n  }\n}\nfunction TaskEstimationComponent_div_83_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 92)(1, \"div\", 93);\n    i0.ɵɵelement(2, \"i\", 94);\n    i0.ɵɵelementStart(3, \"h4\", 95);\n    i0.ɵɵtext(4, \"Task Time Prediction\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 55);\n    i0.ɵɵtext(6, \"Fill in the task details and click \\\"Estimate Time\\\" to get an ML-based time estimate\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"is-valid\": a0\n  };\n};\nexport let TaskEstimationComponent = /*#__PURE__*/(() => {\n  class TaskEstimationComponent {\n    constructor(fb, estimationService, taskService) {\n      this.fb = fb;\n      this.estimationService = estimationService;\n      this.taskService = taskService;\n      this.teamMembers = [];\n      // Include all available work item types from the enum\n      this.taskTypes = ['User Story', 'Task', 'Bug', 'Epic', 'Feature', 'Issue', 'Change Request', 'Documentation', 'Test', 'Research'];\n      this.complexityLevels = ['Low', 'Medium', 'High'];\n      this.loading = false;\n      this.error = null;\n      this.estimationResult = null;\n      this.showResult = false;\n      // New properties for iteration path functionality\n      this.manualIterationPath = ''; // Only use manual iteration path\n      this.workItems = [];\n      this.loadingIterationItems = false;\n      this.iterationError = null;\n      this.selectedWorkItem = null;\n      this.devTimeEstimate = 0;\n      this.testTimeEstimate = 0;\n      this.totalEstimate = 0;\n      this.estimationForm = this.fb.group({\n        title: ['', [Validators.required, Validators.minLength(5)]],\n        type: ['Feature', Validators.required],\n        assignee: [''],\n        complexity: ['Medium', Validators.required]\n      });\n    }\n    ngOnInit() {\n      // Load team members\n      this.loadTeamMembers();\n      // Listen for title changes to auto-fill fields\n      this.estimationForm.get('title')?.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe(title => {\n        if (title && title.length > 5) {\n          this.autoPopulateFormFields(title);\n        }\n      });\n    }\n    // Load team members with better error handling\n    loadTeamMembers() {\n      this.taskService.getTeamMembers().subscribe({\n        next: response => {\n          console.log('Team members API response:', response);\n          if (Array.isArray(response)) {\n            if (response.length === 0) {\n              console.warn('No team members returned from API');\n              return;\n            }\n            if (typeof response[0] === 'string') {\n              // It's an array of strings\n              this.teamMembers = response;\n            } else {\n              // It's an array of TeamMember objects\n              this.teamMembers = response.filter(m => m && m.displayName) // Filter out invalid entries\n              .map(m => m.displayName);\n            }\n            // Add some failsafe common users based on the work items we've seen\n            const commonUsers = ['Bhavya Damodharan', 'Suresh GM', 'Ranjith Kumar S', 'Vignesh Ram Suresh kumar', 'Dinesh Kumar K'];\n            // Add any common users not already in the list\n            commonUsers.forEach(user => {\n              if (!this.teamMembers.includes(user)) {\n                this.teamMembers.push(user);\n              }\n            });\n            console.log(`Loaded ${this.teamMembers.length} team members:`, this.teamMembers);\n          }\n        },\n        error: err => {\n          console.error('Error loading team members:', err);\n          this.error = 'Failed to load team members';\n          // Fallback to a default list of common users\n          this.teamMembers = ['Bhavya Damodharan', 'Suresh GM', 'Ranjith Kumar S', 'Vignesh Ram Suresh kumar', 'Dinesh Kumar K'];\n          console.log('Using fallback team members list:', this.teamMembers);\n        }\n      });\n    }\n    // Auto-populate form fields based on entered title\n    autoPopulateFormFields(title) {\n      if (!this.workItems || this.workItems.length === 0) {\n        return; // No items to search through\n      }\n      // Find matching work item by title (full or partial match)\n      const matchingItem = this.workItems.find(item => item.title.toLowerCase().includes(title.toLowerCase()) || title.toLowerCase().includes(item.title.toLowerCase()));\n      if (matchingItem) {\n        this.selectedWorkItem = matchingItem;\n        this.populateFormWithWorkItem(matchingItem);\n      }\n    }\n    // Load work items for the selected iteration path\n    loadWorkItemsByIteration() {\n      if (!this.manualIterationPath || this.manualIterationPath.trim() === '') {\n        this.iterationError = 'Please enter an iteration path';\n        return;\n      }\n      this.loadingIterationItems = true;\n      this.workItems = [];\n      this.selectedWorkItem = null;\n      this.iterationError = null;\n      this.taskService.getTasks(this.manualIterationPath.trim()).subscribe({\n        next: items => {\n          // Process items to clean up state information\n          this.workItems = items.map(item => {\n            // Process each item to ensure it has proper state\n            const processedItem = {\n              ...item\n            };\n            // Make sure the fields object exists\n            if (!processedItem.fields) {\n              processedItem.fields = {};\n            }\n            // Fix state display - remove \"Unknown\" prefix if present\n            if (processedItem.state && processedItem.state.toLowerCase().includes('unknown')) {\n              processedItem.state = processedItem.state.replace(/unknown/i, '').trim();\n            }\n            // Also check for state in fields\n            if (processedItem.fields && processedItem.fields['System.State']) {\n              let state = processedItem.fields['System.State'];\n              if (typeof state === 'string' && state.toLowerCase().includes('unknown')) {\n                state = state.replace(/unknown/i, '').trim();\n                processedItem.fields['System.State'] = state;\n              }\n              // If item has no state but has System.State, use it\n              if (!processedItem.state) {\n                processedItem.state = state;\n              }\n            }\n            // Capture status field if present in the payload and map it to fields\n            if (item.status) {\n              processedItem.fields['status'] = item.status;\n            }\n            return processedItem;\n          });\n          this.loadingIterationItems = false;\n          console.log(`Loaded ${this.workItems.length} work items for iteration ${this.manualIterationPath}`);\n        },\n        error: err => {\n          console.error('Error loading work items:', err);\n          this.iterationError = 'Failed to load work items for the specified iteration path';\n          this.loadingIterationItems = false;\n        }\n      });\n    }\n    // Helper method to find the best matching team member for an assignee\n    findMatchingTeamMember(assigneeName) {\n      if (!assigneeName || !this.teamMembers || this.teamMembers.length === 0) {\n        return '';\n      }\n      console.log('Finding match for assignee:', assigneeName);\n      // First try exact match\n      const exactMatch = this.teamMembers.find(member => member === assigneeName);\n      if (exactMatch) {\n        console.log('Found exact match:', exactMatch);\n        return exactMatch;\n      }\n      // Then try case-insensitive exact match\n      const caseInsensitiveMatch = this.teamMembers.find(member => member.toLowerCase() === assigneeName.toLowerCase());\n      if (caseInsensitiveMatch) {\n        console.log('Found case-insensitive match:', caseInsensitiveMatch);\n        return caseInsensitiveMatch;\n      }\n      // Then try contains matches (member contains assignee or assignee contains member)\n      const containsMatch = this.teamMembers.find(member => member.toLowerCase().includes(assigneeName.toLowerCase()) || assigneeName.toLowerCase().includes(member.toLowerCase()));\n      if (containsMatch) {\n        console.log('Found contains match:', containsMatch);\n        return containsMatch;\n      }\n      // Split full names and try to match individual parts\n      // This helps with formats like \"First Last\" vs \"Last, First\"\n      const nameParts = assigneeName.toLowerCase().split(/[\\s,]+/).filter(part => part.length > 1);\n      if (nameParts.length > 1) {\n        console.log('Trying to match name parts:', nameParts);\n        // Try to find a member that contains all name parts\n        const allPartsMatch = this.teamMembers.find(member => {\n          const memberLower = member.toLowerCase();\n          return nameParts.every(part => memberLower.includes(part));\n        });\n        if (allPartsMatch) {\n          console.log('Found match containing all name parts:', allPartsMatch);\n          return allPartsMatch;\n        }\n        // Try to find a member that contains any significant name part\n        for (const part of nameParts) {\n          if (part.length < 3) continue; // Skip short parts like initials\n          const partialMatch = this.teamMembers.find(member => member.toLowerCase().includes(part));\n          if (partialMatch) {\n            console.log('Found match with name part:', part, '->', partialMatch);\n            return partialMatch;\n          }\n        }\n      }\n      // If we have a name that appears to be \"Firstname Lastname\"\n      // Try a more aggressive match against first letters + full last name\n      if (nameParts.length >= 2) {\n        const firstInitial = nameParts[0].charAt(0);\n        const lastName = nameParts[nameParts.length - 1];\n        const initialsMatch = this.teamMembers.find(member => {\n          const memberParts = member.toLowerCase().split(/[\\s,]+/);\n          if (memberParts.length >= 2) {\n            const memberFirstInitial = memberParts[0].charAt(0);\n            const memberLastName = memberParts[memberParts.length - 1];\n            return memberFirstInitial === firstInitial && memberLastName.includes(lastName);\n          }\n          return false;\n        });\n        if (initialsMatch) {\n          console.log('Found match with first initial + last name:', initialsMatch);\n          return initialsMatch;\n        }\n      }\n      // Last resort: try to match any word of length 4+ as a potential name fragment\n      const significantWords = assigneeName.toLowerCase().match(/\\b\\w{4,}\\b/g);\n      if (significantWords && significantWords.length > 0) {\n        for (const word of significantWords) {\n          const wordMatch = this.teamMembers.find(member => member.toLowerCase().includes(word));\n          if (wordMatch) {\n            console.log('Found match with significant word:', word, '->', wordMatch);\n            return wordMatch;\n          }\n        }\n      }\n      // If no match found after all attempts, return the original name\n      console.log('No match found, using original name:', assigneeName);\n      return assigneeName;\n    }\n    // Select a work item for estimation\n    selectWorkItem(item) {\n      this.selectedWorkItem = item;\n      this.populateFormWithWorkItem(item);\n    }\n    // Populate the form with selected work item details\n    populateFormWithWorkItem(item) {\n      const complexity = this.determineComplexity(item);\n      // Extract assignee name, trying 'System.AssignedTo' first\n      let assignee = '';\n      let originalAssignee = '';\n      // Debug log the item details\n      console.log('Selected work item:', item);\n      // Check for fields property which might contain System.AssignedTo\n      if (item.fields && item.fields['System.AssignedTo']) {\n        const assignedTo = item.fields['System.AssignedTo'];\n        if (typeof assignedTo === 'string') {\n          originalAssignee = assignedTo;\n          assignee = assignedTo;\n        } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n          // Try to get displayName property\n          if (assignedTo.displayName) {\n            originalAssignee = assignedTo.displayName;\n            assignee = assignedTo.displayName;\n          }\n        }\n      }\n      // Check for direct assignee property which is most common in Azure DevOps API\n      else if (item.assignedTo) {\n        originalAssignee = typeof item.assignedTo === 'string' ? item.assignedTo : item.assignedTo.displayName || '';\n        assignee = originalAssignee;\n      }\n      console.log('Original assignee from work item:', originalAssignee);\n      console.log('Available team members:', this.teamMembers);\n      // If we have an assignee name, find the matching team member\n      if (assignee) {\n        const previousAssignee = assignee;\n        assignee = this.findMatchingTeamMember(assignee);\n        console.log(`Matching team member: '${previousAssignee}' -> '${assignee}'`);\n      }\n      // Get type, trying both System.WorkItemType and type property\n      let itemType = '';\n      // First try to get from Azure DevOps fields\n      if (item.fields) {\n        if (item.fields['System.WorkItemType']) {\n          itemType = item.fields['System.WorkItemType'];\n        }\n      }\n      // If not found, fallback to type property\n      if (!itemType && item.type) {\n        itemType = item.type;\n      }\n      // If still not found, try to determine from title\n      if (!itemType) {\n        const title = item.title.toLowerCase();\n        if (title.includes('bug') || title.includes('fix') || title.includes('issue')) {\n          itemType = 'Bug';\n        } else if (title.includes('feature') || title.includes('implement') || title.includes('add new')) {\n          itemType = 'Feature';\n        } else if (title.includes('change') || title.includes('modify') || title.includes('update')) {\n          itemType = 'Change Request';\n        } else if (title.includes('requirement') || title.includes('must have')) {\n          itemType = 'Requirement';\n        } else {\n          // Default to Feature\n          itemType = 'Feature';\n        }\n      }\n      // Ensure the type is available in our task types list\n      if (itemType && !this.taskTypes.includes(itemType)) {\n        // Add to taskTypes if not already there\n        this.taskTypes.push(itemType);\n      }\n      // Update form with extracted values\n      this.estimationForm.patchValue({\n        title: item.title,\n        type: itemType,\n        assignee: assignee,\n        complexity: complexity\n      });\n      console.log(`Populated form with: Type=${itemType}, Assignee=${assignee}, Complexity=${complexity}`);\n      // Pre-calculate estimates based on historical data if we have this information\n      if (this.estimationResult) {\n        this.calculateTimeEstimates(this.estimationResult.estimatedHours);\n      }\n    }\n    // Determine complexity based on work item properties with enhanced logic\n    determineComplexity(item) {\n      // Initialize with default complexity\n      let complexity = 'Medium';\n      // Try to determine from title keywords\n      const title = item.title.toLowerCase();\n      if (title.includes('critical') || title.includes('urgent') || title.includes('major') || title.includes('performance issue') || title.includes('security')) {\n        return 'High';\n      }\n      if (title.includes('minor') || title.includes('small') || title.includes('trivial') || title.includes('documentation') || title.includes('typo')) {\n        return 'Low';\n      }\n      // Determine from type\n      const itemType = this.getWorkItemType(item);\n      if (itemType === 'Bug' || itemType === 'Change Request' || itemType === 'Feature') {\n        // Bugs and change requests tend to be more complex\n        complexity = 'Medium';\n        // For bugs, increase complexity\n        if (itemType === 'Bug') {\n          complexity = 'High';\n        }\n      }\n      // Determine from priority if available\n      if (item.priority !== undefined) {\n        if (item.priority <= 1) {\n          complexity = 'High';\n        } else if (item.priority === 2) {\n          complexity = 'Medium';\n        } else {\n          complexity = 'Low';\n        }\n      }\n      // Check for complexity field if available in Azure DevOps fields\n      if (item.fields) {\n        // Different systems use different field names for complexity/effort\n        const complexityFields = ['Microsoft.VSTS.Common.Complexity', 'Microsoft.VSTS.Scheduling.Effort', 'Custom.Complexity', 'System.Complexity'];\n        for (const field of complexityFields) {\n          if (item.fields[field]) {\n            const fieldValue = item.fields[field];\n            if (typeof fieldValue === 'string') {\n              if (fieldValue.includes('High') || fieldValue.includes('1')) {\n                return 'High';\n              } else if (fieldValue.includes('Low') || fieldValue.includes('3')) {\n                return 'Low';\n              }\n            } else if (typeof fieldValue === 'number') {\n              if (fieldValue <= 1) {\n                return 'High';\n              } else if (fieldValue >= 3) {\n                return 'Low';\n              }\n            }\n          }\n        }\n      }\n      return complexity;\n    }\n    // Helper method to get work item type consistently\n    getWorkItemType(item) {\n      // Try to get from System.WorkItemType first\n      if (item.fields && item.fields['System.WorkItemType']) {\n        return item.fields['System.WorkItemType'];\n      }\n      // Fallback to type property\n      return item.type || 'Feature';\n    }\n    resetForm() {\n      this.estimationForm.reset({\n        type: 'Feature',\n        complexity: 'Medium'\n      });\n      this.error = null;\n      this.showResult = false;\n      this.estimationResult = null;\n    }\n    estimateTaskTime() {\n      if (this.estimationForm.invalid) {\n        // Mark all fields as touched to trigger validation messages\n        Object.keys(this.estimationForm.controls).forEach(key => {\n          this.estimationForm.get(key)?.markAsTouched();\n        });\n        return;\n      }\n      this.loading = true;\n      this.error = null;\n      this.estimationResult = null;\n      this.showResult = false;\n      const request = {\n        title: this.estimationForm.value.title,\n        type: this.estimationForm.value.type,\n        assignee: this.estimationForm.value.assignee,\n        complexity: this.estimationForm.value.complexity\n      };\n      // Check if we have a selected work item with an ID\n      if (this.selectedWorkItem && this.selectedWorkItem.id) {\n        // Convert to number if it's a string, or use as is if it's already a number\n        const workItemId = typeof this.selectedWorkItem.id === 'string' ? parseInt(this.selectedWorkItem.id, 10) : this.selectedWorkItem.id;\n        if (!isNaN(workItemId)) {\n          request.workItemId = workItemId;\n          // First try to get the full work item history from Azure DevOps\n          console.log(`Fetching detailed history for work item #${workItemId}`);\n          this.taskService.getWorkItemWithHistory(workItemId).subscribe({\n            next: detailedItem => {\n              console.log(`Received detailed work item #${workItemId} with history`);\n              // Check if we have activity history\n              if (detailedItem.activity && detailedItem.activity.length > 0) {\n                console.log(`Work item has ${detailedItem.activity.length} historical activities`);\n                // Use the history to estimate time based on state transitions\n                const estimatedTimes = this.calculateEstimatesFromHistory(detailedItem);\n                // Create result based on historical analysis\n                this.estimationResult = {\n                  estimatedHours: estimatedTimes.total,\n                  devTimeHours: estimatedTimes.development,\n                  testTimeHours: estimatedTimes.testing,\n                  confidenceScore: 0.85,\n                  factors: [`Based on actual work item #${workItemId} history`, `Task type: ${request.type}`, `${request.complexity} complexity`, `Similar work item pattern analysis`]\n                };\n                this.showResult = true;\n                this.loading = false;\n                this.devTimeEstimate = this.estimationResult.devTimeHours || 0;\n                this.testTimeEstimate = this.estimationResult.testTimeHours || 0;\n                this.totalEstimate = this.estimationResult.estimatedHours;\n              } else {\n                console.log('No activity history available, falling back to iteration-based estimation');\n                this.estimateFromIterationHistory(request);\n              }\n            },\n            error: err => {\n              console.error('Error fetching work item history:', err);\n              console.log('Falling back to iteration-based estimation');\n              this.estimateFromIterationHistory(request);\n            }\n          });\n          return; // Exit early since we're handling the estimation in the subscription\n        }\n      }\n      // If we don't have a work item ID or failed to retrieve it,\n      // fall back to our previous approach with iteration history\n      this.estimateFromIterationHistory(request);\n    }\n    /**\r\n     * Estimate task time using the iteration history approach (our previous implementation)\r\n     */\n    estimateFromIterationHistory(request) {\n      // Use iteration path for historical data analysis if available\n      const iterationPath = this.selectedWorkItem && this.selectedWorkItem.iterationPath || this.manualIterationPath;\n      if (iterationPath) {\n        request.includeHistory = true; // Signal to include work history analysis\n        console.log('Estimating using work items from iteration: ' + iterationPath);\n        // Get work items from this iteration for analysis\n        this.taskService.getTaskHistory(iterationPath).subscribe({\n          next: historyItems => {\n            console.log(`Retrieved ${historyItems.length} work items from iteration ${iterationPath}`);\n            if (historyItems.length === 0) {\n              // If no historical items found, fall back to standard estimation\n              console.log('No historical items found, using standard estimation');\n              this.performStandardEstimation(request);\n              return;\n            }\n            // Since we might not have actual timing data from the API,\n            // we'll analyze the items we have and infer timing data\n            const estimatedHistoricalItems = this.inferTimingData(historyItems, request.type, request.complexity);\n            // Set historical data in the request\n            request.historicalItems = estimatedHistoricalItems;\n            // Check if we have enough data to make a history-based estimate\n            if (estimatedHistoricalItems.length > 0) {\n              console.log('Using inferred historical data for estimation');\n              // Calculate time estimates based on the historical data\n              const similarItems = this.findSimilarItems(estimatedHistoricalItems, request);\n              if (similarItems.length > 0) {\n                // Calculate average times from similar items\n                const avgTotal = similarItems.reduce((sum, item) => sum + (item.actualHours || 0), 0) / similarItems.length;\n                const avgDev = similarItems.reduce((sum, item) => sum + (item.developmentHours || 0), 0) / similarItems.length;\n                const avgTest = similarItems.reduce((sum, item) => sum + (item.testingHours || 0), 0) / similarItems.length;\n                // Create a result based on historical averages\n                this.estimationResult = {\n                  estimatedHours: Number(avgTotal.toFixed(1)),\n                  devTimeHours: Number(avgDev.toFixed(1)),\n                  testTimeHours: Number(avgTest.toFixed(1)),\n                  confidenceScore: this.calculateConfidenceScore(similarItems.length, historyItems.length),\n                  factors: [`Task type: ${request.type}`, `${request.complexity} complexity`, `Based on ${similarItems.length} similar completed items`, `Assignee ${request.assignee || 'unassigned'}`]\n                };\n                this.showResult = true;\n                this.loading = false;\n                this.devTimeEstimate = this.estimationResult.devTimeHours || 0;\n                this.testTimeEstimate = this.estimationResult.testTimeHours || 0;\n                this.totalEstimate = this.estimationResult.estimatedHours;\n              } else {\n                // No similar items found, use standard estimation\n                this.performStandardEstimation(request);\n              }\n            } else {\n              // Not enough historical data, fall back to standard estimation\n              this.performStandardEstimation(request);\n            }\n          },\n          error: err => {\n            console.error('Error loading work item history:', err);\n            console.log('Falling back to standard estimation');\n            this.performStandardEstimation(request);\n          }\n        });\n      } else {\n        // Fallback to standard estimation without work history\n        this.performStandardEstimation(request);\n      }\n    }\n    /**\r\n     * Perform standard estimation without using historical data\r\n     */\n    performStandardEstimation(request) {\n      this.estimationService.estimateTaskTime(request).subscribe({\n        next: result => {\n          this.estimationResult = result;\n          this.showResult = true;\n          this.calculateTimeEstimates(result.estimatedHours);\n          this.loading = false;\n        },\n        error: err => {\n          console.error('Error estimating task time:', err);\n          this.error = 'Failed to estimate task time. Please try again.';\n          this.loading = false;\n        }\n      });\n    }\n    /**\r\n     * Infer timing data for historical work items\r\n     * This adds estimated development and testing hours to work items\r\n     */\n    inferTimingData(items, taskType, complexity) {\n      return items.map(item => {\n        // Clone the item to avoid modifying the original\n        const processedItem = {\n          ...item\n        };\n        // If the item already has timing data, use it\n        if (item.actualHours && item.developmentHours && item.testingHours) {\n          return processedItem;\n        }\n        // Calculate base hours based on type and complexity\n        const baseHours = this.getBaseHoursByType(item.type || taskType);\n        const multiplier = this.getComplexityMultiplier(complexity);\n        // Estimate total hours\n        const estimatedTotal = baseHours * multiplier;\n        // Estimate dev/test split\n        const devRatio = complexity === 'High' ? 0.7 : complexity === 'Low' ? 0.6 : 0.65;\n        const devHours = estimatedTotal * devRatio;\n        const testHours = estimatedTotal - devHours;\n        // Add the estimated hours to the item\n        processedItem.actualHours = Number(estimatedTotal.toFixed(1));\n        processedItem.developmentHours = Number(devHours.toFixed(1));\n        processedItem.testingHours = Number(testHours.toFixed(1));\n        return processedItem;\n      });\n    }\n    /**\r\n     * Find similar work items based on type and complexity\r\n     */\n    findSimilarItems(items, request) {\n      // Filter items by type and complexity\n      return items.filter(item => {\n        // Match by type\n        const typeMatch = item.type?.toLowerCase() === request.type.toLowerCase();\n        // Match by complexity (if available)\n        const itemComplexity = this.determineComplexity(item);\n        const complexityMatch = itemComplexity.toLowerCase() === request.complexity.toLowerCase();\n        // We need both to match for a \"similar\" item\n        return typeMatch && complexityMatch;\n      });\n    }\n    /**\r\n     * Calculate confidence score based on sample size\r\n     */\n    calculateConfidenceScore(similarCount, totalCount) {\n      // Base confidence on the number of similar items vs total items\n      if (similarCount === 0) return 0.5;\n      // More similar items = higher confidence\n      const baseConfidence = Math.min(0.75, 0.5 + similarCount / 20);\n      // Add a bonus if we have a good percentage of the total\n      const percentageBonus = similarCount / totalCount > 0.3 ? 0.1 : 0;\n      // Cap at 0.95 for historical data\n      return Math.min(0.95, baseConfidence + percentageBonus);\n    }\n    // Calculate development and testing time estimates\n    calculateTimeEstimates(totalHours) {\n      // Typical distribution: dev 60-70%, testing 30-40%\n      const complexity = this.estimationForm.value.complexity;\n      let devRatio = 0.65; // Default dev ratio\n      // Adjust ratio based on complexity\n      if (complexity === 'High') {\n        devRatio = 0.7; // Higher complexity = more dev time\n      } else if (complexity === 'Low') {\n        devRatio = 0.6; // Lower complexity = less dev time\n      }\n\n      this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\n      this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\n      this.totalEstimate = totalHours;\n    }\n    // Format confidence score as percentage\n    formatConfidence(score) {\n      return `${Math.round(score * 100)}%`;\n    }\n    // Get appropriate class for confidence level\n    getConfidenceClass(score) {\n      if (score >= 0.8) {\n        return 'bg-success';\n      } else if (score >= 0.6) {\n        return 'bg-primary';\n      } else if (score >= 0.4) {\n        return 'bg-warning';\n      } else {\n        return 'bg-danger';\n      }\n    }\n    // Get assignee name for display\n    getAssigneeName(item) {\n      let displayName = '';\n      // Try to get from System.AssignedTo first\n      if (item.fields && item.fields['System.AssignedTo']) {\n        const assignedTo = item.fields['System.AssignedTo'];\n        if (typeof assignedTo === 'string') {\n          displayName = assignedTo;\n        } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n          if (assignedTo.displayName) {\n            displayName = assignedTo.displayName;\n          }\n        }\n      }\n      // Fallback to assignedTo property\n      if (!displayName && item.assignedTo) {\n        if (typeof item.assignedTo === 'string') {\n          displayName = item.assignedTo;\n        } else if (typeof item.assignedTo === 'object' && item.assignedTo !== null) {\n          const assigneeObj = item.assignedTo;\n          displayName = assigneeObj.displayName || assigneeObj.name || '';\n        }\n      }\n      // Find matching team member for consistent display\n      if (displayName) {\n        return this.findMatchingTeamMember(displayName);\n      }\n      return '';\n    }\n    // Get the clean state display for a work item\n    getStateDisplay(item) {\n      // First check fields for System.State\n      if (item.fields && item.fields['System.State']) {\n        const state = item.fields['System.State'];\n        if (typeof state === 'string') {\n          // Remove \"Unknown\" prefix if present\n          return state.replace(/unknown/i, '').trim();\n        }\n      }\n      // Check for status field in the item or fields\n      if (item.status) {\n        return typeof item.status === 'string' ? item.status : '';\n      }\n      if (item.fields && item.fields['status']) {\n        return typeof item.fields['status'] === 'string' ? item.fields['status'] : '';\n      }\n      // Fallback to item.state if available\n      if (item.state) {\n        return item.state.replace(/unknown/i, '').trim();\n      }\n      return 'N/A'; // Default if no state available\n    }\n    /**\r\n     * Get base hours for estimation by work item type\r\n     */\n    getBaseHoursByType(type) {\n      const baseHoursByType = {\n        'Bug': 4,\n        'Task': 3,\n        'Feature': 8,\n        'User Story': 5,\n        'Change Request': 4,\n        'Requirement': 6,\n        'Documentation': 2,\n        'Epic': 20\n      };\n      return type ? baseHoursByType[type] || 4 : 4; // Default if type not found\n    }\n    /**\r\n     * Get multiplier based on complexity\r\n     */\n    getComplexityMultiplier(complexity) {\n      const multipliers = {\n        'Low': 0.6,\n        'Medium': 1.0,\n        'High': 1.5\n      };\n      return multipliers[complexity] || 1.0;\n    }\n    /**\r\n     * Calculate time estimates based on the work item's actual state transition history\r\n     * This analyzes the time spent in each state to estimate development and testing times\r\n     */\n    calculateEstimatesFromHistory(workItem) {\n      console.log('Calculating estimates from work item history');\n      // Default result\n      const result = {\n        total: 0,\n        development: 0,\n        testing: 0\n      };\n      // Step 1: Extract state transitions from activity history\n      const stateTransitions = workItem.activity?.filter(a => a.field === 'State' || a.field === 'System.State') || [];\n      console.log(`Found ${stateTransitions.length} state transitions`);\n      if (stateTransitions.length === 0) {\n        // No state transitions found, estimate based on work item type and complexity\n        const complexity = this.determineComplexity(workItem);\n        const baseHours = this.getBaseHoursByType(this.getWorkItemType(workItem));\n        const multiplier = this.getComplexityMultiplier(complexity);\n        result.total = Number((baseHours * multiplier).toFixed(1));\n        result.development = Number((result.total * 0.65).toFixed(1));\n        result.testing = Number((result.total * 0.35).toFixed(1));\n        return result;\n      }\n      // Sort transitions by date\n      stateTransitions.sort((a, b) => {\n        const dateA = new Date(a.changedDate).getTime();\n        const dateB = new Date(b.changedDate).getTime();\n        return dateA - dateB;\n      });\n      // Step 2: Create a timeline of state changes with durations\n      const timeline = [];\n      // Add each transition\n      stateTransitions.forEach((transition, index) => {\n        const currentState = transition.newValue || '';\n        const startDate = new Date(transition.changedDate);\n        // Add to timeline\n        timeline.push({\n          state: currentState,\n          startDate: startDate\n        });\n        // Set end date for previous state\n        if (index > 0) {\n          timeline[index - 1].endDate = startDate;\n          // Calculate duration in hours for previous state\n          const prevStartDate = timeline[index - 1].startDate;\n          const durationMs = startDate.getTime() - prevStartDate.getTime();\n          const durationHours = durationMs / (1000 * 60 * 60);\n          // Account for work hours (8 hours per day, 5 days per week)\n          // This is a simplification - in reality, you'd want to account for weekends and working hours\n          let adjustedHours = durationHours;\n          // If duration is more than 16 hours, assume some of it is non-working time\n          if (durationHours > 16) {\n            // Roughly estimate working hours\n            const days = Math.floor(durationHours / 24);\n            const workDays = Math.max(Math.ceil(days * 5 / 7), 1); // Estimate work days (5/7 of total days)\n            adjustedHours = workDays * 8 + durationHours % 24; // 8 hours per work day + remainder\n            // Cap at a reasonable value to prevent outliers\n            adjustedHours = Math.min(adjustedHours, durationHours * 0.6);\n          }\n          timeline[index - 1].durationHours = Number(adjustedHours.toFixed(1));\n        }\n      });\n      // Add current state if item is not completed\n      if (workItem.state !== 'Closed' && workItem.state !== 'Done' && workItem.state !== 'Completed') {\n        // Calculate duration to now for the last state\n        const lastIndex = timeline.length - 1;\n        if (lastIndex >= 0) {\n          const now = new Date();\n          timeline[lastIndex].endDate = now;\n          const durationMs = now.getTime() - timeline[lastIndex].startDate.getTime();\n          const durationHours = durationMs / (1000 * 60 * 60);\n          // Apply same adjustment for work hours\n          let adjustedHours = durationHours;\n          if (durationHours > 16) {\n            const days = Math.floor(durationHours / 24);\n            const workDays = Math.max(Math.ceil(days * 5 / 7), 1);\n            adjustedHours = workDays * 8 + durationHours % 24;\n            adjustedHours = Math.min(adjustedHours, durationHours * 0.6);\n          }\n          timeline[lastIndex].durationHours = Number(adjustedHours.toFixed(1));\n        }\n      }\n      // Step 3: Categorize times as development or testing\n      timeline.forEach(entry => {\n        if (!entry.durationHours) return;\n        const state = entry.state.toLowerCase();\n        // Categorize states\n        if (state.includes('new') || state.includes('proposed') || state.includes('backlog')) {\n          // Planning time - not counted in the estimate\n        } else if (state.includes('active') || state.includes('progress') || state.includes('development')) {\n          // Development time\n          result.development += entry.durationHours;\n        } else if (state.includes('review') || state.includes('test') || state.includes('qa')) {\n          // Testing/Review time\n          result.testing += entry.durationHours;\n        } else if (state.includes('resolved') || state.includes('done') || state.includes('closed')) {\n          // Completion time - typically minimal, add to testing\n          result.testing += entry.durationHours * 0.5;\n        } else {\n          // Unknown state, distribute proportionally\n          result.development += entry.durationHours * 0.6;\n          result.testing += entry.durationHours * 0.4;\n        }\n      });\n      // Step 4: Calculate total time\n      result.total = Number((result.development + result.testing).toFixed(1));\n      // Ensure we have a minimum reasonable value\n      if (result.total < 0.5) {\n        // If calculated time is too small, use type/complexity approach as fallback\n        const complexity = this.determineComplexity(workItem);\n        const baseHours = this.getBaseHoursByType(this.getWorkItemType(workItem));\n        const multiplier = this.getComplexityMultiplier(complexity);\n        result.total = Number((baseHours * multiplier).toFixed(1));\n        result.development = Number((result.total * 0.65).toFixed(1));\n        result.testing = Number((result.total * 0.35).toFixed(1));\n      }\n      // Round to 1 decimal place\n      result.development = Number(result.development.toFixed(1));\n      result.testing = Number(result.testing.toFixed(1));\n      console.log(`Estimated from history: Total=${result.total}, Dev=${result.development}, Test=${result.testing}`);\n      return result;\n    }\n    static {\n      this.ɵfac = function TaskEstimationComponent_Factory(t) {\n        return new (t || TaskEstimationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EstimationService), i0.ɵɵdirectiveInject(i3.TaskService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TaskEstimationComponent,\n        selectors: [[\"app-task-estimation\"]],\n        decls: 84,\n        vars: 26,\n        consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"mb-0\"], [1, \"text-muted\", \"mt-2\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"mb-0\"], [1, \"card-body\"], [1, \"row\", \"g-3\", \"align-items-center\"], [1, \"col-md-6\"], [1, \"input-group\"], [\"for\", \"manualIterationPath\", 1, \"input-group-text\"], [\"type\", \"text\", \"id\", \"manualIterationPath\", \"placeholder\", \"Enter iteration path (e.g. Techoil\\\\2.3.23)\", \"aria-label\", \"Manual Iteration Path\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-search\"], [\"class\", \"text-danger mt-2\", 4, \"ngIf\"], [1, \"row\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [\"class\", \"badge bg-primary\", 4, \"ngIf\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"taskTitle\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"taskTitle\", \"formControlName\", \"title\", \"placeholder\", \"Enter or select task title\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"btn btn-outline-secondary\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"text-danger mt-1\", 4, \"ngIf\"], [\"class\", \"text-success mt-1\", 4, \"ngIf\"], [\"for\", \"taskType\", 1, \"form-label\"], [\"id\", \"taskType\", \"formControlName\", \"type\", 1, \"form-select\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"assignee\", 1, \"form-label\"], [\"id\", \"assignee\", \"formControlName\", \"assignee\", 1, \"form-select\"], [\"value\", \"\"], [1, \"form-label\"], [1, \"d-flex\"], [\"class\", \"form-check me-3\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-muted mt-1\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-between\", \"mt-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-arrow-counterclockwise\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"row\", \"mt-4\"], [1, \"col-md-12\"], [\"class\", \"alert alert-danger mb-4\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"class\", \"card bg-light\", 4, \"ngIf\"], [1, \"text-danger\", \"mt-2\"], [1, \"badge\", \"bg-primary\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"mt-2\", \"text-muted\"], [1, \"text-muted\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\", \"table-striped\"], [\"scope\", \"col\"], [\"style\", \"cursor: pointer;\", 3, \"table-primary\", \"click\", 4, \"ngFor\", \"ngForOf\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"fw-bold\"], [1, \"badge\", \"rounded-pill\", 3, \"ngClass\"], [1, \"bi\", \"bi-person\", \"me-1\"], [1, \"badge\", 3, \"ngClass\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"bi\", \"bi-x-lg\"], [1, \"text-danger\", \"mt-1\"], [1, \"text-success\", \"mt-1\"], [3, \"value\"], [1, \"form-check\", \"me-3\"], [\"type\", \"radio\", \"formControlName\", \"complexity\", 1, \"form-check-input\", 3, \"id\", \"value\"], [1, \"form-check-label\", 3, \"for\"], [1, \"text-muted\", \"mt-1\"], [1, \"bi\", \"bi-info-circle\"], [1, \"bi\", \"bi-stopwatch\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\", \"mb-4\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"mb-4\", \"text-center\"], [1, \"display-4\", \"mb-0\"], [1, \"row\", \"text-center\", \"mb-4\"], [1, \"col-6\"], [1, \"p-3\", \"bg-light\", \"rounded\"], [1, \"text-muted\", \"mb-0\"], [1, \"mb-4\"], [1, \"progress\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", 3, \"ngClass\"], [1, \"list-group\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-footer\", \"text-muted\", \"small\"], [1, \"list-group-item\"], [1, \"card\", \"bg-light\"], [1, \"card-body\", \"text-center\", \"p-5\"], [1, \"bi\", \"bi-graph-up\", \"display-1\", \"text-muted\"], [1, \"mt-3\"]],\n        template: function TaskEstimationComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\", 3);\n            i0.ɵɵtext(4, \"ML-Based Task Estimation\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"p\", 4);\n            i0.ɵɵtext(6, \"Estimate task duration using machine learning predictions based on historical data\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 2)(9, \"div\", 5)(10, \"div\", 6)(11, \"h4\", 7);\n            i0.ɵɵtext(12, \"Enter Iteration Path\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(13, \"div\", 8)(14, \"div\", 9)(15, \"div\", 10)(16, \"div\", 11)(17, \"label\", 12);\n            i0.ɵɵtext(18, \"Iteration Path\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"input\", 13);\n            i0.ɵɵlistener(\"ngModelChange\", function TaskEstimationComponent_Template_input_ngModelChange_19_listener($event) {\n              return ctx.manualIterationPath = $event;\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(20, \"button\", 14);\n            i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_20_listener() {\n              return ctx.loadWorkItemsByIteration();\n            });\n            i0.ɵɵelement(21, \"i\", 15);\n            i0.ɵɵtext(22, \" Load Items \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(23, TaskEstimationComponent_div_23_Template, 3, 1, \"div\", 16);\n            i0.ɵɵelementEnd()()()()()();\n            i0.ɵɵelementStart(24, \"div\", 17)(25, \"div\", 10)(26, \"div\", 5)(27, \"div\", 18)(28, \"h4\", 7);\n            i0.ɵɵtext(29, \"Work Items\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(30, TaskEstimationComponent_span_30_Template, 2, 1, \"span\", 19);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(31, \"div\", 8);\n            i0.ɵɵtemplate(32, TaskEstimationComponent_div_32_Template, 6, 0, \"div\", 20);\n            i0.ɵɵtemplate(33, TaskEstimationComponent_div_33_Template, 3, 0, \"div\", 20);\n            i0.ɵɵtemplate(34, TaskEstimationComponent_div_34_Template, 16, 1, \"div\", 21);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(35, \"div\", 10)(36, \"div\", 5)(37, \"div\", 6)(38, \"h4\", 7);\n            i0.ɵɵtemplate(39, TaskEstimationComponent_span_39_Template, 2, 1, \"span\", 22);\n            i0.ɵɵtemplate(40, TaskEstimationComponent_span_40_Template, 2, 0, \"span\", 22);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(41, \"div\", 8)(42, \"form\", 23);\n            i0.ɵɵlistener(\"ngSubmit\", function TaskEstimationComponent_Template_form_ngSubmit_42_listener() {\n              return ctx.estimateTaskTime();\n            });\n            i0.ɵɵelementStart(43, \"div\", 24)(44, \"label\", 25);\n            i0.ɵɵtext(45, \"Task Title\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(46, \"div\", 11);\n            i0.ɵɵelement(47, \"input\", 26);\n            i0.ɵɵtemplate(48, TaskEstimationComponent_button_48_Template, 2, 0, \"button\", 27);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(49, TaskEstimationComponent_div_49_Template, 3, 2, \"div\", 28);\n            i0.ɵɵtemplate(50, TaskEstimationComponent_div_50_Template, 3, 1, \"div\", 29);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(51, \"div\", 17)(52, \"div\", 10)(53, \"div\", 24)(54, \"label\", 30);\n            i0.ɵɵtext(55, \"Task Type\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(56, \"select\", 31);\n            i0.ɵɵtemplate(57, TaskEstimationComponent_option_57_Template, 2, 2, \"option\", 32);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(58, \"div\", 10)(59, \"div\", 24)(60, \"label\", 33);\n            i0.ɵɵtext(61, \"Assignee\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(62, \"select\", 34)(63, \"option\", 35);\n            i0.ɵɵtext(64, \"-- Unassigned --\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(65, TaskEstimationComponent_option_65_Template, 2, 2, \"option\", 32);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(66, \"div\", 24)(67, \"label\", 36);\n            i0.ɵɵtext(68, \"Complexity\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(69, \"div\", 37);\n            i0.ɵɵtemplate(70, TaskEstimationComponent_div_70_Template, 4, 4, \"div\", 38);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(71, TaskEstimationComponent_div_71_Template, 4, 0, \"div\", 39);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(72, \"div\", 40)(73, \"button\", 41);\n            i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_73_listener() {\n              return ctx.resetForm();\n            });\n            i0.ɵɵelement(74, \"i\", 42);\n            i0.ɵɵtext(75, \" Reset \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(76, \"button\", 43);\n            i0.ɵɵtemplate(77, TaskEstimationComponent_span_77_Template, 3, 0, \"span\", 22);\n            i0.ɵɵtemplate(78, TaskEstimationComponent_span_78_Template, 3, 0, \"span\", 22);\n            i0.ɵɵelementEnd()()()()()()();\n            i0.ɵɵelementStart(79, \"div\", 44)(80, \"div\", 45);\n            i0.ɵɵtemplate(81, TaskEstimationComponent_div_81_Template, 2, 1, \"div\", 46);\n            i0.ɵɵtemplate(82, TaskEstimationComponent_div_82_Template, 39, 9, \"div\", 47);\n            i0.ɵɵtemplate(83, TaskEstimationComponent_div_83_Template, 7, 0, \"div\", 48);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            let tmp_11_0;\n            let tmp_12_0;\n            i0.ɵɵadvance(19);\n            i0.ɵɵproperty(\"ngModel\", ctx.manualIterationPath);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"disabled\", !ctx.manualIterationPath);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.iterationError);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngIf\", ctx.workItems.length > 0);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.loadingIterationItems);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length === 0 && !ctx.iterationError);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length > 0);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.selectedWorkItem);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"formGroup\", ctx.estimationForm);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(24, _c2, ctx.selectedWorkItem !== null));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", (tmp_11_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_11_0.value);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ((tmp_12_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_12_0.invalid) && ((tmp_12_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_12_0.touched));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngForOf\", ctx.taskTypes);\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngForOf\", ctx.teamMembers);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngForOf\", ctx.complexityLevels);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"disabled\", ctx.loading);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.error);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.showResult && ctx.estimationResult);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.showResult && !ctx.error);\n          }\n        },\n        dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.NgModel, i1.FormGroupDirective, i1.FormControlName],\n        styles: [\"h2[_ngcontent-%COMP%]{margin-bottom:1.5rem;color:#2c3e50}[_nghost-%COMP%]{display:block;background-color:#e8eaf6}.container-fluid[_ngcontent-%COMP%]{background-color:#e8eaf6;padding-top:1.5rem;padding-bottom:1.5rem}.container[_ngcontent-%COMP%]{padding-top:1.5rem}.display-4[_ngcontent-%COMP%]{font-weight:600}.card[_ngcontent-%COMP%]{box-shadow:0 4px 6px #0000001a;transition:all .3s ease;background-color:#f5f7ff}.card[_ngcontent-%COMP%]:hover{box-shadow:0 6px 10px #00000026}.card[_ngcontent-%COMP%]   .card-header[_ngcontent-%COMP%]{background-color:#c5cae9;color:#3949ab;font-weight:600}.card[_ngcontent-%COMP%]   .card-body[_ngcontent-%COMP%]{background-color:#f5f7ff}.progress[_ngcontent-%COMP%]{height:25px;font-weight:600}.list-group-item[_ngcontent-%COMP%]:first-child{font-weight:500}.bg-light[_ngcontent-%COMP%]{opacity:.8}.bg-light[_ngcontent-%COMP%]   i.bi-graph-up[_ngcontent-%COMP%]{opacity:.5}.form-check[_ngcontent-%COMP%], .form-check[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%], .form-check[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%]{cursor:pointer}@keyframes _ngcontent-%COMP%_fadeIn{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.alert[_ngcontent-%COMP%], .card[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_fadeIn .3s ease-out}.table-responsive[_ngcontent-%COMP%]{max-height:450px;overflow-y:auto;background-color:#eef2ff;border-radius:.375rem;box-shadow:0 2px 5px #0000000d}.table[_ngcontent-%COMP%]{font-size:.9rem;background-color:#eef2ff}.table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]{position:sticky;top:0;background-color:#c5cae9;z-index:1}.table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{font-weight:600;color:#3949ab;text-transform:uppercase;font-size:.75rem;letter-spacing:.5px;padding-top:12px;padding-bottom:12px;border-top:none;border-bottom:2px solid #9fa8da}.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]{transition:background-color .2s;background-color:#e8eaf6}.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(even){background-color:#d1d9ff}.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover{background-color:#c5cae9}.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr.table-primary[_ngcontent-%COMP%]{background-color:#bbdefb}.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr.table-primary[_ngcontent-%COMP%]:hover{background-color:#90caf9}.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle;padding:.75rem;border-color:#c5cae9}.table[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%]{font-size:.75rem}.form-select.ng-touched.ng-valid[_ngcontent-%COMP%], .form-control.ng-touched.ng-valid[_ngcontent-%COMP%]{border-color:#28a745}.form-check-input[_ngcontent-%COMP%]:checked{background-color:#0d6efd;border-color:#0d6efd}.badge[_ngcontent-%COMP%]{padding:.5em .75em;font-size:.8rem;font-weight:600;letter-spacing:.2px;text-transform:capitalize;box-shadow:0 1px 2px #0000001a}.badge.badge-code-review[_ngcontent-%COMP%]{background-color:#00c3f7!important;color:#fff;font-weight:600;position:relative}.badge.badge-code-review[_ngcontent-%COMP%]:after{content:\\\"\\\";position:absolute;inset:0;background:linear-gradient(135deg,rgba(255,255,255,.1) 0%,rgba(255,255,255,0) 100%);border-radius:inherit}.badge.bg-info[_ngcontent-%COMP%]{background-color:#17a2b8!important;color:#fff}.badge.bg-primary[_ngcontent-%COMP%]{background-color:#6610f2!important;color:#fff}.badge.bg-success[_ngcontent-%COMP%]{background-color:#28a745!important;color:#fff}.badge.bg-warning[_ngcontent-%COMP%]{background-color:#ffc107!important;color:#212529;font-weight:700}.badge.bg-danger[_ngcontent-%COMP%]{background-color:#dc3545!important;color:#fff}.badge.bg-dark[_ngcontent-%COMP%]{background-color:#343a40!important;color:#fff}.badge.badge-dev-new[_ngcontent-%COMP%]{background-color:#2c3e50!important;color:#fff;font-weight:600}.badge.bg-light[_ngcontent-%COMP%]{background-color:#9575cd!important;border:1px solid #7e57c2!important;color:#fff!important}.badge.bg-light.text-dark[_ngcontent-%COMP%]{color:#fff!important;font-weight:700}.badge.bg-secondary[_ngcontent-%COMP%]{background-color:#5c6bc0!important;color:#fff}.badge[class*=bg-][_ngcontent-%COMP%]{border-radius:12px;transition:all .2s ease}.badge[class*=bg-][_ngcontent-%COMP%]:hover{transform:translateY(-1px);box-shadow:0 2px 4px #00000026}.badge-ready[_ngcontent-%COMP%]{background-color:#7986cb!important;color:#fff!important}.badge-assigned[_ngcontent-%COMP%]{background-color:#9fa8da!important;color:#3949ab!important}.badge-na[_ngcontent-%COMP%]{background-color:#5c6bc0!important;color:#fff!important}\"]\n      });\n    }\n  }\n  return TaskEstimationComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}