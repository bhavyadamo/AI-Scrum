{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/task.service\";\nimport * as i2 from \"../../services/team.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction TaskDistributionComponent_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"option\", 70);\n  }\n  if (rf & 2) {\n    const path_r34 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", path_r34);\n  }\n}\nfunction TaskDistributionComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Search\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 71);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Auto-Assign Tasks\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 71);\n    i0.ɵɵtext(2, \" Loading Preview... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 71);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.error.autoAssign);\n  }\n}\nfunction TaskDistributionComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 73);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r7.error.iterationPaths);\n  }\n}\nfunction TaskDistributionComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.error.tasks);\n  }\n}\nfunction TaskDistributionComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r9.error.members);\n  }\n}\nfunction TaskDistributionComponent_div_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 74)(1, \"div\", 75)(2, \"span\", 76);\n    i0.ɵɵtext(3, \"Loading tasks...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction TaskDistributionComponent_div_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r11.error.tasks);\n  }\n}\nfunction TaskDistributionComponent_div_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 74)(1, \"p\", 12);\n    i0.ɵɵtext(2, \"No tasks found for the current iteration path.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_57_tr_17_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 89);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r36 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r36.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_57_tr_17_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 90);\n    i0.ɵɵtext(1, \"Unassigned\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_57_tr_17_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 91)(1, \"small\", 92);\n    i0.ɵɵelement(2, \"i\", 93);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r36 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Suggest: \", task_r36.autoAssignSuggestion, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_57_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r43 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\")(2, \"a\", 80);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_57_tr_17_Template_a_click_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r43);\n      const task_r36 = restoredCtx.$implicit;\n      const ctx_r42 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r42.openTaskInAzureDevOps(task_r36.id, $event));\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\")(7, \"span\", 81);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"td\")(10, \"div\", 82);\n    i0.ɵɵtemplate(11, TaskDistributionComponent_div_57_tr_17_span_11_Template, 2, 1, \"span\", 83);\n    i0.ɵɵtemplate(12, TaskDistributionComponent_div_57_tr_17_span_12_Template, 2, 0, \"span\", 84);\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_57_tr_17_div_13_Template, 4, 1, \"div\", 85);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"td\")(15, \"span\", 86);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"td\")(18, \"button\", 87);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_57_tr_17_Template_button_click_18_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r43);\n      const task_r36 = restoredCtx.$implicit;\n      const ctx_r44 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r44.openAssignModal(task_r36.id));\n    });\n    i0.ɵɵelement(19, \"i\", 88);\n    i0.ɵɵtext(20, \" Assign \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const task_r36 = ctx.$implicit;\n    const ctx_r35 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r36.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r36.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r35.getPriorityClass(task_r36.priority));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r36.priority, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", task_r36.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r36.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r36.autoAssignSuggestion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r35.getStatusClass(task_r36.status));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r36.status, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 77)(1, \"table\", 78)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Priority\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Assigned To\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\");\n    i0.ɵɵtext(13, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"th\");\n    i0.ɵɵtext(15, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"tbody\");\n    i0.ɵɵtemplate(17, TaskDistributionComponent_div_57_tr_17_Template, 21, 9, \"tr\", 79);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(17);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r13.filteredTasks);\n  }\n}\nfunction TaskDistributionComponent_div_69_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 74)(1, \"div\", 75)(2, \"span\", 76);\n    i0.ɵɵtext(3, \"Loading team members...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction TaskDistributionComponent_div_70_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r15.error.members);\n  }\n}\nfunction TaskDistributionComponent_div_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 74)(1, \"p\", 12);\n    i0.ɵɵtext(2, \"No team members found for the current iteration path.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_72_div_1_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 104);\n    i0.ɵɵelement(1, \"i\", 105);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r46 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", member_r46.email, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"bg-light\": a0\n  };\n};\nfunction TaskDistributionComponent_div_72_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r50 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 95)(1, \"div\", 96)(2, \"div\", 36)(3, \"h5\", 97)(4, \"a\", 98);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_72_div_1_Template_a_click_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r50);\n      const member_r46 = restoredCtx.$implicit;\n      const ctx_r49 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r49.showMemberTasksModal($event, member_r46.displayName));\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 99)(7, \"span\", 100);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_72_div_1_Template_span_click_7_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r50);\n      const member_r46 = restoredCtx.$implicit;\n      const ctx_r51 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r51.showMemberTasks($event, member_r46.displayName));\n    });\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\", 101);\n    i0.ɵɵelement(10, \"div\", 102);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, TaskDistributionComponent_div_72_div_1_div_11_Template, 3, 1, \"div\", 103);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const member_r46 = ctx.$implicit;\n    const ctx_r45 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx_r45.getTaskCount(member_r46.displayName) === 0));\n    i0.ɵɵadvance(3);\n    i0.ɵɵattribute(\"aria-label\", \"View \" + member_r46.displayName + \"'s tasks\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", member_r46.displayName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r45.getTeamMemberWorkloadClass(ctx_r45.getTaskCount(member_r46.displayName)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r45.getTaskCount(member_r46.displayName), \" Tasks \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r45.getWorkloadPercentage(ctx_r45.getTaskCount(member_r46.displayName)), \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r45.getProgressBarClass(ctx_r45.getTaskCount(member_r46.displayName)));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r45.getTaskCount(member_r46.displayName));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", member_r46.email);\n  }\n}\nfunction TaskDistributionComponent_div_72_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtemplate(1, TaskDistributionComponent_div_72_div_1_Template, 12, 12, \"div\", 94);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r17.filteredTeamMembers);\n  }\n}\nfunction TaskDistributionComponent_div_81_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 106);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r18.error.assign);\n  }\n}\nfunction TaskDistributionComponent_div_82_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 107)(2, \"label\", 108);\n    i0.ɵɵtext(3, \"Task ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 109);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 107)(7, \"label\", 108);\n    i0.ɵɵtext(8, \"Task Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 109);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r19.selectedTask);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r19.getSelectedTaskTitle(), \" \");\n  }\n}\nfunction TaskDistributionComponent_div_87_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r54 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 110)(1, \"input\", 111);\n    i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_div_87_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r54);\n      const ctx_r53 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r53.selectedMember = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 112)(3, \"div\", 3)(4, \"span\", 113);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"span\", 81);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const member_r52 = ctx.$implicit;\n    const ctx_r20 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"member-\" + member_r52.id)(\"value\", member_r52.displayName)(\"ngModel\", ctx_r20.selectedMember);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"for\", \"member-\" + member_r52.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(member_r52.displayName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r20.getTeamMemberWorkloadClass(ctx_r20.getTaskCount(member_r52.displayName)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.getTaskCount(member_r52.displayName), \" Tasks \");\n  }\n}\nfunction TaskDistributionComponent_span_92_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Assign\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_93_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 71);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_94_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 114);\n  }\n}\nfunction TaskDistributionComponent_div_104_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 106);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r24.error.preview);\n  }\n}\nfunction TaskDistributionComponent_div_110_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 74)(1, \"div\", 75)(2, \"span\", 76);\n    i0.ɵɵtext(3, \"Loading assignment suggestions...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 115);\n    i0.ɵɵtext(5, \"Analyzing tasks and developer performance...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_111_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 116);\n    i0.ɵɵelement(1, \"i\", 65);\n    i0.ɵɵtext(2, \" No \\\"Dev-New\\\" tasks available for assignment. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r60 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", status_r60.status, \": \", status_r60.count, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_div_7_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r64 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\")(2, \"a\", 80);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_112_div_13_div_7_tr_13_Template_a_click_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r64);\n      const task_r62 = restoredCtx.$implicit;\n      const ctx_r63 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r63.openTaskInAzureDevOps(task_r62.id, $event));\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r62 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r62.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r62.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r62.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r62.assignedTo || \"Unassigned\");\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 77)(1, \"table\", 125)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Assigned To\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"tbody\");\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_112_div_13_div_7_tr_13_Template, 10, 4, \"tr\", 79);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r57 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r57.getDevNewTasks());\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 73);\n    i0.ɵɵtext(1, \" No tasks with 'Dev-New' status found in the data. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 73);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r59 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Found \", ctx_r59.getDevNewTasks().length, \" Dev-New tasks, but all are already assigned. \");\n  }\n}\nfunction TaskDistributionComponent_div_112_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h6\");\n    i0.ɵɵtext(2, \"Status Distribution:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, TaskDistributionComponent_div_112_div_13_li_4_Template, 2, 2, \"li\", 79);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"h6\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, TaskDistributionComponent_div_112_div_13_div_7_Template, 14, 1, \"div\", 38);\n    i0.ɵɵtemplate(8, TaskDistributionComponent_div_112_div_13_div_8_Template, 2, 0, \"div\", 25);\n    i0.ɵɵtemplate(9, TaskDistributionComponent_div_112_div_13_div_9_Template, 2, 1, \"div\", 25);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r55 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r55.getStatusDistribution());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Dev-New Tasks (\", ctx_r55.getDevNewTasks().length, \"):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r55.getDevNewTasks().length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r55.getDevNewTasks().length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r55.getUnassignedDevNewTasks().length === 0 && ctx_r55.getDevNewTasks().length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_112_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 117)(1, \"div\", 118)(2, \"div\", 119)(3, \"h2\", 120)(4, \"button\", 121);\n    i0.ɵɵelement(5, \"i\", 122);\n    i0.ɵɵtext(6, \" Debug Information \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 123)(8, \"div\", 124)(9, \"h6\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"h6\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_112_div_13_Template, 10, 5, \"div\", 19);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r27 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate1(\"Total Tasks: \", ctx_r27.tasks.length, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Total Tasks: \", ctx_r27.filteredTasks.length, \" (filtered from \", ctx_r27.tasks.length, \" total)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r27.filteredTasks.length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r66 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r66.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 138);\n    i0.ɵɵtext(1, \"Unassigned\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_ng_container_16_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 141);\n    i0.ɵɵtext(1, \"Reassignment\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 82)(2, \"span\", 139);\n    i0.ɵɵtext(3, \"AI Pick\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"strong\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, TaskDistributionComponent_div_113_tr_20_ng_container_16_span_6_Template, 2, 0, \"span\", 140);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const task_r66 = i0.ɵɵnextContext().$implicit;\n    const ctx_r69 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r69.extractDeveloperName(ctx_r69.assignPreviewSuggestions[task_r66.id]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r69.extractDeveloperName(ctx_r69.assignPreviewSuggestions[task_r66.id]) !== task_r66.assignedTo && task_r66.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \"No suggestion available\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_span_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 142);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r66 = i0.ɵɵnextContext().$implicit;\n    const ctx_r71 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r71.extractLogicExplanation(ctx_r71.assignPreviewSuggestions[task_r66.id]), \" \");\n  }\n}\nfunction TaskDistributionComponent_div_113_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r77 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\")(2, \"a\", 80);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_113_tr_20_Template_a_click_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r77);\n      const task_r66 = restoredCtx.$implicit;\n      const ctx_r76 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r76.openTaskInAzureDevOps(task_r66.id, $event));\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\")(5, \"span\", 133);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\")(10, \"span\", 134);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"td\");\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_113_tr_20_span_13_Template, 2, 1, \"span\", 135);\n    i0.ɵɵtemplate(14, TaskDistributionComponent_div_113_tr_20_span_14_Template, 2, 0, \"span\", 136);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"td\");\n    i0.ɵɵtemplate(16, TaskDistributionComponent_div_113_tr_20_ng_container_16_Template, 7, 2, \"ng-container\", 19);\n    i0.ɵɵtemplate(17, TaskDistributionComponent_div_113_tr_20_span_17_Template, 2, 0, \"span\", 135);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"td\");\n    i0.ɵɵtemplate(19, TaskDistributionComponent_div_113_tr_20_span_19_Template, 2, 1, \"span\", 137);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r66 = ctx.$implicit;\n    const ctx_r65 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r66.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r66.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r66.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r66.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", task_r66.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r66.assignedTo);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r65.assignPreviewSuggestions[task_r66.id]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r65.assignPreviewSuggestions[task_r66.id]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r65.assignPreviewSuggestions[task_r66.id]);\n  }\n}\nfunction TaskDistributionComponent_div_113_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 77)(2, \"table\", 78)(3, \"thead\")(4, \"tr\")(5, \"th\");\n    i0.ɵɵtext(6, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14, \"Current Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16, \"Suggested Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"th\");\n    i0.ɵɵtext(18, \"Assignment Logic\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"tbody\");\n    i0.ɵɵtemplate(20, TaskDistributionComponent_div_113_tr_20_Template, 20, 9, \"tr\", 79);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(21, \"div\", 126)(22, \"h6\");\n    i0.ɵɵtext(23, \"Assignment Logic Explanation:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"ul\", 127)(25, \"li\", 128);\n    i0.ɵɵelement(26, \"i\", 129);\n    i0.ɵɵelementStart(27, \"small\")(28, \"strong\");\n    i0.ɵɵtext(29, \"Past Expertise\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(30, \" - Completed similar tasks in the past 3 months\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"li\", 128);\n    i0.ɵɵelement(32, \"i\", 130);\n    i0.ɵɵelementStart(33, \"small\")(34, \"strong\");\n    i0.ɵɵtext(35, \"Recent Completion\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(36, \" - Recently completed tasks with no active work\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(37, \"li\", 128);\n    i0.ɵɵelement(38, \"i\", 131);\n    i0.ɵɵelementStart(39, \"small\")(40, \"strong\");\n    i0.ɵɵtext(41, \"Low Workload\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(42, \" - Developer with few active tasks\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(43, \"li\", 128);\n    i0.ɵɵelement(44, \"i\", 132);\n    i0.ɵɵelementStart(45, \"small\")(46, \"strong\");\n    i0.ɵɵtext(47, \"Least Assigned\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(48, \" - Developer with lowest total task count\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r28 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(20);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r28.assignPreviewTasks);\n  }\n}\nfunction TaskDistributionComponent_span_119_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Confirm & Assign\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_120_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 71);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_121_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 114);\n  }\n}\nfunction TaskDistributionComponent_div_122_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 148)(1, \"p\", 149);\n    i0.ɵɵtext(2, \"No tasks found for this team member.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_122_ul_7_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r83 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 152)(1, \"div\", 153)(2, \"div\")(3, \"a\", 80);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_122_ul_7_li_1_Template_a_click_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r83);\n      const task_r81 = restoredCtx.$implicit;\n      const ctx_r82 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r82.openTaskInAzureDevOps(task_r81.id, $event));\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 154);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"span\", 86);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const task_r81 = ctx.$implicit;\n    const ctx_r80 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(task_r81.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r81.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r80.getStatusClass(task_r81.status));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r81.status, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_122_ul_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 150);\n    i0.ɵɵtemplate(1, TaskDistributionComponent_div_122_ul_7_li_1_Template, 9, 4, \"li\", 151);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r79 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r79.selectedMemberTasks);\n  }\n}\nfunction TaskDistributionComponent_div_122_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r85 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 143);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_122_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r85);\n      const ctx_r84 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r84.keepPopupOpen($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 144)(2, \"h5\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 49);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_122_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r85);\n      const ctx_r86 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r86.closePopup());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 145);\n    i0.ɵɵtemplate(6, TaskDistributionComponent_div_122_div_6_Template, 3, 0, \"div\", 146);\n    i0.ɵɵtemplate(7, TaskDistributionComponent_div_122_ul_7_Template, 2, 1, \"ul\", 147);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r32 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"top\", ctx_r32.popupPosition.top, \"px\")(\"left\", ctx_r32.popupPosition.left, \"px\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r32.selectedMemberName, \"'s Tasks\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r32.selectedMemberTasks.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r32.selectedMemberTasks.length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_123_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 168);\n    i0.ɵɵelement(1, \"div\", 169);\n    i0.ɵɵelementStart(2, \"p\", 170);\n    i0.ɵɵtext(3, \"Loading tasks...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_123_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 171);\n    i0.ɵɵelement(1, \"i\", 172);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r88 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r88.error.memberTasks, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_123_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 74);\n    i0.ɵɵelement(1, \"i\", 175);\n    i0.ɵɵelementStart(2, \"p\", 176);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r90 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"No tasks assigned to \", ctx_r90.selectedModalMemberName, \"\");\n  }\n}\nfunction TaskDistributionComponent_div_123_div_11_ul_2_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r95 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 152)(1, \"div\", 178)(2, \"a\", 179);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_123_div_11_ul_2_li_1_Template_a_click_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r95);\n      const task_r93 = restoredCtx.$implicit;\n      const ctx_r94 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r94.openTaskInAzureDevOps(task_r93.id, $event));\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 180);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 181);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r93 = ctx.$implicit;\n    const ctx_r92 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"#\", task_r93.id, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r92.getStatusClass(task_r93.status));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r93.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r93.title);\n  }\n}\nfunction TaskDistributionComponent_div_123_div_11_ul_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 177);\n    i0.ɵɵtemplate(1, TaskDistributionComponent_div_123_div_11_ul_2_li_1_Template, 8, 4, \"li\", 151);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r91 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r91.selectedModalMemberTasks);\n  }\n}\nfunction TaskDistributionComponent_div_123_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 173);\n    i0.ɵɵtemplate(1, TaskDistributionComponent_div_123_div_11_div_1_Template, 4, 1, \"div\", 37);\n    i0.ɵɵtemplate(2, TaskDistributionComponent_div_123_div_11_ul_2_Template, 2, 1, \"ul\", 174);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r89 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r89.selectedModalMemberTasks.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r89.selectedModalMemberTasks.length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_123_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r97 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 155);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_123_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r96 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r96.closeMemberModal());\n    });\n    i0.ɵɵelementStart(1, \"div\", 156);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_123_Template_div_click_1_listener($event) {\n      return $event.stopPropagation();\n    })(\"keydown\", function TaskDistributionComponent_div_123_Template_div_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r99 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r99.handleModalKeydown($event));\n    });\n    i0.ɵɵelementStart(2, \"div\", 157)(3, \"div\", 158)(4, \"h2\", 159);\n    i0.ɵɵelement(5, \"i\", 160);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 161);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_123_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r100 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r100.closeMemberModal());\n    });\n    i0.ɵɵelement(8, \"i\", 162);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(9, TaskDistributionComponent_div_123_div_9_Template, 4, 0, \"div\", 163);\n    i0.ɵɵtemplate(10, TaskDistributionComponent_div_123_div_10_Template, 3, 1, \"div\", 164);\n    i0.ɵɵtemplate(11, TaskDistributionComponent_div_123_div_11_Template, 3, 2, \"div\", 165);\n    i0.ɵɵelementStart(12, \"div\", 166)(13, \"button\", 167);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_123_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r101 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r101.closeMemberModal());\n    });\n    i0.ɵɵtext(14, \" Close \");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r33 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-labelledby\", \"memberModalTitle\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r33.selectedModalMemberName, \"'s Tasks \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r33.loading.memberTasks);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r33.error.memberTasks);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r33.loading.memberTasks && !ctx_r33.error.memberTasks);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"show\": a0\n  };\n};\nexport let TaskDistributionComponent = /*#__PURE__*/(() => {\n  class TaskDistributionComponent {\n    constructor(taskService, teamService) {\n      this.taskService = taskService;\n      this.teamService = teamService;\n      this.tasks = [];\n      this.filteredTasks = [];\n      this.teamMembers = [];\n      this.filteredTeamMembers = []; // New property for filtered team members\n      this.selectedTaskId = null;\n      this.selectedTeamMemberId = '';\n      this.selectedTask = null; // Added for modal display\n      this.selectedMember = ''; // Added for member selection in modal\n      this.currentIterationPath = 'Techoil\\\\2.3.23'; // Default value\n      this.manualIterationPath = ''; // For manual input\n      this.teamName = 'RND'; // Default team name\n      this.iterationPaths = []; // Will be loaded from API\n      this.teamMemberTaskCounts = {}; // Added for task counts\n      this.applyTeamFilter = true; // Whether to apply team name filter\n      // Auto-assign preview properties\n      this.showingPreview = false;\n      this.assignPreviewTasks = [];\n      this.assignPreviewSuggestions = {};\n      // Track the active tab\n      this.activeTab = 'distribution';\n      // Convert simple boolean to object with specific loading states\n      this.loading = {\n        tasks: false,\n        members: false,\n        assign: false,\n        autoAssign: false,\n        iterationPaths: false,\n        taskCounts: false,\n        preview: false,\n        memberTasks: false // Added for loading member tasks in the modal\n      };\n      // Convert simple string to object with specific error states\n      this.error = {\n        tasks: null,\n        members: null,\n        assign: null,\n        autoAssign: null,\n        iterationPaths: null,\n        taskCounts: null,\n        preview: null,\n        memberTasks: null // Added for member tasks errors\n      };\n      // Azure DevOps URL components from environment\n      this.azureDevOpsUrl = environment.azureDevOpsUrl;\n      this.organization = environment.organization;\n      this.project = environment.project;\n      // Task popup properties\n      this.showTaskPopup = false;\n      this.popupPosition = {\n        top: 0,\n        left: 0\n      };\n      this.selectedMemberTasks = [];\n      this.selectedMemberName = '';\n      // Member modal properties\n      this.showMemberModal = false;\n      this.selectedModalMemberName = '';\n      this.selectedModalMemberTasks = [];\n      this.lastFocusedElement = null;\n    }\n    ngOnInit() {\n      this.loadIterationPaths();\n    }\n    /**\r\n     * Handle tab change events\r\n     * @param tabId The ID of the selected tab\r\n     */\n    onTabChange(tabId) {\n      console.log(`Tab changed to: ${tabId}`);\n      this.activeTab = tabId;\n      // Load specific data based on the selected tab\n      if (tabId === 'workload') {\n        // Force refresh team members and workload data\n        this.loadTeamMembers();\n        this.loadTeamMemberTaskCounts();\n        console.log('Refreshing team workload data');\n      } else if (tabId === 'distribution') {\n        // Refresh tasks if needed\n        if (this.filteredTasks.length === 0 && !this.loading.tasks) {\n          this.loadTasks();\n          console.log('Refreshing task distribution data');\n        }\n      }\n    }\n    ngAfterViewInit() {\n      // Initialize Bootstrap tabs\n      this.initializeBootstrapTabs();\n    }\n    /**\r\n     * Initialize Bootstrap tabs programmatically\r\n     */\n    initializeBootstrapTabs() {\n      try {\n        // Check if Bootstrap's Tab class is available globally\n        if (typeof window.bootstrap !== 'undefined' && window.bootstrap.Tab) {\n          // Initialize all tabs\n          const tabElements = document.querySelectorAll('[data-bs-toggle=\"tab\"]');\n          tabElements.forEach(tabEl => {\n            // Create tab instance\n            const tab = new window.bootstrap.Tab(tabEl);\n            // Add event listener for tab shown event\n            tabEl.addEventListener('shown.bs.tab', event => {\n              // Extract tab ID from the target\n              const targetId = event.target.getAttribute('data-bs-target');\n              const tabId = targetId === '#task-distribution' ? 'distribution' : 'workload';\n              console.log(`Tab shown event: ${tabId}`);\n              // Update active tab and ensure data is loaded\n              this.activeTab = tabId;\n              // Ensure tab content is loaded/refreshed\n              if (tabId === 'workload' && this.filteredTeamMembers.length === 0 && !this.loading.members) {\n                this.loadTeamMembers();\n                this.loadTeamMemberTaskCounts();\n              }\n            });\n          });\n          console.log('Bootstrap tabs initialized successfully with event listeners');\n        } else {\n          console.warn('Bootstrap JavaScript not found. Tabs may not function properly.');\n        }\n      } catch (error) {\n        console.error('Error initializing Bootstrap tabs:', error);\n      }\n    }\n    loadIterationPaths() {\n      this.loading.iterationPaths = true;\n      this.error.iterationPaths = null;\n      this.taskService.getIterationPaths().subscribe({\n        next: paths => {\n          this.iterationPaths = paths;\n          this.loading.iterationPaths = false;\n          if (paths.length > 0) {\n            // Use the first path as default if available\n            this.currentIterationPath = paths[0];\n            this.manualIterationPath = paths[0];\n          }\n          // We no longer automatically load data after loading iteration paths\n          // Data will be loaded when the search button is clicked\n        },\n\n        error: err => {\n          console.error('Error loading iteration paths:', err);\n          this.error.iterationPaths = `Failed to load iteration paths: ${err.message}`;\n          this.loading.iterationPaths = false;\n          // Add fallback iteration paths if API call fails\n          this.iterationPaths = ['Techoil\\\\2.3.23', 'Techoil\\\\2.3.24', 'Techoil\\\\2.3.25', 'Techoil\\\\2.3.26'];\n          console.log('Using fallback iteration paths:', this.iterationPaths);\n          // We no longer automatically load data after loading iteration paths\n          // Data will be loaded when the search button is clicked\n        }\n      });\n    }\n    /**\r\n     * Search button handler - loads data based on manual inputs\r\n     */\n    searchClicked() {\n      // Normalize the manual input iteration path\n      const normalizedPath = this.manualIterationPath.replace(/\\\\\\\\/g, '\\\\');\n      // Update the current iteration path with the normalized manual input\n      this.currentIterationPath = normalizedPath;\n      this.manualIterationPath = normalizedPath; // Update the displayed value too\n      // Clear previous errors\n      this.error.tasks = null;\n      this.error.members = null;\n      console.log(`Searching with team filter ${this.applyTeamFilter ? 'enabled' : 'disabled'}`);\n      console.log(`Using normalized iteration path: ${normalizedPath}`);\n      // Load data based on the manual inputs\n      this.loadTasks();\n      this.loadTeamMembers();\n    }\n    loadTasks() {\n      this.loading.tasks = true;\n      this.error.tasks = null;\n      // Normalize the iteration path to handle any double backslashes\n      const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n      console.log(`Loading tasks for iteration path: ${normalizedPath}`);\n      this.taskService.getTasks(normalizedPath).subscribe({\n        next: tasks => {\n          this.tasks = tasks;\n          this.loading.tasks = false;\n          console.log(`Loaded ${tasks.length} tasks for iteration path ${normalizedPath}`);\n          // After loading tasks, update team workload and filter tasks\n          if (this.teamMembers.length > 0) {\n            this.updateTeamWorkload();\n            this.filterTasksByRnDTeamMembers();\n          }\n        },\n        error: err => {\n          console.error(`Error loading tasks for iteration path ${normalizedPath}:`, err);\n          this.error.tasks = `Failed to load tasks: ${err.message}`;\n          this.loading.tasks = false;\n        }\n      });\n    }\n    loadTeamMembers() {\n      this.loading.members = true;\n      this.error.members = null;\n      // Normalize the iteration path to handle any double backslashes\n      const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n      // Use the teamService directly to get team members by team name if filter is applied\n      // Otherwise, just get all team members\n      if (this.applyTeamFilter) {\n        this.teamService.getTeamMembersByTeam(this.teamName, normalizedPath).subscribe({\n          next: teamMembers => {\n            this.teamMembers = teamMembers;\n            console.log(`Loaded ${this.teamName} team members:`, this.teamMembers);\n            this.loading.members = false;\n            // Filter out non-R&D team members\n            this.filterRnDTeamMembers();\n            // Load team member task counts after loading team members\n            this.loadTeamMemberTaskCounts();\n            // If tasks are already loaded, update workload\n            if (this.tasks.length > 0) {\n              this.updateTeamWorkload();\n            } else {\n              // If no tasks are loaded yet, still show the team members\n              console.log('No tasks loaded yet, showing filtered team members');\n            }\n          },\n          error: err => {\n            console.error(`Error loading ${this.teamName} team members:`, err);\n            // Fallback to regular team members if team-specific call fails\n            this.loadAllTeamMembers(normalizedPath);\n          }\n        });\n      } else {\n        // If team filter is not applied, load all team members\n        this.loadAllTeamMembers(normalizedPath);\n      }\n    }\n    /**\r\n     * Helper method to load all team members without team filter\r\n     */\n    loadAllTeamMembers(normalizedPath) {\n      this.taskService.getTeamMembers(normalizedPath).subscribe({\n        next: response => {\n          // Process the response as an array of TeamMember objects\n          if (Array.isArray(response)) {\n            // Handle string array response - convert strings to TeamMember objects\n            if (response.length > 0 && typeof response[0] === 'string') {\n              this.teamMembers = response.map((name, index) => ({\n                id: `member-${index}`,\n                displayName: name,\n                uniqueName: '',\n                currentWorkload: 0,\n                isActive: true,\n                email: '',\n                team: this.applyTeamFilter ? this.teamName : ''\n              }));\n            } else {\n              // It's already an array of TeamMember objects\n              this.teamMembers = response;\n            }\n            // If team filter is applied, still filter out non-R&D team members\n            if (this.applyTeamFilter) {\n              this.filterRnDTeamMembers();\n            } else {\n              // If not applying team filter, all team members are filtered\n              this.filteredTeamMembers = this.teamMembers;\n            }\n            // If tasks are already loaded, update team workload data\n            if (this.tasks.length > 0) {\n              this.updateTeamWorkload();\n            }\n          } else {\n            console.error('Unexpected response format from getTeamMembers:', response);\n            this.error.members = 'Failed to load team members: Invalid response format';\n          }\n          this.loading.members = false;\n        },\n        error: memberErr => {\n          console.error(`Error loading team members for iteration path ${normalizedPath}:`, memberErr);\n          this.error.members = `Failed to load team members: ${memberErr.message}`;\n          this.loading.members = false;\n        }\n      });\n    }\n    /**\r\n     * Filter team members to only include R&D team members\r\n     */\n    filterRnDTeamMembers() {\n      // Convert any string team members to objects first\n      this.teamMembers = this.teamMembers.map((member, index) => {\n        if (typeof member === 'string') {\n          return {\n            id: `member-${index}`,\n            displayName: member,\n            uniqueName: '',\n            currentWorkload: 0,\n            isActive: true,\n            email: '',\n            team: this.applyTeamFilter ? this.teamName : ''\n          };\n        }\n        return member;\n      });\n      // Filter out members that don't have an R&D-related team property\n      this.filteredTeamMembers = this.teamMembers.filter(member => {\n        // Ensure member is an object\n        if (typeof member !== 'object') {\n          console.warn(`Unexpected member type in filterRnDTeamMembers: ${typeof member}`);\n          return false;\n        }\n        // If member has a team property and it contains R&D-related terms\n        if (member.team) {\n          return member.team.toLowerCase().includes('r&d') || member.team.toLowerCase().includes('rnd') || member.team.toLowerCase().includes('research');\n        }\n        // Log members without team info\n        console.log(`Team member without team info: ${member.displayName}`);\n        // If no team property, default to including the member (backend should have already filtered)\n        return true;\n      });\n      // Log the results\n      console.log(`Filtered ${this.teamMembers.length} team members down to ${this.filteredTeamMembers.length} R&D members`);\n    }\n    /**\r\n     * Load task counts for each team member from the API\r\n     */\n    loadTeamMemberTaskCounts() {\n      this.loading.taskCounts = true;\n      this.error.taskCounts = null;\n      // Normalize the iteration path\n      const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n      this.taskService.getTeamMemberTaskCounts(normalizedPath).subscribe({\n        next: counts => {\n          this.teamMemberTaskCounts = counts;\n          this.loading.taskCounts = false;\n          console.log('Loaded team member task counts:', this.teamMemberTaskCounts);\n          // Update the team members with their task counts\n          this.updateTeamWorkload();\n        },\n        error: err => {\n          console.error('Error loading team member task counts:', err);\n          this.error.taskCounts = `Failed to load task counts: ${err.message}`;\n          this.loading.taskCounts = false;\n          // Fall back to counting tasks manually\n          this.updateTeamWorkload();\n        }\n      });\n    }\n    /**\r\n     * Calculate and update team members' workload based on task assignments\r\n     */\n    updateTeamWorkload() {\n      console.log('Updating team workload');\n      // Reset all workloads to 0 for all team members\n      this.teamMembers.forEach(member => {\n        // Ensure member is a TeamMember object and not a string\n        if (typeof member === 'string') {\n          console.warn(`Found string member instead of object: ${member}`);\n          // Convert string to TeamMember object if needed\n          const index = this.teamMembers.indexOf(member);\n          if (index >= 0) {\n            this.teamMembers[index] = {\n              id: `member-${index}`,\n              displayName: member,\n              uniqueName: '',\n              currentWorkload: 0,\n              isActive: true,\n              email: '',\n              team: this.applyTeamFilter ? this.teamName : ''\n            };\n          }\n        } else {\n          // Reset workload for object\n          member.currentWorkload = 0;\n        }\n      });\n      // If we have task counts from the API, use those\n      if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n        this.teamMembers.forEach(member => {\n          // Skip if member is not an object\n          if (typeof member === 'string') return;\n          // Try to find this member in the task counts\n          const counts = Object.entries(this.teamMemberTaskCounts).find(([name, _]) => name.toLowerCase() === member.displayName.toLowerCase());\n          if (counts) {\n            member.currentWorkload = counts[1]; // Set the count from the API\n          }\n        });\n      } else {\n        // Fall back to counting from tasks array\n        this.tasks.forEach(task => {\n          if (task.assignedTo) {\n            // Normalize the assignedTo value\n            const normalizedAssignedTo = task.assignedTo.trim().toLowerCase();\n            // Find matching team member\n            const matchedMember = this.teamMembers.find(member => typeof member === 'object' && member.displayName.toLowerCase() === normalizedAssignedTo);\n            if (matchedMember) {\n              matchedMember.currentWorkload++;\n            }\n          }\n        });\n      }\n      // Only filter for R&D team members if team filter is applied\n      if (this.applyTeamFilter) {\n        // Re-apply R&D filter to ensure we only show R&D team members\n        this.filterRnDTeamMembers();\n      } else {\n        // If filter not applied, use all team members\n        this.filteredTeamMembers = this.teamMembers;\n      }\n      // Also filter tasks to match team members or show all if filter not applied\n      this.filterTasksByRnDTeamMembers();\n      console.log('Updated team workload for filtered members:', this.filteredTeamMembers);\n    }\n    /**\r\n     * Check if a team member is part of the current iteration team\r\n     * This is a placeholder - you may need to implement actual logic based on your data model\r\n     */\n    isPartOfCurrentIterationTeam(member) {\n      // By default, include all team members\n      // You might want to enhance this with actual iteration team membership logic\n      return true;\n    }\n    assignTask() {\n      if (!this.selectedTask) {\n        this.error.assign = 'Error: No task selected for assignment';\n        return;\n      }\n      if (!this.selectedMember) {\n        this.error.assign = 'Please select a team member for assignment';\n        return;\n      }\n      this.loading.assign = true;\n      this.error.assign = null;\n      // Use the selected member name directly for the API call\n      console.log(`Assigning task ${this.selectedTask} to member ${this.selectedMember}`);\n      this.taskService.assignTask(this.selectedTask, this.selectedMember).subscribe({\n        next: response => {\n          console.log('Task assignment successful:', response);\n          // Close the modal\n          this.cancelAssign();\n          // Show success message (could be implemented with a toast/snackbar service)\n          this.showSuccessMessage('Task assigned successfully');\n          // Reload tasks and task counts to reflect changes\n          this.loadTasks();\n          this.loadTeamMemberTaskCounts();\n        },\n        error: err => {\n          console.error('Error assigning task:', err);\n          this.error.assign = `Failed to assign task: ${err.message}`;\n          this.loading.assign = false;\n        }\n      });\n    }\n    // Helper method to show success message (placeholder for toast/snackbar)\n    showSuccessMessage(message) {\n      console.log('SUCCESS:', message);\n      // In a real implementation, you would use a toast/snackbar service\n      // Example: this.toastService.show(message, { classname: 'bg-success' });\n      // For now, create a simple alert element that disappears after a few seconds\n      const alertDiv = document.createElement('div');\n      alertDiv.className = 'alert alert-success position-fixed top-0 end-0 m-3';\n      alertDiv.textContent = message;\n      alertDiv.style.zIndex = '9999';\n      document.body.appendChild(alertDiv);\n      // Remove after 3 seconds\n      setTimeout(() => {\n        alertDiv.remove();\n      }, 3000);\n    }\n    /**\r\n     * Show preview of auto-assign suggestions before performing the assignment\r\n     */\n    showAutoAssignPreview() {\n      this.loading.preview = true;\n      this.error.preview = null;\n      this.showingPreview = true;\n      this.assignPreviewTasks = [];\n      this.assignPreviewSuggestions = {};\n      // Normalize the iteration path to handle any double backslashes\n      const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n      console.log('Using normalized iteration path for auto-assign preview:', normalizedPath);\n      // First, get all Dev-New tasks for the current iteration\n      this.taskService.getTasks(normalizedPath).subscribe({\n        next: tasks => {\n          // Enhanced filtering for Dev-New tasks - handle various status formats\n          const allDevNewTasks = tasks.filter(task => {\n            // Skip tasks without status\n            if (!task.status) return false;\n            // Normalize status by removing spaces, hyphens, and converting to lowercase\n            const normalizedStatus = task.status.toLowerCase().replace(/[\\s\\-]/g, ''); // Remove spaces and hyphens\n            // Match against various formats of \"Dev-New\"\n            return normalizedStatus === 'devnew' || normalizedStatus === 'newdev' || normalizedStatus.includes('devnew') || normalizedStatus.includes('newdev') || normalizedStatus.includes('developmentnew') || normalizedStatus.includes('newdevelopment');\n          });\n          console.log(`Found ${allDevNewTasks.length} Dev-New tasks for auto-assign preview out of ${tasks.length} total tasks`);\n          console.log('Dev-New tasks:', allDevNewTasks);\n          if (allDevNewTasks.length === 0) {\n            this.error.preview = 'No Dev-New tasks found in the current iteration. Auto-assign requires tasks with Dev-New status.';\n            this.loading.preview = false;\n            return;\n          }\n          // If RnD team filter is applied, get team-specific suggestions\n          if (this.applyTeamFilter && this.teamName === 'RND') {\n            // Get RnD team members first\n            this.teamService.getTeamMembersByTeam('RND', normalizedPath).subscribe({\n              next: teamMembers => {\n                console.log('Got RnD team members for auto-assign:', teamMembers);\n                // Extract team member names\n                const teamMemberNames = teamMembers.map(member => member.displayName);\n                // Get auto-assign suggestions specifically for RnD team\n                this.taskService.getAutoAssignSuggestionsForTeam(normalizedPath, teamMemberNames).subscribe({\n                  next: suggestions => {\n                    this.assignPreviewSuggestions = suggestions;\n                    console.log('Got team-specific suggestions:', suggestions);\n                    // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n                    const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n                    this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(task.id));\n                    console.log('Filtered tasks to be reassigned:', this.assignPreviewTasks);\n                    // If no matches, try fallback to standard suggestions\n                    if (this.assignPreviewTasks.length === 0 && Object.keys(suggestions).length > 0) {\n                      console.warn('No matching tasks found for team-specific suggestions. Trying standard suggestions.');\n                      this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n                    } else {\n                      this.loading.preview = false;\n                    }\n                  },\n                  error: err => {\n                    console.error('Error loading team-specific auto-assign suggestions:', err);\n                    // Fall back to standard auto-assign if team-specific fails\n                    this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n                  }\n                });\n              },\n              error: err => {\n                console.error('Error loading RnD team members for auto-assign:', err);\n                // Fall back to the standard auto-assign if RnD team member loading fails\n                this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n              }\n            });\n          } else {\n            // Get standard auto-assign suggestions\n            this.getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath);\n          }\n        },\n        error: err => {\n          this.error.preview = `Failed to load tasks: ${err.message}`;\n          this.loading.preview = false;\n        }\n      });\n    }\n    /**\r\n     * Fallback method to get standard auto-assign suggestions if RnD-specific fails\r\n     */\n    getStandardAutoAssignSuggestions(allDevNewTasks, normalizedPath) {\n      console.log('Getting standard auto-assign suggestions with path:', normalizedPath);\n      console.log('Dev-New tasks available for assignment:', allDevNewTasks);\n      this.taskService.getAutoAssignSuggestions(normalizedPath).subscribe({\n        next: suggestions => {\n          this.assignPreviewSuggestions = suggestions;\n          console.log('Got standard suggestions (fallback):', suggestions);\n          // Check if we have any suggestions\n          if (Object.keys(suggestions).length === 0) {\n            console.warn('No suggestions returned from the API');\n            this.error.preview = 'No task assignment suggestions were generated. There may be no available tasks to assign.';\n            this.loading.preview = false;\n            return;\n          }\n          // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n          const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n          console.log('Suggestion task IDs:', suggestedTaskIds);\n          // Try more flexible matching if necessary\n          if (suggestedTaskIds.length > 0 && allDevNewTasks.length > 0) {\n            console.log('Applying task to suggestion matching...');\n            console.log('Task IDs available:', allDevNewTasks.map(t => t.id));\n            this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(task.id));\n            // If no matches found, try string matching\n            if (this.assignPreviewTasks.length === 0) {\n              console.warn('No direct ID matches found, trying string matching');\n              this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(Number(task.id)));\n              // If still no matches, try more flexible matching\n              if (this.assignPreviewTasks.length === 0) {\n                console.warn('No matches found even with string conversion, using available Dev-New tasks');\n                // Just use the first few Dev-New tasks that aren't assigned\n                this.assignPreviewTasks = allDevNewTasks.filter(task => !task.assignedTo || task.assignedTo.trim() === '').slice(0, Math.min(5, allDevNewTasks.length));\n                // Create suggestions for them\n                if (this.assignPreviewTasks.length > 0) {\n                  console.log('Using', this.assignPreviewTasks.length, 'unassigned Dev-New tasks as fallback');\n                  // Create empty suggestions object\n                  this.assignPreviewSuggestions = {};\n                  // Get team members to suggest\n                  const availableMembers = this.filteredTeamMembers.sort((a, b) => (a.currentWorkload || 0) - (b.currentWorkload || 0)).map(m => m.displayName).filter(Boolean);\n                  // Assign members to tasks\n                  this.assignPreviewTasks.forEach((task, index) => {\n                    const memberIndex = index % availableMembers.length;\n                    const member = availableMembers[memberIndex];\n                    this.assignPreviewSuggestions[task.id] = `${member} (least assigned)`;\n                  });\n                }\n              }\n            }\n          }\n          console.log('Filtered tasks to be reassigned (fallback):', this.assignPreviewTasks);\n          if (this.assignPreviewTasks.length === 0) {\n            this.error.preview = 'No tasks available for assignment. Check if there are Dev-New tasks in the current iteration.';\n          }\n          this.loading.preview = false;\n        },\n        error: err => {\n          this.error.preview = `Failed to load auto-assign suggestions: ${err.message}`;\n          this.loading.preview = false;\n        }\n      });\n    }\n    /**\r\n     * Check if there are valid assignment suggestions\r\n     */\n    hasAssignmentSuggestions() {\n      return this.assignPreviewSuggestions && Object.keys(this.assignPreviewSuggestions).length > 0;\n    }\n    /**\r\n     * Cancel auto-assign preview and close the modal\r\n     */\n    cancelAutoAssignPreview() {\n      this.showingPreview = false;\n      this.assignPreviewTasks = [];\n      this.assignPreviewSuggestions = {};\n      this.error.preview = null;\n    }\n    /**\r\n     * Confirm and perform the auto-assignments\r\n     */\n    confirmAutoAssign() {\n      this.loading.autoAssign = true;\n      this.error.autoAssign = null;\n      // Normalize the path for consistent handling\n      const normalizedPath = this.currentIterationPath.replace(/\\\\\\\\/g, '\\\\');\n      const assignmentPromises = [];\n      let assignmentCount = 0;\n      // For each task with a suggestion, create an assignment\n      for (const task of this.assignPreviewTasks) {\n        if (this.assignPreviewSuggestions[task.id]) {\n          const developerName = this.extractDeveloperName(this.assignPreviewSuggestions[task.id]);\n          console.log(`Assigning task #${task.id} (${task.title}) to ${developerName}`);\n          assignmentPromises.push(this.taskService.assignTask(task.id, developerName));\n          assignmentCount++;\n        }\n      }\n      // If we have assignments to make, execute them all in parallel\n      if (assignmentPromises.length > 0) {\n        forkJoin(assignmentPromises).subscribe({\n          next: () => {\n            // Hide the preview after successful assignment\n            this.showingPreview = false;\n            // Refresh the task list with normalized path\n            this.loadTasks();\n            // Also refresh the task counts to show updated workload\n            this.loadTeamMemberTaskCounts();\n            // Show success message\n            this.showSuccessMessage(`Successfully assigned ${assignmentCount} tasks.`);\n            this.loading.autoAssign = false;\n          },\n          error: err => {\n            this.error.autoAssign = `Error assigning tasks: ${err.message}`;\n            this.loading.autoAssign = false;\n          }\n        });\n      } else {\n        this.loading.autoAssign = false;\n        this.error.preview = \"No tasks available for assignment.\";\n      }\n    }\n    /**\r\n     * Extract just the developer name from the suggestion string\r\n     * Format is typically \"Name (explanation)\"\r\n     */\n    extractDeveloperName(suggestion) {\n      if (!suggestion) return '';\n      // Handle new format: \"Developer Name (expert in Bug, low load)\"\n      if (suggestion.includes('(')) {\n        return suggestion.substring(0, suggestion.indexOf('(')).trim();\n      }\n      // Fallback for simpler formats\n      const parts = suggestion.split(' ');\n      return parts[0]; // Just return the first word as the name\n    }\n    /**\r\n     * Extract the logic explanation from the suggestion string\r\n     * Format is typically \"Name (explanation)\"\r\n     */\n    extractLogicExplanation(suggestion) {\n      if (!suggestion) return '';\n      // Match content inside parentheses\n      const match = suggestion.match(/\\((.*?)\\)/);\n      if (match && match[1]) {\n        return match[1];\n      }\n      // If no parentheses, return the part after the first space\n      const spaceIndex = suggestion.indexOf(' ');\n      if (spaceIndex !== -1) {\n        return suggestion.substring(spaceIndex + 1).trim();\n      }\n      return '';\n    }\n    /**\r\n     * Original auto-assign tasks method - replaced with preview workflow\r\n     */\n    autoAssignTasks() {\n      this.loading.autoAssign = true;\n      this.error.autoAssign = null;\n      this.taskService.autoAssignTasks(this.currentIterationPath).subscribe({\n        next: () => {\n          // Reload tasks and task counts to reflect changes\n          this.loadTasks();\n          this.loadTeamMemberTaskCounts();\n          this.loading.autoAssign = false;\n        },\n        error: err => {\n          this.error.autoAssign = `Failed to auto-assign tasks: ${err.message}`;\n          this.loading.autoAssign = false;\n        }\n      });\n    }\n    openAssignModal(taskId) {\n      this.selectedTask = taskId;\n      this.selectedMember = '';\n      this.error.assign = null;\n      // Get the iteration path for this specific task - first try filtered tasks\n      let task = this.filteredTasks.find(t => t.id === taskId);\n      // If not found, check all tasks (in case this is accessing a non-filtered task)\n      if (!task) {\n        task = this.tasks.find(t => t.id === taskId);\n      }\n      if (task && task.iterationPath) {\n        // Fetch R&D team members specifically for this task's iteration path\n        this.loading.members = true;\n        this.teamService.getTeamMembersByTeam('RND', task.iterationPath).subscribe({\n          next: members => {\n            this.teamMembers = members;\n            this.loading.members = false;\n            // Filter to R&D team members\n            this.filterRnDTeamMembers();\n            // Load task counts after team members are loaded\n            if (task && task.iterationPath) {\n              this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n            }\n          },\n          error: err => {\n            console.error(`Error loading R&D team members for iteration path ${task?.iterationPath ?? 'unknown'}:`, err);\n            this.error.members = `Failed to load team members: ${err.message}`;\n            this.loading.members = false;\n            // Fallback to regular team members if R&D team fetch fails\n            if (task && task.iterationPath) {\n              this.taskService.getTeamMembers(task.iterationPath).subscribe({\n                next: response => {\n                  if (Array.isArray(response) && response.length > 0) {\n                    if (typeof response[0] === 'string') {\n                      // String array response\n                      const names = response;\n                      this.teamMembers = names.map((name, index) => ({\n                        id: `member-${index}`,\n                        displayName: name,\n                        uniqueName: '',\n                        currentWorkload: 0,\n                        isActive: true,\n                        email: '',\n                        team: this.applyTeamFilter ? this.teamName : ''\n                      }));\n                    } else {\n                      // TeamMember array response\n                      this.teamMembers = response;\n                    }\n                  } else {\n                    this.teamMembers = [];\n                  }\n                  this.loading.members = false;\n                  // Filter to R&D team members even with fallback response\n                  this.filterRnDTeamMembers();\n                  if (task && task.iterationPath) {\n                    this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n                  }\n                },\n                error: fallbackErr => {\n                  console.error(`Error loading fallback team members:`, fallbackErr);\n                  this.error.members = `Failed to load team members: ${fallbackErr.message}`;\n                  this.loading.members = false;\n                }\n              });\n            } else {\n              console.error('Cannot load team members: task or iterationPath is undefined');\n              this.loading.members = false;\n            }\n          }\n        });\n      } else {\n        // Ensure we have team members loaded before showing the modal\n        if (this.filteredTeamMembers.length === 0 && !this.loading.members) {\n          this.loadTeamMembers();\n        }\n        // Make sure we have task counts loaded\n        if (Object.keys(this.teamMemberTaskCounts).length === 0) {\n          this.loadTeamMemberTaskCounts();\n        }\n      }\n    }\n    /**\r\n     * Load task counts specifically for the modal dialogue\r\n     * This ensures counts are up-to-date when assigning tasks\r\n     */\n    loadTeamMemberTaskCountsForModal(iterationPath) {\n      this.loading.taskCounts = true;\n      // Normalize the iteration path\n      const normalizedPath = iterationPath.replace(/\\\\\\\\/g, '\\\\');\n      this.taskService.getTeamMemberTaskCounts(normalizedPath).subscribe({\n        next: counts => {\n          this.teamMemberTaskCounts = counts;\n          this.loading.taskCounts = false;\n          console.log('Loaded team member task counts for modal:', this.teamMemberTaskCounts);\n        },\n        error: err => {\n          console.error('Error loading team member task counts for modal:', err);\n          this.loading.taskCounts = false;\n        }\n      });\n    }\n    cancelAssign() {\n      this.selectedTask = null;\n      this.selectedMember = '';\n      this.error.assign = null;\n      this.loading.assign = false;\n    }\n    /**\r\n     * Get CSS class for priority badge\r\n     * @param priority Priority value (number or string)\r\n     * @returns CSS class name\r\n     */\n    getPriorityClass(priority) {\n      // Convert priority to number if it's a string\n      const priorityNum = typeof priority === 'string' ? parseInt(priority, 10) : priority;\n      if (isNaN(priorityNum)) {\n        return 'bg-secondary'; // Default for invalid priority\n      }\n\n      switch (priorityNum) {\n        case 1:\n          return 'bg-danger';\n        case 2:\n          return 'bg-warning text-dark';\n        case 3:\n          return 'bg-info text-dark';\n        case 4:\n          return 'bg-success';\n        default:\n          return 'bg-secondary';\n      }\n    }\n    /**\r\n     * Get CSS class for status badge\r\n     * @param status Status string or undefined\r\n     * @returns CSS class name\r\n     */\n    getStatusClass(status) {\n      if (!status) {\n        return 'status-to-do'; // Default for undefined status\n      }\n\n      const statusLower = status.toLowerCase();\n      // Return the appropriate custom status class based on requested colors\n      if (statusLower === 'active') {\n        return 'status-active'; // Yellow\n      } else if (statusLower === 'completed' || statusLower === 'done' || statusLower === 'closed' || statusLower === 'dev complete') {\n        return 'status-dev-complete'; // Green\n      } else if (statusLower === 'blocked') {\n        return 'status-blocked'; // Red\n      } else if (statusLower === 'dev-new' || statusLower === 'dev new') {\n        return 'status-dev-new'; // Blue\n      } else if (statusLower === 'code review') {\n        return 'status-code-review'; // Purple\n      } else if (statusLower === 'proposed') {\n        return 'status-proposed'; // Gray\n      } else if (statusLower === 'planned') {\n        return 'status-planned'; // Orange\n      } else if (statusLower === 'resolved') {\n        return 'status-resolved'; // Teal\n      } else if (statusLower.includes('progress')) {\n        return 'status-in-progress'; // Cyan\n      } else if (statusLower === 'to do' || statusLower === 'new') {\n        return 'status-to-do'; // Gray\n      } else {\n        return 'status-to-do'; // Default for any other status\n      }\n    }\n    /**\r\n     * Get CSS class for team member workload indicator\r\n     * @param workload Current workload value\r\n     * @returns CSS class name\r\n     */\n    getTeamMemberWorkloadClass(workload) {\n      if (workload === 0) {\n        return 'bg-secondary';\n      } else if (workload < 3) {\n        return 'bg-success';\n      } else if (workload < 7) {\n        return 'bg-warning text-dark';\n      } else {\n        return 'bg-danger';\n      }\n    }\n    /**\r\n     * Get the progress bar class based on workload\r\n     * @param workload Current workload\r\n     * @returns Bootstrap progress bar class\r\n     */\n    getProgressBarClass(workload) {\n      if (workload === 0) {\n        return 'bg-secondary';\n      } else if (workload < 3) {\n        return 'bg-success';\n      } else if (workload < 7) {\n        return 'bg-warning';\n      } else {\n        return 'bg-danger';\n      }\n    }\n    /**\r\n     * Calculate workload as a percentage (for progress bar width)\r\n     * @param workload Current workload\r\n     * @returns Percentage value (0-100)\r\n     */\n    getWorkloadPercentage(workload) {\n      // Using 10 as maximum reasonable workload\n      const maxWorkload = 10;\n      return Math.min(100, workload / maxWorkload * 100);\n    }\n    /**\r\n     * Handle changing the iteration path\r\n     * @param iterationPath The new iteration path\r\n     */\n    changeIterationPath(iterationPath) {\n      console.log(`Changing iteration path to: ${iterationPath}`);\n      if (this.currentIterationPath === iterationPath) {\n        console.log('Iteration path unchanged, skipping reload');\n        return;\n      }\n      // Update both the current and manual iteration paths\n      this.currentIterationPath = iterationPath;\n      this.manualIterationPath = iterationPath;\n      // For backward compatibility, trigger the search (load data)\n      this.searchClicked();\n    }\n    /**\r\n     * Get the title of the currently selected task\r\n     * @returns The task title or a fallback message\r\n     */\n    getSelectedTaskTitle() {\n      if (this.selectedTask === null) {\n        return 'No task selected';\n      }\n      const selectedTaskId = this.selectedTask;\n      // First try to find in filtered tasks\n      let task = this.filteredTasks.find(t => t.id === selectedTaskId);\n      // If not found (could be a non-R&D task), look in all tasks\n      if (!task) {\n        task = this.tasks.find(t => t.id === selectedTaskId);\n      }\n      return task ? task.title : 'Unknown Task';\n    }\n    /**\r\n     * Get the task count for a specific team member\r\n     * @param memberName The name of the team member\r\n     * @returns The number of tasks assigned to that member\r\n     */\n    getTaskCount(memberName) {\n      if (!memberName) {\n        console.warn('Called getTaskCount with empty memberName');\n        return 0;\n      }\n      // First check if we have task counts from the API\n      if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n        // Look for an exact match\n        if (this.teamMemberTaskCounts[memberName] !== undefined) {\n          return this.teamMemberTaskCounts[memberName];\n        }\n        // Try case-insensitive match\n        const key = Object.keys(this.teamMemberTaskCounts).find(k => k && k.toLowerCase() === memberName.toLowerCase());\n        if (key) {\n          return this.teamMemberTaskCounts[key];\n        }\n      }\n      // Fall back to the currentWorkload from team members\n      const member = this.teamMembers.find(m => typeof m === 'object' && m.displayName && m.displayName.toLowerCase() === memberName.toLowerCase());\n      return member && typeof member === 'object' ? member.currentWorkload : 0;\n    }\n    /**\r\n     * Get a list of all tasks with Dev-New status\r\n     * @returns List of Dev-New tasks\r\n     */\n    getDevNewTasks() {\n      return this.filteredTasks.filter(task => task.status && (task.status.toLowerCase() === 'dev-new' || task.status.toLowerCase() === 'dev new' || task.status.toLowerCase().includes('dev-new') || task.status.toLowerCase().includes('dev new') || task.status.toLowerCase() === 'development - new'));\n    }\n    /**\r\n     * Get a list of unassigned Dev-New tasks\r\n     * @returns List of unassigned Dev-New tasks\r\n     */\n    getUnassignedDevNewTasks() {\n      return this.filteredTasks.filter(task => task.status && (task.status.toLowerCase() === 'dev-new' || task.status.toLowerCase() === 'dev new' || task.status.toLowerCase().includes('dev-new') || task.status.toLowerCase().includes('dev new') || task.status.toLowerCase() === 'development - new') && !task.assignedTo);\n    }\n    /**\r\n     * Get a summary of task status distribution\r\n     * @returns Array of status counts\r\n     */\n    getStatusDistribution() {\n      const statusCounts = {};\n      this.filteredTasks.forEach(task => {\n        const status = task.status || 'Unknown';\n        statusCounts[status] = (statusCounts[status] || 0) + 1;\n      });\n      return Object.entries(statusCounts).map(([status, count]) => ({\n        status,\n        count\n      })).sort((a, b) => b.count - a.count);\n    }\n    /**\r\n     * Filter tasks to only show those assigned to R&D team members\r\n     */\n    filterTasksByRnDTeamMembers() {\n      // If team filter is not applied, show all tasks\n      if (!this.applyTeamFilter) {\n        this.filteredTasks = this.tasks;\n        console.log(`Team filter disabled. Showing all ${this.tasks.length} tasks.`);\n        return;\n      }\n      // First ensure we have filtered team members\n      if (this.filteredTeamMembers.length === 0) {\n        this.filterRnDTeamMembers();\n      }\n      // Get a list of display names of filtered R&D team members\n      const rndMemberNames = this.filteredTeamMembers.map(member => member.displayName.toLowerCase());\n      console.log('R&D team member names for task filtering:', rndMemberNames);\n      // Filter tasks to only include those assigned to R&D members and unassigned tasks\n      this.filteredTasks = this.tasks.filter(task => {\n        // Always include unassigned tasks\n        if (!task.assignedTo) {\n          return true;\n        }\n        // Check if task is assigned to an R&D team member\n        return rndMemberNames.includes(task.assignedTo.toLowerCase());\n      });\n      console.log(`Filtered ${this.tasks.length} tasks down to ${this.filteredTasks.length} tasks assigned to R&D members or unassigned`);\n    }\n    /**\r\n     * Generates an Azure DevOps URL for a specific work item ID\r\n     * @param taskId The ID of the work item to link to\r\n     * @returns A URL to the work item in Azure DevOps\r\n     */\n    getAzureDevOpsTaskUrl(taskId) {\n      return `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_workitems/edit/${taskId}/`;\n    }\n    /**\r\n     * Open task in Azure DevOps in a new tab\r\n     * @param taskId The ID of the task to open\r\n     * @param event The click event\r\n     */\n    openTaskInAzureDevOps(taskId, event) {\n      // Prevent default behavior to avoid interference with other actions\n      event.preventDefault();\n      event.stopPropagation();\n      // Open task in new tab\n      const url = this.getAzureDevOpsTaskUrl(taskId);\n      window.open(url, '_blank');\n      console.log(`Opening task ${taskId} in Azure DevOps`);\n    }\n    /**\r\n     * Show popup with tasks for a specific team member\r\n     * @param event Click event\r\n     * @param memberName Name of the team member\r\n     */\n    showMemberTasks(event, memberName) {\n      // Prevent event propagation to avoid immediate closing\n      event.preventDefault();\n      event.stopPropagation();\n      console.log(`Showing tasks for ${memberName}, fetching from ${this.tasks.length} total tasks`);\n      // Get tasks for this member - search in all tasks, not just filtered tasks\n      this.selectedMemberTasks = this.tasks.filter(task => task.assignedTo && task.assignedTo.toLowerCase() === memberName.toLowerCase());\n      this.selectedMemberName = memberName;\n      // Calculate popup position - position it near the clicked element but ensure it's visible\n      const clickedElement = event.currentTarget;\n      const rect = clickedElement.getBoundingClientRect();\n      // Adjust position to ensure popup is visible within viewport\n      const viewportWidth = window.innerWidth;\n      const viewportHeight = window.innerHeight;\n      const popupWidth = 400; // Same as in CSS\n      const popupHeight = Math.min(300, this.selectedMemberTasks.length * 50 + 100); // Rough estimate\n      // Position popup below the badge, but adjust if near viewport edges\n      let left = rect.left;\n      if (left + popupWidth > viewportWidth) {\n        left = Math.max(10, viewportWidth - popupWidth - 10);\n      }\n      let top = rect.bottom + window.scrollY;\n      if (top + popupHeight > viewportHeight + window.scrollY) {\n        // Position above if not enough space below\n        top = Math.max(10 + window.scrollY, rect.top + window.scrollY - popupHeight);\n      }\n      this.popupPosition = {\n        top,\n        left\n      };\n      // Make sure popup is shown\n      this.showTaskPopup = true;\n      console.log(`Showing tasks popup for ${memberName}: ${this.selectedMemberTasks.length} tasks at position:`, this.popupPosition);\n    }\n    /**\r\n     * Close the task popup when clicking outside\r\n     */\n    closePopup(event) {\n      if (!event) return;\n      // Don't close if this is the initial click that opened the popup or modal\n      if (event.target && (event.target.closest('.task-count-badge') || event.target.closest('.member-name-link'))) {\n        return;\n      }\n      // Close task popup if it's open and click is outside\n      if (this.showTaskPopup && !event.target.closest('.task-popup')) {\n        this.showTaskPopup = false;\n      }\n      // Close member modal if it's open and click is outside\n      if (this.showMemberModal && !event.target.closest('.member-modal-content')) {\n        this.closeMemberModal();\n      }\n    }\n    /**\r\n     * Prevent popup from closing when clicking inside it\r\n     * @param event Click event\r\n     */\n    keepPopupOpen(event) {\n      event.stopPropagation();\n    }\n    /**\r\n     * Show modal with tasks for a specific team member\r\n     * @param event Click event\r\n     * @param memberName Name of the team member\r\n     */\n    showMemberTasksModal(event, memberName) {\n      // Prevent default behavior\n      event.preventDefault();\n      // Store the last focused element for when we close the modal\n      this.lastFocusedElement = document.activeElement;\n      console.log(`Showing modal for ${memberName}, fetching from ${this.tasks.length} total tasks`);\n      // Set loading state\n      this.loading.memberTasks = true;\n      this.error.memberTasks = null;\n      // Clear previous data\n      this.selectedModalMemberTasks = [];\n      this.selectedModalMemberName = memberName;\n      // Show the modal\n      this.showMemberModal = true;\n      // Get tasks for this member - search in all tasks, not just filtered tasks\n      // We'll simulate an async call to match requirements\n      setTimeout(() => {\n        this.selectedModalMemberTasks = this.tasks.filter(task => task.assignedTo && task.assignedTo.toLowerCase() === memberName.toLowerCase());\n        this.loading.memberTasks = false;\n        // Focus the close button in the modal for accessibility\n        setTimeout(() => {\n          const closeButton = document.querySelector('.member-modal-close');\n          if (closeButton) {\n            closeButton.focus();\n          }\n        }, 100);\n        console.log(`Loaded ${this.selectedModalMemberTasks.length} tasks for ${memberName} in modal`);\n      }, 500); // Simulate network delay\n    }\n    /**\r\n     * Close the member tasks modal\r\n     */\n    closeMemberModal() {\n      this.showMemberModal = false;\n      // Return focus to the last focused element\n      setTimeout(() => {\n        if (this.lastFocusedElement) {\n          this.lastFocusedElement.focus();\n        }\n      }, 100);\n    }\n    /**\r\n     * Handle keyboard interaction in the modal for accessibility\r\n     * @param event Keyboard event\r\n     */\n    handleModalKeydown(event) {\n      // Close modal on Escape key\n      if (event.key === 'Escape') {\n        this.closeMemberModal();\n      }\n      // Trap focus inside the modal for accessibility\n      if (event.key === 'Tab') {\n        const modal = document.querySelector('.member-modal');\n        if (!modal) return;\n        const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n        if (focusableElements.length === 0) return;\n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n        if (event.shiftKey && document.activeElement === firstElement) {\n          // If shift+tab and focus is on first element, move to last element\n          event.preventDefault();\n          lastElement.focus();\n        } else if (!event.shiftKey && document.activeElement === lastElement) {\n          // If tab and focus is on last element, move to first element\n          event.preventDefault();\n          firstElement.focus();\n        }\n      }\n    }\n    static {\n      this.ɵfac = function TaskDistributionComponent_Factory(t) {\n        return new (t || TaskDistributionComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.TeamService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TaskDistributionComponent,\n        selectors: [[\"app-task-distribution\"]],\n        hostBindings: function TaskDistributionComponent_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_click_HostBindingHandler($event) {\n              return ctx.closePopup($event);\n            }, false, i0.ɵɵresolveDocument);\n          }\n        },\n        decls: 124,\n        vars: 54,\n        consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [1, \"search-section\"], [1, \"input-group-container\"], [1, \"filter-checkbox\"], [\"type\", \"checkbox\", \"id\", \"applyTeamFilter\", 1, \"form-check-input\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [\"for\", \"applyTeamFilter\", 1, \"form-check-label\"], [1, \"search-input\", \"team-input\"], [\"type\", \"text\", \"placeholder\", \"Team Name\", 1, \"form-control\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [1, \"text-muted\"], [1, \"search-input\"], [\"type\", \"text\", \"placeholder\", \"Iteration Path\", \"list\", \"iterationPathsList\", 1, \"form-control\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [\"id\", \"iterationPathsList\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", \"search-btn\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-search\", \"me-1\"], [4, \"ngIf\"], [1, \"action-buttons\"], [1, \"btn\", \"btn-primary\", \"auto-assign-btn\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-magic\"], [1, \"text-muted\", \"mt-2\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [\"id\", \"taskTabs\", \"role\", \"tablist\", 1, \"nav\", \"nav-tabs\", \"mb-4\"], [\"role\", \"presentation\", 1, \"nav-item\"], [\"id\", \"task-distribution-tab\", \"data-bs-toggle\", \"tab\", \"data-bs-target\", \"#task-distribution\", \"type\", \"button\", \"role\", \"tab\", \"aria-controls\", \"task-distribution\", \"aria-selected\", \"true\", 1, \"nav-link\", \"active\", 3, \"click\"], [1, \"bi\", \"bi-list-task\", \"me-2\"], [\"id\", \"task-workload-tab\", \"data-bs-toggle\", \"tab\", \"data-bs-target\", \"#task-workload\", \"type\", \"button\", \"role\", \"tab\", \"aria-controls\", \"task-workload\", \"aria-selected\", \"false\", 1, \"nav-link\", 3, \"click\"], [1, \"bi\", \"bi-bar-chart-line\", \"me-2\"], [\"id\", \"taskTabsContent\", 1, \"tab-content\"], [\"id\", \"task-distribution\", \"role\", \"tabpanel\", \"aria-labelledby\", \"task-distribution-tab\", 1, \"tab-pane\", \"fade\", \"show\", \"active\"], [1, \"row\"], [1, \"card\"], [1, \"card-body\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [\"id\", \"task-workload\", \"role\", \"tabpanel\", \"aria-labelledby\", \"task-workload-tab\", 1, \"tab-pane\", \"fade\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"btn\", \"btn-outline-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-arrow-clockwise\", \"me-1\"], [\"class\", \"row\", 4, \"ngIf\"], [\"tabindex\", \"-1\", 1, \"modal\", 3, \"ngClass\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\"], [\"class\", \"alert alert-danger mb-3\", 4, \"ngIf\"], [1, \"mb-4\"], [\"for\", \"teamMemberSelect\", 1, \"form-label\", \"fw-bold\", \"mb-2\"], [1, \"team-member-options\"], [\"class\", \"form-check mb-2 border p-2 rounded\", 4, \"ngFor\", \"ngForOf\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"class\", \"modal-backdrop fade show\", 4, \"ngIf\"], [1, \"modal-dialog\", \"modal-lg\"], [1, \"modal-header\", \"bg-primary\", \"text-white\"], [1, \"bi\", \"bi-magic\", \"me-2\"], [\"type\", \"button\", 1, \"btn-close\", \"btn-close-white\", 3, \"click\"], [1, \"alert\", \"alert-primary\", \"mb-3\"], [1, \"bi\", \"bi-info-circle\", \"me-2\"], [\"class\", \"alert alert-info\", 4, \"ngIf\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [\"class\", \"task-popup\", 3, \"top\", \"left\", \"click\", 4, \"ngIf\"], [\"class\", \"member-modal-backdrop\", 3, \"click\", 4, \"ngIf\"], [3, \"value\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-warning\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\"], [4, \"ngFor\", \"ngForOf\"], [\"href\", \"#\", 1, \"task-id-link\", 3, \"click\"], [1, \"badge\", \"rounded-pill\", 3, \"ngClass\"], [1, \"d-flex\", \"align-items-center\"], [\"class\", \"me-2\", 4, \"ngIf\"], [\"class\", \"text-muted me-2\", 4, \"ngIf\"], [\"class\", \"ms-1 suggestion-box\", 4, \"ngIf\"], [1, \"status-badge\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-person-plus\"], [1, \"me-2\"], [1, \"text-muted\", \"me-2\"], [1, \"ms-1\", \"suggestion-box\"], [1, \"text-primary\"], [1, \"bi\", \"bi-lightbulb-fill\"], [\"class\", \"col-md-3 col-sm-6 mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-3\", \"col-sm-6\", \"mb-3\"], [1, \"card\", \"team-member-card\", \"h-100\", 3, \"ngClass\"], [1, \"card-title\"], [\"href\", \"#\", 1, \"member-name-link\", 3, \"click\"], [1, \"workload-stats\", \"mt-2\"], [1, \"badge\", \"rounded-pill\", \"task-count-badge\", 2, \"cursor\", \"pointer\", 3, \"ngClass\", \"click\"], [1, \"progress\", \"mt-2\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"10\", 1, \"progress-bar\", 3, \"ngClass\"], [\"class\", \"text-muted mt-2 small\", 4, \"ngIf\"], [1, \"text-muted\", \"mt-2\", \"small\"], [1, \"bi\", \"bi-envelope\"], [1, \"alert\", \"alert-danger\", \"mb-3\"], [1, \"mb-3\"], [1, \"form-label\", \"fw-bold\"], [1, \"py-2\", \"px-3\", \"bg-light\", \"rounded\"], [1, \"form-check\", \"mb-2\", \"border\", \"p-2\", \"rounded\"], [\"type\", \"radio\", \"name\", \"teamMemberRadio\", 1, \"form-check-input\", 3, \"id\", \"value\", \"ngModel\", \"ngModelChange\"], [1, \"form-check-label\", \"w-100\"], [1, \"member-name\"], [1, \"modal-backdrop\", \"fade\", \"show\"], [1, \"mt-2\"], [1, \"alert\", \"alert-info\"], [1, \"mt-3\"], [\"id\", \"debugAccordion\", 1, \"accordion\"], [1, \"accordion-item\"], [\"id\", \"headingOne\", 1, \"accordion-header\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#collapseOne\", \"aria-expanded\", \"false\", \"aria-controls\", \"collapseOne\", 1, \"accordion-button\", \"collapsed\"], [1, \"bi\", \"bi-bug\", \"me-2\"], [\"id\", \"collapseOne\", \"aria-labelledby\", \"headingOne\", \"data-bs-parent\", \"#debugAccordion\", 1, \"accordion-collapse\", \"collapse\"], [1, \"accordion-body\"], [1, \"table\", \"table-sm\", \"table-bordered\"], [1, \"mt-4\"], [1, \"list-unstyled\", \"row\"], [1, \"col-md-6\", \"mb-2\"], [1, \"bi\", \"bi-trophy\", \"text-warning\", \"me-2\"], [1, \"bi\", \"bi-check-circle\", \"text-success\", \"me-2\"], [1, \"bi\", \"bi-speedometer2\", \"text-info\", \"me-2\"], [1, \"bi\", \"bi-person-plus\", \"text-primary\", \"me-2\"], [1, \"badge\", \"bg-info\", \"text-dark\"], [1, \"badge\", \"bg-secondary\"], [\"class\", \"text-muted\", 4, \"ngIf\"], [\"class\", \"badge bg-warning text-dark\", 4, \"ngIf\"], [\"class\", \"text-muted small\", 4, \"ngIf\"], [1, \"badge\", \"bg-warning\", \"text-dark\"], [1, \"badge\", \"bg-success\", \"me-2\"], [\"class\", \"ms-2 badge bg-warning text-dark\", 4, \"ngIf\"], [1, \"ms-2\", \"badge\", \"bg-warning\", \"text-dark\"], [1, \"text-muted\", \"small\"], [1, \"task-popup\", 3, \"click\"], [1, \"task-popup-header\"], [1, \"task-popup-body\"], [\"class\", \"text-center py-3\", 4, \"ngIf\"], [\"class\", \"task-list\", 4, \"ngIf\"], [1, \"text-center\", \"py-3\"], [1, \"text-muted\", \"mb-0\"], [1, \"task-list\"], [\"class\", \"task-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"task-item\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-start\"], [1, \"ms-2\"], [1, \"member-modal-backdrop\", 3, \"click\"], [\"role\", \"dialog\", \"aria-modal\", \"true\", \"tabindex\", \"-1\", 1, \"member-modal\", 3, \"click\", \"keydown\"], [1, \"member-modal-content\"], [1, \"member-modal-header\"], [\"id\", \"memberModalTitle\", 1, \"member-modal-title\"], [1, \"bi\", \"bi-person-badge\", \"me-2\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"member-modal-close\", 3, \"click\"], [1, \"bi\", \"bi-x\", 2, \"font-size\", \"1.5rem\"], [\"class\", \"member-modal-loading\", 4, \"ngIf\"], [\"class\", \"member-modal-error\", 4, \"ngIf\"], [\"class\", \"px-4 py-3\", 4, \"ngIf\"], [1, \"member-modal-footer\"], [\"type\", \"button\", 1, \"member-modal-btn\", \"primary\", 3, \"click\"], [1, \"member-modal-loading\"], [\"role\", \"status\", 1, \"spinner\"], [1, \"loading-text\"], [1, \"member-modal-error\"], [1, \"bi\", \"bi-exclamation-circle\", \"me-2\"], [1, \"px-4\", \"py-3\"], [\"class\", \"member-task-list\", 4, \"ngIf\"], [1, \"bi\", \"bi-inbox\", \"text-muted\", 2, \"font-size\", \"3rem\"], [1, \"mt-3\", \"text-muted\"], [1, \"member-task-list\"], [1, \"task-header\"], [\"href\", \"#\", 1, \"task-id\", 3, \"click\"], [1, \"task-status\", 3, \"ngClass\"], [1, \"task-title\"]],\n        template: function TaskDistributionComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\", 4);\n            i0.ɵɵtext(5, \"Task Distribution\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"div\")(7, \"div\", 5)(8, \"div\", 6)(9, \"div\", 7)(10, \"input\", 8);\n            i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_Template_input_ngModelChange_10_listener($event) {\n              return ctx.applyTeamFilter = $event;\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"label\", 9);\n            i0.ɵɵtext(12, \"Apply Team Filter\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(13, \"div\", 10)(14, \"input\", 11);\n            i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_Template_input_ngModelChange_14_listener($event) {\n              return ctx.teamName = $event;\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"small\", 12);\n            i0.ɵɵtext(16, \"TeamName\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(17, \"div\", 13)(18, \"input\", 14);\n            i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_Template_input_ngModelChange_18_listener($event) {\n              return ctx.manualIterationPath = $event;\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"small\", 12);\n            i0.ɵɵtext(20, \"IterationPath\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(21, \"datalist\", 15);\n            i0.ɵɵtemplate(22, TaskDistributionComponent_option_22_Template, 1, 1, \"option\", 16);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(23, \"button\", 17);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_23_listener() {\n              return ctx.searchClicked();\n            });\n            i0.ɵɵelement(24, \"i\", 18);\n            i0.ɵɵtemplate(25, TaskDistributionComponent_span_25_Template, 2, 0, \"span\", 19);\n            i0.ɵɵtemplate(26, TaskDistributionComponent_span_26_Template, 3, 0, \"span\", 19);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(27, \"div\", 20)(28, \"button\", 21);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_28_listener() {\n              return ctx.showAutoAssignPreview();\n            });\n            i0.ɵɵelement(29, \"i\", 22);\n            i0.ɵɵtemplate(30, TaskDistributionComponent_span_30_Template, 2, 0, \"span\", 19);\n            i0.ɵɵtemplate(31, TaskDistributionComponent_span_31_Template, 3, 0, \"span\", 19);\n            i0.ɵɵtemplate(32, TaskDistributionComponent_span_32_Template, 3, 0, \"span\", 19);\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(33, \"p\", 23);\n            i0.ɵɵtext(34, \"Manage and assign tasks for the current sprint\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(35, TaskDistributionComponent_div_35_Template, 2, 1, \"div\", 24);\n            i0.ɵɵtemplate(36, TaskDistributionComponent_div_36_Template, 2, 1, \"div\", 25);\n            i0.ɵɵtemplate(37, TaskDistributionComponent_div_37_Template, 2, 1, \"div\", 24);\n            i0.ɵɵtemplate(38, TaskDistributionComponent_div_38_Template, 2, 1, \"div\", 24);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(39, \"ul\", 26)(40, \"li\", 27)(41, \"button\", 28);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_41_listener() {\n              return ctx.onTabChange(\"distribution\");\n            });\n            i0.ɵɵelement(42, \"i\", 29);\n            i0.ɵɵtext(43, \"Task Distribution \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(44, \"li\", 27)(45, \"button\", 30);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_45_listener() {\n              return ctx.onTabChange(\"workload\");\n            });\n            i0.ɵɵelement(46, \"i\", 31);\n            i0.ɵɵtext(47, \"Task Workload \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(48, \"div\", 32)(49, \"div\", 33)(50, \"div\", 34)(51, \"div\", 2)(52, \"div\", 35)(53, \"div\", 36);\n            i0.ɵɵtemplate(54, TaskDistributionComponent_div_54_Template, 4, 0, \"div\", 37);\n            i0.ɵɵtemplate(55, TaskDistributionComponent_div_55_Template, 2, 1, \"div\", 24);\n            i0.ɵɵtemplate(56, TaskDistributionComponent_div_56_Template, 3, 0, \"div\", 37);\n            i0.ɵɵtemplate(57, TaskDistributionComponent_div_57_Template, 18, 1, \"div\", 38);\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(58, \"div\", 39)(59, \"div\", 34)(60, \"div\", 2)(61, \"div\", 35)(62, \"div\", 40)(63, \"h4\", 4);\n            i0.ɵɵtext(64, \"Team Workload\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(65, \"button\", 41);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_65_listener() {\n              ctx.loadTeamMembers();\n              return ctx.loadTeamMemberTaskCounts();\n            });\n            i0.ɵɵelement(66, \"i\", 42);\n            i0.ɵɵtext(67, \" Refresh Data \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(68, \"div\", 36);\n            i0.ɵɵtemplate(69, TaskDistributionComponent_div_69_Template, 4, 0, \"div\", 37);\n            i0.ɵɵtemplate(70, TaskDistributionComponent_div_70_Template, 2, 1, \"div\", 24);\n            i0.ɵɵtemplate(71, TaskDistributionComponent_div_71_Template, 3, 0, \"div\", 37);\n            i0.ɵɵtemplate(72, TaskDistributionComponent_div_72_Template, 2, 1, \"div\", 43);\n            i0.ɵɵelementEnd()()()()()();\n            i0.ɵɵelementStart(73, \"div\", 44)(74, \"div\", 45)(75, \"div\", 46)(76, \"div\", 47)(77, \"h5\", 48);\n            i0.ɵɵtext(78, \"Assign Task\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(79, \"button\", 49);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_79_listener() {\n              return ctx.cancelAssign();\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(80, \"div\", 50);\n            i0.ɵɵtemplate(81, TaskDistributionComponent_div_81_Template, 2, 1, \"div\", 51);\n            i0.ɵɵtemplate(82, TaskDistributionComponent_div_82_Template, 11, 2, \"div\", 19);\n            i0.ɵɵelementStart(83, \"div\", 52)(84, \"label\", 53);\n            i0.ɵɵtext(85, \"Select Team Member\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(86, \"div\", 54);\n            i0.ɵɵtemplate(87, TaskDistributionComponent_div_87_Template, 8, 7, \"div\", 55);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(88, \"div\", 56)(89, \"button\", 57);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_89_listener() {\n              return ctx.cancelAssign();\n            });\n            i0.ɵɵtext(90, \"Cancel\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(91, \"button\", 58);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_91_listener() {\n              return ctx.assignTask();\n            });\n            i0.ɵɵtemplate(92, TaskDistributionComponent_span_92_Template, 2, 0, \"span\", 19);\n            i0.ɵɵtemplate(93, TaskDistributionComponent_span_93_Template, 3, 0, \"span\", 19);\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵtemplate(94, TaskDistributionComponent_div_94_Template, 1, 0, \"div\", 59);\n            i0.ɵɵelementStart(95, \"div\", 44)(96, \"div\", 60)(97, \"div\", 46)(98, \"div\", 61)(99, \"h5\", 48);\n            i0.ɵɵelement(100, \"i\", 62);\n            i0.ɵɵtext(101, \" Auto-Assign Preview \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(102, \"button\", 63);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_102_listener() {\n              return ctx.cancelAutoAssignPreview();\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(103, \"div\", 50);\n            i0.ɵɵtemplate(104, TaskDistributionComponent_div_104_Template, 2, 1, \"div\", 51);\n            i0.ɵɵelementStart(105, \"div\", 64);\n            i0.ɵɵelement(106, \"i\", 65);\n            i0.ɵɵelementStart(107, \"strong\");\n            i0.ɵɵtext(108, \"Preview Mode:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(109, \" Review AI-suggested assignments before confirming. No changes will be made until you click \\\"Confirm & Assign\\\". \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(110, TaskDistributionComponent_div_110_Template, 6, 0, \"div\", 37);\n            i0.ɵɵtemplate(111, TaskDistributionComponent_div_111_Template, 3, 0, \"div\", 66);\n            i0.ɵɵtemplate(112, TaskDistributionComponent_div_112_Template, 14, 4, \"div\", 67);\n            i0.ɵɵtemplate(113, TaskDistributionComponent_div_113_Template, 49, 1, \"div\", 19);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(114, \"div\", 56)(115, \"button\", 57);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_115_listener() {\n              return ctx.cancelAutoAssignPreview();\n            });\n            i0.ɵɵtext(116, \"Cancel\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(117, \"button\", 58);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_117_listener() {\n              return ctx.confirmAutoAssign();\n            });\n            i0.ɵɵelement(118, \"i\", 62);\n            i0.ɵɵtemplate(119, TaskDistributionComponent_span_119_Template, 2, 0, \"span\", 19);\n            i0.ɵɵtemplate(120, TaskDistributionComponent_span_120_Template, 3, 0, \"span\", 19);\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵtemplate(121, TaskDistributionComponent_div_121_Template, 1, 0, \"div\", 59);\n            i0.ɵɵtemplate(122, TaskDistributionComponent_div_122_Template, 8, 7, \"div\", 68);\n            i0.ɵɵtemplate(123, TaskDistributionComponent_div_123_Template, 15, 5, \"div\", 69);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(10);\n            i0.ɵɵproperty(\"ngModel\", ctx.applyTeamFilter)(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.teamName)(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.manualIterationPath)(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngForOf\", ctx.iterationPaths);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.loading.members);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.tasks || ctx.loading.members);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", ctx.loading.autoAssign || ctx.loading.preview);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.autoAssign && !ctx.loading.preview);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.preview);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.autoAssign);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.autoAssign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.iterationPaths);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.tasks);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.members);\n            i0.ɵɵadvance(16);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.tasks);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.tasks);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.error.tasks && ctx.tasks.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.error.tasks && ctx.tasks.length > 0);\n            i0.ɵɵadvance(12);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.members);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.members);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.members && !ctx.error.members && ctx.filteredTeamMembers.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.members && !ctx.error.members && ctx.filteredTeamMembers.length > 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵstyleProp(\"display\", ctx.selectedTask !== null ? \"block\" : \"none\");\n            i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(50, _c1, ctx.selectedTask !== null));\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.assign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedTask !== null);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngForOf\", ctx.filteredTeamMembers);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"disabled\", ctx.loading.assign || !ctx.selectedMember);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.assign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.assign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedTask !== null);\n            i0.ɵɵadvance(1);\n            i0.ɵɵstyleProp(\"display\", ctx.showingPreview ? \"block\" : \"none\");\n            i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(52, _c1, ctx.showingPreview));\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.preview);\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.preview);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length > 0);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"disabled\", ctx.loading.autoAssign || !ctx.assignPreviewTasks || ctx.assignPreviewTasks.length === 0 || !ctx.hasAssignmentSuggestions());\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.autoAssign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.autoAssign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.showingPreview);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.showTaskPopup);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.showMemberModal);\n          }\n        },\n        dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.CheckboxControlValueAccessor, i4.RadioControlValueAccessor, i4.NgControlStatus, i4.NgModel],\n        styles: [\".card[_ngcontent-%COMP%]{border-radius:8px;box-shadow:0 2px 8px #0000001a;margin-bottom:20px}.nav-tabs[_ngcontent-%COMP%]{border-bottom:1px solid #dee2e6}.nav-tabs[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%]{border:none;color:#495057;font-weight:500;padding:10px 16px;margin-right:4px;border-radius:4px 4px 0 0;transition:all .2s ease}.nav-tabs[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%]:hover{background-color:#0d6efd0d;border-color:transparent}.nav-tabs[_ngcontent-%COMP%]   .nav-link.active[_ngcontent-%COMP%]{color:#0d6efd;background-color:#fff;border-bottom:3px solid #0d6efd;font-weight:600}.tab-content[_ngcontent-%COMP%]{padding:20px 0}.card-header[_ngcontent-%COMP%]{background-color:#f8f9fa;border-bottom:1px solid rgba(0,0,0,.125);padding:12px 16px}.table[_ngcontent-%COMP%]{margin-bottom:0}.table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{font-weight:600;color:#495057}.suggestion-box[_ngcontent-%COMP%]{background-color:#0d6efd0d;padding:3px 6px;border-radius:4px;border-left:2px solid #0d6efd;font-size:.8rem}.team-member-card[_ngcontent-%COMP%]{transition:all .3s ease;border-radius:8px;box-shadow:0 2px 5px #0000001a}.team-member-card[_ngcontent-%COMP%]:hover{transform:translateY(-5px);box-shadow:0 5px 15px #0000001a}.team-member-card[_ngcontent-%COMP%]   .card-title[_ngcontent-%COMP%]{font-weight:600;margin-bottom:.5rem}.workload-indicator[_ngcontent-%COMP%]{position:relative;height:24px;border-radius:12px;background-color:#f0f0f0;overflow:hidden;margin-top:10px}.workload-bar[_ngcontent-%COMP%]{position:absolute;top:0;left:0;height:100%;z-index:1}.workload-label[_ngcontent-%COMP%]{position:relative;z-index:2;display:block;text-align:center;line-height:24px;font-size:.8rem;font-weight:500;color:#333}.low-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%]{background-color:#28a745}.medium-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%]{background-color:#ffc107}.high-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%]{background-color:#dc3545}.workload-stats[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:flex-start;margin-bottom:.5rem}.workload-stats[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%]{font-size:.8rem;padding:5px 10px}.progress[_ngcontent-%COMP%]{height:8px;background-color:#f0f0f0}.modal-backdrop[_ngcontent-%COMP%]{opacity:.5}.modal-content[_ngcontent-%COMP%]{border-radius:8px;box-shadow:0 5px 15px #0000001a}#teamMemberSelect[_ngcontent-%COMP%]{max-height:300px;width:100%}#teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]{padding:8px 12px;cursor:pointer}#teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]:hover, #teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]:focus{background-color:#e9ecef}select.form-select[_ngcontent-%COMP%]{height:auto!important}select.form-select[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]{display:block;font-size:16px;line-height:1.5;padding:8px 12px}@keyframes _ngcontent-%COMP%_pulse{0%{box-shadow:0 0 #0d6efd66}70%{box-shadow:0 0 0 10px #0d6efd00}to{box-shadow:0 0 #0d6efd00}}.team-member-options[_ngcontent-%COMP%]{max-height:300px;overflow-y:auto}.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]{transition:all .2s ease;cursor:pointer;border:1px solid #dee2e6!important}.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]:hover{background-color:#f8f9fa;transform:translateY(-2px);box-shadow:0 2px 5px #0000001a}.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]{cursor:pointer}.team-member-options[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%]{cursor:pointer;padding:4px 0}.team-member-options[_ngcontent-%COMP%]   .member-name[_ngcontent-%COMP%]{font-weight:500}.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]:checked + .form-check-label[_ngcontent-%COMP%]{color:#0d6efd}.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]:checked + .form-check-label[_ngcontent-%COMP%]   .member-name[_ngcontent-%COMP%]{font-weight:600}.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]:has(.form-check-input:checked){background-color:#0d6efd0d;border-color:#0d6efd!important}.search-section[_ngcontent-%COMP%]{display:flex;align-items:center;gap:12px;flex-wrap:nowrap;margin-bottom:1rem}.input-group-container[_ngcontent-%COMP%]{display:flex;align-items:center;background-color:#ccebff;border:1px solid #A8D8F0;border-radius:4px;padding:8px 12px;gap:12px;flex-grow:1;color:#333}.input-group-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::placeholder{color:#6c757d}.input-group-container[_ngcontent-%COMP%]   small.text-muted[_ngcontent-%COMP%]{color:#6c757d!important}.input-group-container[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]{background-color:#fff;border-color:#a8d8f0}.input-group-container[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%]{color:#333}.input-group-container[_ngcontent-%COMP%]   .search-btn[_ngcontent-%COMP%]{background-color:#0d6efd;color:#fff;border:none;font-weight:500}.input-group-container[_ngcontent-%COMP%]   .search-btn[_ngcontent-%COMP%]:hover{background-color:#0b5ed7;color:#fff}.search-input[_ngcontent-%COMP%]{min-width:180px;margin-bottom:0}.search-input[_ngcontent-%COMP%]   input[disabled][_ngcontent-%COMP%]{background-color:#e9ecef;opacity:.65}.filter-checkbox[_ngcontent-%COMP%]{display:flex;align-items:center;white-space:nowrap;margin-right:8px}.filter-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{transform:scale(1.2);margin-right:6px;cursor:pointer}.filter-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked{background-color:#0d6efd;border-color:#0d6efd}.filter-checkbox[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%]{font-size:14px;cursor:pointer}.action-buttons[_ngcontent-%COMP%]{display:flex;gap:8px;white-space:nowrap}.search-btn[_ngcontent-%COMP%], .auto-assign-btn[_ngcontent-%COMP%]{white-space:nowrap}@media (max-width: 1200px){.search-section[_ngcontent-%COMP%]{flex-wrap:wrap}.input-group-container[_ngcontent-%COMP%]{width:100%;margin-bottom:10px}.action-buttons[_ngcontent-%COMP%]{margin-left:auto}}@media (max-width: 992px){.input-group-container[_ngcontent-%COMP%]{flex-wrap:wrap}.filter-checkbox[_ngcontent-%COMP%]{width:100%;margin-bottom:8px}.search-input[_ngcontent-%COMP%]{min-width:160px}.action-buttons[_ngcontent-%COMP%]{display:flex;gap:8px;margin-left:0;width:100%}.search-btn[_ngcontent-%COMP%], .auto-assign-btn[_ngcontent-%COMP%]{flex:1}}@media (max-width: 768px){.search-section[_ngcontent-%COMP%]{flex-direction:column;align-items:stretch}.search-input[_ngcontent-%COMP%]{width:100%}}.team-input[_ngcontent-%COMP%]{margin-left:8px}.filter-checkbox[_ngcontent-%COMP%]:hover   .form-check-input[_ngcontent-%COMP%]{border-color:#0d6efd}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge[_ngcontent-%COMP%]{padding:.5em .85em;border-radius:30px;font-size:.8rem;font-weight:500;display:inline-block;text-align:center;min-width:100px;border:none}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-dev-new[_ngcontent-%COMP%]{background-color:#1976d2!important;color:#fff!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-dev-complete[_ngcontent-%COMP%]{background-color:#4caf50!important;color:#fff!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-planned[_ngcontent-%COMP%]{background-color:#ff9800!important;color:#fff!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-proposed[_ngcontent-%COMP%]{background-color:#9e9e9e!important;color:#fff!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-resolved[_ngcontent-%COMP%]{background-color:#009688!important;color:#fff!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-code-review[_ngcontent-%COMP%]{background-color:#9c27b0!important;color:#fff!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-in-progress[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-dev-in-progress[_ngcontent-%COMP%]{background-color:#00bcd4!important;color:#fff!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-active[_ngcontent-%COMP%]{background-color:#ffc107!important;color:#000!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-blocked[_ngcontent-%COMP%]{background-color:#f44336!important;color:#fff!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-completed[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-done[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-closed[_ngcontent-%COMP%]{background-color:#4caf50!important;color:#fff!important}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-to-do[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .status-badge.status-new[_ngcontent-%COMP%]{background-color:#9e9e9e!important;color:#fff!important}.task-id-link[_ngcontent-%COMP%]{color:#0078d4;text-decoration:none;font-weight:600}.task-id-link[_ngcontent-%COMP%]:hover{text-decoration:underline;color:#005a9e}.task-id-link[_ngcontent-%COMP%]:focus{outline:none;text-decoration:underline}.task-popup[_ngcontent-%COMP%]{position:absolute;background-color:#fff;border-radius:8px;box-shadow:0 5px 20px #0003;width:400px;max-width:90vw;z-index:1050;overflow:hidden;animation:_ngcontent-%COMP%_fadeIn .2s ease-in-out}.task-popup-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;padding:12px 16px;background-color:#f8f9fa;border-bottom:1px solid #dee2e6}.task-popup-header[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%]{margin:0;font-size:1rem;font-weight:600;color:#333}.task-popup-body[_ngcontent-%COMP%]{padding:16px;max-height:300px;overflow-y:auto}.task-list[_ngcontent-%COMP%]{list-style:none;padding:0;margin:0}.task-item[_ngcontent-%COMP%]{padding:8px 12px;border-bottom:1px solid #eee;margin-bottom:8px}.task-item[_ngcontent-%COMP%]:last-child{border-bottom:none;margin-bottom:0}.task-item[_ngcontent-%COMP%]:hover{background-color:#f8f9fa}.task-item[_ngcontent-%COMP%]   .task-id-link[_ngcontent-%COMP%]{font-weight:600}.member-name-link[_ngcontent-%COMP%]{color:#0078d4;text-decoration:none;cursor:pointer;transition:all .2s ease}.member-name-link[_ngcontent-%COMP%]:hover, .member-name-link[_ngcontent-%COMP%]:focus{color:#005a9e;text-decoration:underline}.member-name-link[_ngcontent-%COMP%]:focus{outline:2px solid #0078d4;outline-offset:2px}.member-modal-backdrop[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%;background-color:#00000080;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px);z-index:1060;display:flex;align-items:center;justify-content:center;animation:_ngcontent-%COMP%_fadeIn .2s ease-in-out}.member-modal[_ngcontent-%COMP%]{width:90%;max-width:700px;max-height:90vh;background-color:#fff;border-radius:.5rem;box-shadow:0 20px 25px -5px #0000001a,0 10px 10px -5px #0000000a;overflow:hidden;display:flex;flex-direction:column;animation:_ngcontent-%COMP%_slideIn .3s ease-in-out;position:relative}.member-modal-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;padding:1rem 1.5rem;background-color:#f8f9fa;border-bottom:1px solid #e2e8f0}.member-modal-title[_ngcontent-%COMP%]{font-size:1.25rem;font-weight:600;color:#1a202c;margin:0}.member-modal-close[_ngcontent-%COMP%]{background:transparent;border:none;cursor:pointer;padding:.5rem;border-radius:.375rem;transition:all .2s}.member-modal-close[_ngcontent-%COMP%]:hover{background-color:#f1f5f9}.member-modal-close[_ngcontent-%COMP%]:focus{outline:2px solid #3b82f6;outline-offset:2px}.member-modal-content[_ngcontent-%COMP%]{padding:1.5rem;overflow-y:auto;flex:1}.member-modal-loading[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:2rem}.member-modal-loading[_ngcontent-%COMP%]   .spinner[_ngcontent-%COMP%]{width:2.5rem;height:2.5rem;border:3px solid #e2e8f0;border-top-color:#3b82f6;border-radius:50%;animation:_ngcontent-%COMP%_spin 1s linear infinite}.member-modal-loading[_ngcontent-%COMP%]   .loading-text[_ngcontent-%COMP%]{margin-top:1rem;color:#4b5563}.member-modal-error[_ngcontent-%COMP%]{background-color:#fee2e2;border-left:4px solid #ef4444;color:#b91c1c;padding:1rem;border-radius:.375rem;margin-bottom:1rem}.member-task-list[_ngcontent-%COMP%]{list-style:none;padding:0;margin:0}.member-task-list[_ngcontent-%COMP%]   .task-item[_ngcontent-%COMP%]{padding:1rem;border-radius:.375rem;margin-bottom:.75rem;background-color:#f8fafc;border-left:4px solid #e2e8f0;transition:all .2s}.member-task-list[_ngcontent-%COMP%]   .task-item[_ngcontent-%COMP%]:hover{background-color:#f1f5f9;transform:translateY(-2px);box-shadow:0 4px 6px -1px #0000001a}.member-task-list[_ngcontent-%COMP%]   .task-item[_ngcontent-%COMP%]   .task-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:.5rem}.member-task-list[_ngcontent-%COMP%]   .task-item[_ngcontent-%COMP%]   .task-title[_ngcontent-%COMP%]{font-weight:600;color:#1e293b;margin-top:.5rem}.member-task-list[_ngcontent-%COMP%]   .task-item[_ngcontent-%COMP%]   .task-id[_ngcontent-%COMP%]{font-family:monospace;font-weight:600;color:#0078d4;text-decoration:none}.member-task-list[_ngcontent-%COMP%]   .task-item[_ngcontent-%COMP%]   .task-id[_ngcontent-%COMP%]:hover{text-decoration:underline}.member-task-list[_ngcontent-%COMP%]   .task-item[_ngcontent-%COMP%]   .task-status[_ngcontent-%COMP%]{display:inline-flex;align-items:center;padding:.25rem .75rem;border-radius:9999px;font-size:.75rem;font-weight:500}.member-modal-footer[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;padding:1rem 1.5rem;background-color:#f8f9fa;border-top:1px solid #e2e8f0}.member-modal-btn[_ngcontent-%COMP%]{padding:.5rem 1rem;border-radius:.375rem;font-weight:500;cursor:pointer;transition:all .2s}.member-modal-btn.primary[_ngcontent-%COMP%]{background-color:#3b82f6;color:#fff;border:none}.member-modal-btn.primary[_ngcontent-%COMP%]:hover{background-color:#2563eb}.member-modal-btn.primary[_ngcontent-%COMP%]:focus{outline:2px solid #3b82f6;outline-offset:2px}@keyframes _ngcontent-%COMP%_fadeIn{0%{opacity:0;transform:translateY(-10px)}to{opacity:1;transform:translateY(0)}}@keyframes _ngcontent-%COMP%_slideIn{0%{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}@keyframes _ngcontent-%COMP%_spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\"]\n      });\n    }\n  }\n  return TaskDistributionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}