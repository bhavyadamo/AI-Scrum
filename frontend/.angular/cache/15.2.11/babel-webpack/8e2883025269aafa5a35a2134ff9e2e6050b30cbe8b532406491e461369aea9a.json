{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError, of, switchMap } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AzureDevOpsService {\n  constructor(http) {\n    this.http = http;\n    // Use our backend API as a proxy\n    this.apiUrl = `${environment.apiUrl}/azure`;\n    this.azureDevOpsUrl = environment.azureDevOpsUrl;\n    this.organization = environment.organization;\n    this.project = environment.project;\n  }\n  /**\r\n   * Fetch work items for a specific iteration path using our backend proxy\r\n   * @param iterationPath The iteration path to filter by\r\n   * @returns Observable with work items data\r\n   */\n  getWorkItemsByIteration(iterationPath) {\n    // Use our backend proxy endpoint that will handle Azure DevOps auth\n    const url = `${this.apiUrl}/work-items`;\n    // Use URL parameters to pass the iteration path\n    let params = new HttpParams().set('iterationPath', iterationPath);\n    return this.http.get(url, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error fetching work items by iteration:', error);\n      return throwError(() => new Error('Failed to fetch work items. Please try again.'));\n    }));\n  }\n  /**\r\n   * Get work item counts by status from our backend\r\n   * @param iterationPath The iteration path to filter by\r\n   * @returns Observable with counts by status\r\n   */\n  getWorkItemStatusCounts(iterationPath) {\n    const url = `${this.apiUrl}/work-item-counts`;\n    // Use URL parameters to pass the iteration path\n    let params = new HttpParams().set('iterationPath', iterationPath);\n    return this.http.get(url, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error fetching work item counts:', error);\n      // Return a default object with zeroes to avoid UI breaking\n      return of({\n        totalTasks: 0,\n        devNew: 0,\n        inProgress: 0,\n        codeReview: 0,\n        devComplete: 0,\n        completed: 0,\n        blocked: 0\n      });\n    }));\n  }\n  /**\r\n   * Process work items to get counts by status - use this as a fallback\r\n   * if the backend endpoint is not yet implemented\r\n   * @param workItems The work items data\r\n   * @returns Object with counts by status\r\n   */\n  getWorkItemCounts(workItems) {\n    const counts = {\n      totalTasks: workItems.length,\n      devNew: 0,\n      inProgress: 0,\n      codeReview: 0,\n      devComplete: 0,\n      completed: 0,\n      blocked: 0\n    };\n    workItems.forEach(item => {\n      const state = item.fields ? item.fields['System.State'] : item.state;\n      // Increment appropriate counter based on state - match the states from the screenshot\n      if (state === 'Dev-New' || state === 'CS-New' || state === 'New') {\n        counts.devNew++;\n      } else if (state === 'Dev In progress' || state === 'Dev-WIP' || state === 'In Progress' || state === 'Active') {\n        counts.inProgress++;\n      } else if (state === 'Code Review' || state === 'Dev-Code Review') {\n        counts.codeReview++;\n      } else if (state === 'Dev Complete' || state === 'Dev-Done' || state === 'Dev-Complete') {\n        counts.devComplete++;\n      } else if (state === 'Completed' || state === 'Closed' || state === 'Done' || state === 'Moved to Production') {\n        counts.completed++;\n      } else if (state === 'Blocked' || state === 'Impediment' || state === 'Awaiting Clarification') {\n        counts.blocked++;\n      }\n    });\n    return counts;\n  }\n  /**\r\n   * Fetch work items using the WIQL API for a specific iteration\r\n   * @param iterationPath The iteration path to filter by (e.g. 'Techoil\\2.3.23')\r\n   * @returns Observable with dashboard statistics including counts by status and assignee\r\n   */\n  getWorkItemsByWiql(iterationPath) {\n    // Direct call to Azure DevOps WIQL API\n    const url = `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_apis/wit/wiql?api-version=7.0`;\n    // WIQL query to filter by iteration path and work item type\n    const wiqlQuery = {\n      query: `SELECT [System.Id], [System.WorkItemType], [System.Title], [System.State], [System.AssignedTo], [System.Tags] \n              FROM WorkItems \n              WHERE [System.IterationPath] = '${iterationPath}' \n              AND [System.WorkItemType] = 'Task'`\n    };\n    // First get the work item IDs from the WIQL query\n    return this.http.post(url, wiqlQuery).pipe(switchMap(result => {\n      // If no work items found, return empty stats\n      if (!result.workItems || result.workItems.length === 0) {\n        return of({\n          totalTasks: 0,\n          devNew: 0,\n          inProgress: 0,\n          codeReview: 0,\n          devComplete: 0,\n          completed: 0,\n          blocked: 0,\n          statsByAssignee: {}\n        });\n      }\n      // Extract work item IDs\n      const ids = result.workItems.map(item => item.id);\n      // Batch GET the work items to get full details including fields\n      const batchUrl = `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_apis/wit/workitems?ids=${ids.join(',')}&fields=System.Id,System.WorkItemType,System.Title,System.State,System.AssignedTo,System.Tags&api-version=7.0`;\n      // Get full work item details\n      return this.http.get(batchUrl).pipe(map(workItemsResult => {\n        // Map work items to a more usable format with state directly accessible\n        const workItems = workItemsResult.value.map(item => {\n          return {\n            id: item.id,\n            title: item.fields['System.Title'] || '',\n            state: item.fields['System.State'] || 'Unknown',\n            assignedTo: item.fields['System.AssignedTo'] ? item.fields['System.AssignedTo'].displayName : 'Unassigned',\n            tags: item.fields['System.Tags'] || '',\n            type: item.fields['System.WorkItemType'] || 'Task',\n            // Keep original fields for reference\n            fields: item.fields\n          };\n        });\n        // Process work items to get counts by status\n        const counts = this.getWorkItemCounts(workItems);\n        // Process work items to get counts by assignee\n        const statsByAssignee = {};\n        workItems.forEach(item => {\n          const state = item.state;\n          const assignee = item.assignedTo || 'Unassigned';\n          // Initialize assignee object if it doesn't exist\n          if (!statsByAssignee[assignee]) {\n            statsByAssignee[assignee] = {\n              total: 0,\n              devNew: 0,\n              inProgress: 0,\n              codeReview: 0,\n              devComplete: 0,\n              completed: 0,\n              blocked: 0\n            };\n          }\n          // Increment total count for this assignee\n          statsByAssignee[assignee].total++;\n          // Increment appropriate state counter for this assignee\n          if (state === 'Dev-New' || state === 'CS-New' || state === 'New') {\n            statsByAssignee[assignee].devNew++;\n          } else if (state === 'Dev In progress' || state === 'Dev-WIP' || state === 'In Progress' || state === 'Active') {\n            statsByAssignee[assignee].inProgress++;\n          } else if (state === 'Code Review' || state === 'Dev-Code Review') {\n            statsByAssignee[assignee].codeReview++;\n          } else if (state === 'Dev Complete' || state === 'Dev-Done' || state === 'Dev-Complete') {\n            statsByAssignee[assignee].devComplete++;\n          } else if (state === 'Completed' || state === 'Closed' || state === 'Done' || state === 'Moved to Production') {\n            statsByAssignee[assignee].completed++;\n          } else if (state === 'Blocked' || state === 'Impediment' || state === 'Awaiting Clarification') {\n            statsByAssignee[assignee].blocked++;\n          }\n        });\n        // Return combined statistics\n        return {\n          ...counts,\n          workItems,\n          statsByAssignee\n        };\n      }));\n    }), catchError(error => {\n      console.error('Error fetching work items with WIQL:', error);\n      return of({\n        totalTasks: 0,\n        devNew: 0,\n        inProgress: 0,\n        codeReview: 0,\n        devComplete: 0,\n        completed: 0,\n        blocked: 0,\n        statsByAssignee: {}\n      });\n    }));\n  }\n  static {\n    this.ɵfac = function AzureDevOpsService_Factory(t) {\n      return new (t || AzureDevOpsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AzureDevOpsService,\n      factory: AzureDevOpsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpParams","throwError","of","switchMap","catchError","map","environment","AzureDevOpsService","constructor","http","apiUrl","azureDevOpsUrl","organization","project","getWorkItemsByIteration","iterationPath","url","params","set","get","pipe","error","console","Error","getWorkItemStatusCounts","totalTasks","devNew","inProgress","codeReview","devComplete","completed","blocked","getWorkItemCounts","workItems","counts","length","forEach","item","state","fields","getWorkItemsByWiql","wiqlQuery","query","post","result","statsByAssignee","ids","id","batchUrl","join","workItemsResult","value","title","assignedTo","displayName","tags","type","assignee","total","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\azure-devops.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, throwError, of, switchMap } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\nexport interface WorkItem {\n  id: number;\n  fields: {\n    'System.State': string;\n    'System.AssignedTo'?: {\n      displayName: string;\n      uniqueName: string;\n    };\n    'System.Tags'?: string;\n    'System.Title'?: string;\n    'System.WorkItemType'?: string;\n    [key: string]: any; // Allow additional field access to avoid TypeScript errors\n  };\n}\n\n// Custom interface for processed work items\nexport interface ProcessedWorkItem {\n  id: number;\n  title: string;\n  state: string;\n  assignedTo: string;\n  tags: string;\n  type: string;\n  fields: any;\n}\n\nexport interface WorkItemQueryResult {\n  workItems: { id: number }[];\n  columns?: any[];\n  workItemRelations?: any[];\n}\n\nexport interface DashboardStats {\n  totalTasks: number;\n  devNew: number;\n  inProgress: number;\n  codeReview: number;\n  devComplete: number;\n  completed: number;\n  blocked: number;\n  workItems?: ProcessedWorkItem[];\n  statsByAssignee?: { [key: string]: any };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AzureDevOpsService {\n  // Use our backend API as a proxy\n  private apiUrl = `${environment.apiUrl}/azure`;\n  private azureDevOpsUrl = environment.azureDevOpsUrl;\n  private organization = environment.organization;\n  private project = environment.project;\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Fetch work items for a specific iteration path using our backend proxy\n   * @param iterationPath The iteration path to filter by\n   * @returns Observable with work items data\n   */\n  getWorkItemsByIteration(iterationPath: string): Observable<any> {\n    // Use our backend proxy endpoint that will handle Azure DevOps auth\n    const url = `${this.apiUrl}/work-items`;\n    \n    // Use URL parameters to pass the iteration path\n    let params = new HttpParams().set('iterationPath', iterationPath);\n    \n    return this.http.get(url, { params }).pipe(\n      catchError(error => {\n        console.error('Error fetching work items by iteration:', error);\n        return throwError(() => new Error('Failed to fetch work items. Please try again.'));\n      })\n    );\n  }\n\n  /**\n   * Get work item counts by status from our backend\n   * @param iterationPath The iteration path to filter by\n   * @returns Observable with counts by status\n   */\n  getWorkItemStatusCounts(iterationPath: string): Observable<any> {\n    const url = `${this.apiUrl}/work-item-counts`;\n    \n    // Use URL parameters to pass the iteration path\n    let params = new HttpParams().set('iterationPath', iterationPath);\n    \n    return this.http.get(url, { params }).pipe(\n      catchError(error => {\n        console.error('Error fetching work item counts:', error);\n        // Return a default object with zeroes to avoid UI breaking\n        return of({\n          totalTasks: 0,\n          devNew: 0,\n          inProgress: 0,\n          codeReview: 0,\n          devComplete: 0,\n          completed: 0,\n          blocked: 0\n        });\n      })\n    );\n  }\n\n  /**\n   * Process work items to get counts by status - use this as a fallback\n   * if the backend endpoint is not yet implemented\n   * @param workItems The work items data\n   * @returns Object with counts by status\n   */\n  getWorkItemCounts(workItems: any[]): any {\n    const counts = {\n      totalTasks: workItems.length,\n      devNew: 0,\n      inProgress: 0,\n      codeReview: 0,\n      devComplete: 0,\n      completed: 0,\n      blocked: 0\n    };\n\n    workItems.forEach(item => {\n      const state = item.fields ? item.fields['System.State'] : item.state;\n      \n      // Increment appropriate counter based on state - match the states from the screenshot\n      if (state === 'Dev-New' || state === 'CS-New' || state === 'New') {\n        counts.devNew++;\n      } else if (state === 'Dev In progress' || state === 'Dev-WIP' || state === 'In Progress' || state === 'Active') {\n        counts.inProgress++;\n      } else if (state === 'Code Review' || state === 'Dev-Code Review') {\n        counts.codeReview++;\n      } else if (state === 'Dev Complete' || state === 'Dev-Done' || state === 'Dev-Complete') {\n        counts.devComplete++;\n      } else if (state === 'Completed' || state === 'Closed' || state === 'Done' || state === 'Moved to Production') {\n        counts.completed++;\n      } else if (state === 'Blocked' || state === 'Impediment' || state === 'Awaiting Clarification') {\n        counts.blocked++;\n      }\n    });\n\n    return counts;\n  }\n\n  /**\n   * Fetch work items using the WIQL API for a specific iteration\n   * @param iterationPath The iteration path to filter by (e.g. 'Techoil\\2.3.23')\n   * @returns Observable with dashboard statistics including counts by status and assignee\n   */\n  getWorkItemsByWiql(iterationPath: string): Observable<DashboardStats> {\n    // Direct call to Azure DevOps WIQL API\n    const url = `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_apis/wit/wiql?api-version=7.0`;\n    \n    // WIQL query to filter by iteration path and work item type\n    const wiqlQuery = {\n      query: `SELECT [System.Id], [System.WorkItemType], [System.Title], [System.State], [System.AssignedTo], [System.Tags] \n              FROM WorkItems \n              WHERE [System.IterationPath] = '${iterationPath}' \n              AND [System.WorkItemType] = 'Task'`\n    };\n\n    // First get the work item IDs from the WIQL query\n    return this.http.post<WorkItemQueryResult>(url, wiqlQuery).pipe(\n      switchMap(result => {\n        // If no work items found, return empty stats\n        if (!result.workItems || result.workItems.length === 0) {\n          return of({\n            totalTasks: 0,\n            devNew: 0,\n            inProgress: 0,\n            codeReview: 0,\n            devComplete: 0,\n            completed: 0,\n            blocked: 0,\n            statsByAssignee: {}\n          });\n        }\n        \n        // Extract work item IDs\n        const ids = result.workItems.map(item => item.id);\n        \n        // Batch GET the work items to get full details including fields\n        const batchUrl = `${this.azureDevOpsUrl}/${this.organization}/${this.project}/_apis/wit/workitems?ids=${ids.join(',')}&fields=System.Id,System.WorkItemType,System.Title,System.State,System.AssignedTo,System.Tags&api-version=7.0`;\n        \n        // Get full work item details\n        return this.http.get<{ value: WorkItem[] }>(batchUrl).pipe(\n          map(workItemsResult => {\n            // Map work items to a more usable format with state directly accessible\n            const workItems: ProcessedWorkItem[] = workItemsResult.value.map(item => {\n              return {\n                id: item.id,\n                title: item.fields['System.Title'] || '',\n                state: item.fields['System.State'] || 'Unknown',\n                assignedTo: item.fields['System.AssignedTo'] ? \n                            item.fields['System.AssignedTo'].displayName : 'Unassigned',\n                tags: item.fields['System.Tags'] || '',\n                type: item.fields['System.WorkItemType'] || 'Task',\n                // Keep original fields for reference\n                fields: item.fields\n              };\n            });\n            \n            // Process work items to get counts by status\n            const counts = this.getWorkItemCounts(workItems);\n            \n            // Process work items to get counts by assignee\n            const statsByAssignee: { [key: string]: any } = {};\n            \n            workItems.forEach(item => {\n              const state = item.state;\n              const assignee = item.assignedTo || 'Unassigned';\n              \n              // Initialize assignee object if it doesn't exist\n              if (!statsByAssignee[assignee]) {\n                statsByAssignee[assignee] = {\n                  total: 0,\n                  devNew: 0,\n                  inProgress: 0,\n                  codeReview: 0,\n                  devComplete: 0,\n                  completed: 0,\n                  blocked: 0\n                };\n              }\n              \n              // Increment total count for this assignee\n              statsByAssignee[assignee].total++;\n              \n              // Increment appropriate state counter for this assignee\n              if (state === 'Dev-New' || state === 'CS-New' || state === 'New') {\n                statsByAssignee[assignee].devNew++;\n              } else if (state === 'Dev In progress' || state === 'Dev-WIP' || state === 'In Progress' || state === 'Active') {\n                statsByAssignee[assignee].inProgress++;\n              } else if (state === 'Code Review' || state === 'Dev-Code Review') {\n                statsByAssignee[assignee].codeReview++;\n              } else if (state === 'Dev Complete' || state === 'Dev-Done' || state === 'Dev-Complete') {\n                statsByAssignee[assignee].devComplete++;\n              } else if (state === 'Completed' || state === 'Closed' || state === 'Done' || state === 'Moved to Production') {\n                statsByAssignee[assignee].completed++;\n              } else if (state === 'Blocked' || state === 'Impediment' || state === 'Awaiting Clarification') {\n                statsByAssignee[assignee].blocked++;\n              }\n            });\n            \n            // Return combined statistics\n            return {\n              ...counts,\n              workItems,\n              statsByAssignee\n            };\n          })\n        );\n      }),\n      catchError(error => {\n        console.error('Error fetching work items with WIQL:', error);\n        return of({\n          totalTasks: 0,\n          devNew: 0,\n          inProgress: 0,\n          codeReview: 0,\n          devComplete: 0,\n          completed: 0,\n          blocked: 0,\n          statsByAssignee: {}\n        });\n      })\n    );\n  }\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}