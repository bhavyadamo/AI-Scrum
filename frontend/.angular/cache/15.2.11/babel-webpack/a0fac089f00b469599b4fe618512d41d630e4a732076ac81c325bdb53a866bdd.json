{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { UserRole } from '../models/settings.model';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    // For demo purposes, we'll use a mock user\n    this.currentUserSubject = new BehaviorSubject({\n      id: 'current-user',\n      name: 'Demo User',\n      email: 'demo@example.com',\n      role: UserRole.Admin // Set as Admin for demo purposes\n    });\n\n    this.currentUser$ = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  isAuthenticated() {\n    return !!this.currentUserSubject.value;\n  }\n  hasRole(role) {\n    const user = this.currentUserSubject.value;\n    if (!user) return false;\n    return user.role === role;\n  }\n  isAdmin() {\n    return this.hasRole(UserRole.Admin);\n  }\n  isScrumMaster() {\n    return this.hasRole(UserRole.ScrumMaster);\n  }\n  isMember() {\n    return this.hasRole(UserRole.Member);\n  }\n  canEditUserRoles() {\n    return this.isAdmin();\n  }\n  canViewUserRoles() {\n    return this.isAdmin() || this.isScrumMaster();\n  }\n  canEditAzureDevOpsPat() {\n    return this.isAdmin();\n  }\n  canViewAzureDevOpsPat() {\n    return this.isAdmin() || this.isScrumMaster();\n  }\n  canEditAiModelSettings() {\n    return this.isAdmin() || this.isScrumMaster();\n  }\n  canViewAiModelSettings() {\n    return true; // All roles can view\n  }\n  // For demo purposes, this method allows changing the current user's role\n  changeUserRole(role) {\n    const user = this.currentUserSubject.value;\n    if (user) {\n      user.role = role;\n      this.currentUserSubject.next(user);\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,QAAQ,QAAQ,0BAA0B;;AAanD,OAAM,MAAOC,WAAW;EAWtBC;IAVA;IACQ,uBAAkB,GAAG,IAAIH,eAAe,CAAqB;MACnEI,EAAE,EAAE,cAAc;MAClBC,IAAI,EAAE,WAAW;MACjBC,KAAK,EAAE,kBAAkB;MACzBC,IAAI,EAAEN,QAAQ,CAACO,KAAK,CAAE;KACvB,CAAC;;IAEK,iBAAY,GAAmC,IAAI,CAACC,kBAAkB,CAACC,YAAY,EAAE;EAE5E;EAEhB,IAAWC,gBAAgB;IACzB,OAAO,IAAI,CAACF,kBAAkB,CAACG,KAAK;EACtC;EAEOC,eAAe;IACpB,OAAO,CAAC,CAAC,IAAI,CAACJ,kBAAkB,CAACG,KAAK;EACxC;EAEOE,OAAO,CAACP,IAAc;IAC3B,MAAMQ,IAAI,GAAG,IAAI,CAACN,kBAAkB,CAACG,KAAK;IAC1C,IAAI,CAACG,IAAI,EAAE,OAAO,KAAK;IAEvB,OAAOA,IAAI,CAACR,IAAI,KAAKA,IAAI;EAC3B;EAEOS,OAAO;IACZ,OAAO,IAAI,CAACF,OAAO,CAACb,QAAQ,CAACO,KAAK,CAAC;EACrC;EAEOS,aAAa;IAClB,OAAO,IAAI,CAACH,OAAO,CAACb,QAAQ,CAACiB,WAAW,CAAC;EAC3C;EAEOC,QAAQ;IACb,OAAO,IAAI,CAACL,OAAO,CAACb,QAAQ,CAACmB,MAAM,CAAC;EACtC;EAEOC,gBAAgB;IACrB,OAAO,IAAI,CAACL,OAAO,EAAE;EACvB;EAEOM,gBAAgB;IACrB,OAAO,IAAI,CAACN,OAAO,EAAE,IAAI,IAAI,CAACC,aAAa,EAAE;EAC/C;EAEOM,qBAAqB;IAC1B,OAAO,IAAI,CAACP,OAAO,EAAE;EACvB;EAEOQ,qBAAqB;IAC1B,OAAO,IAAI,CAACR,OAAO,EAAE,IAAI,IAAI,CAACC,aAAa,EAAE;EAC/C;EAEOQ,sBAAsB;IAC3B,OAAO,IAAI,CAACT,OAAO,EAAE,IAAI,IAAI,CAACC,aAAa,EAAE;EAC/C;EAEOS,sBAAsB;IAC3B,OAAO,IAAI,CAAC,CAAC;EACf;EAEA;EACOC,cAAc,CAACpB,IAAc;IAClC,MAAMQ,IAAI,GAAG,IAAI,CAACN,kBAAkB,CAACG,KAAK;IAC1C,IAAIG,IAAI,EAAE;MACRA,IAAI,CAACR,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACE,kBAAkB,CAACmB,IAAI,CAACb,IAAI,CAAC;;EAEtC;;;uBAvEWb,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA2B,SAAX3B,WAAW;MAAA4B,YAFV;IAAM;EAAA","names":["BehaviorSubject","UserRole","AuthService","constructor","id","name","email","role","Admin","currentUserSubject","asObservable","currentUserValue","value","isAuthenticated","hasRole","user","isAdmin","isScrumMaster","ScrumMaster","isMember","Member","canEditUserRoles","canViewUserRoles","canEditAzureDevOpsPat","canViewAzureDevOpsPat","canEditAiModelSettings","canViewAiModelSettings","changeUserRole","next","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { UserRole } from '../models/settings.model';\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: UserRole;\r\n  token?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  // For demo purposes, we'll use a mock user\r\n  private currentUserSubject = new BehaviorSubject<UserProfile | null>({\r\n    id: 'current-user',\r\n    name: 'Demo User',\r\n    email: 'demo@example.com',\r\n    role: UserRole.Admin, // Set as Admin for demo purposes\r\n  });\r\n\r\n  public currentUser$: Observable<UserProfile | null> = this.currentUserSubject.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  public get currentUserValue(): UserProfile | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  public isAuthenticated(): boolean {\r\n    return !!this.currentUserSubject.value;\r\n  }\r\n\r\n  public hasRole(role: UserRole): boolean {\r\n    const user = this.currentUserSubject.value;\r\n    if (!user) return false;\r\n    \r\n    return user.role === role;\r\n  }\r\n\r\n  public isAdmin(): boolean {\r\n    return this.hasRole(UserRole.Admin);\r\n  }\r\n\r\n  public isScrumMaster(): boolean {\r\n    return this.hasRole(UserRole.ScrumMaster);\r\n  }\r\n\r\n  public isMember(): boolean {\r\n    return this.hasRole(UserRole.Member);\r\n  }\r\n\r\n  public canEditUserRoles(): boolean {\r\n    return this.isAdmin();\r\n  }\r\n\r\n  public canViewUserRoles(): boolean {\r\n    return this.isAdmin() || this.isScrumMaster();\r\n  }\r\n\r\n  public canEditAzureDevOpsPat(): boolean {\r\n    return this.isAdmin();\r\n  }\r\n\r\n  public canViewAzureDevOpsPat(): boolean {\r\n    return this.isAdmin() || this.isScrumMaster();\r\n  }\r\n\r\n  public canEditAiModelSettings(): boolean {\r\n    return this.isAdmin() || this.isScrumMaster();\r\n  }\r\n\r\n  public canViewAiModelSettings(): boolean {\r\n    return true; // All roles can view\r\n  }\r\n\r\n  // For demo purposes, this method allows changing the current user's role\r\n  public changeUserRole(role: UserRole): void {\r\n    const user = this.currentUserSubject.value;\r\n    if (user) {\r\n      user.role = role;\r\n      this.currentUserSubject.next(user);\r\n    }\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}