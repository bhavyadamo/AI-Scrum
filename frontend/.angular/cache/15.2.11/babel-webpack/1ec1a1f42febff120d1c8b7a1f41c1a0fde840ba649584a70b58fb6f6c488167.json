{"ast":null,"code":"import { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/azure-dashboard.service\";\nconst _c0 = [\"statusChart\"];\nconst _c1 = [\"rootCauseChart\"];\nfunction AzureDashboardComponent_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const path_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", path_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(path_r4);\n  }\n}\nfunction AzureDashboardComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"div\", 18)(2, \"span\", 19);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 20);\n    i0.ɵɵtext(5, \"Fetching data from Azure DevOps...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AzureDashboardComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.error, \" \");\n  }\n}\nfunction AzureDashboardComponent_div_18_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 37)(1, \"div\", 38);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 39);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const status_r13 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"background-color\", status_r13.color);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(status_r13.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(status_r13.count);\n  }\n}\nfunction AzureDashboardComponent_div_18_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"p\", 40);\n    i0.ɵɵtext(2, \"No root cause data available\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AzureDashboardComponent_div_18_canvas_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"canvas\", null, 41);\n  }\n}\nfunction AzureDashboardComponent_div_18_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"p\", 40);\n    i0.ɵɵtext(2, \"No assignee data available\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AzureDashboardComponent_div_18_div_35_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const state_r18 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r16.getStatusColor(state_r18.state));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", state_r18.state, \": \", state_r18.count, \" \");\n  }\n}\nfunction AzureDashboardComponent_div_18_div_35_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"div\", 50);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const state_r19 = ctx.$implicit;\n    const assignee_r15 = i0.ɵɵnextContext().$implicit;\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r17.getStatusColor(state_r19.state))(\"width\", state_r19.count / assignee_r15.total * 100, \"%\");\n  }\n}\nfunction AzureDashboardComponent_div_18_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 42)(1, \"div\", 43)(2, \"h6\", 3);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 44);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 45);\n    i0.ɵɵtemplate(7, AzureDashboardComponent_div_18_div_35_div_7_Template, 2, 4, \"div\", 46);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 47);\n    i0.ɵɵtemplate(9, AzureDashboardComponent_div_18_div_35_ng_container_9_Template, 2, 4, \"ng-container\", 48);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const assignee_r15 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(assignee_r15.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", assignee_r15.total, \" items\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r10.getStatesForAssignee(assignee_r15));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r10.getStatesForAssignee(assignee_r15));\n  }\n}\nfunction AzureDashboardComponent_div_18_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"p\", 40);\n    i0.ɵɵtext(2, \"No root cause data available\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AzureDashboardComponent_div_18_table_43_tr_10_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const state_r24 = ctx.$implicit;\n    const ctx_r23 = i0.ɵɵnextContext(4);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r23.getStatusColor(state_r24.state));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", state_r24.state, \": \", state_r24.count, \" \");\n  }\n}\nfunction AzureDashboardComponent_div_18_table_43_tr_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"div\", 45);\n    i0.ɵɵtemplate(7, AzureDashboardComponent_div_18_table_43_tr_10_div_7_Template, 2, 4, \"div\", 46);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const rootCause_r22 = ctx.$implicit;\n    const ctx_r21 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rootCause_r22.rootCause);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rootCause_r22.count);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r21.getStatesForRootCause(rootCause_r22));\n  }\n}\nfunction AzureDashboardComponent_div_18_table_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 51)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Root Cause\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Count\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Status Distribution\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"tbody\");\n    i0.ɵɵtemplate(10, AzureDashboardComponent_div_18_table_43_tr_10_Template, 8, 3, \"tr\", 48);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r12.dashboardStats.rootCauseCounts);\n  }\n}\nfunction AzureDashboardComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"div\", 22)(3, \"h5\", 3);\n    i0.ɵɵtext(4, \"Summary\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 23)(6, \"div\", 24)(7, \"div\", 25)(8, \"h6\", 26);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 27);\n    i0.ɵɵtemplate(11, AzureDashboardComponent_div_18_div_11_Template, 5, 4, \"div\", 28);\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(12, \"div\", 29)(13, \"div\", 30)(14, \"div\", 31)(15, \"div\", 22)(16, \"h5\", 3);\n    i0.ɵɵtext(17, \"Status Distribution\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"div\", 32);\n    i0.ɵɵelement(19, \"canvas\", null, 33);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(21, \"div\", 30)(22, \"div\", 31)(23, \"div\", 22)(24, \"h5\", 3);\n    i0.ɵɵtext(25, \"Root Cause Analysis\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(26, \"div\", 23);\n    i0.ɵɵtemplate(27, AzureDashboardComponent_div_18_div_27_Template, 3, 0, \"div\", 13);\n    i0.ɵɵtemplate(28, AzureDashboardComponent_div_18_canvas_28_Template, 2, 0, \"canvas\", 15);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(29, \"div\", 1)(30, \"div\", 22)(31, \"h5\", 3);\n    i0.ɵɵtext(32, \"Assigned To\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(33, \"div\", 23);\n    i0.ɵɵtemplate(34, AzureDashboardComponent_div_18_div_34_Template, 3, 0, \"div\", 13);\n    i0.ɵɵtemplate(35, AzureDashboardComponent_div_18_div_35_Template, 10, 4, \"div\", 34);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(36, \"div\", 1)(37, \"div\", 22)(38, \"h5\", 3);\n    i0.ɵɵtext(39, \"Root Cause Details\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(40, \"div\", 23);\n    i0.ɵɵtemplate(41, AzureDashboardComponent_div_18_div_41_Template, 3, 0, \"div\", 13);\n    i0.ɵɵelementStart(42, \"div\", 35);\n    i0.ɵɵtemplate(43, AzureDashboardComponent_div_18_table_43_Template, 11, 1, \"table\", 36);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate1(\"Total Work Items: \", ctx_r3.dashboardStats.totalItems, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.getStatusData());\n    i0.ɵɵadvance(16);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.dashboardStats.rootCauseCounts.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.dashboardStats.rootCauseCounts.length > 0);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.getAssigneeData().length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.getAssigneeData());\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.dashboardStats.rootCauseCounts.length === 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.dashboardStats.rootCauseCounts.length > 0);\n  }\n}\nexport class AzureDashboardComponent {\n  constructor(azureDashboardService) {\n    this.azureDashboardService = azureDashboardService;\n    // Selected iteration path (default to the one in the requirements)\n    this.selectedIterationPath = 'Techoil\\\\2.3.23';\n    // Available iteration paths (can be extended)\n    this.availableIterationPaths = ['Techoil\\\\2.3.23', 'Team-Shiptech\\\\12.9.0'];\n    // Dashboard statistics\n    this.dashboardStats = null;\n    // Status colors for the charts\n    this.statusColors = {\n      'PMG - Proposed': '#e0e0e0',\n      'DEV - Yet to Start': '#9a9a9a',\n      'DEV - WIP': '#0078d4',\n      'DEV - Code Review': '#324e93',\n      'DEV - Done': '#00b7c3',\n      'DEV/QC - Reopened': '#e81123',\n      'Clarifications': '#fff100',\n      'On Hold': '#e3008c',\n      'QC - In Test Bed': '#8764b8',\n      'Completed': '#107c10',\n      'New': '#b4d7a8',\n      'Dev-New': '#b4d7a8',\n      'Active': '#4a86e8',\n      'Dev-WIP': '#4a86e8',\n      'In Progress': '#4a86e8',\n      'Resolved': '#ffd966',\n      'Code Review': '#9fc5e8',\n      'QA': '#d5a6bd',\n      'Testing': '#d5a6bd',\n      'Done': '#93c47d',\n      'Closed': '#6aa84f',\n      'Blocked': '#e06666',\n      'Removed': '#999999'\n    };\n    // Default colors for charts if status not found in mapping\n    this.defaultChartColors = ['#4a86e8', '#6aa84f', '#ffd966', '#e06666', '#9fc5e8', '#d5a6bd', '#b4d7a8', '#e6e6e6', '#93c47d', '#6fa8dc'];\n    // Loading and error states\n    this.loading = false;\n    this.error = '';\n  }\n  ngOnInit() {\n    this.loadDashboardData();\n  }\n  ngAfterViewInit() {\n    // Charts will be initialized after data is loaded\n  }\n  /**\r\n   * Load dashboard data for the selected iteration\r\n   */\n  loadDashboardData() {\n    // Validate iteration path\n    if (!this.selectedIterationPath) {\n      this.error = 'Please enter an iteration path';\n      return;\n    }\n    // Trim whitespace and ensure consistent formatting\n    this.selectedIterationPath = this.selectedIterationPath.trim();\n    // Show loading indicator\n    this.loading = true;\n    this.error = '';\n    // Call service to get dashboard statistics\n    this.azureDashboardService.getDashboardStats(this.selectedIterationPath).pipe(finalize(() => {\n      this.loading = false;\n    })).subscribe({\n      next: stats => {\n        this.dashboardStats = stats;\n        // Update available paths if this is a new one\n        if (!this.availableIterationPaths.includes(this.selectedIterationPath)) {\n          this.availableIterationPaths.push(this.selectedIterationPath);\n        }\n        // Initialize charts\n        setTimeout(() => {\n          this.initializeStatusChart();\n          this.initializeRootCauseChart();\n        }, 100);\n      },\n      error: err => {\n        console.error('Error loading dashboard data:', err);\n        this.error = 'Failed to load dashboard data. Please try again.';\n      }\n    });\n  }\n  /**\r\n   * Initialize status chart\r\n   */\n  initializeStatusChart() {\n    if (!this.dashboardStats || !this.statusChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.statusChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    // Get status data\n    const statuses = Object.keys(this.dashboardStats.statusCounts);\n    const counts = statuses.map(status => this.dashboardStats.statusCounts[status]);\n    const colors = statuses.map(status => this.getStatusColor(status));\n    // Clear any existing chart\n    if (window.Chart && this.statusChart) {\n      this.statusChart.destroy();\n    }\n    // Create new chart\n    if (window.Chart) {\n      this.statusChart = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: statuses,\n          datasets: [{\n            data: counts,\n            backgroundColor: colors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n              display: true\n            },\n            title: {\n              display: true,\n              text: 'Work Items by Status'\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  const total = context.dataset.data.reduce((a, b) => Number(a) + Number(b), 0);\n                  const percentage = Math.round(value / total * 100);\n                  return `${label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Initialize root cause chart\r\n   */\n  initializeRootCauseChart() {\n    if (!this.dashboardStats || !this.rootCauseChartRef?.nativeElement || this.dashboardStats.rootCauseCounts.length === 0) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.rootCauseChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    // Get root cause data\n    const rootCauses = this.dashboardStats.rootCauseCounts.map(rc => rc.rootCause);\n    const counts = this.dashboardStats.rootCauseCounts.map(rc => rc.count);\n    // Get all unique states across all root causes\n    const allStates = new Set();\n    this.dashboardStats.rootCauseCounts.forEach(rc => {\n      Object.keys(rc.states).forEach(state => {\n        allStates.add(state);\n      });\n    });\n    // Create datasets, one for each state\n    const datasets = Array.from(allStates).map(state => {\n      const color = this.getStatusColor(state);\n      return {\n        label: state,\n        data: this.dashboardStats.rootCauseCounts.map(rc => rc.states[state] || 0),\n        backgroundColor: color\n      };\n    });\n    // Clear any existing chart\n    if (window.Chart && this.rootCauseChart) {\n      this.rootCauseChart.destroy();\n    }\n    // Create new chart\n    if (window.Chart) {\n      this.rootCauseChart = new window.Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: rootCauses,\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'right'\n            },\n            title: {\n              display: true,\n              text: 'Work Items by Root Cause'\n            }\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Get color for a status\r\n   * @param status Status to get color for\r\n   * @returns Color for the status\r\n   */\n  getStatusColor(status) {\n    return this.statusColors[status] || this.getRandomColor();\n  }\n  /**\r\n   * Get a random color from the default colors\r\n   * @returns Random color\r\n   */\n  getRandomColor() {\n    const randomIndex = Math.floor(Math.random() * this.defaultChartColors.length);\n    return this.defaultChartColors[randomIndex];\n  }\n  /**\r\n   * Get sorted status data for display\r\n   * @returns Array of status data\r\n   */\n  getStatusData() {\n    if (!this.dashboardStats) {\n      return [];\n    }\n    return Object.keys(this.dashboardStats.statusCounts).map(status => ({\n      status,\n      count: this.dashboardStats.statusCounts[status],\n      color: this.getStatusColor(status)\n    })).sort((a, b) => b.count - a.count);\n  }\n  /**\r\n   * Get sorted assignee data for display\r\n   * @returns Array of assignee data\r\n   */\n  getAssigneeData() {\n    if (!this.dashboardStats) {\n      return [];\n    }\n    return Object.keys(this.dashboardStats.assigneeCounts).map(assignee => ({\n      name: assignee,\n      total: this.dashboardStats.assigneeCounts[assignee].total,\n      states: this.dashboardStats.assigneeCounts[assignee].states\n    })).sort((a, b) => b.total - a.total);\n  }\n  /**\r\n   * Get states for an assignee\r\n   * @param assignee Assignee to get states for\r\n   * @returns Array of states and counts\r\n   */\n  getStatesForAssignee(assignee) {\n    return Object.keys(assignee.states).map(state => ({\n      state,\n      count: assignee.states[state]\n    })).sort((a, b) => b.count - a.count);\n  }\n  /**\r\n   * Get states for a root cause\r\n   * @param rootCause Root cause to get states for\r\n   * @returns Array of states and counts\r\n   */\n  getStatesForRootCause(rootCause) {\n    return Object.keys(rootCause.states).map(state => ({\n      state,\n      count: rootCause.states[state]\n    })).sort((a, b) => b.count - a.count);\n  }\n  /**\r\n   * Change the selected iteration path\r\n   * @param iterationPath New iteration path\r\n   */\n  changeIterationPath(iterationPath) {\n    this.selectedIterationPath = iterationPath;\n    this.loadDashboardData();\n  }\n  /**\r\n   * Refresh dashboard data\r\n   */\n  refresh() {\n    this.loadDashboardData();\n  }\n  static {\n    this.ɵfac = function AzureDashboardComponent_Factory(t) {\n      return new (t || AzureDashboardComponent)(i0.ɵɵdirectiveInject(i1.AzureDashboardService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AzureDashboardComponent,\n      selectors: [[\"app-azure-dashboard\"]],\n      viewQuery: function AzureDashboardComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusChartRef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rootCauseChartRef = _t.first);\n        }\n      },\n      decls: 19,\n      vars: 6,\n      consts: [[1, \"azure-dashboard-container\", \"p-4\"], [1, \"card\", \"mb-4\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [1, \"d-flex\", \"align-items-center\"], [1, \"input-group\", \"input-group-sm\", \"me-2\", 2, \"max-width\", \"250px\"], [\"aria-label\", \"Iteration Path\", 1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"placeholder\", \"Custom Iteration Path\", \"aria-label\", \"Iteration Path\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", \"title\", \"Load data for this iteration path\", 1, \"btn\", \"btn-outline-primary\", 3, \"click\"], [1, \"bi\", \"bi-search\"], [1, \"btn\", \"btn-outline-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-arrow-clockwise\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"value\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"mt-2\", \"text-muted\"], [1, \"alert\", \"alert-danger\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"mb-3\"], [1, \"status-boxes\"], [\"class\", \"status-box\", 3, \"background-color\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"mb-4\"], [1, \"col-md-6\"], [1, \"card\", \"h-100\"], [1, \"card-body\", \"d-flex\", \"align-items-center\", \"justify-content-center\"], [\"statusChart\", \"\"], [\"class\", \"assignee-row mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"table-responsive\"], [\"class\", \"table table-striped\", 4, \"ngIf\"], [1, \"status-box\"], [1, \"status-name\"], [1, \"status-count\"], [1, \"text-muted\"], [\"rootCauseChart\", \"\"], [1, \"assignee-row\", \"mb-3\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-1\"], [1, \"badge\", \"bg-secondary\"], [1, \"d-flex\", \"flex-wrap\"], [\"class\", \"status-badge me-2 mb-1\", 3, \"background-color\", 4, \"ngFor\", \"ngForOf\"], [1, \"progress\", \"mt-2\", 2, \"height\", \"6px\"], [4, \"ngFor\", \"ngForOf\"], [1, \"status-badge\", \"me-2\", \"mb-1\"], [\"role\", \"progressbar\", 1, \"progress-bar\"], [1, \"table\", \"table-striped\"]],\n      template: function AzureDashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h4\", 3);\n          i0.ɵɵtext(4, \"Azure DevOps Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\")(6, \"div\", 4)(7, \"div\", 5)(8, \"select\", 6);\n          i0.ɵɵlistener(\"ngModelChange\", function AzureDashboardComponent_Template_select_ngModelChange_8_listener($event) {\n            return ctx.selectedIterationPath = $event;\n          });\n          i0.ɵɵtemplate(9, AzureDashboardComponent_option_9_Template, 2, 2, \"option\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"input\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function AzureDashboardComponent_Template_input_ngModelChange_10_listener($event) {\n            return ctx.selectedIterationPath = $event;\n          })(\"keyup.enter\", function AzureDashboardComponent_Template_input_keyup_enter_10_listener() {\n            return ctx.loadDashboardData();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function AzureDashboardComponent_Template_button_click_11_listener() {\n            return ctx.loadDashboardData();\n          });\n          i0.ɵɵelement(12, \"i\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function AzureDashboardComponent_Template_button_click_13_listener() {\n            return ctx.refresh();\n          });\n          i0.ɵɵelement(14, \"i\", 12);\n          i0.ɵɵtext(15, \" Refresh \");\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(16, AzureDashboardComponent_div_16_Template, 6, 0, \"div\", 13);\n          i0.ɵɵtemplate(17, AzureDashboardComponent_div_17_Template, 2, 1, \"div\", 14);\n          i0.ɵɵtemplate(18, AzureDashboardComponent_div_18_Template, 44, 8, \"div\", 15);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedIterationPath);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.availableIterationPaths);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedIterationPath);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading && !ctx.error && ctx.dashboardStats);\n        }\n      },\n      styles: [\".azure-dashboard-container[_ngcontent-%COMP%] {\\n  padding: 20px;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n  border-radius: 8px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n  border: none;\\n  margin-bottom: 20px;\\n}\\n.card[_ngcontent-%COMP%]   .card-header[_ngcontent-%COMP%] {\\n  background-color: #fff;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\\n  font-weight: 600;\\n  padding: 12px 16px;\\n}\\n\\n.status-boxes[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 12px;\\n  margin-bottom: 20px;\\n}\\n\\n.status-box[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  padding: 12px;\\n  border-radius: 8px;\\n  min-width: 120px;\\n  color: #fff;\\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\\n}\\n.status-box[_ngcontent-%COMP%]   .status-name[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  font-weight: 500;\\n  text-align: center;\\n}\\n.status-box[_ngcontent-%COMP%]   .status-count[_ngcontent-%COMP%] {\\n  font-size: 24px;\\n  font-weight: 700;\\n  margin-top: 4px;\\n}\\n\\n.assignee-row[_ngcontent-%COMP%] {\\n  padding: 12px;\\n  border-radius: 6px;\\n  background-color: #f8f9fa;\\n  transition: all 0.2s ease;\\n}\\n.assignee-row[_ngcontent-%COMP%]:hover {\\n  background-color: #f1f3f5;\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\\n}\\n\\n.status-badge[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  padding: 4px 8px;\\n  border-radius: 4px;\\n  font-size: 0.8rem;\\n  font-weight: 500;\\n  color: #fff;\\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9henVyZS1kYXNoYm9hcmQvYXp1cmUtZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSx3Q0FBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtBQUNGO0FBQ0U7RUFDRSxzQkFBQTtFQUNBLDRDQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtBQUNKOztBQUlBO0VBQ0UsYUFBQTtFQUNBLGVBQUE7RUFDQSxTQUFBO0VBQ0EsbUJBQUE7QUFERjs7QUFJQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxhQUFBO0VBQ0Esa0JBQUE7RUFDQSxnQkFBQTtFQUNBLFdBQUE7RUFDQSx5Q0FBQTtBQURGO0FBR0U7RUFDRSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtBQURKO0FBSUU7RUFDRSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxlQUFBO0FBRko7O0FBT0E7RUFDRSxhQUFBO0VBQ0Esa0JBQUE7RUFDQSx5QkFBQTtFQUNBLHlCQUFBO0FBSkY7QUFNRTtFQUNFLHlCQUFBO0VBQ0EseUNBQUE7QUFKSjs7QUFRQTtFQUNFLHFCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EseUNBQUE7QUFMRiIsInNvdXJjZXNDb250ZW50IjpbIi5henVyZS1kYXNoYm9hcmQtY29udGFpbmVyIHtcclxuICBwYWRkaW5nOiAyMHB4O1xyXG59XHJcblxyXG4uY2FyZCB7XHJcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gIGJveC1zaGFkb3c6IDAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbiAgXHJcbiAgLmNhcmQtaGVhZGVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjA1KTtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBwYWRkaW5nOiAxMnB4IDE2cHg7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBTdGF0dXMgYm94ZXMgZm9yIHF1aWNrIHZpZXdcclxuLnN0YXR1cy1ib3hlcyB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgZ2FwOiAxMnB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbn1cclxuXHJcbi5zdGF0dXMtYm94IHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBwYWRkaW5nOiAxMnB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICBtaW4td2lkdGg6IDEyMHB4O1xyXG4gIGNvbG9yOiAjZmZmO1xyXG4gIHRleHQtc2hhZG93OiAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xyXG4gIFxyXG4gIC5zdGF0dXMtbmFtZSB7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuICBcclxuICAuc3RhdHVzLWNvdW50IHtcclxuICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICBtYXJnaW4tdG9wOiA0cHg7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBBc3NpZ25lZSBzZWN0aW9uIHN0eWxpbmdcclxuLmFzc2lnbmVlLXJvdyB7XHJcbiAgcGFkZGluZzogMTJweDtcclxuICBib3JkZXItcmFkaXVzOiA2cHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcclxuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xyXG4gIFxyXG4gICY6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjNmNTtcclxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsMCwwLDAuMDUpO1xyXG4gIH1cclxufVxyXG5cclxuLnN0YXR1cy1iYWRnZSB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIHBhZGRpbmc6IDRweCA4cHg7XHJcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgY29sb3I6ICNmZmY7XHJcbiAgdGV4dC1zaGFkb3c6IDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMik7XHJcbn0gIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["finalize","i0","AzureDashboardComponent","constructor","azureDashboardService","ngOnInit","loadDashboardData","ngAfterViewInit","selectedIterationPath","error","trim","loading","getDashboardStats","pipe","subscribe","next","stats","dashboardStats","availableIterationPaths","includes","push","setTimeout","initializeStatusChart","initializeRootCauseChart","err","console","statusChartRef","nativeElement","ctx","getContext","statuses","Object","keys","statusCounts","counts","map","status","colors","getStatusColor","window","Chart","statusChart","destroy","type","data","labels","datasets","backgroundColor","borderWidth","options","responsive","plugins","legend","position","display","title","text","tooltip","callbacks","label","context","value","raw","total","dataset","reduce","a","b","Number","percentage","Math","round","rootCauseChartRef","rootCauseCounts","length","rootCauses","rc","rootCause","count","allStates","Set","forEach","states","state","add","Array","from","color","rootCauseChart","scales","x","stacked","y","beginAtZero","statusColors","getRandomColor","randomIndex","floor","random","defaultChartColors","getStatusData","sort","getAssigneeData","assigneeCounts","assignee","name","getStatesForAssignee","getStatesForRootCause","changeIterationPath","iterationPath","refresh","selectors","viewQuery"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\azure-dashboard\\azure-dashboard.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\azure-dashboard\\azure-dashboard.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { AzureDashboardService, DashboardStats, GroupByRootCause } from '../../services/azure-dashboard.service';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-azure-dashboard',\r\n  templateUrl: './azure-dashboard.component.html',\r\n  styleUrls: ['./azure-dashboard.component.scss']\r\n})\r\nexport class AzureDashboardComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('statusChart') statusChartRef!: ElementRef;\r\n  @ViewChild('rootCauseChart') rootCauseChartRef!: ElementRef;\r\n  \r\n  // Selected iteration path (default to the one in the requirements)\r\n  selectedIterationPath: string = 'Techoil\\\\2.3.23';\r\n  \r\n  // Available iteration paths (can be extended)\r\n  availableIterationPaths: string[] = ['Techoil\\\\2.3.23', 'Team-Shiptech\\\\12.9.0'];\r\n  \r\n  // Dashboard statistics\r\n  dashboardStats: DashboardStats | null = null;\r\n  \r\n  // Chart objects\r\n  statusChart: any;\r\n  rootCauseChart: any;\r\n  \r\n  // Status colors for the charts\r\n  statusColors: Record<string, string> = {\r\n    'PMG - Proposed': '#e0e0e0',\r\n    'DEV - Yet to Start': '#9a9a9a',\r\n    'DEV - WIP': '#0078d4',\r\n    'DEV - Code Review': '#324e93',\r\n    'DEV - Done': '#00b7c3',\r\n    'DEV/QC - Reopened': '#e81123',\r\n    'Clarifications': '#fff100',\r\n    'On Hold': '#e3008c',\r\n    'QC - In Test Bed': '#8764b8',\r\n    'Completed': '#107c10',\r\n    'New': '#b4d7a8',\r\n    'Dev-New': '#b4d7a8',\r\n    'Active': '#4a86e8',\r\n    'Dev-WIP': '#4a86e8',\r\n    'In Progress': '#4a86e8',\r\n    'Resolved': '#ffd966',\r\n    'Code Review': '#9fc5e8',\r\n    'QA': '#d5a6bd',\r\n    'Testing': '#d5a6bd',\r\n    'Done': '#93c47d',\r\n    'Closed': '#6aa84f',\r\n    'Blocked': '#e06666',\r\n    'Removed': '#999999'\r\n  };\r\n  \r\n  // Default colors for charts if status not found in mapping\r\n  defaultChartColors = [\r\n    '#4a86e8', '#6aa84f', '#ffd966', '#e06666', '#9fc5e8', \r\n    '#d5a6bd', '#b4d7a8', '#e6e6e6', '#93c47d', '#6fa8dc'\r\n  ];\r\n  \r\n  // Loading and error states\r\n  loading = false;\r\n  error = '';\r\n\r\n  constructor(private azureDashboardService: AzureDashboardService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Charts will be initialized after data is loaded\r\n  }\r\n\r\n  /**\r\n   * Load dashboard data for the selected iteration\r\n   */\r\n  loadDashboardData(): void {\r\n    // Validate iteration path\r\n    if (!this.selectedIterationPath) {\r\n      this.error = 'Please enter an iteration path';\r\n      return;\r\n    }\r\n    \r\n    // Trim whitespace and ensure consistent formatting\r\n    this.selectedIterationPath = this.selectedIterationPath.trim();\r\n    \r\n    // Show loading indicator\r\n    this.loading = true;\r\n    this.error = '';\r\n    \r\n    // Call service to get dashboard statistics\r\n    this.azureDashboardService.getDashboardStats(this.selectedIterationPath)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loading = false;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (stats) => {\r\n          this.dashboardStats = stats;\r\n          \r\n          // Update available paths if this is a new one\r\n          if (!this.availableIterationPaths.includes(this.selectedIterationPath)) {\r\n            this.availableIterationPaths.push(this.selectedIterationPath);\r\n          }\r\n          \r\n          // Initialize charts\r\n          setTimeout(() => {\r\n            this.initializeStatusChart();\r\n            this.initializeRootCauseChart();\r\n          }, 100);\r\n        },\r\n        error: (err) => {\r\n          console.error('Error loading dashboard data:', err);\r\n          this.error = 'Failed to load dashboard data. Please try again.';\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Initialize status chart\r\n   */\r\n  initializeStatusChart(): void {\r\n    if (!this.dashboardStats || !this.statusChartRef?.nativeElement) {\r\n      return;\r\n    }\r\n    \r\n    // Get canvas element\r\n    const ctx = this.statusChartRef.nativeElement.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    // Get status data\r\n    const statuses = Object.keys(this.dashboardStats.statusCounts);\r\n    const counts = statuses.map(status => this.dashboardStats!.statusCounts[status]);\r\n    const colors = statuses.map(status => this.getStatusColor(status));\r\n    \r\n    // Clear any existing chart\r\n    if (window.Chart && this.statusChart) {\r\n      this.statusChart.destroy();\r\n    }\r\n    \r\n    // Create new chart\r\n    if (window.Chart) {\r\n      this.statusChart = new window.Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: statuses,\r\n          datasets: [{\r\n            data: counts,\r\n            backgroundColor: colors,\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n              display: true\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Work Items by Status'\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context: any) {\r\n                  const label = context.label || '';\r\n                  const value = context.raw || 0;\r\n                  const total = context.dataset.data.reduce((a: number, b: number) => Number(a) + Number(b), 0);\r\n                  const percentage = Math.round((value / total) * 100);\r\n                  return `${label}: ${value} (${percentage}%)`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize root cause chart\r\n   */\r\n  initializeRootCauseChart(): void {\r\n    if (!this.dashboardStats || !this.rootCauseChartRef?.nativeElement || this.dashboardStats.rootCauseCounts.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    // Get canvas element\r\n    const ctx = this.rootCauseChartRef.nativeElement.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    // Get root cause data\r\n    const rootCauses = this.dashboardStats.rootCauseCounts.map(rc => rc.rootCause);\r\n    const counts = this.dashboardStats.rootCauseCounts.map(rc => rc.count);\r\n    \r\n    // Get all unique states across all root causes\r\n    const allStates = new Set<string>();\r\n    this.dashboardStats.rootCauseCounts.forEach(rc => {\r\n      Object.keys(rc.states).forEach(state => {\r\n        allStates.add(state);\r\n      });\r\n    });\r\n    \r\n    // Create datasets, one for each state\r\n    const datasets = Array.from(allStates).map(state => {\r\n      const color = this.getStatusColor(state);\r\n      return {\r\n        label: state,\r\n        data: this.dashboardStats!.rootCauseCounts.map(rc => rc.states[state] || 0),\r\n        backgroundColor: color\r\n      };\r\n    });\r\n    \r\n    // Clear any existing chart\r\n    if (window.Chart && this.rootCauseChart) {\r\n      this.rootCauseChart.destroy();\r\n    }\r\n    \r\n    // Create new chart\r\n    if (window.Chart) {\r\n      this.rootCauseChart = new window.Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: rootCauses,\r\n          datasets: datasets\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            x: {\r\n              stacked: true,\r\n            },\r\n            y: {\r\n              stacked: true,\r\n              beginAtZero: true\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Work Items by Root Cause'\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get color for a status\r\n   * @param status Status to get color for\r\n   * @returns Color for the status\r\n   */\r\n  getStatusColor(status: string): string {\r\n    return this.statusColors[status] || this.getRandomColor();\r\n  }\r\n\r\n  /**\r\n   * Get a random color from the default colors\r\n   * @returns Random color\r\n   */\r\n  getRandomColor(): string {\r\n    const randomIndex = Math.floor(Math.random() * this.defaultChartColors.length);\r\n    return this.defaultChartColors[randomIndex];\r\n  }\r\n\r\n  /**\r\n   * Get sorted status data for display\r\n   * @returns Array of status data\r\n   */\r\n  getStatusData(): { status: string; count: number; color: string }[] {\r\n    if (!this.dashboardStats) {\r\n      return [];\r\n    }\r\n    \r\n    return Object.keys(this.dashboardStats.statusCounts)\r\n      .map(status => ({\r\n        status,\r\n        count: this.dashboardStats!.statusCounts[status],\r\n        color: this.getStatusColor(status)\r\n      }))\r\n      .sort((a, b) => b.count - a.count);\r\n  }\r\n\r\n  /**\r\n   * Get sorted assignee data for display\r\n   * @returns Array of assignee data\r\n   */\r\n  getAssigneeData(): { name: string; total: number; states: { [state: string]: number } }[] {\r\n    if (!this.dashboardStats) {\r\n      return [];\r\n    }\r\n    \r\n    return Object.keys(this.dashboardStats.assigneeCounts)\r\n      .map(assignee => ({\r\n        name: assignee,\r\n        total: this.dashboardStats!.assigneeCounts[assignee].total,\r\n        states: this.dashboardStats!.assigneeCounts[assignee].states\r\n      }))\r\n      .sort((a, b) => b.total - a.total);\r\n  }\r\n\r\n  /**\r\n   * Get states for an assignee\r\n   * @param assignee Assignee to get states for\r\n   * @returns Array of states and counts\r\n   */\r\n  getStatesForAssignee(assignee: { name: string; total: number; states: { [state: string]: number } }): { state: string; count: number }[] {\r\n    return Object.keys(assignee.states)\r\n      .map(state => ({\r\n        state,\r\n        count: assignee.states[state]\r\n      }))\r\n      .sort((a, b) => b.count - a.count);\r\n  }\r\n\r\n  /**\r\n   * Get states for a root cause\r\n   * @param rootCause Root cause to get states for\r\n   * @returns Array of states and counts\r\n   */\r\n  getStatesForRootCause(rootCause: GroupByRootCause): { state: string; count: number }[] {\r\n    return Object.keys(rootCause.states)\r\n      .map(state => ({\r\n        state,\r\n        count: rootCause.states[state]\r\n      }))\r\n      .sort((a, b) => b.count - a.count);\r\n  }\r\n\r\n  /**\r\n   * Change the selected iteration path\r\n   * @param iterationPath New iteration path\r\n   */\r\n  changeIterationPath(iterationPath: string): void {\r\n    this.selectedIterationPath = iterationPath;\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  /**\r\n   * Refresh dashboard data\r\n   */\r\n  refresh(): void {\r\n    this.loadDashboardData();\r\n  }\r\n} ","<div class=\"azure-dashboard-container p-4\">\r\n  <div class=\"card mb-4\">\r\n    <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n      <h4 class=\"mb-0\">Azure DevOps Dashboard</h4>\r\n      <div>\r\n        <div class=\"d-flex align-items-center\">\r\n          <div class=\"input-group input-group-sm me-2\" style=\"max-width: 250px;\">\r\n            <select \r\n              class=\"form-select\" \r\n              [(ngModel)]=\"selectedIterationPath\"\r\n              aria-label=\"Iteration Path\">\r\n              <option *ngFor=\"let path of availableIterationPaths\" [value]=\"path\">{{ path }}</option>\r\n            </select>\r\n            <input \r\n              type=\"text\" \r\n              class=\"form-control\" \r\n              placeholder=\"Custom Iteration Path\" \r\n              [(ngModel)]=\"selectedIterationPath\"\r\n              (keyup.enter)=\"loadDashboardData()\"\r\n              aria-label=\"Iteration Path\">\r\n            <button \r\n              class=\"btn btn-outline-primary\" \r\n              type=\"button\" \r\n              (click)=\"loadDashboardData()\"\r\n              title=\"Load data for this iteration path\">\r\n              <i class=\"bi bi-search\"></i>\r\n            </button>\r\n          </div>\r\n          <button class=\"btn btn-outline-primary btn-sm\" (click)=\"refresh()\">\r\n            <i class=\"bi bi-arrow-clockwise\"></i> Refresh\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Loading indicator -->\r\n  <div *ngIf=\"loading\" class=\"text-center py-4\">\r\n    <div class=\"spinner-border text-primary\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n    <p class=\"mt-2 text-muted\">Fetching data from Azure DevOps...</p>\r\n  </div>\r\n  \r\n  <!-- Error message -->\r\n  <div *ngIf=\"error\" class=\"alert alert-danger\">\r\n    {{ error }}\r\n  </div>\r\n  \r\n  <!-- Dashboard content when data is loaded -->\r\n  <div *ngIf=\"!loading && !error && dashboardStats\">\r\n    <!-- Summary Card -->\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-header\">\r\n        <h5 class=\"mb-0\">Summary</h5>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-12\">\r\n            <h6 class=\"mb-3\">Total Work Items: {{ dashboardStats.totalItems }}</h6>\r\n            <div class=\"status-boxes\">\r\n              <div *ngFor=\"let status of getStatusData()\" class=\"status-box\" [style.background-color]=\"status.color\">\r\n                <div class=\"status-name\">{{ status.status }}</div>\r\n                <div class=\"status-count\">{{ status.count }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Charts Row -->\r\n    <div class=\"row mb-4\">\r\n      <!-- Status Chart -->\r\n      <div class=\"col-md-6\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">Status Distribution</h5>\r\n          </div>\r\n          <div class=\"card-body d-flex align-items-center justify-content-center\">\r\n            <canvas #statusChart></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Root Cause Chart -->\r\n      <div class=\"col-md-6\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">Root Cause Analysis</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div *ngIf=\"dashboardStats.rootCauseCounts.length === 0\" class=\"text-center py-4\">\r\n              <p class=\"text-muted\">No root cause data available</p>\r\n            </div>\r\n            <canvas *ngIf=\"dashboardStats.rootCauseCounts.length > 0\" #rootCauseChart></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Assignee Row -->\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-header\">\r\n        <h5 class=\"mb-0\">Assigned To</h5>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div *ngIf=\"getAssigneeData().length === 0\" class=\"text-center py-4\">\r\n          <p class=\"text-muted\">No assignee data available</p>\r\n        </div>\r\n        \r\n        <div *ngFor=\"let assignee of getAssigneeData()\" class=\"assignee-row mb-3\">\r\n          <div class=\"d-flex justify-content-between align-items-center mb-1\">\r\n            <h6 class=\"mb-0\">{{ assignee.name }}</h6>\r\n            <span class=\"badge bg-secondary\">{{ assignee.total }} items</span>\r\n          </div>\r\n          \r\n          <!-- Status badges for this assignee -->\r\n          <div class=\"d-flex flex-wrap\">\r\n            <div *ngFor=\"let state of getStatesForAssignee(assignee)\" class=\"status-badge me-2 mb-1\" [style.background-color]=\"getStatusColor(state.state)\">\r\n              {{ state.state }}: {{ state.count }}\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Progress bar showing distribution -->\r\n          <div class=\"progress mt-2\" style=\"height: 6px;\">\r\n            <ng-container *ngFor=\"let state of getStatesForAssignee(assignee)\">\r\n              <div class=\"progress-bar\" \r\n                  [style.background-color]=\"getStatusColor(state.state)\"\r\n                  [style.width.%]=\"(state.count / assignee.total) * 100\"\r\n                  role=\"progressbar\"></div>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Root Cause Details -->\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-header\">\r\n        <h5 class=\"mb-0\">Root Cause Details</h5>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div *ngIf=\"dashboardStats.rootCauseCounts.length === 0\" class=\"text-center py-4\">\r\n          <p class=\"text-muted\">No root cause data available</p>\r\n        </div>\r\n        \r\n        <div class=\"table-responsive\">\r\n          <table class=\"table table-striped\" *ngIf=\"dashboardStats.rootCauseCounts.length > 0\">\r\n            <thead>\r\n              <tr>\r\n                <th>Root Cause</th>\r\n                <th>Count</th>\r\n                <th>Status Distribution</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let rootCause of dashboardStats.rootCauseCounts\">\r\n                <td>{{ rootCause.rootCause }}</td>\r\n                <td>{{ rootCause.count }}</td>\r\n                <td>\r\n                  <div class=\"d-flex flex-wrap\">\r\n                    <div *ngFor=\"let state of getStatesForRootCause(rootCause)\" class=\"status-badge me-2 mb-1\" [style.background-color]=\"getStatusColor(state.state)\">\r\n                      {{ state.state }}: {{ state.count }}\r\n                    </div>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}