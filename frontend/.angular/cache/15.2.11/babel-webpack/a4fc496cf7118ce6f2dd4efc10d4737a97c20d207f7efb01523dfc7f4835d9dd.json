{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DashboardService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/dashboard`;\n    this.tasksApiUrl = `${environment.apiUrl}`; // Base API URL for /api/tasks endpoints\n  }\n  // Helper method to properly encode iteration path\n  encodeIterationPath(iterationPath) {\n    // Use double-encoded backslashes (%255C) which is what the working API expects\n    return iterationPath.replace(/\\\\/g, '%255C');\n  }\n  // Helper method to decode iteration path for display\n  decodeIterationPath(path) {\n    if (!path) return '';\n    // Replace the encoded backslash with an actual backslash\n    let decoded = path.replace(/%255C/g, '\\\\');\n    decoded = decoded.replace(/%5C/g, '\\\\');\n    decoded = decoded.replace(/%5c/g, '\\\\');\n    return decoded;\n  }\n  getCurrentSprint() {\n    return this.http.get(`${this.apiUrl}/sprint`);\n  }\n  getSprintSummary(iterationPath) {\n    const encodedPath = this.encodeIterationPath(iterationPath);\n    let params = new HttpParams().set('iterationPath', encodedPath);\n    return this.http.get(`${this.apiUrl}/summary`, {\n      params\n    });\n  }\n  getActivityFeed(count = 10) {\n    return this.http.get(`${this.apiUrl}/activity`, {\n      params: {\n        count: count.toString()\n      }\n    });\n  }\n  getDailyTip() {\n    return this.http.get(`${this.apiUrl}/tip`);\n  }\n  getTaskDistribution(iterationPath) {\n    const encodedPath = this.encodeIterationPath(iterationPath);\n    let params = new HttpParams().set('iterationPath', encodedPath);\n    return this.http.get(`${this.tasksApiUrl}/tasks`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error fetching task distribution:', error);\n      return of(null);\n    }));\n  }\n  getWorkItemDistribution(iterationPath) {\n    let params = new HttpParams();\n    if (iterationPath) {\n      params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\n    }\n    return this.http.get(`${this.apiUrl}/distribution`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error fetching work item distribution:', error);\n      return of({\n        iterationPath: iterationPath || '',\n        states: [],\n        totalCount: 0\n      });\n    }));\n  }\n  getStateDistribution(iterationPath) {\n    let params = new HttpParams();\n    if (iterationPath) {\n      params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\n    }\n    return this.http.get(`${this.apiUrl}/state-distribution`, {\n      params\n    });\n  }\n  getLongTermDevNewItems(maxItems = 5) {\n    return this.http.get(`${this.apiUrl}/long-term-dev-new`, {\n      params: {\n        count: maxItems.toString()\n      }\n    });\n  }\n  getSupportItems(months = 6) {\n    return this.http.get(`${this.apiUrl}/support-items`, {\n      params: {\n        months: months.toString()\n      }\n    });\n  }\n  getAiTips() {\n    return this.http.get(`${this.apiUrl}/ai-tips`);\n  }\n  getTasksByStatus(iterationPath) {\n    let params = new HttpParams().set('iterationPath', this.encodeIterationPath(iterationPath));\n    return this.http.get(`${this.apiUrl}/tasks-by-status`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error fetching tasks by status:', error);\n      return of({\n        items: []\n      });\n    }));\n  }\n  sendChatMessage(data) {\n    return this.http.post(`${this.apiUrl}/chat`, {\n      message: data.message,\n      currentIterationPath: data.currentIterationPath\n    });\n  }\n  /**\r\n   * Process AI Assistant task assignment commands\r\n   * @param taskId The ID of the task to assign\r\n   * @param assignee The name of the person to assign the task to\r\n   * @returns Observable with the assignment result\r\n   */\n  processAiTaskAssignment(taskId, assignee) {\n    // Support shorthand notation like \"#48044 assign to Bhavya\"\n    return this.http.post(`${this.tasksApiUrl}/tasks/assign`, {\n      taskId,\n      assignedTo: assignee\n    });\n  }\n  /**\r\n   * Get task recommendations for smart assignment\r\n   * @param teamName Optional team name to filter recommendations\r\n   * @returns Observable with task assignment recommendations\r\n   */\n  getTaskAssignmentRecommendations(teamName) {\n    let params = new HttpParams();\n    if (teamName) {\n      params = params.set('teamName', teamName);\n    }\n    return this.http.get(`${this.apiUrl}/task-recommendations`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error fetching task recommendations:', error);\n      return of({\n        recommendations: []\n      });\n    }));\n  }\n  getSprintDetailsByIterationPath(iterationPath) {\n    const encodedPath = this.encodeIterationPath(iterationPath);\n    let params = new HttpParams().set('iterationPath', encodedPath);\n    return this.http.get(`${this.apiUrl}/sprint-details`, {\n      params\n    });\n  }\n  /**\r\n   * Get tasks with a specific status in a specific iteration path\r\n   * @param status The status to filter tasks by\r\n   * @param iterationPath The iteration path to filter tasks in\r\n   * @returns Observable with the matching tasks\r\n   */\n  getTasksByStatusInIteration(status, iterationPath) {\n    // First, normalize the iteration path (remove any extra quotes or spaces)\n    iterationPath = iterationPath.trim().replace(/^[\"']|[\"']$/g, '');\n    // Then normalize the status (case insensitive comparison)\n    const normalizedStatus = status.trim().toLowerCase();\n    // Encode the iteration path for the API\n    const encodedPath = this.encodeIterationPath(iterationPath);\n    let params = new HttpParams().set('iterationPath', encodedPath);\n    // Get all tasks for the iteration path, then filter by status\n    return this.http.get(`${this.tasksApiUrl}/tasks`, {\n      params\n    }).pipe(map(tasks => {\n      // Filter tasks by the normalized status\n      return tasks.filter(task => {\n        const taskStatus = task.status || '';\n        return taskStatus.toLowerCase().includes(normalizedStatus);\n      });\n    }), catchError(error => {\n      console.error(`Error fetching tasks with status ${status} in iteration ${iterationPath}:`, error);\n      return of([]);\n    }));\n  }\n  /**\r\n   * Get dashboard card information\r\n   * @param iterationPath The iteration path to get card information for\r\n   * @returns Observable with task status card information\r\n   */\n  getDashboardCardInformation(iterationPath) {\n    // First, normalize and encode the iteration path\n    const encodedPath = this.encodeIterationPath(iterationPath.trim());\n    let params = new HttpParams().set('iterationPath', encodedPath);\n    // Make API call to get the card information\n    return this.http.get(`${this.tasksApiUrl}/tasks`, {\n      params\n    }).pipe(map(tasks => {\n      if (!tasks || tasks.length === 0) {\n        return {\n          message: 'No tasks found for the current iteration.'\n        };\n      }\n      // Group tasks by status\n      const statusGroups = {};\n      tasks.forEach(task => {\n        const status = task.status || 'Unknown';\n        if (!statusGroups[status]) {\n          statusGroups[status] = [];\n        }\n        statusGroups[status].push(task);\n      });\n      // Format the response\n      let message = `<p>Task distribution by status in ${this.decodeIterationPath(iterationPath)}:</p>`;\n      message += '<div class=\"row\">';\n      // Add cards for each status\n      Object.keys(statusGroups).forEach(status => {\n        const count = statusGroups[status].length;\n        const bgColor = this.getStatusCardColor(status);\n        message += `\n              <div class=\"col-md-3 col-sm-6 mb-3\">\n                <div class=\"card h-100\" style=\"border-color: ${bgColor};\">\n                  <div class=\"card-body text-center\" style=\"background-color: ${bgColor}; color: white;\">\n                    <h3 class=\"card-title\">${count}</h3>\n                    <p class=\"card-text\">${status}</p>\n                  </div>\n                </div>\n              </div>\n            `;\n      });\n      message += '</div>';\n      return {\n        message\n      };\n    }), catchError(error => {\n      console.error('Error fetching dashboard card information:', error);\n      return of({\n        message: 'Unable to retrieve dashboard card information. Please try again later.'\n      });\n    }));\n  }\n  /**\r\n   * Get a color for a status card\r\n   * @param status The status to get a color for\r\n   * @returns A color for the status card\r\n   */\n  getStatusCardColor(status) {\n    const statusColorMap = {\n      'Active': '#0078d4',\n      'Code Review': '#6264a7',\n      'CS-New': '#c239b3',\n      'Dev In Progress': '#ff4081',\n      'Dev-New': '#107c10',\n      'Planned': '#8864b5',\n      'Proposed': '#9e9e9e',\n      'Require Clarification': '#ff9800',\n      'Resolved': '#d83b01',\n      'Verified': '#00b7c3'\n    };\n    // Check if status exists in map (case insensitive)\n    const normalizedStatus = status.toLowerCase();\n    for (const key in statusColorMap) {\n      if (key.toLowerCase() === normalizedStatus) {\n        return statusColorMap[key];\n      }\n    }\n    // Return default color if status not found\n    return '#9e9e9e';\n  }\n  static {\n    this.ɵfac = function DashboardService_Factory(t) {\n      return new (t || DashboardService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DashboardService,\n      factory: DashboardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpParams","of","catchError","map","environment","DashboardService","constructor","http","apiUrl","encodeIterationPath","iterationPath","replace","decodeIterationPath","path","decoded","getCurrentSprint","get","getSprintSummary","encodedPath","params","set","getActivityFeed","count","toString","getDailyTip","getTaskDistribution","tasksApiUrl","pipe","error","console","getWorkItemDistribution","states","totalCount","getStateDistribution","getLongTermDevNewItems","maxItems","getSupportItems","months","getAiTips","getTasksByStatus","items","sendChatMessage","data","post","message","currentIterationPath","processAiTaskAssignment","taskId","assignee","assignedTo","getTaskAssignmentRecommendations","teamName","recommendations","getSprintDetailsByIterationPath","getTasksByStatusInIteration","status","trim","normalizedStatus","toLowerCase","tasks","filter","task","taskStatus","includes","getDashboardCardInformation","length","statusGroups","forEach","push","Object","keys","bgColor","getStatusCardColor","statusColorMap","key","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\dashboard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { \r\n  SprintOverview, \r\n  SprintSummary, \r\n  ActivityFeed, \r\n  WorkItemDistribution, \r\n  LongTermDevNewItem, \r\n  SupportItem,\r\n  AiDashboardTip,\r\n  TaskStatusBoard,\r\n  ChatMessage\r\n} from '../models/sprint.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService {\r\n  private apiUrl = `${environment.apiUrl}/dashboard`;\r\n  private tasksApiUrl = `${environment.apiUrl}`;  // Base API URL for /api/tasks endpoints\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Helper method to properly encode iteration path\r\n  private encodeIterationPath(iterationPath: string): string {\r\n    // Use double-encoded backslashes (%255C) which is what the working API expects\r\n    return iterationPath.replace(/\\\\/g, '%255C');\r\n  }\r\n  \r\n  // Helper method to decode iteration path for display\r\n  private decodeIterationPath(path: string): string {\r\n    if (!path) return '';\r\n    // Replace the encoded backslash with an actual backslash\r\n    let decoded = path.replace(/%255C/g, '\\\\');\r\n    decoded = decoded.replace(/%5C/g, '\\\\');\r\n    decoded = decoded.replace(/%5c/g, '\\\\');\r\n    return decoded;\r\n  }\r\n\r\n  getCurrentSprint(): Observable<SprintOverview> {\r\n    return this.http.get<SprintOverview>(`${this.apiUrl}/sprint`);\r\n  }\r\n\r\n  getSprintSummary(iterationPath: string): Observable<SprintSummary> {\r\n    const encodedPath = this.encodeIterationPath(iterationPath);\r\n    let params = new HttpParams().set('iterationPath', encodedPath);\r\n    return this.http.get<SprintSummary>(`${this.apiUrl}/summary`, { params });\r\n  }\r\n\r\n  getActivityFeed(count: number = 10): Observable<ActivityFeed> {\r\n    return this.http.get<ActivityFeed>(`${this.apiUrl}/activity`, {\r\n      params: { count: count.toString() }\r\n    });\r\n  }\r\n\r\n  getDailyTip(): Observable<{ tip: string }> {\r\n    return this.http.get<{ tip: string }>(`${this.apiUrl}/tip`);\r\n  }\r\n\r\n  getTaskDistribution(iterationPath: string): Observable<any> {\r\n    const encodedPath = this.encodeIterationPath(iterationPath);\r\n    let params = new HttpParams().set('iterationPath', encodedPath);\r\n    \r\n    return this.http.get(`${this.tasksApiUrl}/tasks`, { params })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error fetching task distribution:', error);\r\n          return of(null);\r\n        })\r\n      );\r\n  }\r\n\r\n  getWorkItemDistribution(iterationPath?: string): Observable<WorkItemDistribution> {\r\n    let params = new HttpParams();\r\n    if (iterationPath) {\r\n      params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\r\n    }\r\n    \r\n    return this.http.get<WorkItemDistribution>(`${this.apiUrl}/distribution`, { params })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error fetching work item distribution:', error);\r\n          return of({ iterationPath: iterationPath || '', states: [], totalCount: 0 });\r\n        })\r\n      );\r\n  }\r\n\r\n  getStateDistribution(iterationPath?: string): Observable<WorkItemDistribution[]> {\r\n    let params = new HttpParams();\r\n    if (iterationPath) {\r\n      params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\r\n    }\r\n    \r\n    return this.http.get<WorkItemDistribution[]>(`${this.apiUrl}/state-distribution`, { params });\r\n  }\r\n\r\n  getLongTermDevNewItems(maxItems: number = 5): Observable<LongTermDevNewItem[]> {\r\n    return this.http.get<LongTermDevNewItem[]>(`${this.apiUrl}/long-term-dev-new`, {\r\n      params: { count: maxItems.toString() }\r\n    });\r\n  }\r\n\r\n  getSupportItems(months: number = 6): Observable<SupportItem[]> {\r\n    return this.http.get<SupportItem[]>(`${this.apiUrl}/support-items`, {\r\n      params: { months: months.toString() }\r\n    });\r\n  }\r\n\r\n  getAiTips(): Observable<AiDashboardTip> {\r\n    return this.http.get<AiDashboardTip>(`${this.apiUrl}/ai-tips`);\r\n  }\r\n\r\n  getTasksByStatus(iterationPath: string): Observable<TaskStatusBoard> {\r\n    let params = new HttpParams().set('iterationPath', this.encodeIterationPath(iterationPath));\r\n    \r\n    return this.http.get<TaskStatusBoard>(`${this.apiUrl}/tasks-by-status`, { params })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error fetching tasks by status:', error);\r\n          return of({ items: [] });\r\n        })\r\n      );\r\n  }\r\n\r\n  sendChatMessage(data: { message: string, currentIterationPath: string }): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/chat`, { \r\n      message: data.message,\r\n      currentIterationPath: data.currentIterationPath \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Process AI Assistant task assignment commands\r\n   * @param taskId The ID of the task to assign\r\n   * @param assignee The name of the person to assign the task to\r\n   * @returns Observable with the assignment result\r\n   */\r\n  processAiTaskAssignment(taskId: number, assignee: string): Observable<any> {\r\n    // Support shorthand notation like \"#48044 assign to Bhavya\"\r\n    return this.http.post<any>(`${this.tasksApiUrl}/tasks/assign`, {\r\n      taskId,\r\n      assignedTo: assignee\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get task recommendations for smart assignment\r\n   * @param teamName Optional team name to filter recommendations\r\n   * @returns Observable with task assignment recommendations\r\n   */\r\n  getTaskAssignmentRecommendations(teamName?: string): Observable<any> {\r\n    let params = new HttpParams();\r\n    if (teamName) {\r\n      params = params.set('teamName', teamName);\r\n    }\r\n    \r\n    return this.http.get<any>(`${this.apiUrl}/task-recommendations`, { params })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error fetching task recommendations:', error);\r\n          return of({ recommendations: [] });\r\n        })\r\n      );\r\n  }\r\n\r\n  getSprintDetailsByIterationPath(iterationPath: string): Observable<SprintOverview> {\r\n    const encodedPath = this.encodeIterationPath(iterationPath);\r\n    let params = new HttpParams().set('iterationPath', encodedPath);\r\n    return this.http.get<SprintOverview>(`${this.apiUrl}/sprint-details`, { params });\r\n  }\r\n\r\n  /**\r\n   * Get tasks with a specific status in a specific iteration path\r\n   * @param status The status to filter tasks by\r\n   * @param iterationPath The iteration path to filter tasks in\r\n   * @returns Observable with the matching tasks\r\n   */\r\n  getTasksByStatusInIteration(status: string, iterationPath: string): Observable<any[]> {\r\n    // First, normalize the iteration path (remove any extra quotes or spaces)\r\n    iterationPath = iterationPath.trim().replace(/^[\"']|[\"']$/g, '');\r\n    \r\n    // Then normalize the status (case insensitive comparison)\r\n    const normalizedStatus = status.trim().toLowerCase();\r\n    \r\n    // Encode the iteration path for the API\r\n    const encodedPath = this.encodeIterationPath(iterationPath);\r\n    let params = new HttpParams().set('iterationPath', encodedPath);\r\n    \r\n    // Get all tasks for the iteration path, then filter by status\r\n    return this.http.get<any[]>(`${this.tasksApiUrl}/tasks`, { params })\r\n      .pipe(\r\n        map(tasks => {\r\n          // Filter tasks by the normalized status\r\n          return tasks.filter((task: any) => {\r\n            const taskStatus = task.status || '';\r\n            return taskStatus.toLowerCase().includes(normalizedStatus);\r\n          });\r\n        }),\r\n        catchError(error => {\r\n          console.error(`Error fetching tasks with status ${status} in iteration ${iterationPath}:`, error);\r\n          return of([]);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get dashboard card information\r\n   * @param iterationPath The iteration path to get card information for\r\n   * @returns Observable with task status card information\r\n   */\r\n  getDashboardCardInformation(iterationPath: string): Observable<{message: string}> {\r\n    // First, normalize and encode the iteration path\r\n    const encodedPath = this.encodeIterationPath(iterationPath.trim());\r\n    let params = new HttpParams().set('iterationPath', encodedPath);\r\n    \r\n    // Make API call to get the card information\r\n    return this.http.get<any[]>(`${this.tasksApiUrl}/tasks`, { params })\r\n      .pipe(\r\n        map(tasks => {\r\n          if (!tasks || tasks.length === 0) {\r\n            return { message: 'No tasks found for the current iteration.' };\r\n          }\r\n          \r\n          // Group tasks by status\r\n          const statusGroups: {[key: string]: any[]} = {};\r\n          tasks.forEach(task => {\r\n            const status = task.status || 'Unknown';\r\n            if (!statusGroups[status]) {\r\n              statusGroups[status] = [];\r\n            }\r\n            statusGroups[status].push(task);\r\n          });\r\n          \r\n          // Format the response\r\n          let message = `<p>Task distribution by status in ${this.decodeIterationPath(iterationPath)}:</p>`;\r\n          message += '<div class=\"row\">';\r\n          \r\n          // Add cards for each status\r\n          Object.keys(statusGroups).forEach(status => {\r\n            const count = statusGroups[status].length;\r\n            const bgColor = this.getStatusCardColor(status);\r\n            \r\n            message += `\r\n              <div class=\"col-md-3 col-sm-6 mb-3\">\r\n                <div class=\"card h-100\" style=\"border-color: ${bgColor};\">\r\n                  <div class=\"card-body text-center\" style=\"background-color: ${bgColor}; color: white;\">\r\n                    <h3 class=\"card-title\">${count}</h3>\r\n                    <p class=\"card-text\">${status}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            `;\r\n          });\r\n          \r\n          message += '</div>';\r\n          return { message };\r\n        }),\r\n        catchError(error => {\r\n          console.error('Error fetching dashboard card information:', error);\r\n          return of({ message: 'Unable to retrieve dashboard card information. Please try again later.' });\r\n        })\r\n      );\r\n  }\r\n  \r\n  /**\r\n   * Get a color for a status card\r\n   * @param status The status to get a color for\r\n   * @returns A color for the status card\r\n   */\r\n  private getStatusCardColor(status: string): string {\r\n    const statusColorMap: {[key: string]: string} = {\r\n      'Active': '#0078d4',\r\n      'Code Review': '#6264a7',\r\n      'CS-New': '#c239b3',\r\n      'Dev In Progress': '#ff4081',\r\n      'Dev-New': '#107c10',\r\n      'Planned': '#8864b5',\r\n      'Proposed': '#9e9e9e',\r\n      'Require Clarification': '#ff9800',\r\n      'Resolved': '#d83b01',\r\n      'Verified': '#00b7c3'\r\n    };\r\n    \r\n    // Check if status exists in map (case insensitive)\r\n    const normalizedStatus = status.toLowerCase();\r\n    for (const key in statusColorMap) {\r\n      if (key.toLowerCase() === normalizedStatus) {\r\n        return statusColorMap[key];\r\n      }\r\n    }\r\n    \r\n    // Return default color if status not found\r\n    return '#9e9e9e';\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}