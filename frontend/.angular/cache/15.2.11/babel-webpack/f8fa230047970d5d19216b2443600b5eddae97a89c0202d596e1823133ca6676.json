{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TeamService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/tasks/team-members`;\n  }\n  /**\r\n   * Fetches all team members from the API\r\n   * @param cacheBuster Optional timestamp to prevent caching\r\n   * @returns Observable of TeamMember array\r\n   */\n  getTeamMembers(cacheBuster) {\n    let url = this.apiUrl;\n    // Add cache busting if provided\n    if (cacheBuster) {\n      url = `${url}?_t=${cacheBuster}`;\n    }\n    console.log(`Calling API endpoint: ${url}`);\n    return this.http.get(url).pipe(retry(1),\n    // Retry once on failure\n    catchError(this.handleError), map(response => {\n      console.log('Raw API response:', response);\n      return this.processTeamMembersResponse(response);\n    }));\n  }\n  /**\r\n   * Fetches team members from a specific team\r\n   * @param teamName The name of the team to fetch members from (e.g., \"RND\")\r\n   * @param iterationPath Optional iteration path to filter by\r\n   * @returns Observable of TeamMember array\r\n   */\n  getTeamMembersByTeam(teamName, iterationPath) {\n    // Construct URL parameters\n    let params = new HttpParams().set('teamName', teamName);\n    if (iterationPath) {\n      params = params.set('iterationPath', iterationPath);\n    }\n    // Add timestamp to prevent caching\n    params = params.set('_t', Date.now().toString());\n    console.log(`Fetching team members from: ${this.apiUrl} with params: ${params.toString()}`);\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(catchError(this.handleError), map(response => {\n      console.log('Raw API response:', response);\n      return this.processTeamMembersResponse(response);\n    }));\n  }\n  /**\r\n   * Handles HTTP errors and returns a user-friendly error message\r\n   * @param error The HTTP error response\r\n   * @returns An observable that errors with a user-friendly message\r\n   */\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred while fetching team members';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Server returned code ${error.status}: ${error.statusText}`;\n      if (error.error?.message) {\n        errorMessage += ` - ${error.error.message}`;\n      }\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  /**\r\n   * Processes the API response to ensure it conforms to the expected structure\r\n   * @param response The raw API response\r\n   * @returns An array of properly formatted TeamMember objects\r\n   */\n  processTeamMembersResponse(response) {\n    console.log('Processing raw team members response:', response);\n    console.log('Response type:', typeof response);\n    console.log('Is array:', Array.isArray(response));\n    if (!Array.isArray(response)) {\n      console.warn('Unexpected response format for team members (not an array):', response);\n      return [];\n    }\n    if (response.length === 0) {\n      console.warn('Empty response received for team members');\n      return [];\n    }\n    console.log('Response length:', response.length);\n    // Examine the first item to determine the format\n    const firstItem = response[0];\n    console.log('First item in response:', firstItem);\n    console.log('First item type:', typeof firstItem);\n    if (typeof firstItem === 'object') {\n      console.log('First item keys:', Object.keys(firstItem));\n    }\n    // Check if we have the expected format from the Swagger API with these fields\n    const isSwaggerFormat = typeof firstItem === 'object' && 'id' in firstItem && 'displayName' in firstItem && 'team' in firstItem;\n    if (isSwaggerFormat) {\n      console.log('DETECTED SWAGGER API FORMAT with expected fields - using this format');\n      return response.map(member => {\n        const result = {\n          id: member.id,\n          displayName: member.displayName,\n          uniqueName: member.uniqueName || member.email || '',\n          imageUrl: member.imageUrl || undefined,\n          currentWorkload: typeof member.currentWorkload === 'number' ? member.currentWorkload : 0,\n          isActive: member.isActive !== undefined ? member.isActive : true,\n          email: member.email || member.uniqueName || '',\n          team: member.team || 'RND Team'\n        };\n        console.log('Processed member:', result);\n        return result;\n      });\n    }\n    // Handle case where response is array of strings (just names)\n    if (typeof firstItem === 'string') {\n      console.log('DETECTED STRING ARRAY RESPONSE - converting to objects');\n      return response.map((name, index) => {\n        const result = {\n          id: `member-${index}`,\n          displayName: name,\n          uniqueName: name,\n          imageUrl: undefined,\n          currentWorkload: 0,\n          isActive: true,\n          email: '',\n          team: 'RND Team' // Assume these are all RND team members\n        };\n\n        console.log('Processed string member:', result);\n        return result;\n      });\n    }\n    // Handle case where response is array of partially formatted objects\n    console.log('DETECTED GENERIC OBJECT ARRAY - using fallback processing');\n    return response.map((member, index) => {\n      const result = {\n        id: member.id || `member-${index}`,\n        displayName: member.displayName || member.name || `Unknown User ${index}`,\n        uniqueName: member.uniqueName || member.email || member.displayName || '',\n        imageUrl: member.imageUrl || undefined,\n        // Add missing properties with default values\n        currentWorkload: typeof member.currentWorkload === 'number' ? member.currentWorkload : 0,\n        isActive: member.isActive !== undefined ? member.isActive : true,\n        email: member.email || member.uniqueName || '',\n        team: member.team || 'RND Team'\n      };\n      console.log('Processed generic member:', result);\n      return result;\n    });\n  }\n  static {\n    this.ɵfac = function TeamService_Factory(t) {\n      return new (t || TeamService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TeamService,\n      factory: TeamService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpParams","throwError","catchError","retry","map","environment","TeamService","constructor","http","apiUrl","getTeamMembers","cacheBuster","url","console","log","get","pipe","handleError","response","processTeamMembersResponse","getTeamMembersByTeam","teamName","iterationPath","params","set","Date","now","toString","error","errorMessage","ErrorEvent","message","status","statusText","Error","Array","isArray","warn","length","firstItem","Object","keys","isSwaggerFormat","member","result","id","displayName","uniqueName","email","imageUrl","undefined","currentWorkload","isActive","team","name","index","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\team.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry, map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { TeamMember } from '../models/task.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamService {\r\n  private apiUrl = `${environment.apiUrl}/tasks/team-members`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Fetches all team members from the API\r\n   * @param cacheBuster Optional timestamp to prevent caching\r\n   * @returns Observable of TeamMember array\r\n   */\r\n  getTeamMembers(cacheBuster?: number): Observable<TeamMember[]> {\r\n    let url = this.apiUrl;\r\n    \r\n    // Add cache busting if provided\r\n    if (cacheBuster) {\r\n      url = `${url}?_t=${cacheBuster}`;\r\n    }\r\n    \r\n    console.log(`Calling API endpoint: ${url}`);\r\n    return this.http.get<TeamMember[]>(url)\r\n      .pipe(\r\n        retry(1), // Retry once on failure\r\n        catchError(this.handleError),\r\n        map(response => {\r\n          console.log('Raw API response:', response);\r\n          return this.processTeamMembersResponse(response);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetches team members from a specific team\r\n   * @param teamName The name of the team to fetch members from (e.g., \"RND\")\r\n   * @param iterationPath Optional iteration path to filter by\r\n   * @returns Observable of TeamMember array\r\n   */\r\n  getTeamMembersByTeam(teamName: string, iterationPath?: string): Observable<TeamMember[]> {\r\n    // Construct URL parameters\r\n    let params = new HttpParams().set('teamName', teamName);\r\n    \r\n    if (iterationPath) {\r\n      params = params.set('iterationPath', iterationPath);\r\n    }\r\n    \r\n    // Add timestamp to prevent caching\r\n    params = params.set('_t', Date.now().toString());\r\n    \r\n    console.log(`Fetching team members from: ${this.apiUrl} with params: ${params.toString()}`);\r\n    \r\n    return this.http.get<TeamMember[]>(this.apiUrl, { params })\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        map(response => {\r\n          console.log('Raw API response:', response);\r\n          return this.processTeamMembersResponse(response);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Handles HTTP errors and returns a user-friendly error message\r\n   * @param error The HTTP error response\r\n   * @returns An observable that errors with a user-friendly message\r\n   */\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'An unknown error occurred while fetching team members';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Server returned code ${error.status}: ${error.statusText}`;\r\n      if (error.error?.message) {\r\n        errorMessage += ` - ${error.error.message}`;\r\n      }\r\n    }\r\n    \r\n    console.error(errorMessage);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  /**\r\n   * Processes the API response to ensure it conforms to the expected structure\r\n   * @param response The raw API response\r\n   * @returns An array of properly formatted TeamMember objects\r\n   */\r\n  private processTeamMembersResponse(response: any): TeamMember[] {\r\n    console.log('Processing raw team members response:', response);\r\n    console.log('Response type:', typeof response);\r\n    console.log('Is array:', Array.isArray(response));\r\n    \r\n    if (!Array.isArray(response)) {\r\n      console.warn('Unexpected response format for team members (not an array):', response);\r\n      return [];\r\n    }\r\n    \r\n    if (response.length === 0) {\r\n      console.warn('Empty response received for team members');\r\n      return [];\r\n    }\r\n    \r\n    console.log('Response length:', response.length);\r\n    \r\n    // Examine the first item to determine the format\r\n    const firstItem = response[0];\r\n    console.log('First item in response:', firstItem);\r\n    console.log('First item type:', typeof firstItem);\r\n    \r\n    if (typeof firstItem === 'object') {\r\n      console.log('First item keys:', Object.keys(firstItem));\r\n    }\r\n    \r\n    // Check if we have the expected format from the Swagger API with these fields\r\n    const isSwaggerFormat = typeof firstItem === 'object' && \r\n                           'id' in firstItem && \r\n                           'displayName' in firstItem && \r\n                           'team' in firstItem;\r\n    \r\n    if (isSwaggerFormat) {\r\n      console.log('DETECTED SWAGGER API FORMAT with expected fields - using this format');\r\n      return response.map((member: any) => {\r\n        const result = {\r\n          id: member.id,\r\n          displayName: member.displayName,\r\n          uniqueName: member.uniqueName || member.email || '',\r\n          imageUrl: member.imageUrl || undefined,\r\n          currentWorkload: typeof member.currentWorkload === 'number' ? member.currentWorkload : 0,\r\n          isActive: member.isActive !== undefined ? member.isActive : true,\r\n          email: member.email || member.uniqueName || '',\r\n          team: member.team || 'RND Team'\r\n        };\r\n        console.log('Processed member:', result);\r\n        return result;\r\n      });\r\n    }\r\n    \r\n    // Handle case where response is array of strings (just names)\r\n    if (typeof firstItem === 'string') {\r\n      console.log('DETECTED STRING ARRAY RESPONSE - converting to objects');\r\n      return response.map((name: string, index: number) => {\r\n        const result = {\r\n          id: `member-${index}`,\r\n          displayName: name,\r\n          uniqueName: name,\r\n          imageUrl: undefined,\r\n          currentWorkload: 0,\r\n          isActive: true,\r\n          email: '',\r\n          team: 'RND Team' // Assume these are all RND team members\r\n        };\r\n        console.log('Processed string member:', result);\r\n        return result;\r\n      });\r\n    }\r\n    \r\n    // Handle case where response is array of partially formatted objects\r\n    console.log('DETECTED GENERIC OBJECT ARRAY - using fallback processing');\r\n    return response.map((member: any, index: number) => {\r\n      const result = {\r\n        id: member.id || `member-${index}`,\r\n        displayName: member.displayName || member.name || `Unknown User ${index}`,\r\n        uniqueName: member.uniqueName || member.email || member.displayName || '',\r\n        imageUrl: member.imageUrl || undefined,\r\n        // Add missing properties with default values\r\n        currentWorkload: typeof member.currentWorkload === 'number' ? member.currentWorkload : 0,\r\n        isActive: member.isActive !== undefined ? member.isActive : true,\r\n        email: member.email || member.uniqueName || '',\r\n        team: member.team || 'RND Team'\r\n      };\r\n      console.log('Processed generic member:', result);\r\n      return result;\r\n    });\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}