{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport { WorkItem } from '../../models/task.model';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/estimation.service\";\nimport * as i3 from \"../../services/task.service\";\nimport * as i4 from \"@angular/common\";\nfunction TaskEstimationComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 61)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.iterationError);\n  }\n}\nfunction TaskEstimationComponent_span_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 62);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.workItems.length, \" items\");\n  }\n}\nfunction TaskEstimationComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 63)(1, \"div\", 64)(2, \"span\", 65);\n    i0.ɵɵtext(3, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 66);\n    i0.ɵɵtext(5, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 63)(1, \"p\", 67);\n    i0.ɵɵtext(2, \"No work items found. Please select an iteration path and click \\\"Load Items\\\".\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function (a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    \"bg-danger\": a0,\n    \"bg-primary\": a1,\n    \"bg-warning\": a2,\n    \"bg-info\": a3,\n    \"bg-success\": a4,\n    \"bg-dark text-light\": a5,\n    \"bg-secondary\": a6\n  };\n};\nfunction TaskEstimationComponent_div_34_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 72);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_div_34_tr_13_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r27);\n      const item_r25 = restoredCtx.$implicit;\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r26.selectWorkItem(item_r25));\n    });\n    i0.ɵɵelementStart(1, \"td\", 73);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\")(4, \"span\", 74);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"small\");\n    i0.ɵɵelement(10, \"i\", 75);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r25 = ctx.$implicit;\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"table-primary\", (ctx_r24.selectedWorkItem == null ? null : ctx_r24.selectedWorkItem.id) === item_r25.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"#\", item_r25.id, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction7(7, _c0, item_r25.type === \"Bug\" || item_r25.fields && item_r25.fields[\"System.WorkItemType\"] === \"Bug\", item_r25.type === \"Feature\" || item_r25.fields && item_r25.fields[\"System.WorkItemType\"] === \"Feature\", item_r25.type === \"Change Request\" || item_r25.fields && item_r25.fields[\"System.WorkItemType\"] === \"Change Request\", item_r25.type === \"Test\" || item_r25.fields && item_r25.fields[\"System.WorkItemType\"] === \"Test\", item_r25.type === \"Requirement\" || item_r25.fields && item_r25.fields[\"System.WorkItemType\"] === \"Requirement\", item_r25.type === \"User Story\" || item_r25.fields && item_r25.fields[\"System.WorkItemType\"] === \"User Story\", !item_r25.type && (!item_r25.fields || !item_r25.fields[\"System.WorkItemType\"])));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r25.fields && item_r25.fields[\"System.WorkItemType\"] || item_r25.type || \"Task\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r25.title);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r24.getAssigneeName(item_r25) || \"Unassigned\");\n  }\n}\nfunction TaskEstimationComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 68)(1, \"table\", 69)(2, \"thead\")(3, \"tr\")(4, \"th\", 70);\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\", 70);\n    i0.ɵɵtext(7, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\", 70);\n    i0.ɵɵtext(9, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\", 70);\n    i0.ɵɵtext(11, \"Assignee\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"tbody\");\n    i0.ɵɵtemplate(13, TaskEstimationComponent_div_34_tr_13_Template, 12, 15, \"tr\", 71);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.workItems);\n  }\n}\nfunction TaskEstimationComponent_span_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Task #\", ctx_r5.selectedWorkItem.id, \" Details\");\n  }\n}\nfunction TaskEstimationComponent_span_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Task Details\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_button_48_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 76);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_button_48_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.resetForm());\n    });\n    i0.ɵɵelement(1, \"i\", 39);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title must be at least 5 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 77);\n    i0.ɵɵtemplate(1, TaskEstimationComponent_div_49_small_1_Template, 2, 0, \"small\", 22);\n    i0.ɵɵtemplate(2, TaskEstimationComponent_div_49_small_2_Template, 2, 0, \"small\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r8.estimationForm.get(\"title\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r8.estimationForm.get(\"title\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nfunction TaskEstimationComponent_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 78)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Found matching work item #\", ctx_r9.selectedWorkItem.id, \"\");\n  }\n}\nfunction TaskEstimationComponent_option_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 79);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r32 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r32);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r32);\n  }\n}\nfunction TaskEstimationComponent_option_65_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 79);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r33 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", member_r33);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r33);\n  }\n}\nfunction TaskEstimationComponent_div_73_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 78)(1, \"small\");\n    i0.ɵɵelement(2, \"i\", 80);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Test cases uploaded: \", ctx_r12.testCasesFile == null ? null : ctx_r12.testCasesFile.name, \"\");\n  }\n}\nfunction TaskEstimationComponent_div_74_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 81)(1, \"div\", 82)(2, \"small\");\n    i0.ɵɵelement(3, \"i\", 83);\n    i0.ɵɵelementStart(4, \"strong\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" test cases detected. This will be factored into the estimation.\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r13.testCaseCount);\n  }\n}\nfunction TaskEstimationComponent_div_85_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 81)(1, \"div\", 84)(2, \"div\", 85)(3, \"div\")(4, \"small\");\n    i0.ɵɵelement(5, \"i\", 86);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\")(8, \"span\", 87);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"div\", 88)(11, \"small\", 67);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" User Story #\", ctx_r14.userStoryDetails.id, \" linked\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r14.userStoryDetails.points || \"N/A\", \" Points\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r14.userStoryDetails.title);\n  }\n}\nfunction TaskEstimationComponent_div_86_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 77)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r15.userStoryError);\n  }\n}\nfunction TaskEstimationComponent_div_91_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 89);\n    i0.ɵɵelement(1, \"input\", 90);\n    i0.ɵɵelementStart(2, \"label\", 91);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const level_r34 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"complexity-\" + level_r34.toLowerCase())(\"value\", level_r34);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", \"complexity-\" + level_r34.toLowerCase());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", level_r34, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_92_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 92)(1, \"small\");\n    i0.ɵɵelement(2, \"i\", 83);\n    i0.ɵɵtext(3, \" Complexity automatically predicted based on work item attributes\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_div_100_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 93)(1, \"div\", 94)(2, \"label\", 95);\n    i0.ɵɵtext(3, \"Development Hours\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 96);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 3)(6, \"label\", 97);\n    i0.ɵɵtext(7, \"Testing Hours\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 98);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_span_106_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"i\", 99);\n    i0.ɵɵtext(2, \" Estimate Time \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_span_107_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 100);\n    i0.ɵɵtext(2, \" Estimating... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_110_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 101);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r21.error, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_111_li_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 122);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const factor_r42 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", factor_r42, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_111_li_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 122);\n    i0.ɵɵelement(1, \"i\", 131);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r36 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r36.testCaseCount, \" test cases included in estimation \");\n  }\n}\nfunction TaskEstimationComponent_div_111_li_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 122);\n    i0.ɵɵelement(1, \"i\", 132);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r37 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" User Story #\", ctx_r37.userStoryDetails.id, \" (\", ctx_r37.userStoryDetails.points, \" points) \");\n  }\n}\nfunction TaskEstimationComponent_div_111_li_91_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 122);\n    i0.ɵɵelement(1, \"i\", 131);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r38 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r38.testCaseCount, \" test cases considered \");\n  }\n}\nfunction TaskEstimationComponent_div_111_span_103_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Human estimate is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" than AI estimate \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r39 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", (ctx_r39.humanTotalHours - ctx_r39.estimationResult.estimatedHours).toFixed(1), \" hours higher\");\n  }\n}\nfunction TaskEstimationComponent_div_111_span_104_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Human estimate is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" than AI estimate \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r40 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", (ctx_r40.estimationResult.estimatedHours - ctx_r40.humanTotalHours).toFixed(1), \" hours lower\");\n  }\n}\nfunction TaskEstimationComponent_div_111_span_105_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Both estimates are identical\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r41 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" at \", ctx_r41.humanTotalHours, \" hours \");\n  }\n}\nconst _c1 = function (a0, a1) {\n  return {\n    \"alert-success\": a0,\n    \"alert-warning\": a1\n  };\n};\nfunction TaskEstimationComponent_div_111_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 102)(2, \"h4\", 7);\n    i0.ɵɵelement(3, \"i\", 103);\n    i0.ɵɵtext(4, \"Estimation Comparison \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 8)(6, \"div\", 17)(7, \"div\", 10)(8, \"div\", 104)(9, \"div\", 105)(10, \"h5\", 7);\n    i0.ɵɵelement(11, \"i\", 106);\n    i0.ɵɵtext(12, \"AI Estimation \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"div\", 8)(14, \"div\", 107)(15, \"h2\", 108);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"p\", 67);\n    i0.ɵɵtext(18, \"AI estimated time\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 109)(20, \"div\", 110)(21, \"div\", 111)(22, \"h5\", 3);\n    i0.ɵɵtext(23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"p\", 112);\n    i0.ɵɵtext(25, \"Development\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(26, \"div\", 110)(27, \"div\", 111)(28, \"h5\", 3);\n    i0.ɵɵtext(29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"p\", 112);\n    i0.ɵɵtext(31, \"Testing\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(32, \"div\", 24)(33, \"h6\");\n    i0.ɵɵtext(34, \"Confidence\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"div\", 113)(36, \"div\", 114);\n    i0.ɵɵtext(37);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(38, \"h6\");\n    i0.ɵɵtext(39, \"Factors Considered\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(40, \"ul\", 115);\n    i0.ɵɵtemplate(41, TaskEstimationComponent_div_111_li_41_Template, 2, 1, \"li\", 116);\n    i0.ɵɵtemplate(42, TaskEstimationComponent_div_111_li_42_Template, 3, 1, \"li\", 117);\n    i0.ɵɵtemplate(43, TaskEstimationComponent_div_111_li_43_Template, 3, 2, \"li\", 117);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(44, \"div\", 118);\n    i0.ɵɵelement(45, \"i\", 83);\n    i0.ɵɵtext(46, \" Based on historical data and ML algorithms \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(47, \"div\", 10)(48, \"div\", 104)(49, \"div\", 119)(50, \"h5\", 7);\n    i0.ɵɵelement(51, \"i\", 120);\n    i0.ɵɵtext(52, \"Human Estimation \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(53, \"div\", 8)(54, \"div\", 107)(55, \"h2\", 108);\n    i0.ɵɵtext(56);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(57, \"p\", 67);\n    i0.ɵɵtext(58, \"Human estimated time\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(59, \"div\", 109)(60, \"div\", 110)(61, \"div\", 111)(62, \"h5\", 3);\n    i0.ɵɵtext(63);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(64, \"p\", 112);\n    i0.ɵɵtext(65, \"Development\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(66, \"div\", 110)(67, \"div\", 111)(68, \"h5\", 3);\n    i0.ɵɵtext(69);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(70, \"p\", 112);\n    i0.ɵɵtext(71, \"Testing\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(72, \"div\", 24)(73, \"h6\");\n    i0.ɵɵtext(74, \"Confidence\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(75, \"div\", 113)(76, \"div\", 121);\n    i0.ɵɵtext(77, \" 100% \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(78, \"h6\");\n    i0.ɵɵtext(79, \"Factors Considered\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(80, \"ul\", 115)(81, \"li\", 122);\n    i0.ɵɵelement(82, \"i\", 123);\n    i0.ɵɵtext(83, \" Manual development effort assessment \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(84, \"li\", 122);\n    i0.ɵɵelement(85, \"i\", 123);\n    i0.ɵɵtext(86, \" Professional judgment \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(87, \"li\", 122);\n    i0.ɵɵtext(88);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(89, \"li\", 122);\n    i0.ɵɵtext(90);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(91, TaskEstimationComponent_div_111_li_91_Template, 3, 1, \"li\", 117);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(92, \"div\", 118);\n    i0.ɵɵelement(93, \"i\", 83);\n    i0.ɵɵtext(94, \" Based on developer expertise and direct coding knowledge \");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(95, \"div\", 56)(96, \"div\", 2)(97, \"div\", 124)(98, \"div\", 85)(99, \"div\")(100, \"h5\", 125);\n    i0.ɵɵtext(101, \"Estimation Comparison\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(102, \"p\", 3);\n    i0.ɵɵtemplate(103, TaskEstimationComponent_div_111_span_103_Template, 5, 1, \"span\", 22);\n    i0.ɵɵtemplate(104, TaskEstimationComponent_div_111_span_104_Template, 5, 1, \"span\", 22);\n    i0.ɵɵtemplate(105, TaskEstimationComponent_div_111_span_105_Template, 4, 1, \"span\", 22);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(106, \"div\")(107, \"div\", 126)(108, \"span\", 127);\n    i0.ɵɵtext(109);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(110, \"small\", 128);\n    i0.ɵɵtext(111, \"of AI estimate\");\n    i0.ɵɵelementEnd()()()()()()()();\n    i0.ɵɵelementStart(112, \"div\", 129);\n    i0.ɵɵelement(113, \"i\", 130);\n    i0.ɵɵtext(114, \" Combining both estimation approaches provides a more reliable forecast and helps identify potential gaps in the estimate. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext();\n    let tmp_13_0;\n    let tmp_14_0;\n    i0.ɵɵadvance(16);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r22.estimationResult.estimatedHours, \" hours\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r22.devTimeEstimate);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r22.testTimeEstimate);\n    i0.ɵɵadvance(7);\n    i0.ɵɵstyleProp(\"width\", ctx_r22.estimationResult.confidenceScore * 100, \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r22.getConfidenceClass(ctx_r22.estimationResult.confidenceScore));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r22.estimationResult.confidenceScore * 100);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r22.formatConfidence(ctx_r22.estimationResult.confidenceScore), \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r22.estimationResult.factors);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r22.testCaseCount > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r22.userStoryDetails);\n    i0.ɵɵadvance(13);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r22.humanTotalHours, \" hours\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r22.humanDevHours);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r22.humanTestHours);\n    i0.ɵɵadvance(19);\n    i0.ɵɵtextInterpolate1(\" Task type: \", (tmp_13_0 = ctx_r22.estimationForm.get(\"type\")) == null ? null : tmp_13_0.value, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", (tmp_14_0 = ctx_r22.estimationForm.get(\"complexity\")) == null ? null : tmp_14_0.value, \" complexity \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r22.testCaseCount > 0);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(22, _c1, ctx_r22.humanTotalHours >= ctx_r22.estimationResult.estimatedHours, ctx_r22.humanTotalHours < ctx_r22.estimationResult.estimatedHours));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r22.humanTotalHours > ctx_r22.estimationResult.estimatedHours);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r22.humanTotalHours < ctx_r22.estimationResult.estimatedHours);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r22.humanTotalHours === ctx_r22.estimationResult.estimatedHours);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", (ctx_r22.humanTotalHours / ctx_r22.estimationResult.estimatedHours * 100).toFixed(0), \"%\");\n  }\n}\nfunction TaskEstimationComponent_div_112_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 133)(1, \"div\", 134);\n    i0.ɵɵelement(2, \"i\", 135);\n    i0.ɵɵelementStart(3, \"h4\", 136);\n    i0.ɵɵtext(4, \"Task Time Prediction\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 67);\n    i0.ɵɵtext(6, \"Fill in the task details and click \\\"Estimate Time\\\" to get both AI and human time estimates\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"is-valid\": a0\n  };\n};\nexport class TaskEstimationComponent {\n  constructor(fb, estimationService, taskService) {\n    this.fb = fb;\n    this.estimationService = estimationService;\n    this.taskService = taskService;\n    this.teamMembers = [];\n    // Include all available work item types from the enum\n    this.taskTypes = ['User Story', 'Task', 'Bug', 'Epic', 'Feature', 'Issue', 'Change Request', 'Documentation', 'Test', 'Research'];\n    this.complexityLevels = ['Low', 'Medium', 'High'];\n    this.loading = false;\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n    // New properties for iteration path functionality\n    this.manualIterationPath = ''; // Only use manual iteration path\n    this.workItems = [];\n    this.loadingIterationItems = false;\n    this.iterationError = null;\n    this.selectedWorkItem = null;\n    this.devTimeEstimate = 0;\n    this.testTimeEstimate = 0;\n    this.totalEstimate = 0;\n    // Properties for test cases upload\n    this.testCasesFile = null;\n    this.testCaseCount = 0;\n    // Properties for user story reference\n    this.userStoryDetails = null;\n    this.userStoryError = null;\n    this.checkingUserStory = false;\n    // Properties for human estimation\n    this.humanDevHours = 2;\n    this.humanTestHours = 1;\n    this.humanTotalHours = 3;\n    this.estimationForm = this.fb.group({\n      title: ['', [Validators.required, Validators.minLength(5)]],\n      type: ['Feature', Validators.required],\n      assignee: [''],\n      complexity: ['Medium', Validators.required],\n      userStoryId: [''],\n      manualDevHours: [2, [Validators.required, Validators.min(0.5)]],\n      manualTestHours: [1, [Validators.required, Validators.min(0.5)]] // Manual testing hours\n    });\n    // Listen for changes to the manual hour fields\n    this.estimationForm.get('manualDevHours')?.valueChanges.subscribe(value => {\n      this.updateHumanEstimation();\n    });\n    this.estimationForm.get('manualTestHours')?.valueChanges.subscribe(value => {\n      this.updateHumanEstimation();\n    });\n    // Initialize human estimation values\n    this.updateHumanEstimation();\n  }\n  ngOnInit() {\n    // Load team members\n    this.loadTeamMembers();\n    // Listen for title changes to auto-fill fields\n    this.estimationForm.get('title')?.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe(title => {\n      if (title && title.length > 5) {\n        this.autoPopulateFormFields(title);\n      }\n    });\n  }\n  // Load team members with better error handling\n  loadTeamMembers() {\n    this.taskService.getTeamMembers().subscribe({\n      next: response => {\n        console.log('Team members API response:', response);\n        if (Array.isArray(response)) {\n          if (response.length === 0) {\n            console.warn('No team members returned from API');\n            return;\n          }\n          if (typeof response[0] === 'string') {\n            // It's an array of strings\n            this.teamMembers = response;\n          } else {\n            // It's an array of TeamMember objects\n            this.teamMembers = response.filter(m => m && m.displayName) // Filter out invalid entries\n            .map(m => m.displayName);\n          }\n          // Add some failsafe common users based on the work items we've seen\n          const commonUsers = ['Bhavya Damodharan', 'Suresh GM', 'Ranjith Kumar S', 'Vignesh Ram Suresh kumar', 'Dinesh Kumar K'];\n          // Add any common users not already in the list\n          commonUsers.forEach(user => {\n            if (!this.teamMembers.includes(user)) {\n              this.teamMembers.push(user);\n            }\n          });\n          console.log(`Loaded ${this.teamMembers.length} team members:`, this.teamMembers);\n        }\n      },\n      error: err => {\n        console.error('Error loading team members:', err);\n        this.error = 'Failed to load team members';\n        // Fallback to a default list of common users\n        this.teamMembers = ['Bhavya Damodharan', 'Suresh GM', 'Ranjith Kumar S', 'Vignesh Ram Suresh kumar', 'Dinesh Kumar K'];\n        console.log('Using fallback team members list:', this.teamMembers);\n      }\n    });\n  }\n  // Auto-populate form fields based on entered title\n  autoPopulateFormFields(title) {\n    if (!this.workItems || this.workItems.length === 0) {\n      return; // No items to search through\n    }\n    // Find matching work item by title (full or partial match)\n    const matchingItem = this.workItems.find(item => item.title.toLowerCase().includes(title.toLowerCase()) || title.toLowerCase().includes(item.title.toLowerCase()));\n    if (matchingItem) {\n      this.selectedWorkItem = matchingItem;\n      this.populateFormWithWorkItem(matchingItem);\n    }\n  }\n  // Load work items for the selected iteration path\n  loadWorkItemsByIteration() {\n    if (!this.manualIterationPath || this.manualIterationPath.trim() === '') {\n      this.iterationError = 'Please enter an iteration path';\n      return;\n    }\n    this.loadingIterationItems = true;\n    this.workItems = [];\n    this.selectedWorkItem = null;\n    this.iterationError = null;\n    this.taskService.getTasks(this.manualIterationPath.trim()).subscribe({\n      next: items => {\n        // Process items to clean up state information\n        this.workItems = items.map(item => {\n          // Process each item to ensure it has proper state\n          const processedItem = {\n            ...item\n          };\n          // Make sure the fields object exists\n          if (!processedItem.fields) {\n            processedItem.fields = {};\n          }\n          // Fix state display - remove \"Unknown\" prefix if present\n          if (processedItem.state && processedItem.state.toLowerCase().includes('unknown')) {\n            processedItem.state = processedItem.state.replace(/unknown/i, '').trim();\n          }\n          // Also check for state in fields\n          if (processedItem.fields && processedItem.fields['System.State']) {\n            let state = processedItem.fields['System.State'];\n            if (typeof state === 'string' && state.toLowerCase().includes('unknown')) {\n              state = state.replace(/unknown/i, '').trim();\n              processedItem.fields['System.State'] = state;\n            }\n            // If item has no state but has System.State, use it\n            if (!processedItem.state) {\n              processedItem.state = state;\n            }\n          }\n          // Capture status field if present in the payload and map it to fields\n          if (item.status) {\n            processedItem.fields['status'] = item.status;\n          }\n          return processedItem;\n        });\n        this.loadingIterationItems = false;\n        console.log(`Loaded ${this.workItems.length} work items for iteration ${this.manualIterationPath}`);\n      },\n      error: err => {\n        console.error('Error loading work items:', err);\n        this.iterationError = 'Failed to load work items for the specified iteration path';\n        this.loadingIterationItems = false;\n      }\n    });\n  }\n  // Helper method to find the best matching team member for an assignee\n  findMatchingTeamMember(assigneeName) {\n    if (!assigneeName || !this.teamMembers || this.teamMembers.length === 0) {\n      return '';\n    }\n    console.log('Finding match for assignee:', assigneeName);\n    // First try exact match\n    const exactMatch = this.teamMembers.find(member => member === assigneeName);\n    if (exactMatch) {\n      console.log('Found exact match:', exactMatch);\n      return exactMatch;\n    }\n    // Then try case-insensitive exact match\n    const caseInsensitiveMatch = this.teamMembers.find(member => member.toLowerCase() === assigneeName.toLowerCase());\n    if (caseInsensitiveMatch) {\n      console.log('Found case-insensitive match:', caseInsensitiveMatch);\n      return caseInsensitiveMatch;\n    }\n    // Then try contains matches (member contains assignee or assignee contains member)\n    const containsMatch = this.teamMembers.find(member => member.toLowerCase().includes(assigneeName.toLowerCase()) || assigneeName.toLowerCase().includes(member.toLowerCase()));\n    if (containsMatch) {\n      console.log('Found contains match:', containsMatch);\n      return containsMatch;\n    }\n    // Split full names and try to match individual parts\n    // This helps with formats like \"First Last\" vs \"Last, First\"\n    const nameParts = assigneeName.toLowerCase().split(/[\\s,]+/).filter(part => part.length > 1);\n    if (nameParts.length > 1) {\n      console.log('Trying to match name parts:', nameParts);\n      // Try to find a member that contains all name parts\n      const allPartsMatch = this.teamMembers.find(member => {\n        const memberLower = member.toLowerCase();\n        return nameParts.every(part => memberLower.includes(part));\n      });\n      if (allPartsMatch) {\n        console.log('Found match containing all name parts:', allPartsMatch);\n        return allPartsMatch;\n      }\n      // Try to find a member that contains any significant name part\n      for (const part of nameParts) {\n        if (part.length < 3) continue; // Skip short parts like initials\n        const partialMatch = this.teamMembers.find(member => member.toLowerCase().includes(part));\n        if (partialMatch) {\n          console.log('Found match with name part:', part, '->', partialMatch);\n          return partialMatch;\n        }\n      }\n    }\n    // If we have a name that appears to be \"Firstname Lastname\"\n    // Try a more aggressive match against first letters + full last name\n    if (nameParts.length >= 2) {\n      const firstInitial = nameParts[0].charAt(0);\n      const lastName = nameParts[nameParts.length - 1];\n      const initialsMatch = this.teamMembers.find(member => {\n        const memberParts = member.toLowerCase().split(/[\\s,]+/);\n        if (memberParts.length >= 2) {\n          const memberFirstInitial = memberParts[0].charAt(0);\n          const memberLastName = memberParts[memberParts.length - 1];\n          return memberFirstInitial === firstInitial && memberLastName.includes(lastName);\n        }\n        return false;\n      });\n      if (initialsMatch) {\n        console.log('Found match with first initial + last name:', initialsMatch);\n        return initialsMatch;\n      }\n    }\n    // Last resort: try to match any word of length 4+ as a potential name fragment\n    const significantWords = assigneeName.toLowerCase().match(/\\b\\w{4,}\\b/g);\n    if (significantWords && significantWords.length > 0) {\n      for (const word of significantWords) {\n        const wordMatch = this.teamMembers.find(member => member.toLowerCase().includes(word));\n        if (wordMatch) {\n          console.log('Found match with significant word:', word, '->', wordMatch);\n          return wordMatch;\n        }\n      }\n    }\n    // If no match found after all attempts, return the original name\n    console.log('No match found, using original name:', assigneeName);\n    return assigneeName;\n  }\n  // Select a work item for estimation\n  selectWorkItem(item) {\n    this.selectedWorkItem = item;\n    this.populateFormWithWorkItem(item);\n  }\n  // Populate the form with selected work item details\n  populateFormWithWorkItem(item) {\n    const complexity = this.determineComplexity(item);\n    // Extract assignee name, trying 'System.AssignedTo' first\n    let assignee = '';\n    let originalAssignee = '';\n    // Debug log the item details\n    console.log('Selected work item:', item);\n    // Check for fields property which might contain System.AssignedTo\n    if (item.fields && item.fields['System.AssignedTo']) {\n      const assignedTo = item.fields['System.AssignedTo'];\n      if (typeof assignedTo === 'string') {\n        originalAssignee = assignedTo;\n        assignee = assignedTo;\n      } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n        // Try to get displayName property\n        if (assignedTo.displayName) {\n          originalAssignee = assignedTo.displayName;\n          assignee = assignedTo.displayName;\n        }\n      }\n    }\n    // Check for direct assignee property which is most common in Azure DevOps API\n    else if (item.assignedTo) {\n      originalAssignee = typeof item.assignedTo === 'string' ? item.assignedTo : item.assignedTo.displayName || '';\n      assignee = originalAssignee;\n    }\n    console.log('Original assignee from work item:', originalAssignee);\n    console.log('Available team members:', this.teamMembers);\n    // If we have an assignee name, find the matching team member\n    if (assignee) {\n      const previousAssignee = assignee;\n      assignee = this.findMatchingTeamMember(assignee);\n      console.log(`Matching team member: '${previousAssignee}' -> '${assignee}'`);\n    }\n    // Get type, trying both System.WorkItemType and type property\n    let itemType = '';\n    // First try to get from Azure DevOps fields\n    if (item.fields) {\n      if (item.fields['System.WorkItemType']) {\n        itemType = item.fields['System.WorkItemType'];\n      }\n    }\n    // If not found, fallback to type property\n    if (!itemType && item.type) {\n      itemType = item.type;\n    }\n    // If still not found, try to determine from title\n    if (!itemType) {\n      const title = item.title.toLowerCase();\n      if (title.includes('bug') || title.includes('fix') || title.includes('issue')) {\n        itemType = 'Bug';\n      } else if (title.includes('feature') || title.includes('implement') || title.includes('add new')) {\n        itemType = 'Feature';\n      } else if (title.includes('change') || title.includes('modify') || title.includes('update')) {\n        itemType = 'Change Request';\n      } else if (title.includes('requirement') || title.includes('must have')) {\n        itemType = 'Requirement';\n      } else {\n        // Default to Feature\n        itemType = 'Feature';\n      }\n    }\n    // Ensure the type is available in our task types list\n    if (itemType && !this.taskTypes.includes(itemType)) {\n      // Add to taskTypes if not already there\n      this.taskTypes.push(itemType);\n    }\n    // Update form with extracted values\n    this.estimationForm.patchValue({\n      title: item.title,\n      type: itemType,\n      assignee: assignee,\n      complexity: complexity\n    });\n    console.log(`Populated form with: Type=${itemType}, Assignee=${assignee}, Complexity=${complexity}`);\n    // Pre-calculate estimates based on historical data if we have this information\n    if (this.estimationResult) {\n      this.calculateTimeEstimates(this.estimationResult.estimatedHours);\n    }\n  }\n  // Determine complexity based on work item properties with enhanced logic\n  determineComplexity(item) {\n    // Initialize with default complexity\n    let complexity = 'Medium';\n    // Try to determine from title keywords\n    const title = item.title.toLowerCase();\n    if (title.includes('critical') || title.includes('urgent') || title.includes('major') || title.includes('performance issue') || title.includes('security')) {\n      return 'High';\n    }\n    if (title.includes('minor') || title.includes('small') || title.includes('trivial') || title.includes('documentation') || title.includes('typo')) {\n      return 'Low';\n    }\n    // Determine from type\n    const itemType = this.getWorkItemType(item);\n    if (itemType === 'Bug' || itemType === 'Change Request' || itemType === 'Feature') {\n      // Bugs and change requests tend to be more complex\n      complexity = 'Medium';\n      // For bugs, increase complexity\n      if (itemType === 'Bug') {\n        complexity = 'High';\n      }\n    }\n    // Determine from priority if available\n    if (item.priority !== undefined) {\n      if (item.priority <= 1) {\n        complexity = 'High';\n      } else if (item.priority === 2) {\n        complexity = 'Medium';\n      } else {\n        complexity = 'Low';\n      }\n    }\n    // Check for complexity field if available in Azure DevOps fields\n    if (item.fields) {\n      // Different systems use different field names for complexity/effort\n      const complexityFields = ['Microsoft.VSTS.Common.Complexity', 'Microsoft.VSTS.Scheduling.Effort', 'Custom.Complexity', 'System.Complexity'];\n      for (const field of complexityFields) {\n        if (item.fields[field]) {\n          const fieldValue = item.fields[field];\n          if (typeof fieldValue === 'string') {\n            if (fieldValue.includes('High') || fieldValue.includes('1')) {\n              return 'High';\n            } else if (fieldValue.includes('Low') || fieldValue.includes('3')) {\n              return 'Low';\n            }\n          } else if (typeof fieldValue === 'number') {\n            if (fieldValue <= 1) {\n              return 'High';\n            } else if (fieldValue >= 3) {\n              return 'Low';\n            }\n          }\n        }\n      }\n    }\n    return complexity;\n  }\n  // Helper method to get work item type consistently\n  getWorkItemType(item) {\n    // Try to get from System.WorkItemType first\n    if (item.fields && item.fields['System.WorkItemType']) {\n      return item.fields['System.WorkItemType'];\n    }\n    // Fallback to type property\n    return item.type || 'Feature';\n  }\n  resetForm() {\n    this.estimationForm.reset({\n      title: '',\n      type: 'Feature',\n      assignee: '',\n      complexity: 'Medium',\n      userStoryId: '',\n      manualDevHours: 2,\n      manualTestHours: 1\n    });\n    this.selectedWorkItem = null;\n    this.error = null;\n    this.showResult = false;\n    this.estimationResult = null;\n    this.testCasesFile = null;\n    this.testCaseCount = 0;\n    this.userStoryDetails = null;\n    this.userStoryError = null;\n  }\n  // Handle test case file uploads\n  onTestCasesUpload(event) {\n    const file = event.target.files[0];\n    if (file) {\n      this.testCasesFile = file;\n      // Simulate analyzing the file to count test cases\n      this.analyzeTestCases(file);\n    }\n  }\n  // Clear uploaded test cases\n  clearTestCases() {\n    this.testCasesFile = null;\n    this.testCaseCount = 0;\n  }\n  // Analyze test cases file to count the number of tests\n  analyzeTestCases(file) {\n    // In a real application, you would parse the file content\n    // Here we'll simulate by estimating based on file size\n    const reader = new FileReader();\n    reader.onload = e => {\n      const content = e.target?.result;\n      if (content) {\n        // Simple estimation - assume one test case per 5 lines\n        const lines = content.split('\\n').length;\n        this.testCaseCount = Math.max(1, Math.floor(lines / 5));\n        console.log(`Estimated ${this.testCaseCount} test cases from file with ${lines} lines`);\n      } else {\n        this.testCaseCount = Math.max(1, Math.floor(file.size / 1024)); // Estimate 1 test case per KB\n      }\n    };\n\n    reader.readAsText(file);\n  }\n  // Check user story from ID\n  checkUserStory() {\n    const userStoryId = this.estimationForm.get('userStoryId')?.value;\n    if (!userStoryId) {\n      this.userStoryError = 'Please enter a user story ID';\n      return;\n    }\n    this.checkingUserStory = true;\n    this.userStoryError = null;\n    this.userStoryDetails = null;\n    // In a real application, you would call your API service\n    // This is a simulation for demonstration\n    setTimeout(() => {\n      if (userStoryId && !isNaN(parseInt(userStoryId))) {\n        // Simulate successful user story lookup\n        this.userStoryDetails = {\n          id: userStoryId,\n          title: `User story for ${this.estimationForm.get('title')?.value || 'task'}`,\n          points: Math.floor(Math.random() * 8) + 1,\n          description: 'This is a sample user story description.'\n        };\n      } else {\n        this.userStoryError = 'Invalid user story ID or user story not found';\n      }\n      this.checkingUserStory = false;\n    }, 800);\n  }\n  // Modified estimation method to include both human and AI estimations\n  estimateTaskTime() {\n    if (this.estimationForm.invalid) {\n      this.markFormGroupTouched(this.estimationForm);\n      return;\n    }\n    this.loading = true;\n    this.error = null;\n    this.showResult = false;\n    // Update human estimation values\n    this.updateHumanEstimation();\n    // Continue with AI-based estimation\n    const formType = this.estimationForm.get('type')?.value;\n    const request = {\n      title: this.estimationForm.get('title')?.value,\n      type: formType,\n      taskType: formType,\n      assignee: this.estimationForm.get('assignee')?.value,\n      complexity: this.estimationForm.get('complexity')?.value,\n      // Include test cases count if available\n      testCasesCount: this.testCaseCount > 0 ? this.testCaseCount : undefined,\n      // Include user story info if available\n      userStoryId: this.userStoryDetails ? parseInt(this.userStoryDetails.id) : undefined,\n      userStoryPoints: this.userStoryDetails ? this.userStoryDetails.points : undefined\n    };\n    console.log('Estimation request:', request);\n    // Use the selected work item if available\n    if (this.selectedWorkItem) {\n      if (this.manualIterationPath) {\n        // If we have both a selected work item and an iteration path, use the history-based approach\n        this.estimateFromIterationHistory(request);\n      } else {\n        // Otherwise use the standard approach\n        this.performStandardEstimation(request);\n      }\n    } else {\n      // If no work item is selected, use the standard approach\n      this.performStandardEstimation(request);\n    }\n  }\n  // Helper to mark all form controls as touched to show validation errors\n  markFormGroupTouched(formGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n  /**\r\n   * Estimate task time using the iteration history approach (our previous implementation)\r\n   */\n  estimateFromIterationHistory(request) {\n    // Use iteration path for historical data analysis if available\n    const iterationPath = this.selectedWorkItem && this.selectedWorkItem.iterationPath || this.manualIterationPath;\n    if (iterationPath) {\n      request.includeHistory = true; // Signal to include work history analysis\n      console.log('Estimating using work items from iteration: ' + iterationPath);\n      // Get work items from this iteration for analysis\n      this.taskService.getTaskHistory(iterationPath).subscribe({\n        next: historyItems => {\n          console.log(`Retrieved ${historyItems.length} work items from iteration ${iterationPath}`);\n          if (historyItems.length === 0) {\n            // If no historical items found, fall back to standard estimation\n            console.log('No historical items found, using standard estimation');\n            this.performStandardEstimation(request);\n            return;\n          }\n          // Since we might not have actual timing data from the API,\n          // we'll analyze the items we have and infer timing data\n          const estimatedHistoricalItems = this.inferTimingData(historyItems, request.type, request.complexity);\n          // Set historical data in the request\n          request.historicalItems = estimatedHistoricalItems;\n          // Check if we have enough data to make a history-based estimate\n          if (estimatedHistoricalItems.length > 0) {\n            console.log('Using inferred historical data for estimation');\n            // Calculate time estimates based on the historical data\n            const similarItems = this.findSimilarItems(estimatedHistoricalItems, request);\n            if (similarItems.length > 0) {\n              // Calculate average times from similar items\n              const avgTotal = similarItems.reduce((sum, item) => sum + (item.actualHours || 0), 0) / similarItems.length;\n              const avgDev = similarItems.reduce((sum, item) => sum + (item.developmentHours || 0), 0) / similarItems.length;\n              const avgTest = similarItems.reduce((sum, item) => sum + (item.testingHours || 0), 0) / similarItems.length;\n              // Create a result based on historical averages\n              this.estimationResult = {\n                estimatedHours: Number(avgTotal.toFixed(1)),\n                devTimeHours: Number(avgDev.toFixed(1)),\n                testTimeHours: Number(avgTest.toFixed(1)),\n                confidenceScore: this.calculateConfidenceScore(similarItems.length, historyItems.length),\n                factors: [`Task type: ${request.type}`, `${request.complexity} complexity`, `Based on ${similarItems.length} similar completed items`, `Assignee ${request.assignee || 'unassigned'}`]\n              };\n              this.showResult = true;\n              this.loading = false;\n              this.devTimeEstimate = this.estimationResult.devTimeHours || 0;\n              this.testTimeEstimate = this.estimationResult.testTimeHours || 0;\n              this.totalEstimate = this.estimationResult.estimatedHours;\n            } else {\n              // No similar items found, use standard estimation\n              this.performStandardEstimation(request);\n            }\n          } else {\n            // Not enough historical data, fall back to standard estimation\n            this.performStandardEstimation(request);\n          }\n        },\n        error: err => {\n          console.error('Error loading work item history:', err);\n          console.log('Falling back to standard estimation');\n          this.performStandardEstimation(request);\n        }\n      });\n    } else {\n      // Fallback to standard estimation without work history\n      this.performStandardEstimation(request);\n    }\n  }\n  /**\r\n   * Perform standard estimation without using historical data\r\n   */\n  performStandardEstimation(request) {\n    this.estimationService.estimateTaskTime(request).subscribe({\n      next: result => {\n        this.estimationResult = result;\n        this.showResult = true;\n        this.calculateTimeEstimates(result.estimatedHours);\n        this.loading = false;\n      },\n      error: err => {\n        console.error('Error estimating task time:', err);\n        this.error = 'Failed to estimate task time. Please try again.';\n        this.loading = false;\n      }\n    });\n  }\n  /**\r\n   * Infer timing data for historical work items\r\n   * This adds estimated development and testing hours to work items\r\n   */\n  inferTimingData(items, taskType, complexity) {\n    return items.map(item => {\n      // Clone the item to avoid modifying the original\n      const processedItem = {\n        ...item\n      };\n      // If the item already has timing data, use it\n      if (item.actualHours && item.developmentHours && item.testingHours) {\n        return processedItem;\n      }\n      // Calculate base hours based on type and complexity\n      const baseHours = this.getBaseHoursByType(item.type || taskType);\n      const multiplier = this.getComplexityMultiplier(complexity);\n      // Estimate total hours\n      const estimatedTotal = baseHours * multiplier;\n      // Estimate dev/test split\n      const devRatio = complexity === 'High' ? 0.7 : complexity === 'Low' ? 0.6 : 0.65;\n      const devHours = estimatedTotal * devRatio;\n      const testHours = estimatedTotal - devHours;\n      // Add the estimated hours to the item\n      processedItem.actualHours = Number(estimatedTotal.toFixed(1));\n      processedItem.developmentHours = Number(devHours.toFixed(1));\n      processedItem.testingHours = Number(testHours.toFixed(1));\n      return processedItem;\n    });\n  }\n  /**\r\n   * Find similar work items based on type and complexity\r\n   */\n  findSimilarItems(items, request) {\n    // Filter items by type and complexity\n    return items.filter(item => {\n      // Match by type\n      const typeMatch = item.type?.toLowerCase() === request.type.toLowerCase();\n      // Match by complexity (if available)\n      const itemComplexity = this.determineComplexity(item);\n      const complexityMatch = itemComplexity.toLowerCase() === request.complexity.toLowerCase();\n      // We need both to match for a \"similar\" item\n      return typeMatch && complexityMatch;\n    });\n  }\n  /**\r\n   * Calculate confidence score based on sample size\r\n   */\n  calculateConfidenceScore(similarCount, totalCount) {\n    // Base confidence on the number of similar items vs total items\n    if (similarCount === 0) return 0.5;\n    // More similar items = higher confidence\n    const baseConfidence = Math.min(0.75, 0.5 + similarCount / 20);\n    // Add a bonus if we have a good percentage of the total\n    const percentageBonus = similarCount / totalCount > 0.3 ? 0.1 : 0;\n    // Cap at 0.95 for historical data\n    return Math.min(0.95, baseConfidence + percentageBonus);\n  }\n  // Calculate development and testing time estimates\n  calculateTimeEstimates(totalHours) {\n    // Typical distribution: dev 60-70%, testing 30-40%\n    const complexity = this.estimationForm.value.complexity;\n    let devRatio = 0.65; // Default dev ratio\n    // Adjust ratio based on complexity\n    if (complexity === 'High') {\n      devRatio = 0.7; // Higher complexity = more dev time\n    } else if (complexity === 'Low') {\n      devRatio = 0.6; // Lower complexity = less dev time\n    }\n\n    this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\n    this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\n    this.totalEstimate = totalHours;\n  }\n  // Format confidence score as percentage\n  formatConfidence(score) {\n    return `${Math.round(score * 100)}%`;\n  }\n  // Get appropriate class for confidence level\n  getConfidenceClass(score) {\n    if (score >= 0.8) {\n      return 'bg-success';\n    } else if (score >= 0.6) {\n      return 'bg-primary';\n    } else if (score >= 0.4) {\n      return 'bg-warning';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  // Get assignee name for display\n  getAssigneeName(item) {\n    let displayName = '';\n    // Try to get from System.AssignedTo first\n    if (item.fields && item.fields['System.AssignedTo']) {\n      const assignedTo = item.fields['System.AssignedTo'];\n      if (typeof assignedTo === 'string') {\n        displayName = assignedTo;\n      } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n        if (assignedTo.displayName) {\n          displayName = assignedTo.displayName;\n        }\n      }\n    }\n    // Fallback to assignedTo property\n    if (!displayName && item.assignedTo) {\n      if (typeof item.assignedTo === 'string') {\n        displayName = item.assignedTo;\n      } else if (typeof item.assignedTo === 'object' && item.assignedTo !== null) {\n        const assigneeObj = item.assignedTo;\n        displayName = assigneeObj.displayName || assigneeObj.name || '';\n      }\n    }\n    // Find matching team member for consistent display\n    if (displayName) {\n      return this.findMatchingTeamMember(displayName);\n    }\n    return '';\n  }\n  // Get the clean state display for a work item\n  getStateDisplay(item) {\n    // First check fields for System.State\n    if (item.fields && item.fields['System.State']) {\n      const state = item.fields['System.State'];\n      if (typeof state === 'string') {\n        // Remove \"Unknown\" prefix if present\n        return state.replace(/unknown/i, '').trim();\n      }\n    }\n    // Check for status field in the item or fields\n    if (item.status) {\n      return typeof item.status === 'string' ? item.status : '';\n    }\n    if (item.fields && item.fields['status']) {\n      return typeof item.fields['status'] === 'string' ? item.fields['status'] : '';\n    }\n    // Fallback to item.state if available\n    if (item.state) {\n      return item.state.replace(/unknown/i, '').trim();\n    }\n    return 'N/A'; // Default if no state available\n  }\n  /**\r\n   * Get base hours for estimation by work item type\r\n   */\n  getBaseHoursByType(type) {\n    const baseHoursByType = {\n      'Bug': 4,\n      'Task': 3,\n      'Feature': 8,\n      'User Story': 5,\n      'Change Request': 4,\n      'Requirement': 6,\n      'Documentation': 2,\n      'Epic': 20\n    };\n    return type ? baseHoursByType[type] || 4 : 4; // Default if type not found\n  }\n  /**\r\n   * Get multiplier based on complexity\r\n   */\n  getComplexityMultiplier(complexity) {\n    const multipliers = {\n      'Low': 0.6,\n      'Medium': 1.0,\n      'High': 1.5\n    };\n    return multipliers[complexity] || 1.0;\n  }\n  /**\r\n   * Calculate time estimates based on the work item's actual state transition history\r\n   * This analyzes the time spent in each state to estimate development and testing times\r\n   */\n  calculateEstimatesFromHistory(workItem) {\n    console.log('Calculating estimates from work item history');\n    // Default result\n    const result = {\n      total: 0,\n      development: 0,\n      testing: 0\n    };\n    // Step 1: Extract state transitions from activity history\n    const stateTransitions = workItem.activity?.filter(a => a.field === 'State' || a.field === 'System.State') || [];\n    console.log(`Found ${stateTransitions.length} state transitions`);\n    if (stateTransitions.length === 0) {\n      // No state transitions found, estimate based on work item type and complexity\n      const complexity = this.determineComplexity(workItem);\n      const baseHours = this.getBaseHoursByType(this.getWorkItemType(workItem));\n      const multiplier = this.getComplexityMultiplier(complexity);\n      result.total = Number((baseHours * multiplier).toFixed(1));\n      result.development = Number((result.total * 0.65).toFixed(1));\n      result.testing = Number((result.total * 0.35).toFixed(1));\n      return result;\n    }\n    // Sort transitions by date\n    stateTransitions.sort((a, b) => {\n      const dateA = new Date(a.changedDate).getTime();\n      const dateB = new Date(b.changedDate).getTime();\n      return dateA - dateB;\n    });\n    // Step 2: Create a timeline of state changes with durations\n    const timeline = [];\n    // Add each transition\n    stateTransitions.forEach((transition, index) => {\n      const currentState = transition.newValue || '';\n      const startDate = new Date(transition.changedDate);\n      // Add to timeline\n      timeline.push({\n        state: currentState,\n        startDate: startDate\n      });\n      // Set end date for previous state\n      if (index > 0) {\n        timeline[index - 1].endDate = startDate;\n        // Calculate duration in hours for previous state\n        const prevStartDate = timeline[index - 1].startDate;\n        const durationMs = startDate.getTime() - prevStartDate.getTime();\n        const durationHours = durationMs / (1000 * 60 * 60);\n        // Account for work hours (8 hours per day, 5 days per week)\n        // This is a simplification - in reality, you'd want to account for weekends and working hours\n        let adjustedHours = durationHours;\n        // If duration is more than 16 hours, assume some of it is non-working time\n        if (durationHours > 16) {\n          // Roughly estimate working hours\n          const days = Math.floor(durationHours / 24);\n          const workDays = Math.max(Math.ceil(days * 5 / 7), 1); // Estimate work days (5/7 of total days)\n          adjustedHours = workDays * 8 + durationHours % 24; // 8 hours per work day + remainder\n          // Cap at a reasonable value to prevent outliers\n          adjustedHours = Math.min(adjustedHours, durationHours * 0.6);\n        }\n        timeline[index - 1].durationHours = Number(adjustedHours.toFixed(1));\n      }\n    });\n    // Add current state if item is not completed\n    if (workItem.state !== 'Closed' && workItem.state !== 'Done' && workItem.state !== 'Completed') {\n      // Calculate duration to now for the last state\n      const lastIndex = timeline.length - 1;\n      if (lastIndex >= 0) {\n        const now = new Date();\n        timeline[lastIndex].endDate = now;\n        const durationMs = now.getTime() - timeline[lastIndex].startDate.getTime();\n        const durationHours = durationMs / (1000 * 60 * 60);\n        // Apply same adjustment for work hours\n        let adjustedHours = durationHours;\n        if (durationHours > 16) {\n          const days = Math.floor(durationHours / 24);\n          const workDays = Math.max(Math.ceil(days * 5 / 7), 1);\n          adjustedHours = workDays * 8 + durationHours % 24;\n          adjustedHours = Math.min(adjustedHours, durationHours * 0.6);\n        }\n        timeline[lastIndex].durationHours = Number(adjustedHours.toFixed(1));\n      }\n    }\n    // Step 3: Categorize times as development or testing\n    timeline.forEach(entry => {\n      if (!entry.durationHours) return;\n      const state = entry.state.toLowerCase();\n      // Categorize states\n      if (state.includes('new') || state.includes('proposed') || state.includes('backlog')) {\n        // Planning time - not counted in the estimate\n      } else if (state.includes('active') || state.includes('progress') || state.includes('development')) {\n        // Development time\n        result.development += entry.durationHours;\n      } else if (state.includes('review') || state.includes('test') || state.includes('qa')) {\n        // Testing/Review time\n        result.testing += entry.durationHours;\n      } else if (state.includes('resolved') || state.includes('done') || state.includes('closed')) {\n        // Completion time - typically minimal, add to testing\n        result.testing += entry.durationHours * 0.5;\n      } else {\n        // Unknown state, distribute proportionally\n        result.development += entry.durationHours * 0.6;\n        result.testing += entry.durationHours * 0.4;\n      }\n    });\n    // Step 4: Calculate total time\n    result.total = Number((result.development + result.testing).toFixed(1));\n    // Ensure we have a minimum reasonable value\n    if (result.total < 0.5) {\n      // If calculated time is too small, use type/complexity approach as fallback\n      const complexity = this.determineComplexity(workItem);\n      const baseHours = this.getBaseHoursByType(this.getWorkItemType(workItem));\n      const multiplier = this.getComplexityMultiplier(complexity);\n      result.total = Number((baseHours * multiplier).toFixed(1));\n      result.development = Number((result.total * 0.65).toFixed(1));\n      result.testing = Number((result.total * 0.35).toFixed(1));\n    }\n    // Round to 1 decimal place\n    result.development = Number(result.development.toFixed(1));\n    result.testing = Number(result.testing.toFixed(1));\n    console.log(`Estimated from history: Total=${result.total}, Dev=${result.development}, Test=${result.testing}`);\n    return result;\n  }\n  // Update human estimation values\n  updateHumanEstimation() {\n    const devHours = parseFloat(this.estimationForm.get('manualDevHours')?.value || '2');\n    const testHours = parseFloat(this.estimationForm.get('manualTestHours')?.value || '1');\n    this.humanDevHours = isNaN(devHours) ? 2 : devHours;\n    this.humanTestHours = isNaN(testHours) ? 1 : testHours;\n    this.humanTotalHours = this.humanDevHours + this.humanTestHours;\n  }\n  static {\n    this.ɵfac = function TaskEstimationComponent_Factory(t) {\n      return new (t || TaskEstimationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EstimationService), i0.ɵɵdirectiveInject(i3.TaskService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskEstimationComponent,\n      selectors: [[\"app-task-estimation\"]],\n      decls: 113,\n      vars: 33,\n      consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"mb-0\"], [1, \"text-muted\", \"mt-2\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"mb-0\"], [1, \"card-body\"], [1, \"row\", \"g-3\", \"align-items-center\"], [1, \"col-md-6\"], [1, \"input-group\"], [\"for\", \"manualIterationPath\", 1, \"input-group-text\"], [\"type\", \"text\", \"id\", \"manualIterationPath\", \"placeholder\", \"Enter iteration path (e.g. Techoil\\\\2.3.23)\", \"aria-label\", \"Manual Iteration Path\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-search\"], [\"class\", \"text-danger mt-2\", 4, \"ngIf\"], [1, \"row\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [\"class\", \"badge bg-primary\", 4, \"ngIf\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"taskTitle\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"taskTitle\", \"formControlName\", \"title\", \"placeholder\", \"Enter or select task title\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"btn btn-outline-secondary\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"text-danger mt-1\", 4, \"ngIf\"], [\"class\", \"text-success mt-1\", 4, \"ngIf\"], [\"for\", \"taskType\", 1, \"form-label\"], [\"id\", \"taskType\", \"formControlName\", \"type\", 1, \"form-select\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"assignee\", 1, \"form-label\"], [\"id\", \"assignee\", \"formControlName\", \"assignee\", 1, \"form-select\"], [\"value\", \"\"], [\"for\", \"testCasesUpload\", 1, \"form-label\"], [\"type\", \"file\", \"id\", \"testCasesUpload\", \"accept\", \".xlsx,.xls,.csv,.txt\", 1, \"form-control\", 3, \"change\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-x-lg\"], [\"class\", \"mt-2\", 4, \"ngIf\"], [\"for\", \"userStoryId\", 1, \"form-label\"], [1, \"input-group-text\"], [\"type\", \"text\", \"id\", \"userStoryId\", \"formControlName\", \"userStoryId\", \"placeholder\", \"Enter user story ID\", 1, \"form-control\"], [1, \"form-label\"], [1, \"d-flex\"], [\"class\", \"form-check me-3\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-muted mt-1\", 4, \"ngIf\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"id\", \"humanEstimationSwitch\", \"formControlName\", \"useHumanEstimation\", 1, \"form-check-input\"], [\"for\", \"humanEstimationSwitch\", 1, \"form-check-label\"], [\"class\", \"bg-light p-3 mt-2 rounded\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-between\", \"mt-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-arrow-counterclockwise\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"row\", \"mt-4\"], [1, \"col-md-12\"], [\"class\", \"alert alert-danger mb-4\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"class\", \"card bg-light\", 4, \"ngIf\"], [1, \"text-danger\", \"mt-2\"], [1, \"badge\", \"bg-primary\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"mt-2\", \"text-muted\"], [1, \"text-muted\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\", \"table-striped\"], [\"scope\", \"col\"], [\"style\", \"cursor: pointer;\", 3, \"table-primary\", \"click\", 4, \"ngFor\", \"ngForOf\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"fw-bold\"], [1, \"badge\", \"rounded-pill\", 3, \"ngClass\"], [1, \"bi\", \"bi-person\", \"me-1\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"text-danger\", \"mt-1\"], [1, \"text-success\", \"mt-1\"], [3, \"value\"], [1, \"bi\", \"bi-check-circle\"], [1, \"mt-2\"], [1, \"alert\", \"alert-info\", \"py-2\"], [1, \"bi\", \"bi-info-circle\"], [1, \"alert\", \"alert-success\", \"py-2\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"bi\", \"bi-journal-check\"], [1, \"badge\", \"bg-info\"], [1, \"mt-1\"], [1, \"form-check\", \"me-3\"], [\"type\", \"radio\", \"formControlName\", \"complexity\", 1, \"form-check-input\", 3, \"id\", \"value\"], [1, \"form-check-label\", 3, \"for\"], [1, \"text-muted\", \"mt-1\"], [1, \"bg-light\", \"p-3\", \"mt-2\", \"rounded\"], [1, \"mb-2\"], [\"for\", \"manualDevHours\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"manualDevHours\", \"formControlName\", \"manualDevHours\", \"min\", \"0.5\", \"step\", \"0.5\", \"placeholder\", \"Enter development hours\", 1, \"form-control\"], [\"for\", \"manualTestHours\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"manualTestHours\", \"formControlName\", \"manualTestHours\", \"min\", \"0.5\", \"step\", \"0.5\", \"placeholder\", \"Enter testing hours\", 1, \"form-control\"], [1, \"bi\", \"bi-stopwatch\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\", \"mb-4\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"bi\", \"bi-graph-up\", \"me-2\"], [1, \"card\", \"h-100\", \"mb-0\"], [1, \"card-header\", \"bg-info\", \"text-white\"], [1, \"bi\", \"bi-robot\", \"me-2\"], [1, \"mb-4\", \"text-center\"], [1, \"display-5\", \"mb-0\"], [1, \"row\", \"text-center\", \"mb-3\"], [1, \"col-6\"], [1, \"p-2\", \"bg-light\", \"rounded\"], [1, \"text-muted\", \"mb-0\", \"small\"], [1, \"progress\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", 3, \"ngClass\"], [1, \"list-group\", \"list-group-flush\", \"small\"], [\"class\", \"list-group-item px-0\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"list-group-item px-0\", 4, \"ngIf\"], [1, \"card-footer\", \"bg-light\", \"small\"], [1, \"card-header\", \"bg-success\", \"text-white\"], [1, \"bi\", \"bi-person\", \"me-2\"], [\"role\", \"progressbar\", \"aria-valuenow\", \"100\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", \"bg-success\", 2, \"width\", \"100%\"], [1, \"list-group-item\", \"px-0\"], [1, \"bi\", \"bi-check-circle-fill\", \"text-success\"], [1, \"alert\", 3, \"ngClass\"], [1, \"mb-1\"], [1, \"badge\", \"bg-dark\", \"p-2\"], [1, \"h5\", \"mb-0\"], [1, \"d-block\"], [1, \"card-footer\", \"text-muted\", \"small\"], [1, \"bi\", \"bi-lightbulb\"], [1, \"bi\", \"bi-checklist\"], [1, \"bi\", \"bi-journal-text\"], [1, \"card\", \"bg-light\"], [1, \"card-body\", \"text-center\", \"p-5\"], [1, \"bi\", \"bi-graph-up\", \"display-1\", \"text-muted\"], [1, \"mt-3\"]],\n      template: function TaskEstimationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\", 3);\n          i0.ɵɵtext(4, \"ML-Based Task Estimation\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p\", 4);\n          i0.ɵɵtext(6, \"Estimate task duration using machine learning predictions based on historical data\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 2)(9, \"div\", 5)(10, \"div\", 6)(11, \"h4\", 7);\n          i0.ɵɵtext(12, \"Enter Iteration Path\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 8)(14, \"div\", 9)(15, \"div\", 10)(16, \"div\", 11)(17, \"label\", 12);\n          i0.ɵɵtext(18, \"Iteration Path\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"input\", 13);\n          i0.ɵɵlistener(\"ngModelChange\", function TaskEstimationComponent_Template_input_ngModelChange_19_listener($event) {\n            return ctx.manualIterationPath = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"button\", 14);\n          i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_20_listener() {\n            return ctx.loadWorkItemsByIteration();\n          });\n          i0.ɵɵelement(21, \"i\", 15);\n          i0.ɵɵtext(22, \" Load Items \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(23, TaskEstimationComponent_div_23_Template, 3, 1, \"div\", 16);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(24, \"div\", 17)(25, \"div\", 10)(26, \"div\", 5)(27, \"div\", 18)(28, \"h4\", 7);\n          i0.ɵɵtext(29, \"Work Items\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(30, TaskEstimationComponent_span_30_Template, 2, 1, \"span\", 19);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"div\", 8);\n          i0.ɵɵtemplate(32, TaskEstimationComponent_div_32_Template, 6, 0, \"div\", 20);\n          i0.ɵɵtemplate(33, TaskEstimationComponent_div_33_Template, 3, 0, \"div\", 20);\n          i0.ɵɵtemplate(34, TaskEstimationComponent_div_34_Template, 14, 1, \"div\", 21);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(35, \"div\", 10)(36, \"div\", 5)(37, \"div\", 6)(38, \"h4\", 7);\n          i0.ɵɵtemplate(39, TaskEstimationComponent_span_39_Template, 2, 1, \"span\", 22);\n          i0.ɵɵtemplate(40, TaskEstimationComponent_span_40_Template, 2, 0, \"span\", 22);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(41, \"div\", 8)(42, \"form\", 23);\n          i0.ɵɵlistener(\"ngSubmit\", function TaskEstimationComponent_Template_form_ngSubmit_42_listener() {\n            return ctx.estimateTaskTime();\n          });\n          i0.ɵɵelementStart(43, \"div\", 24)(44, \"label\", 25);\n          i0.ɵɵtext(45, \"Task Title\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(46, \"div\", 11);\n          i0.ɵɵelement(47, \"input\", 26);\n          i0.ɵɵtemplate(48, TaskEstimationComponent_button_48_Template, 2, 0, \"button\", 27);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(49, TaskEstimationComponent_div_49_Template, 3, 2, \"div\", 28);\n          i0.ɵɵtemplate(50, TaskEstimationComponent_div_50_Template, 3, 1, \"div\", 29);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(51, \"div\", 17)(52, \"div\", 10)(53, \"div\", 24)(54, \"label\", 30);\n          i0.ɵɵtext(55, \"Task Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(56, \"select\", 31);\n          i0.ɵɵtemplate(57, TaskEstimationComponent_option_57_Template, 2, 2, \"option\", 32);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(58, \"div\", 10)(59, \"div\", 24)(60, \"label\", 33);\n          i0.ɵɵtext(61, \"Assignee\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(62, \"select\", 34)(63, \"option\", 35);\n          i0.ɵɵtext(64, \"-- Unassigned --\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(65, TaskEstimationComponent_option_65_Template, 2, 2, \"option\", 32);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(66, \"div\", 24)(67, \"label\", 36);\n          i0.ɵɵtext(68, \"Upload Test Cases\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(69, \"div\", 11)(70, \"input\", 37);\n          i0.ɵɵlistener(\"change\", function TaskEstimationComponent_Template_input_change_70_listener($event) {\n            return ctx.onTestCasesUpload($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(71, \"button\", 38);\n          i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_71_listener() {\n            return ctx.clearTestCases();\n          });\n          i0.ɵɵelement(72, \"i\", 39);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(73, TaskEstimationComponent_div_73_Template, 4, 1, \"div\", 29);\n          i0.ɵɵtemplate(74, TaskEstimationComponent_div_74_Template, 7, 1, \"div\", 40);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(75, \"div\", 24)(76, \"label\", 41);\n          i0.ɵɵtext(77, \"Related User Story\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(78, \"div\", 11)(79, \"span\", 42);\n          i0.ɵɵtext(80, \"#\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(81, \"input\", 43);\n          i0.ɵɵelementStart(82, \"button\", 14);\n          i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_82_listener() {\n            return ctx.checkUserStory();\n          });\n          i0.ɵɵelement(83, \"i\", 15);\n          i0.ɵɵtext(84, \" Check \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(85, TaskEstimationComponent_div_85_Template, 13, 3, \"div\", 40);\n          i0.ɵɵtemplate(86, TaskEstimationComponent_div_86_Template, 3, 1, \"div\", 28);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(87, \"div\", 24)(88, \"label\", 44);\n          i0.ɵɵtext(89, \"Complexity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(90, \"div\", 45);\n          i0.ɵɵtemplate(91, TaskEstimationComponent_div_91_Template, 4, 4, \"div\", 46);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(92, TaskEstimationComponent_div_92_Template, 4, 0, \"div\", 47);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(93, \"div\", 24)(94, \"label\", 44);\n          i0.ɵɵtext(95, \"Estimation Method\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(96, \"div\", 48);\n          i0.ɵɵelement(97, \"input\", 49);\n          i0.ɵɵelementStart(98, \"label\", 50);\n          i0.ɵɵtext(99, \" Human Development Estimation (without AI) \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(100, TaskEstimationComponent_div_100_Template, 9, 0, \"div\", 51);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(101, \"div\", 52)(102, \"button\", 53);\n          i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_102_listener() {\n            return ctx.resetForm();\n          });\n          i0.ɵɵelement(103, \"i\", 54);\n          i0.ɵɵtext(104, \" Reset \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(105, \"button\", 55);\n          i0.ɵɵtemplate(106, TaskEstimationComponent_span_106_Template, 3, 0, \"span\", 22);\n          i0.ɵɵtemplate(107, TaskEstimationComponent_span_107_Template, 3, 0, \"span\", 22);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(108, \"div\", 56)(109, \"div\", 57);\n          i0.ɵɵtemplate(110, TaskEstimationComponent_div_110_Template, 2, 1, \"div\", 58);\n          i0.ɵɵtemplate(111, TaskEstimationComponent_div_111_Template, 115, 25, \"div\", 59);\n          i0.ɵɵtemplate(112, TaskEstimationComponent_div_112_Template, 7, 0, \"div\", 60);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          let tmp_11_0;\n          let tmp_12_0;\n          let tmp_19_0;\n          let tmp_24_0;\n          i0.ɵɵadvance(19);\n          i0.ɵɵproperty(\"ngModel\", ctx.manualIterationPath);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", !ctx.manualIterationPath);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.iterationError);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.workItems.length > 0);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.loadingIterationItems);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length === 0 && !ctx.iterationError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length > 0);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.selectedWorkItem);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.estimationForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(31, _c2, ctx.selectedWorkItem !== null));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (tmp_11_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_11_0.value);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_12_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_12_0.invalid) && ((tmp_12_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_12_0.touched));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.taskTypes);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngForOf\", ctx.teamMembers);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"disabled\", !ctx.testCasesFile);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.testCasesFile);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.testCaseCount > 0);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"disabled\", !((tmp_19_0 = ctx.estimationForm.get(\"userStoryId\")) == null ? null : tmp_19_0.value));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.userStoryDetails);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.userStoryError);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.complexityLevels);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", (tmp_24_0 = ctx.estimationForm.get(\"useHumanEstimation\")) == null ? null : tmp_24_0.value);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"disabled\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showResult && ctx.estimationResult);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.showResult && !ctx.error);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.CheckboxControlValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MinValidator, i1.NgModel, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"h2[_ngcontent-%COMP%] {\\n  margin-bottom: 1.5rem;\\n  color: #2c3e50;\\n}\\n\\n[_nghost-%COMP%] {\\n  display: block;\\n  background-color: #e8eaf6;\\n}\\n\\n.container-fluid[_ngcontent-%COMP%] {\\n  background-color: #e8eaf6;\\n  padding-top: 1.5rem;\\n  padding-bottom: 1.5rem;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  padding-top: 1.5rem;\\n}\\n\\n.display-4[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  transition: all 0.3s ease;\\n  background-color: #f5f7ff;\\n}\\n.card[_ngcontent-%COMP%]:hover {\\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\\n}\\n.card[_ngcontent-%COMP%]   .card-header[_ngcontent-%COMP%] {\\n  background-color: #c5cae9;\\n  color: #3949ab;\\n  font-weight: 600;\\n}\\n.card[_ngcontent-%COMP%]   .card-body[_ngcontent-%COMP%] {\\n  background-color: #f5f7ff;\\n}\\n\\n.progress[_ngcontent-%COMP%] {\\n  height: 25px;\\n  font-weight: 600;\\n}\\n\\n.list-group-item[_ngcontent-%COMP%]:first-child {\\n  font-weight: 500;\\n}\\n\\n.bg-light[_ngcontent-%COMP%] {\\n  opacity: 0.8;\\n}\\n.bg-light[_ngcontent-%COMP%]   i.bi-graph-up[_ngcontent-%COMP%] {\\n  opacity: 0.5;\\n}\\n\\n.form-check[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n.form-check[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%], .form-check[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n\\n@keyframes _ngcontent-%COMP%_fadeIn {\\n  from {\\n    opacity: 0;\\n    transform: translateY(10px);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n}\\n.alert[_ngcontent-%COMP%], .card[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_fadeIn 0.3s ease-out;\\n}\\n\\n.table-responsive[_ngcontent-%COMP%] {\\n  max-height: 450px;\\n  overflow-y: auto;\\n  background-color: #eef2ff;\\n  border-radius: 0.375rem;\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\\n}\\n\\n.table[_ngcontent-%COMP%] {\\n  font-size: 0.9rem;\\n  background-color: #eef2ff;\\n}\\n.table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%] {\\n  position: sticky;\\n  top: 0;\\n  background-color: #c5cae9;\\n  z-index: 1;\\n}\\n.table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n  color: #3949ab;\\n  text-transform: uppercase;\\n  font-size: 0.75rem;\\n  letter-spacing: 0.5px;\\n  padding-top: 12px;\\n  padding-bottom: 12px;\\n  border-top: none;\\n  border-bottom: 2px solid #9fa8da;\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\\n  transition: background-color 0.2s;\\n  background-color: #e8eaf6;\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(even) {\\n  background-color: #d1d9ff;\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover {\\n  background-color: #c5cae9;\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr.table-primary[_ngcontent-%COMP%] {\\n  background-color: #bbdefb;\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr.table-primary[_ngcontent-%COMP%]:hover {\\n  background-color: #90caf9;\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\n  vertical-align: middle;\\n  padding: 0.75rem;\\n  border-color: #c5cae9;\\n}\\n.table[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%] {\\n  font-size: 0.75rem;\\n}\\n\\n.form-select.ng-touched.ng-valid[_ngcontent-%COMP%], .form-control.ng-touched.ng-valid[_ngcontent-%COMP%] {\\n  border-color: #28a745;\\n}\\n\\n.form-check-input[_ngcontent-%COMP%]:checked {\\n  background-color: #0d6efd;\\n  border-color: #0d6efd;\\n}\\n\\n.badge[_ngcontent-%COMP%] {\\n  padding: 0.5em 0.75em;\\n  font-size: 0.8rem;\\n  font-weight: 600;\\n  letter-spacing: 0.2px;\\n  text-transform: capitalize;\\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\\n}\\n.badge.badge-code-review[_ngcontent-%COMP%] {\\n  background-color: #00c3f7 !important;\\n  color: white;\\n  font-weight: 600;\\n  position: relative;\\n}\\n.badge.badge-code-review[_ngcontent-%COMP%]::after {\\n  content: \\\"\\\";\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 100%);\\n  border-radius: inherit;\\n}\\n.badge.bg-info[_ngcontent-%COMP%] {\\n  background-color: #17a2b8 !important;\\n  color: white;\\n}\\n.badge.bg-primary[_ngcontent-%COMP%] {\\n  background-color: #6610f2 !important;\\n  color: white;\\n}\\n.badge.bg-success[_ngcontent-%COMP%] {\\n  background-color: #28a745 !important;\\n  color: white;\\n}\\n.badge.bg-warning[_ngcontent-%COMP%] {\\n  background-color: #ffc107 !important;\\n  color: #212529;\\n  font-weight: 700;\\n}\\n.badge.bg-danger[_ngcontent-%COMP%] {\\n  background-color: #dc3545 !important;\\n  color: white;\\n}\\n.badge.bg-dark[_ngcontent-%COMP%] {\\n  background-color: #343a40 !important;\\n  color: white;\\n}\\n.badge.badge-dev-new[_ngcontent-%COMP%] {\\n  background-color: #2c3e50 !important;\\n  color: white;\\n  font-weight: 600;\\n}\\n.badge.bg-light[_ngcontent-%COMP%] {\\n  background-color: #9575cd !important;\\n  border: 1px solid #7e57c2 !important;\\n  color: white !important;\\n}\\n.badge.bg-light.text-dark[_ngcontent-%COMP%] {\\n  color: white !important;\\n  font-weight: 700;\\n}\\n.badge.bg-secondary[_ngcontent-%COMP%] {\\n  background-color: #5c6bc0 !important;\\n  color: white;\\n}\\n.badge[class*=bg-][_ngcontent-%COMP%] {\\n  border-radius: 12px;\\n  transition: all 0.2s ease;\\n}\\n.badge[class*=bg-][_ngcontent-%COMP%]:hover {\\n  transform: translateY(-1px);\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\\n}\\n\\n.badge-ready[_ngcontent-%COMP%] {\\n  background-color: #7986cb !important;\\n  color: white !important;\\n}\\n\\n.badge-assigned[_ngcontent-%COMP%] {\\n  background-color: #9fa8da !important;\\n  color: #3949ab !important;\\n}\\n\\n.badge-na[_ngcontent-%COMP%] {\\n  background-color: #5c6bc0 !important;\\n  color: white !important;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWVzdGltYXRpb24vdGFzay1lc3RpbWF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UscUJBQUE7RUFDQSxjQUFBO0FBQ0Y7O0FBR0E7RUFDRSxjQUFBO0VBQ0EseUJBQUE7QUFBRjs7QUFHQTtFQUNFLHlCQUFBO0VBQ0EsbUJBQUE7RUFDQSxzQkFBQTtBQUFGOztBQUdBO0VBQ0UsbUJBQUE7QUFBRjs7QUFHQTtFQUNFLGdCQUFBO0FBQUY7O0FBR0E7RUFDRSx3Q0FBQTtFQUNBLHlCQUFBO0VBQ0EseUJBQUE7QUFBRjtBQUVFO0VBQ0UsMENBQUE7QUFBSjtBQUdFO0VBQ0UseUJBQUE7RUFDQSxjQUFBO0VBQ0EsZ0JBQUE7QUFESjtBQUlFO0VBQ0UseUJBQUE7QUFGSjs7QUFNQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUhGOztBQU9FO0VBQ0UsZ0JBQUE7QUFKSjs7QUFRQTtFQUNFLFlBQUE7QUFMRjtBQU9FO0VBQ0UsWUFBQTtBQUxKOztBQVNBO0VBQ0UsZUFBQTtBQU5GO0FBUUU7RUFDRSxlQUFBO0FBTko7O0FBV0E7RUFDRTtJQUFPLFVBQUE7SUFBWSwyQkFBQTtFQU5uQjtFQU9BO0lBQUssVUFBQTtJQUFZLHdCQUFBO0VBSGpCO0FBQ0Y7QUFLQTtFQUNFLCtCQUFBO0FBSEY7O0FBT0E7RUFDRSxpQkFBQTtFQUNBLGdCQUFBO0VBQ0EseUJBQUE7RUFDQSx1QkFBQTtFQUNBLHlDQUFBO0FBSkY7O0FBUUE7RUFDRSxpQkFBQTtFQUNBLHlCQUFBO0FBTEY7QUFPRTtFQUNFLGdCQUFBO0VBQ0EsTUFBQTtFQUNBLHlCQUFBO0VBQ0EsVUFBQTtBQUxKO0FBT0k7RUFDRSxnQkFBQTtFQUNBLGNBQUE7RUFDQSx5QkFBQTtFQUNBLGtCQUFBO0VBQ0EscUJBQUE7RUFDQSxpQkFBQTtFQUNBLG9CQUFBO0VBQ0EsZ0JBQUE7RUFDQSxnQ0FBQTtBQUxOO0FBU0U7RUFDRSxpQ0FBQTtFQUNBLHlCQUFBO0FBUEo7QUFTSTtFQUNFLHlCQUFBO0FBUE47QUFVSTtFQUNFLHlCQUFBO0FBUk47QUFXSTtFQUNFLHlCQUFBO0FBVE47QUFXTTtFQUNFLHlCQUFBO0FBVFI7QUFhSTtFQUNFLHNCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxxQkFBQTtBQVhOO0FBZUU7RUFDRSxrQkFBQTtBQWJKOztBQW1CRTtFQUNFLHFCQUFBO0FBaEJKOztBQXFCQTtFQUNFLHlCQUFBO0VBQ0EscUJBQUE7QUFsQkY7O0FBc0JBO0VBQ0UscUJBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0VBQ0EscUJBQUE7RUFDQSwwQkFBQTtFQUNBLHdDQUFBO0FBbkJGO0FBc0JFO0VBQ0Usb0NBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtBQXBCSjtBQXNCSTtFQUNFLFdBQUE7RUFDQSxrQkFBQTtFQUNBLE1BQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLE9BQUE7RUFDQSw2RkFBQTtFQUNBLHNCQUFBO0FBcEJOO0FBeUJFO0VBQ0Usb0NBQUE7RUFDQSxZQUFBO0FBdkJKO0FBMkJFO0VBQ0Usb0NBQUE7RUFDQSxZQUFBO0FBekJKO0FBNkJFO0VBQ0Usb0NBQUE7RUFDQSxZQUFBO0FBM0JKO0FBK0JFO0VBQ0Usb0NBQUE7RUFDQSxjQUFBO0VBQ0EsZ0JBQUE7QUE3Qko7QUFpQ0U7RUFDRSxvQ0FBQTtFQUNBLFlBQUE7QUEvQko7QUFtQ0U7RUFDRSxvQ0FBQTtFQUNBLFlBQUE7QUFqQ0o7QUFxQ0U7RUFDRSxvQ0FBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtBQW5DSjtBQXVDRTtFQUNFLG9DQUFBO0VBQ0Esb0NBQUE7RUFDQSx1QkFBQTtBQXJDSjtBQXVDSTtFQUNFLHVCQUFBO0VBQ0EsZ0JBQUE7QUFyQ047QUEwQ0U7RUFDRSxvQ0FBQTtFQUNBLFlBQUE7QUF4Q0o7QUE0Q0U7RUFDRSxtQkFBQTtFQUNBLHlCQUFBO0FBMUNKO0FBNENJO0VBQ0UsMkJBQUE7RUFDQSx5Q0FBQTtBQTFDTjs7QUFnREE7RUFDRSxvQ0FBQTtFQUNBLHVCQUFBO0FBN0NGOztBQWdEQTtFQUNFLG9DQUFBO0VBQ0EseUJBQUE7QUE3Q0Y7O0FBZ0RBO0VBQ0Usb0NBQUE7RUFDQSx1QkFBQTtBQTdDRiIsInNvdXJjZXNDb250ZW50IjpbImgyIHtcclxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XHJcbiAgY29sb3I6ICMyYzNlNTA7XHJcbn1cclxuXHJcbi8vIEJhY2tncm91bmQgZm9yIHRoZSBlbnRpcmUgY29tcG9uZW50XHJcbjpob3N0IHtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZThlYWY2O1xyXG59XHJcblxyXG4uY29udGFpbmVyLWZsdWlkIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZThlYWY2O1xyXG4gIHBhZGRpbmctdG9wOiAxLjVyZW07XHJcbiAgcGFkZGluZy1ib3R0b206IDEuNXJlbTtcclxufVxyXG5cclxuLmNvbnRhaW5lciB7XHJcbiAgcGFkZGluZy10b3A6IDEuNXJlbTtcclxufVxyXG5cclxuLmRpc3BsYXktNCB7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG5cclxuLmNhcmQge1xyXG4gIGJveC1zaGFkb3c6IDAgNHB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmN2ZmO1xyXG4gIFxyXG4gICY6aG92ZXIge1xyXG4gICAgYm94LXNoYWRvdzogMCA2cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xyXG4gIH1cclxuICBcclxuICAuY2FyZC1oZWFkZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2M1Y2FlOTtcclxuICAgIGNvbG9yOiAjMzk0OWFiO1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICB9XHJcbiAgXHJcbiAgLmNhcmQtYm9keSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmN2ZmO1xyXG4gIH1cclxufVxyXG5cclxuLnByb2dyZXNzIHtcclxuICBoZWlnaHQ6IDI1cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG5cclxuLmxpc3QtZ3JvdXAtaXRlbSB7XHJcbiAgJjpmaXJzdC1jaGlsZCB7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gIH1cclxufVxyXG5cclxuLmJnLWxpZ2h0IHtcclxuICBvcGFjaXR5OiAwLjg7XHJcbiAgXHJcbiAgaS5iaS1ncmFwaC11cCB7XHJcbiAgICBvcGFjaXR5OiAwLjU7XHJcbiAgfVxyXG59XHJcblxyXG4uZm9ybS1jaGVjayB7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIFxyXG4gIC5mb3JtLWNoZWNrLWlucHV0LCAuZm9ybS1jaGVjay1sYWJlbCB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBBZGQgc29tZSBhbmltYXRpb24gZWZmZWN0c1xyXG5Aa2V5ZnJhbWVzIGZhZGVJbiB7XHJcbiAgZnJvbSB7IG9wYWNpdHk6IDA7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMHB4KTsgfVxyXG4gIHRvIHsgb3BhY2l0eTogMTsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyB9XHJcbn1cclxuXHJcbi5hbGVydCwgLmNhcmQge1xyXG4gIGFuaW1hdGlvbjogZmFkZUluIDAuM3MgZWFzZS1vdXQ7XHJcbn1cclxuXHJcbi8vIEN1c3RvbSBzdHlsaW5nIGZvciB0aGUgd29yayBpdGVtcyB0YWJsZVxyXG4udGFibGUtcmVzcG9uc2l2ZSB7XHJcbiAgbWF4LWhlaWdodDogNDUwcHg7XHJcbiAgb3ZlcmZsb3cteTogYXV0bztcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVmMmZmO1xyXG4gIGJvcmRlci1yYWRpdXM6IDAuMzc1cmVtO1xyXG4gIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMDUpO1xyXG59XHJcblxyXG4vLyBFbmhhbmNlZCB0YWJsZSBzdHlsaW5nXHJcbi50YWJsZSB7XHJcbiAgZm9udC1zaXplOiAwLjlyZW07XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZjJmZjtcclxuICBcclxuICB0aGVhZCB7XHJcbiAgICBwb3NpdGlvbjogc3RpY2t5O1xyXG4gICAgdG9wOiAwO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2M1Y2FlOTtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICBcclxuICAgIHRoIHtcclxuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgICAgY29sb3I6ICMzOTQ5YWI7XHJcbiAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgIGZvbnQtc2l6ZTogMC43NXJlbTtcclxuICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuNXB4O1xyXG4gICAgICBwYWRkaW5nLXRvcDogMTJweDtcclxuICAgICAgcGFkZGluZy1ib3R0b206IDEycHg7XHJcbiAgICAgIGJvcmRlci10b3A6IG5vbmU7XHJcbiAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjOWZhOGRhO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0Ym9keSB0ciB7XHJcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnM7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZThlYWY2O1xyXG4gICAgXHJcbiAgICAmOm50aC1jaGlsZChldmVuKSB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkMWQ5ZmY7XHJcbiAgICB9XHJcbiAgICBcclxuICAgICY6aG92ZXIge1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzVjYWU5O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAmLnRhYmxlLXByaW1hcnkge1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmJkZWZiO1xyXG4gICAgICBcclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzkwY2FmOTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0ZCB7XHJcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgIHBhZGRpbmc6IDAuNzVyZW07XHJcbiAgICAgIGJvcmRlci1jb2xvcjogI2M1Y2FlOTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLmJhZGdlIHtcclxuICAgIGZvbnQtc2l6ZTogMC43NXJlbTtcclxuICB9XHJcbn1cclxuXHJcbi8vIEN1c3RvbSBmb3JtIHN0eWxpbmdcclxuLmZvcm0tc2VsZWN0LCAuZm9ybS1jb250cm9sIHtcclxuICAmLm5nLXRvdWNoZWQubmctdmFsaWQge1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1O1xyXG4gIH1cclxufVxyXG5cclxuLy8gSW1wcm92ZSByYWRpbyBidXR0b25zIHZpc2liaWxpdHlcclxuLmZvcm0tY2hlY2staW5wdXQ6Y2hlY2tlZCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzBkNmVmZDtcclxuICBib3JkZXItY29sb3I6ICMwZDZlZmQ7XHJcbn1cclxuXHJcbi8vIFN0YXRlIGJhZGdlIGVuaGFuY2VtZW50c1xyXG4uYmFkZ2Uge1xyXG4gIHBhZGRpbmc6IDAuNWVtIDAuNzVlbTtcclxuICBmb250LXNpemU6IDAuOHJlbTtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGxldHRlci1zcGFjaW5nOiAwLjJweDtcclxuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcclxuICBib3gtc2hhZG93OiAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG4gIFxyXG4gIC8vIENvZGUgUmV2aWV3IHN0YXRlIC0gc3BlY2lmaWMgc3R5bGluZyB0byBtYXRjaCB0aGUgaW1hZ2VcclxuICAmLmJhZGdlLWNvZGUtcmV2aWV3IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMGMzZjcgIWltcG9ydGFudDsgLy8gQnJpZ2h0IGJsdWUgbGlrZSBpbiB0aGUgaW1hZ2VcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBcclxuICAgICY6OmFmdGVyIHtcclxuICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICB0b3A6IDA7XHJcbiAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICBib3R0b206IDA7XHJcbiAgICAgIGxlZnQ6IDA7XHJcbiAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIHJnYmEoMjU1LDI1NSwyNTUsMC4xKSAwJSwgcmdiYSgyNTUsMjU1LDI1NSwwKSAxMDAlKTtcclxuICAgICAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gQ29kZSBSZXZpZXcgc3RhdGUgKGJsdWUpXHJcbiAgJi5iZy1pbmZvIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxN2EyYjggIWltcG9ydGFudDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICB9XHJcbiAgXHJcbiAgLy8gSW4gUHJvZ3Jlc3Mgc3RhdGUgKGluZGlnbylcclxuICAmLmJnLXByaW1hcnkge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzY2MTBmMiAhaW1wb3J0YW50O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gIH1cclxuICBcclxuICAvLyBDb21wbGV0ZS9Eb25lIHN0YXRlIChncmVlbilcclxuICAmLmJnLXN1Y2Nlc3Mge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NSAhaW1wb3J0YW50O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gIH1cclxuICBcclxuICAvLyBQZW5kaW5nL1dhaXQgc3RhdGUgKGFtYmVyKVxyXG4gICYuYmctd2FybmluZyB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3ICFpbXBvcnRhbnQ7XHJcbiAgICBjb2xvcjogIzIxMjUyOTtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIEZhaWxlZC9CbG9ja2VkIHN0YXRlIChyZWQpXHJcbiAgJi5iZy1kYW5nZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NSAhaW1wb3J0YW50O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gIH1cclxuICBcclxuICAvLyBOZXcgc3RhdGUgKGRhcmspXHJcbiAgJi5iZy1kYXJrIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDAgIWltcG9ydGFudDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICB9XHJcbiAgXHJcbiAgLy8gRGV2LU5ldyBzdGF0ZSAoZGFyayB0ZWFsKVxyXG4gICYuYmFkZ2UtZGV2LW5ldyB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmMzZTUwICFpbXBvcnRhbnQ7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gIH1cclxuICBcclxuICAvLyBSZWFkeS9Bc3NpZ25lZCBzdGF0ZSAocHJldmlvdXNseSBsaWdodCB3aXRoIGJvcmRlcilcclxuICAmLmJnLWxpZ2h0IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM5NTc1Y2QgIWltcG9ydGFudDsgLy8gTGlnaHQgcHVycGxlIGluc3RlYWQgb2Ygd2hpdGUvZ3JheVxyXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzdlNTdjMiAhaW1wb3J0YW50O1xyXG4gICAgY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XHJcbiAgICBcclxuICAgICYudGV4dC1kYXJrIHtcclxuICAgICAgY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vIERlZmF1bHQvT3RoZXIgc3RhdGVzIChwcmV2aW91c2x5IGdyYXkpXHJcbiAgJi5iZy1zZWNvbmRhcnkge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzVjNmJjMCAhaW1wb3J0YW50OyAvLyBJbmRpZ28gaW5zdGVhZCBvZiBncmF5XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIFR5cGUgYmFkZ2VzXHJcbiAgJltjbGFzcyo9XCJiZy1cIl0ge1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTJweDtcclxuICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XHJcbiAgICBcclxuICAgICY6aG92ZXIge1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7XHJcbiAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gQXBwbHkgc29tZSBhZGRpdGlvbmFsIGNvbG9ycyBmb3Igc3BlY2lmaWMgc3RhdGUgdHlwZXMgdGhhdCBtaWdodCBoYXZlIGJlZW4gbWlzc2VkXHJcbi5iYWRnZS1yZWFkeSB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzc5ODZjYiAhaW1wb3J0YW50OyAvLyBJbmRpZ28tMzAwXHJcbiAgY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5iYWRnZS1hc3NpZ25lZCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzlmYThkYSAhaW1wb3J0YW50OyAvLyBJbmRpZ28tMjAwXHJcbiAgY29sb3I6ICMzOTQ5YWIgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmJhZGdlLW5hIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWM2YmMwICFpbXBvcnRhbnQ7IC8vIEluZGlnby00MDBcclxuICBjb2xvcjogd2hpdGUgIWltcG9ydGFudDtcclxufSAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","WorkItem","debounceTime","distinctUntilChanged","i0","TaskEstimationComponent","constructor","fb","estimationService","taskService","estimationForm","group","title","required","minLength","type","assignee","complexity","userStoryId","manualDevHours","min","manualTestHours","get","valueChanges","subscribe","value","updateHumanEstimation","ngOnInit","loadTeamMembers","pipe","length","autoPopulateFormFields","getTeamMembers","next","response","console","log","Array","isArray","warn","teamMembers","filter","m","displayName","map","commonUsers","forEach","user","includes","push","error","err","workItems","matchingItem","find","item","toLowerCase","selectedWorkItem","populateFormWithWorkItem","loadWorkItemsByIteration","manualIterationPath","trim","iterationError","loadingIterationItems","getTasks","items","processedItem","fields","state","replace","status","findMatchingTeamMember","assigneeName","exactMatch","member","caseInsensitiveMatch","containsMatch","nameParts","split","part","allPartsMatch","memberLower","every","partialMatch","firstInitial","charAt","lastName","initialsMatch","memberParts","memberFirstInitial","memberLastName","significantWords","match","word","wordMatch","selectWorkItem","determineComplexity","originalAssignee","assignedTo","previousAssignee","itemType","taskTypes","patchValue","estimationResult","calculateTimeEstimates","estimatedHours","getWorkItemType","priority","undefined","complexityFields","field","fieldValue","resetForm","reset","showResult","testCasesFile","testCaseCount","userStoryDetails","userStoryError","onTestCasesUpload","event","file","target","files","analyzeTestCases","clearTestCases","reader","FileReader","onload","e","content","result","lines","Math","max","floor","size","readAsText","checkUserStory","checkingUserStory","setTimeout","isNaN","parseInt","id","points","random","description","estimateTaskTime","invalid","markFormGroupTouched","loading","formType","request","taskType","testCasesCount","userStoryPoints","estimateFromIterationHistory","performStandardEstimation","formGroup","Object","values","controls","control","markAsTouched","iterationPath","includeHistory","getTaskHistory","historyItems","estimatedHistoricalItems","inferTimingData","historicalItems","similarItems","findSimilarItems","avgTotal","reduce","sum","actualHours","avgDev","developmentHours","avgTest","testingHours","Number","toFixed","devTimeHours","testTimeHours","confidenceScore","calculateConfidenceScore","factors","devTimeEstimate","testTimeEstimate","totalEstimate","baseHours","getBaseHoursByType","multiplier","getComplexityMultiplier","estimatedTotal","devRatio","devHours","testHours","typeMatch","itemComplexity","complexityMatch","similarCount","totalCount","baseConfidence","percentageBonus","totalHours","round","formatConfidence","score","getConfidenceClass","getAssigneeName","assigneeObj","name","getStateDisplay","baseHoursByType","multipliers","calculateEstimatesFromHistory","workItem","total","development","testing","stateTransitions","activity","a","sort","b","dateA","Date","changedDate","getTime","dateB","timeline","transition","index","currentState","newValue","startDate","endDate","prevStartDate","durationMs","durationHours","adjustedHours","days","workDays","ceil","lastIndex","now","entry","parseFloat","humanDevHours","humanTestHours","humanTotalHours","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { EstimationService, TaskEstimationRequest, TaskEstimationResponse } from '../../services/estimation.service';\nimport { TaskService } from '../../services/task.service';\nimport { WorkItem, WorkItemHistory, TeamMember, WorkItemType, WorkItemDetails, ActivityLog } from '../../models/task.model';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\n// Extended WorkItem interface to include fields property\ninterface ExtendedWorkItem extends WorkItem {\n  fields?: {\n    'System.AssignedTo'?: string | { displayName: string; [key: string]: any };\n    'System.WorkItemType'?: string;\n    [key: string]: any;\n  };\n}\n\n@Component({\n  selector: 'app-task-estimation',\n  templateUrl: './task-estimation.component.html',\n  styleUrls: ['./task-estimation.component.scss']\n})\nexport class TaskEstimationComponent implements OnInit {\n  estimationForm: FormGroup;\n  teamMembers: string[] = [];\n  \n  // Include all available work item types from the enum\n  taskTypes: string[] = [\n    'User Story',\n    'Task',\n    'Bug',\n    'Epic',\n    'Feature',\n    'Issue',\n    'Change Request',\n    'Documentation',\n    'Test',\n    'Research'\n  ];\n  \n  complexityLevels: string[] = [\n    'Low',\n    'Medium',\n    'High'\n  ];\n  \n  loading = false;\n  error: string | null = null;\n  estimationResult: TaskEstimationResponse | null = null;\n  showResult = false;\n\n  // New properties for iteration path functionality\n  manualIterationPath: string = ''; // Only use manual iteration path\n  workItems: ExtendedWorkItem[] = [];\n  loadingIterationItems: boolean = false;\n  iterationError: string | null = null;\n  selectedWorkItem: ExtendedWorkItem | null = null;\n  devTimeEstimate: number = 0;\n  testTimeEstimate: number = 0;\n  totalEstimate: number = 0;\n\n  // Properties for test cases upload\n  testCasesFile: File | null = null;\n  testCaseCount: number = 0;\n  \n  // Properties for user story reference\n  userStoryDetails: any = null;\n  userStoryError: string | null = null;\n  checkingUserStory: boolean = false;\n\n  // Properties for human estimation\n  humanDevHours: number = 2;\n  humanTestHours: number = 1;\n  humanTotalHours: number = 3;\n\n  constructor(\n    private fb: FormBuilder,\n    private estimationService: EstimationService,\n    private taskService: TaskService\n  ) {\n    this.estimationForm = this.fb.group({\n      title: ['', [Validators.required, Validators.minLength(5)]],\n      type: ['Feature', Validators.required],\n      assignee: [''],\n      complexity: ['Medium', Validators.required],\n      userStoryId: [''], // Add field for user story ID\n      manualDevHours: [2, [Validators.required, Validators.min(0.5)]], // Manual development hours\n      manualTestHours: [1, [Validators.required, Validators.min(0.5)]] // Manual testing hours\n    });\n    \n    // Listen for changes to the manual hour fields\n    this.estimationForm.get('manualDevHours')?.valueChanges.subscribe(value => {\n      this.updateHumanEstimation();\n    });\n    this.estimationForm.get('manualTestHours')?.valueChanges.subscribe(value => {\n      this.updateHumanEstimation();\n    });\n    \n    // Initialize human estimation values\n    this.updateHumanEstimation();\n  }\n\n  ngOnInit(): void {\n    // Load team members\n    this.loadTeamMembers();\n\n    // Listen for title changes to auto-fill fields\n    this.estimationForm.get('title')?.valueChanges\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged()\n      )\n      .subscribe(title => {\n        if (title && title.length > 5) {\n          this.autoPopulateFormFields(title);\n        }\n      });\n  }\n\n  // Load team members with better error handling\n  loadTeamMembers(): void {\n    this.taskService.getTeamMembers().subscribe({\n      next: (response) => {\n        console.log('Team members API response:', response);\n        \n        if (Array.isArray(response)) {\n          if (response.length === 0) {\n            console.warn('No team members returned from API');\n            return;\n          }\n          \n          if (typeof response[0] === 'string') {\n            // It's an array of strings\n            this.teamMembers = response as string[];\n          } else {\n            // It's an array of TeamMember objects\n            this.teamMembers = (response as TeamMember[])\n              .filter(m => m && m.displayName) // Filter out invalid entries\n              .map(m => m.displayName);\n          }\n          \n          // Add some failsafe common users based on the work items we've seen\n          const commonUsers = ['Bhavya Damodharan', 'Suresh GM', 'Ranjith Kumar S', 'Vignesh Ram Suresh kumar', 'Dinesh Kumar K'];\n          \n          // Add any common users not already in the list\n          commonUsers.forEach(user => {\n            if (!this.teamMembers.includes(user)) {\n              this.teamMembers.push(user);\n            }\n          });\n          \n          console.log(`Loaded ${this.teamMembers.length} team members:`, this.teamMembers);\n        }\n      },\n      error: (err) => {\n        console.error('Error loading team members:', err);\n        this.error = 'Failed to load team members';\n        \n        // Fallback to a default list of common users\n        this.teamMembers = ['Bhavya Damodharan', 'Suresh GM', 'Ranjith Kumar S', 'Vignesh Ram Suresh kumar', 'Dinesh Kumar K'];\n        console.log('Using fallback team members list:', this.teamMembers);\n      }\n    });\n  }\n\n  // Auto-populate form fields based on entered title\n  autoPopulateFormFields(title: string): void {\n    if (!this.workItems || this.workItems.length === 0) {\n      return; // No items to search through\n    }\n\n    // Find matching work item by title (full or partial match)\n    const matchingItem = this.workItems.find(item => \n      item.title.toLowerCase().includes(title.toLowerCase()) || \n      title.toLowerCase().includes(item.title.toLowerCase())\n    );\n\n    if (matchingItem) {\n      this.selectedWorkItem = matchingItem;\n      this.populateFormWithWorkItem(matchingItem);\n    }\n  }\n\n  // Load work items for the selected iteration path\n  loadWorkItemsByIteration(): void {\n    if (!this.manualIterationPath || this.manualIterationPath.trim() === '') {\n      this.iterationError = 'Please enter an iteration path';\n      return;\n    }\n\n    this.loadingIterationItems = true;\n    this.workItems = [];\n    this.selectedWorkItem = null;\n    this.iterationError = null;\n\n    this.taskService.getTasks(this.manualIterationPath.trim()).subscribe({\n      next: (items) => {\n        // Process items to clean up state information\n        this.workItems = items.map(item => {\n          // Process each item to ensure it has proper state\n          const processedItem = { ...item } as ExtendedWorkItem;\n          \n          // Make sure the fields object exists\n          if (!processedItem.fields) {\n            processedItem.fields = {};\n          }\n          \n          // Fix state display - remove \"Unknown\" prefix if present\n          if (processedItem.state && processedItem.state.toLowerCase().includes('unknown')) {\n            processedItem.state = processedItem.state.replace(/unknown/i, '').trim();\n          }\n          \n          // Also check for state in fields\n          if (processedItem.fields && processedItem.fields['System.State']) {\n            let state = processedItem.fields['System.State'];\n            if (typeof state === 'string' && state.toLowerCase().includes('unknown')) {\n              state = state.replace(/unknown/i, '').trim();\n              processedItem.fields['System.State'] = state;\n            }\n            // If item has no state but has System.State, use it\n            if (!processedItem.state) {\n              processedItem.state = state;\n            }\n          }\n          \n          // Capture status field if present in the payload and map it to fields\n          if ((item as any).status) {\n            processedItem.fields['status'] = (item as any).status;\n          }\n          \n          return processedItem;\n        });\n        \n        this.loadingIterationItems = false;\n        console.log(`Loaded ${this.workItems.length} work items for iteration ${this.manualIterationPath}`);\n      },\n      error: (err) => {\n        console.error('Error loading work items:', err);\n        this.iterationError = 'Failed to load work items for the specified iteration path';\n        this.loadingIterationItems = false;\n      }\n    });\n  }\n\n  // Helper method to find the best matching team member for an assignee\n  findMatchingTeamMember(assigneeName: string): string {\n    if (!assigneeName || !this.teamMembers || this.teamMembers.length === 0) {\n      return '';\n    }\n    \n    console.log('Finding match for assignee:', assigneeName);\n    \n    // First try exact match\n    const exactMatch = this.teamMembers.find(member => member === assigneeName);\n    if (exactMatch) {\n      console.log('Found exact match:', exactMatch);\n      return exactMatch;\n    }\n    \n    // Then try case-insensitive exact match\n    const caseInsensitiveMatch = this.teamMembers.find(\n      member => member.toLowerCase() === assigneeName.toLowerCase()\n    );\n    if (caseInsensitiveMatch) {\n      console.log('Found case-insensitive match:', caseInsensitiveMatch);\n      return caseInsensitiveMatch;\n    }\n    \n    // Then try contains matches (member contains assignee or assignee contains member)\n    const containsMatch = this.teamMembers.find(\n      member => member.toLowerCase().includes(assigneeName.toLowerCase()) ||\n               assigneeName.toLowerCase().includes(member.toLowerCase())\n    );\n    if (containsMatch) {\n      console.log('Found contains match:', containsMatch);\n      return containsMatch;\n    }\n    \n    // Split full names and try to match individual parts\n    // This helps with formats like \"First Last\" vs \"Last, First\"\n    const nameParts = assigneeName.toLowerCase().split(/[\\s,]+/).filter(part => part.length > 1);\n    if (nameParts.length > 1) {\n      console.log('Trying to match name parts:', nameParts);\n      \n      // Try to find a member that contains all name parts\n      const allPartsMatch = this.teamMembers.find(member => {\n        const memberLower = member.toLowerCase();\n        return nameParts.every(part => memberLower.includes(part));\n      });\n      \n      if (allPartsMatch) {\n        console.log('Found match containing all name parts:', allPartsMatch);\n        return allPartsMatch;\n      }\n      \n      // Try to find a member that contains any significant name part\n      for (const part of nameParts) {\n        if (part.length < 3) continue; // Skip short parts like initials\n        \n        const partialMatch = this.teamMembers.find(\n          member => member.toLowerCase().includes(part)\n        );\n        if (partialMatch) {\n          console.log('Found match with name part:', part, '->', partialMatch);\n          return partialMatch;\n        }\n      }\n    }\n    \n    // If we have a name that appears to be \"Firstname Lastname\"\n    // Try a more aggressive match against first letters + full last name\n    if (nameParts.length >= 2) {\n      const firstInitial = nameParts[0].charAt(0);\n      const lastName = nameParts[nameParts.length - 1];\n      \n      const initialsMatch = this.teamMembers.find(member => {\n        const memberParts = member.toLowerCase().split(/[\\s,]+/);\n        if (memberParts.length >= 2) {\n          const memberFirstInitial = memberParts[0].charAt(0);\n          const memberLastName = memberParts[memberParts.length - 1];\n          return memberFirstInitial === firstInitial && memberLastName.includes(lastName);\n        }\n        return false;\n      });\n      \n      if (initialsMatch) {\n        console.log('Found match with first initial + last name:', initialsMatch);\n        return initialsMatch;\n      }\n    }\n    \n    // Last resort: try to match any word of length 4+ as a potential name fragment\n    const significantWords = assigneeName.toLowerCase().match(/\\b\\w{4,}\\b/g);\n    if (significantWords && significantWords.length > 0) {\n      for (const word of significantWords) {\n        const wordMatch = this.teamMembers.find(\n          member => member.toLowerCase().includes(word)\n        );\n        if (wordMatch) {\n          console.log('Found match with significant word:', word, '->', wordMatch);\n          return wordMatch;\n        }\n      }\n    }\n    \n    // If no match found after all attempts, return the original name\n    console.log('No match found, using original name:', assigneeName);\n    return assigneeName;\n  }\n\n  // Select a work item for estimation\n  selectWorkItem(item: ExtendedWorkItem): void {\n    this.selectedWorkItem = item;\n    this.populateFormWithWorkItem(item);\n  }\n\n  // Populate the form with selected work item details\n  populateFormWithWorkItem(item: ExtendedWorkItem): void {\n    const complexity = this.determineComplexity(item);\n    \n    // Extract assignee name, trying 'System.AssignedTo' first\n    let assignee = '';\n    let originalAssignee = '';\n    \n    // Debug log the item details\n    console.log('Selected work item:', item);\n    \n    // Check for fields property which might contain System.AssignedTo\n    if (item.fields && item.fields['System.AssignedTo']) {\n      const assignedTo = item.fields['System.AssignedTo'];\n      if (typeof assignedTo === 'string') {\n        originalAssignee = assignedTo;\n        assignee = assignedTo;\n      } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n        // Try to get displayName property\n        if (assignedTo.displayName) {\n          originalAssignee = assignedTo.displayName;\n          assignee = assignedTo.displayName;\n        }\n      }\n    }\n    // Check for direct assignee property which is most common in Azure DevOps API\n    else if ((item as any).assignedTo) {\n      originalAssignee = typeof (item as any).assignedTo === 'string' \n        ? (item as any).assignedTo \n        : ((item as any).assignedTo.displayName || '');\n      assignee = originalAssignee;\n    }\n    \n    console.log('Original assignee from work item:', originalAssignee);\n    console.log('Available team members:', this.teamMembers);\n    \n    // If we have an assignee name, find the matching team member\n    if (assignee) {\n      const previousAssignee = assignee;\n      assignee = this.findMatchingTeamMember(assignee);\n      console.log(`Matching team member: '${previousAssignee}' -> '${assignee}'`);\n    }\n    \n    // Get type, trying both System.WorkItemType and type property\n    let itemType = '';\n    \n    // First try to get from Azure DevOps fields\n    if (item.fields) {\n      if (item.fields['System.WorkItemType']) {\n        itemType = item.fields['System.WorkItemType'];\n      }\n    }\n    \n    // If not found, fallback to type property\n    if (!itemType && item.type) {\n      itemType = item.type;\n    }\n    \n    // If still not found, try to determine from title\n    if (!itemType) {\n      const title = item.title.toLowerCase();\n      if (title.includes('bug') || title.includes('fix') || title.includes('issue')) {\n        itemType = 'Bug';\n      } else if (title.includes('feature') || title.includes('implement') || title.includes('add new')) {\n        itemType = 'Feature';\n      } else if (title.includes('change') || title.includes('modify') || title.includes('update')) {\n        itemType = 'Change Request';\n      } else if (title.includes('requirement') || title.includes('must have')) {\n        itemType = 'Requirement';\n      } else {\n        // Default to Feature\n        itemType = 'Feature';\n      }\n    }\n    \n    // Ensure the type is available in our task types list\n    if (itemType && !this.taskTypes.includes(itemType)) {\n      // Add to taskTypes if not already there\n      this.taskTypes.push(itemType);\n    }\n    \n    // Update form with extracted values\n    this.estimationForm.patchValue({\n      title: item.title,\n      type: itemType,\n      assignee: assignee,\n      complexity: complexity\n    });\n\n    console.log(`Populated form with: Type=${itemType}, Assignee=${assignee}, Complexity=${complexity}`);\n\n    // Pre-calculate estimates based on historical data if we have this information\n    if (this.estimationResult) {\n      this.calculateTimeEstimates(this.estimationResult.estimatedHours);\n    }\n  }\n\n  // Determine complexity based on work item properties with enhanced logic\n  determineComplexity(item: ExtendedWorkItem): string {\n    // Initialize with default complexity\n    let complexity = 'Medium';\n    \n    // Try to determine from title keywords\n    const title = item.title.toLowerCase();\n    if (title.includes('critical') || title.includes('urgent') || title.includes('major') || \n        title.includes('performance issue') || title.includes('security')) {\n      return 'High';\n    }\n    \n    if (title.includes('minor') || title.includes('small') || title.includes('trivial') || \n        title.includes('documentation') || title.includes('typo')) {\n      return 'Low';\n    }\n    \n    // Determine from type\n    const itemType = this.getWorkItemType(item);\n    if (itemType === 'Bug' || itemType === 'Change Request' || itemType === 'Feature') {\n      // Bugs and change requests tend to be more complex\n      complexity = 'Medium';\n      \n      // For bugs, increase complexity\n      if (itemType === 'Bug') {\n        complexity = 'High';\n      }\n    }\n    \n    // Determine from priority if available\n    if (item.priority !== undefined) {\n      if (item.priority <= 1) {\n        complexity = 'High';\n      } else if (item.priority === 2) {\n        complexity = 'Medium';\n      } else {\n        complexity = 'Low';\n      }\n    }\n    \n    // Check for complexity field if available in Azure DevOps fields\n    if (item.fields) {\n      // Different systems use different field names for complexity/effort\n      const complexityFields = [\n        'Microsoft.VSTS.Common.Complexity',\n        'Microsoft.VSTS.Scheduling.Effort',\n        'Custom.Complexity',\n        'System.Complexity'\n      ];\n      \n      for (const field of complexityFields) {\n        if (item.fields[field]) {\n          const fieldValue = item.fields[field];\n          if (typeof fieldValue === 'string') {\n            if (fieldValue.includes('High') || fieldValue.includes('1')) {\n              return 'High';\n            } else if (fieldValue.includes('Low') || fieldValue.includes('3')) {\n              return 'Low';\n            }\n          } else if (typeof fieldValue === 'number') {\n            if (fieldValue <= 1) {\n              return 'High';\n            } else if (fieldValue >= 3) {\n              return 'Low';\n            }\n          }\n        }\n      }\n    }\n    \n    return complexity;\n  }\n\n  // Helper method to get work item type consistently\n  getWorkItemType(item: ExtendedWorkItem): string {\n    // Try to get from System.WorkItemType first\n    if (item.fields && item.fields['System.WorkItemType']) {\n      return item.fields['System.WorkItemType'];\n    }\n    \n    // Fallback to type property\n    return item.type || 'Feature';\n  }\n\n  resetForm(): void {\n    this.estimationForm.reset({\n      title: '',\n      type: 'Feature',\n      assignee: '',\n      complexity: 'Medium',\n      userStoryId: '',\n      manualDevHours: 2,\n      manualTestHours: 1\n    });\n    this.selectedWorkItem = null;\n    this.error = null;\n    this.showResult = false;\n    this.estimationResult = null;\n    this.testCasesFile = null;\n    this.testCaseCount = 0;\n    this.userStoryDetails = null;\n    this.userStoryError = null;\n  }\n\n  // Handle test case file uploads\n  onTestCasesUpload(event: any): void {\n    const file = event.target.files[0];\n    if (file) {\n      this.testCasesFile = file;\n      // Simulate analyzing the file to count test cases\n      this.analyzeTestCases(file);\n    }\n  }\n\n  // Clear uploaded test cases\n  clearTestCases(): void {\n    this.testCasesFile = null;\n    this.testCaseCount = 0;\n  }\n\n  // Analyze test cases file to count the number of tests\n  private analyzeTestCases(file: File): void {\n    // In a real application, you would parse the file content\n    // Here we'll simulate by estimating based on file size\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const content = e.target?.result as string;\n      if (content) {\n        // Simple estimation - assume one test case per 5 lines\n        const lines = content.split('\\n').length;\n        this.testCaseCount = Math.max(1, Math.floor(lines / 5));\n        console.log(`Estimated ${this.testCaseCount} test cases from file with ${lines} lines`);\n      } else {\n        this.testCaseCount = Math.max(1, Math.floor(file.size / 1024)); // Estimate 1 test case per KB\n      }\n    };\n    reader.readAsText(file);\n  }\n\n  // Check user story from ID\n  checkUserStory(): void {\n    const userStoryId = this.estimationForm.get('userStoryId')?.value;\n    if (!userStoryId) {\n      this.userStoryError = 'Please enter a user story ID';\n      return;\n    }\n\n    this.checkingUserStory = true;\n    this.userStoryError = null;\n    this.userStoryDetails = null;\n\n    // In a real application, you would call your API service\n    // This is a simulation for demonstration\n    setTimeout(() => {\n      if (userStoryId && !isNaN(parseInt(userStoryId))) {\n        // Simulate successful user story lookup\n        this.userStoryDetails = {\n          id: userStoryId,\n          title: `User story for ${this.estimationForm.get('title')?.value || 'task'}`,\n          points: Math.floor(Math.random() * 8) + 1, // Random story points between 1-8\n          description: 'This is a sample user story description.'\n        };\n      } else {\n        this.userStoryError = 'Invalid user story ID or user story not found';\n      }\n      this.checkingUserStory = false;\n    }, 800);\n  }\n\n  // Modified estimation method to include both human and AI estimations\n  estimateTaskTime(): void {\n    if (this.estimationForm.invalid) {\n      this.markFormGroupTouched(this.estimationForm);\n      return;\n    }\n\n    this.loading = true;\n    this.error = null;\n    this.showResult = false;\n\n    // Update human estimation values\n    this.updateHumanEstimation();\n\n    // Continue with AI-based estimation\n    const formType = this.estimationForm.get('type')?.value;\n    \n    const request: TaskEstimationRequest = {\n      title: this.estimationForm.get('title')?.value,\n      type: formType, // Keep the original 'type' property\n      taskType: formType, // Also set the alternative 'taskType' property\n      assignee: this.estimationForm.get('assignee')?.value,\n      complexity: this.estimationForm.get('complexity')?.value,\n      // Include test cases count if available\n      testCasesCount: this.testCaseCount > 0 ? this.testCaseCount : undefined,\n      // Include user story info if available\n      userStoryId: this.userStoryDetails ? parseInt(this.userStoryDetails.id) : undefined,\n      userStoryPoints: this.userStoryDetails ? this.userStoryDetails.points : undefined\n    };\n\n    console.log('Estimation request:', request);\n\n    // Use the selected work item if available\n    if (this.selectedWorkItem) {\n      if (this.manualIterationPath) {\n        // If we have both a selected work item and an iteration path, use the history-based approach\n        this.estimateFromIterationHistory(request);\n      } else {\n        // Otherwise use the standard approach\n        this.performStandardEstimation(request);\n      }\n    } else {\n      // If no work item is selected, use the standard approach\n      this.performStandardEstimation(request);\n    }\n  }\n\n  // Helper to mark all form controls as touched to show validation errors\n  private markFormGroupTouched(formGroup: FormGroup): void {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  /**\n   * Estimate task time using the iteration history approach (our previous implementation)\n   */\n  private estimateFromIterationHistory(request: TaskEstimationRequest): void {\n    // Use iteration path for historical data analysis if available\n    const iterationPath = (this.selectedWorkItem && this.selectedWorkItem.iterationPath) || this.manualIterationPath;\n    \n    if (iterationPath) {\n      request.includeHistory = true; // Signal to include work history analysis\n      \n      console.log('Estimating using work items from iteration: ' + iterationPath);\n      \n      // Get work items from this iteration for analysis\n      this.taskService.getTaskHistory(iterationPath).subscribe({\n        next: (historyItems: WorkItem[]) => {\n          console.log(`Retrieved ${historyItems.length} work items from iteration ${iterationPath}`);\n          \n          if (historyItems.length === 0) {\n            // If no historical items found, fall back to standard estimation\n            console.log('No historical items found, using standard estimation');\n            this.performStandardEstimation(request);\n            return;\n          }\n          \n          // Since we might not have actual timing data from the API,\n          // we'll analyze the items we have and infer timing data\n          const estimatedHistoricalItems = this.inferTimingData(historyItems, request.type, request.complexity);\n          \n          // Set historical data in the request\n          request.historicalItems = estimatedHistoricalItems;\n          \n          // Check if we have enough data to make a history-based estimate\n          if (estimatedHistoricalItems.length > 0) {\n            console.log('Using inferred historical data for estimation');\n            \n            // Calculate time estimates based on the historical data\n            const similarItems = this.findSimilarItems(estimatedHistoricalItems, request);\n            \n            if (similarItems.length > 0) {\n              // Calculate average times from similar items\n              const avgTotal = similarItems.reduce((sum: number, item: WorkItem) => sum + (item.actualHours || 0), 0) / similarItems.length;\n              const avgDev = similarItems.reduce((sum: number, item: WorkItem) => sum + (item.developmentHours || 0), 0) / similarItems.length;\n              const avgTest = similarItems.reduce((sum: number, item: WorkItem) => sum + (item.testingHours || 0), 0) / similarItems.length;\n              \n              // Create a result based on historical averages\n              this.estimationResult = {\n                estimatedHours: Number(avgTotal.toFixed(1)),\n                devTimeHours: Number(avgDev.toFixed(1)),\n                testTimeHours: Number(avgTest.toFixed(1)),\n                confidenceScore: this.calculateConfidenceScore(similarItems.length, historyItems.length),\n                factors: [\n                  `Task type: ${request.type}`,\n                  `${request.complexity} complexity`,\n                  `Based on ${similarItems.length} similar completed items`,\n                  `Assignee ${request.assignee || 'unassigned'}`\n                ]\n              };\n              \n              this.showResult = true;\n              this.loading = false;\n              this.devTimeEstimate = this.estimationResult.devTimeHours || 0;\n              this.testTimeEstimate = this.estimationResult.testTimeHours || 0;\n              this.totalEstimate = this.estimationResult.estimatedHours;\n            } else {\n              // No similar items found, use standard estimation\n              this.performStandardEstimation(request);\n            }\n          } else {\n            // Not enough historical data, fall back to standard estimation\n            this.performStandardEstimation(request);\n          }\n        },\n        error: (err: any) => {\n          console.error('Error loading work item history:', err);\n          console.log('Falling back to standard estimation');\n          this.performStandardEstimation(request);\n        }\n      });\n    } else {\n      // Fallback to standard estimation without work history\n      this.performStandardEstimation(request);\n    }\n  }\n\n  /**\n   * Perform standard estimation without using historical data\n   */\n  private performStandardEstimation(request: TaskEstimationRequest): void {\n    this.estimationService.estimateTaskTime(request).subscribe({\n      next: (result) => {\n        this.estimationResult = result;\n        this.showResult = true;\n        this.calculateTimeEstimates(result.estimatedHours);\n        this.loading = false;\n      },\n      error: (err) => {\n        console.error('Error estimating task time:', err);\n        this.error = 'Failed to estimate task time. Please try again.';\n        this.loading = false;\n      }\n    });\n  }\n\n  /**\n   * Infer timing data for historical work items\n   * This adds estimated development and testing hours to work items\n   */\n  private inferTimingData(items: WorkItem[], taskType: string, complexity: string): WorkItem[] {\n    return items.map(item => {\n      // Clone the item to avoid modifying the original\n      const processedItem: WorkItem = { ...item };\n      \n      // If the item already has timing data, use it\n      if (item.actualHours && item.developmentHours && item.testingHours) {\n        return processedItem;\n      }\n      \n      // Calculate base hours based on type and complexity\n      const baseHours = this.getBaseHoursByType(item.type || taskType);\n      const multiplier = this.getComplexityMultiplier(complexity);\n      \n      // Estimate total hours\n      const estimatedTotal = baseHours * multiplier;\n      \n      // Estimate dev/test split\n      const devRatio = complexity === 'High' ? 0.7 : (complexity === 'Low' ? 0.6 : 0.65);\n      const devHours = estimatedTotal * devRatio;\n      const testHours = estimatedTotal - devHours;\n      \n      // Add the estimated hours to the item\n      processedItem.actualHours = Number(estimatedTotal.toFixed(1));\n      processedItem.developmentHours = Number(devHours.toFixed(1));\n      processedItem.testingHours = Number(testHours.toFixed(1));\n      \n      return processedItem;\n    });\n  }\n\n  /**\n   * Find similar work items based on type and complexity\n   */\n  private findSimilarItems(items: WorkItem[], request: TaskEstimationRequest): WorkItem[] {\n    // Filter items by type and complexity\n    return items.filter(item => {\n      // Match by type\n      const typeMatch = item.type?.toLowerCase() === request.type.toLowerCase();\n      \n      // Match by complexity (if available)\n      const itemComplexity = this.determineComplexity(item as ExtendedWorkItem);\n      const complexityMatch = itemComplexity.toLowerCase() === request.complexity.toLowerCase();\n      \n      // We need both to match for a \"similar\" item\n      return typeMatch && complexityMatch;\n    });\n  }\n\n  /**\n   * Calculate confidence score based on sample size\n   */\n  private calculateConfidenceScore(similarCount: number, totalCount: number): number {\n    // Base confidence on the number of similar items vs total items\n    if (similarCount === 0) return 0.5;\n    \n    // More similar items = higher confidence\n    const baseConfidence = Math.min(0.75, 0.5 + (similarCount / 20));\n    \n    // Add a bonus if we have a good percentage of the total\n    const percentageBonus = similarCount / totalCount > 0.3 ? 0.1 : 0;\n    \n    // Cap at 0.95 for historical data\n    return Math.min(0.95, baseConfidence + percentageBonus);\n  }\n\n  // Calculate development and testing time estimates\n  calculateTimeEstimates(totalHours: number): void {\n    // Typical distribution: dev 60-70%, testing 30-40%\n    const complexity = this.estimationForm.value.complexity;\n    let devRatio = 0.65; // Default dev ratio\n    \n    // Adjust ratio based on complexity\n    if (complexity === 'High') {\n      devRatio = 0.7; // Higher complexity = more dev time\n    } else if (complexity === 'Low') {\n      devRatio = 0.6; // Lower complexity = less dev time\n    }\n    \n    this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\n    this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\n    this.totalEstimate = totalHours;\n  }\n\n  // Format confidence score as percentage\n  formatConfidence(score: number): string {\n    return `${Math.round(score * 100)}%`;\n  }\n\n  // Get appropriate class for confidence level\n  getConfidenceClass(score: number): string {\n    if (score >= 0.8) {\n      return 'bg-success';\n    } else if (score >= 0.6) {\n      return 'bg-primary';\n    } else if (score >= 0.4) {\n      return 'bg-warning';\n    } else {\n    return 'bg-danger';\n    }\n  }\n\n  // Get assignee name for display\n  getAssigneeName(item: ExtendedWorkItem): string {\n    let displayName = '';\n    \n    // Try to get from System.AssignedTo first\n    if (item.fields && item.fields['System.AssignedTo']) {\n      const assignedTo = item.fields['System.AssignedTo'];\n      if (typeof assignedTo === 'string') {\n        displayName = assignedTo;\n      } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n        if (assignedTo.displayName) {\n          displayName = assignedTo.displayName;\n        }\n      }\n    }\n    \n    // Fallback to assignedTo property\n    if (!displayName && item.assignedTo) {\n      if (typeof item.assignedTo === 'string') {\n        displayName = item.assignedTo;\n      } else if (typeof item.assignedTo === 'object' && item.assignedTo !== null) {\n        const assigneeObj = item.assignedTo as any;\n        displayName = assigneeObj.displayName || assigneeObj.name || '';\n      }\n    }\n    \n    // Find matching team member for consistent display\n    if (displayName) {\n      return this.findMatchingTeamMember(displayName);\n    }\n    \n    return '';\n  }\n\n  // Get the clean state display for a work item\n  getStateDisplay(item: ExtendedWorkItem): string {\n    // First check fields for System.State\n    if (item.fields && item.fields['System.State']) {\n      const state = item.fields['System.State'];\n      if (typeof state === 'string') {\n        // Remove \"Unknown\" prefix if present\n        return state.replace(/unknown/i, '').trim();\n      }\n    }\n    \n    // Check for status field in the item or fields\n    if ((item as any).status) {\n      return typeof (item as any).status === 'string' ? (item as any).status : '';\n    }\n    \n    if (item.fields && item.fields['status']) {\n      return typeof item.fields['status'] === 'string' ? item.fields['status'] : '';\n    }\n    \n    // Fallback to item.state if available\n    if (item.state) {\n      return item.state.replace(/unknown/i, '').trim();\n    }\n    \n    return 'N/A'; // Default if no state available\n  }\n\n  /**\n   * Get base hours for estimation by work item type\n   */\n  private getBaseHoursByType(type: string | undefined): number {\n    const baseHoursByType: {[key: string]: number} = {\n      'Bug': 4,\n      'Task': 3,\n      'Feature': 8,\n      'User Story': 5,\n      'Change Request': 4,\n      'Requirement': 6,\n      'Documentation': 2,\n      'Epic': 20\n    };\n    \n    return type ? (baseHoursByType[type] || 4) : 4; // Default if type not found\n  }\n  \n  /**\n   * Get multiplier based on complexity\n   */\n  private getComplexityMultiplier(complexity: string): number {\n    const multipliers: {[key: string]: number} = {\n      'Low': 0.6,\n      'Medium': 1.0,\n      'High': 1.5\n    };\n    \n    return multipliers[complexity] || 1.0;\n  }\n\n  /**\n   * Calculate time estimates based on the work item's actual state transition history\n   * This analyzes the time spent in each state to estimate development and testing times\n   */\n  private calculateEstimatesFromHistory(workItem: WorkItemDetails): { total: number, development: number, testing: number } {\n    console.log('Calculating estimates from work item history');\n    \n    // Default result\n    const result = { \n      total: 0, \n      development: 0, \n      testing: 0 \n    };\n    \n    // Step 1: Extract state transitions from activity history\n    const stateTransitions = workItem.activity?.filter((a: ActivityLog) => a.field === 'State' || a.field === 'System.State') || [];\n    console.log(`Found ${stateTransitions.length} state transitions`);\n    \n    if (stateTransitions.length === 0) {\n      // No state transitions found, estimate based on work item type and complexity\n      const complexity = this.determineComplexity(workItem as ExtendedWorkItem);\n      const baseHours = this.getBaseHoursByType(this.getWorkItemType(workItem as ExtendedWorkItem));\n      const multiplier = this.getComplexityMultiplier(complexity);\n      \n      result.total = Number((baseHours * multiplier).toFixed(1));\n      result.development = Number((result.total * 0.65).toFixed(1));\n      result.testing = Number((result.total * 0.35).toFixed(1));\n      \n      return result;\n    }\n    \n    // Sort transitions by date\n    stateTransitions.sort((a: ActivityLog, b: ActivityLog) => {\n      const dateA = new Date(a.changedDate).getTime();\n      const dateB = new Date(b.changedDate).getTime();\n      return dateA - dateB;\n    });\n    \n    // Step 2: Create a timeline of state changes with durations\n    const timeline: { state: string, startDate: Date, endDate?: Date, durationHours?: number }[] = [];\n    \n    // Add each transition\n    stateTransitions.forEach((transition: ActivityLog, index: number) => {\n      const currentState = transition.newValue || '';\n      const startDate = new Date(transition.changedDate);\n      \n      // Add to timeline\n      timeline.push({\n        state: currentState,\n        startDate: startDate\n      });\n      \n      // Set end date for previous state\n      if (index > 0) {\n        timeline[index - 1].endDate = startDate;\n        \n        // Calculate duration in hours for previous state\n        const prevStartDate = timeline[index - 1].startDate;\n        const durationMs = startDate.getTime() - prevStartDate.getTime();\n        const durationHours = durationMs / (1000 * 60 * 60);\n        \n        // Account for work hours (8 hours per day, 5 days per week)\n        // This is a simplification - in reality, you'd want to account for weekends and working hours\n        let adjustedHours = durationHours;\n        \n        // If duration is more than 16 hours, assume some of it is non-working time\n        if (durationHours > 16) {\n          // Roughly estimate working hours\n          const days = Math.floor(durationHours / 24);\n          const workDays = Math.max(Math.ceil(days * 5/7), 1); // Estimate work days (5/7 of total days)\n          adjustedHours = workDays * 8 + (durationHours % 24); // 8 hours per work day + remainder\n          \n          // Cap at a reasonable value to prevent outliers\n          adjustedHours = Math.min(adjustedHours, durationHours * 0.6);\n        }\n        \n        timeline[index - 1].durationHours = Number(adjustedHours.toFixed(1));\n      }\n    });\n\n    // Add current state if item is not completed\n    if (workItem.state !== 'Closed' && workItem.state !== 'Done' && workItem.state !== 'Completed') {\n      // Calculate duration to now for the last state\n      const lastIndex = timeline.length - 1;\n      if (lastIndex >= 0) {\n        const now = new Date();\n        timeline[lastIndex].endDate = now;\n        \n        const durationMs = now.getTime() - timeline[lastIndex].startDate.getTime();\n        const durationHours = durationMs / (1000 * 60 * 60);\n        \n        // Apply same adjustment for work hours\n        let adjustedHours = durationHours;\n        if (durationHours > 16) {\n          const days = Math.floor(durationHours / 24);\n          const workDays = Math.max(Math.ceil(days * 5/7), 1);\n          adjustedHours = workDays * 8 + (durationHours % 24);\n          adjustedHours = Math.min(adjustedHours, durationHours * 0.6);\n        }\n        \n        timeline[lastIndex].durationHours = Number(adjustedHours.toFixed(1));\n      }\n    }\n    \n    // Step 3: Categorize times as development or testing\n    timeline.forEach(entry => {\n      if (!entry.durationHours) return;\n      \n      const state = entry.state.toLowerCase();\n      \n      // Categorize states\n      if (state.includes('new') || state.includes('proposed') || state.includes('backlog')) {\n        // Planning time - not counted in the estimate\n      } else if (state.includes('active') || state.includes('progress') || state.includes('development')) {\n        // Development time\n        result.development += entry.durationHours;\n      } else if (state.includes('review') || state.includes('test') || state.includes('qa')) {\n        // Testing/Review time\n        result.testing += entry.durationHours;\n      } else if (state.includes('resolved') || state.includes('done') || state.includes('closed')) {\n        // Completion time - typically minimal, add to testing\n        result.testing += entry.durationHours * 0.5;\n      } else {\n        // Unknown state, distribute proportionally\n        result.development += entry.durationHours * 0.6;\n        result.testing += entry.durationHours * 0.4;\n      }\n    });\n    \n    // Step 4: Calculate total time\n    result.total = Number((result.development + result.testing).toFixed(1));\n    \n    // Ensure we have a minimum reasonable value\n    if (result.total < 0.5) {\n      // If calculated time is too small, use type/complexity approach as fallback\n      const complexity = this.determineComplexity(workItem as ExtendedWorkItem);\n      const baseHours = this.getBaseHoursByType(this.getWorkItemType(workItem as ExtendedWorkItem));\n      const multiplier = this.getComplexityMultiplier(complexity);\n      \n      result.total = Number((baseHours * multiplier).toFixed(1));\n      result.development = Number((result.total * 0.65).toFixed(1));\n      result.testing = Number((result.total * 0.35).toFixed(1));\n    }\n    \n    // Round to 1 decimal place\n    result.development = Number(result.development.toFixed(1));\n    result.testing = Number(result.testing.toFixed(1));\n    \n    console.log(`Estimated from history: Total=${result.total}, Dev=${result.development}, Test=${result.testing}`);\n    return result;\n  }\n\n  // Update human estimation values\n  updateHumanEstimation(): void {\n    const devHours = parseFloat(this.estimationForm.get('manualDevHours')?.value || '2');\n    const testHours = parseFloat(this.estimationForm.get('manualTestHours')?.value || '1');\n    \n    this.humanDevHours = isNaN(devHours) ? 2 : devHours;\n    this.humanTestHours = isNaN(testHours) ? 1 : testHours;\n    this.humanTotalHours = this.humanDevHours + this.humanTestHours;\n  }\n} ","<div class=\"container-fluid p-4\">\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <h2 class=\"mb-0\">ML-Based Task Estimation</h2>\r\n      <p class=\"text-muted mt-2\">Estimate task duration using machine learning predictions based on historical data</p>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Iteration Path Selection -->\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"card-title mb-0\">Enter Iteration Path</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row g-3 align-items-center\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"input-group\">\r\n                <label class=\"input-group-text\" for=\"manualIterationPath\">Iteration Path</label>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"manualIterationPath\" \r\n                  [(ngModel)]=\"manualIterationPath\"\r\n                  placeholder=\"Enter iteration path (e.g. Techoil\\2.3.23)\" \r\n                  aria-label=\"Manual Iteration Path\">\r\n                <button \r\n                  class=\"btn btn-outline-primary\" \r\n                  type=\"button\" \r\n                  (click)=\"loadWorkItemsByIteration()\"\r\n                  [disabled]=\"!manualIterationPath\">\r\n                  <i class=\"bi bi-search\"></i> Load Items\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"iterationError\" class=\"text-danger mt-2\">\r\n                <small>{{ iterationError }}</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <!-- Work Items List -->\r\n    <div class=\"col-md-6\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n          <h4 class=\"card-title mb-0\">Work Items</h4>\r\n          <span *ngIf=\"workItems.length > 0\" class=\"badge bg-primary\">{{ workItems.length }} items</span>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <!-- Loading indicator -->\r\n          <div *ngIf=\"loadingIterationItems\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading work items...</span>\r\n            </div>\r\n            <p class=\"mt-2 text-muted\">Loading work items...</p>\r\n          </div>\r\n          \r\n          <!-- No items message -->\r\n          <div *ngIf=\"!loadingIterationItems && workItems.length === 0 && !iterationError\" class=\"text-center py-4\">\r\n            <p class=\"text-muted\">No work items found. Please select an iteration path and click \"Load Items\".</p>\r\n          </div>\r\n          \r\n          <!-- Work items table -->\r\n          <div *ngIf=\"!loadingIterationItems && workItems.length > 0\" class=\"table-responsive\">\r\n            <table class=\"table table-hover table-striped\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">ID</th>\r\n                  <th scope=\"col\">Type</th>\r\n                  <th scope=\"col\">Title</th>\r\n                  <th scope=\"col\">Assignee</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let item of workItems\" \r\n                    [class.table-primary]=\"selectedWorkItem?.id === item.id\"\r\n                    (click)=\"selectWorkItem(item)\"\r\n                    style=\"cursor: pointer;\">\r\n                  <td class=\"fw-bold\">#{{ item.id }}</td>\r\n                  <td>\r\n                    <span class=\"badge rounded-pill\" [ngClass]=\"{\r\n                      'bg-danger': item.type === 'Bug' || (item.fields && item.fields['System.WorkItemType'] === 'Bug'),\r\n                      'bg-primary': item.type === 'Feature' || (item.fields && item.fields['System.WorkItemType'] === 'Feature'),\r\n                      'bg-warning': item.type === 'Change Request' || (item.fields && item.fields['System.WorkItemType'] === 'Change Request'),\r\n                      'bg-info': item.type === 'Test' || (item.fields && item.fields['System.WorkItemType'] === 'Test'),\r\n                      'bg-success': item.type === 'Requirement' || (item.fields && item.fields['System.WorkItemType'] === 'Requirement'),\r\n                      'bg-dark text-light': item.type === 'User Story' || (item.fields && item.fields['System.WorkItemType'] === 'User Story'),\r\n                      'bg-secondary': !item.type && (!item.fields || !item.fields['System.WorkItemType'])\r\n                    }\">{{ (item.fields && item.fields['System.WorkItemType']) || item.type || 'Task' }}</span>\r\n                  </td>\r\n                  <td>{{ item.title }}</td>\r\n                  <td><small><i class=\"bi bi-person me-1\"></i>{{ getAssigneeName(item) || 'Unassigned' }}</small></td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Task Estimation Form -->\r\n    <div class=\"col-md-6\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"card-title mb-0\">\r\n            <span *ngIf=\"selectedWorkItem\">Task #{{ selectedWorkItem.id }} Details</span>\r\n            <span *ngIf=\"!selectedWorkItem\">Task Details</span>\r\n          </h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <form [formGroup]=\"estimationForm\" (ngSubmit)=\"estimateTaskTime()\">\r\n            <!-- Task Title -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"taskTitle\" class=\"form-label\">Task Title</label>\r\n              <div class=\"input-group\">\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"taskTitle\" \r\n                  formControlName=\"title\"\r\n                  placeholder=\"Enter or select task title\"\r\n                  [ngClass]=\"{'is-valid': selectedWorkItem !== null}\">\r\n                <button \r\n                  *ngIf=\"estimationForm.get('title')?.value\"\r\n                  class=\"btn btn-outline-secondary\" \r\n                  type=\"button\"\r\n                  (click)=\"resetForm()\">\r\n                  <i class=\"bi bi-x-lg\"></i>\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"estimationForm.get('title')?.invalid && estimationForm.get('title')?.touched\" class=\"text-danger mt-1\">\r\n                <small *ngIf=\"estimationForm.get('title')?.errors?.['required']\">Title is required</small>\r\n                <small *ngIf=\"estimationForm.get('title')?.errors?.['minlength']\">Title must be at least 5 characters</small>\r\n              </div>\r\n              <div *ngIf=\"selectedWorkItem\" class=\"text-success mt-1\">\r\n                <small>Found matching work item #{{ selectedWorkItem.id }}</small>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <!-- Task Type -->\r\n                <div class=\"mb-3\">\r\n                  <label for=\"taskType\" class=\"form-label\">Task Type</label>\r\n                  <select class=\"form-select\" id=\"taskType\" formControlName=\"type\">\r\n                    <option *ngFor=\"let type of taskTypes\" [value]=\"type\">{{ type }}</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"col-md-6\">\r\n                <!-- Assignee -->\r\n                <div class=\"mb-3\">\r\n                  <label for=\"assignee\" class=\"form-label\">Assignee</label>\r\n                  <select class=\"form-select\" id=\"assignee\" formControlName=\"assignee\">\r\n                    <option value=\"\">-- Unassigned --</option>\r\n                    <option *ngFor=\"let member of teamMembers\" [value]=\"member\">{{ member }}</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Test Cases Upload -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"testCasesUpload\" class=\"form-label\">Upload Test Cases</label>\r\n              <div class=\"input-group\">\r\n                <input \r\n                  type=\"file\" \r\n                  class=\"form-control\" \r\n                  id=\"testCasesUpload\" \r\n                  accept=\".xlsx,.xls,.csv,.txt\"\r\n                  (change)=\"onTestCasesUpload($event)\">\r\n                <button \r\n                  class=\"btn btn-outline-secondary\" \r\n                  type=\"button\"\r\n                  [disabled]=\"!testCasesFile\"\r\n                  (click)=\"clearTestCases()\">\r\n                  <i class=\"bi bi-x-lg\"></i>\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"testCasesFile\" class=\"text-success mt-1\">\r\n                <small><i class=\"bi bi-check-circle\"></i> Test cases uploaded: {{ testCasesFile?.name }}</small>\r\n              </div>\r\n              <div *ngIf=\"testCaseCount > 0\" class=\"mt-2\">\r\n                <div class=\"alert alert-info py-2\">\r\n                  <small><i class=\"bi bi-info-circle\"></i> <strong>{{ testCaseCount }}</strong> test cases detected. This will be factored into the estimation.</small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- User Story Reference -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"userStoryId\" class=\"form-label\">Related User Story</label>\r\n              <div class=\"input-group\">\r\n                <span class=\"input-group-text\">#</span>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"userStoryId\" \r\n                  formControlName=\"userStoryId\"\r\n                  placeholder=\"Enter user story ID\">\r\n                <button \r\n                  class=\"btn btn-outline-primary\" \r\n                  type=\"button\"\r\n                  [disabled]=\"!estimationForm.get('userStoryId')?.value\"\r\n                  (click)=\"checkUserStory()\">\r\n                  <i class=\"bi bi-search\"></i> Check\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"userStoryDetails\" class=\"mt-2\">\r\n                <div class=\"alert alert-success py-2\">\r\n                  <div class=\"d-flex justify-content-between align-items-center\">\r\n                    <div>\r\n                      <small><i class=\"bi bi-journal-check\"></i> User Story #{{ userStoryDetails.id }} linked</small>\r\n                    </div>\r\n                    <div>\r\n                      <span class=\"badge bg-info\">{{ userStoryDetails.points || 'N/A' }} Points</span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"mt-1\">\r\n                    <small class=\"text-muted\">{{ userStoryDetails.title }}</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"userStoryError\" class=\"text-danger mt-1\">\r\n                <small>{{ userStoryError }}</small>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Complexity -->\r\n            <div class=\"mb-3\">\r\n              <label class=\"form-label\">Complexity</label>\r\n              <div class=\"d-flex\">\r\n                <div class=\"form-check me-3\" *ngFor=\"let level of complexityLevels\">\r\n                  <input \r\n                    class=\"form-check-input\" \r\n                    type=\"radio\" \r\n                    [id]=\"'complexity-' + level.toLowerCase()\" \r\n                    [value]=\"level\" \r\n                    formControlName=\"complexity\">\r\n                  <label class=\"form-check-label\" [for]=\"'complexity-' + level.toLowerCase()\">\r\n                    {{ level }}\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"selectedWorkItem\" class=\"text-muted mt-1\">\r\n                <small><i class=\"bi bi-info-circle\"></i> Complexity automatically predicted based on work item attributes</small>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Estimation Method Toggle -->\r\n            <div class=\"mb-3\">\r\n              <label class=\"form-label\">Estimation Method</label>\r\n              <div class=\"form-check form-switch\">\r\n                <input \r\n                  class=\"form-check-input\" \r\n                  type=\"checkbox\" \r\n                  id=\"humanEstimationSwitch\" \r\n                  formControlName=\"useHumanEstimation\">\r\n                <label class=\"form-check-label\" for=\"humanEstimationSwitch\">\r\n                  Human Development Estimation (without AI)\r\n                </label>\r\n              </div>\r\n              <div *ngIf=\"estimationForm.get('useHumanEstimation')?.value\" class=\"bg-light p-3 mt-2 rounded\">\r\n                <div class=\"mb-2\">\r\n                  <label for=\"manualDevHours\" class=\"form-label\">Development Hours</label>\r\n                  <input \r\n                    type=\"number\" \r\n                    class=\"form-control\" \r\n                    id=\"manualDevHours\" \r\n                    formControlName=\"manualDevHours\"\r\n                    min=\"0.5\" \r\n                    step=\"0.5\"\r\n                    placeholder=\"Enter development hours\">\r\n                </div>\r\n                <div class=\"mb-0\">\r\n                  <label for=\"manualTestHours\" class=\"form-label\">Testing Hours</label>\r\n                  <input \r\n                    type=\"number\" \r\n                    class=\"form-control\" \r\n                    id=\"manualTestHours\" \r\n                    formControlName=\"manualTestHours\"\r\n                    min=\"0.5\" \r\n                    step=\"0.5\"\r\n                    placeholder=\"Enter testing hours\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Action Buttons -->\r\n            <div class=\"d-flex justify-content-between mt-4\">\r\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"resetForm()\">\r\n                <i class=\"bi bi-arrow-counterclockwise\"></i> Reset\r\n              </button>\r\n              <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loading\">\r\n                <span *ngIf=\"!loading\">\r\n                  <i class=\"bi bi-stopwatch\"></i> Estimate Time\r\n                </span>\r\n                <span *ngIf=\"loading\">\r\n                  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                  Estimating...\r\n                </span>\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row mt-4\">\r\n    <div class=\"col-md-12\">\r\n      <!-- Error Display -->\r\n      <div *ngIf=\"error\" class=\"alert alert-danger mb-4\">\r\n        {{ error }}\r\n      </div>\r\n\r\n      <!-- Estimation Results -->\r\n      <div *ngIf=\"showResult && estimationResult\" class=\"card\">\r\n        <div class=\"card-header bg-primary text-white\">\r\n          <h4 class=\"card-title mb-0\">\r\n            <i class=\"bi bi-graph-up me-2\"></i>Estimation Comparison\r\n          </h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <!-- AI Estimation -->\r\n            <div class=\"col-md-6\">\r\n              <div class=\"card h-100 mb-0\">\r\n                <div class=\"card-header bg-info text-white\">\r\n                  <h5 class=\"card-title mb-0\">\r\n                    <i class=\"bi bi-robot me-2\"></i>AI Estimation\r\n                  </h5>\r\n                </div>\r\n                <div class=\"card-body\">\r\n                  <div class=\"mb-4 text-center\">\r\n                    <h2 class=\"display-5 mb-0\">{{ estimationResult.estimatedHours }} hours</h2>\r\n                    <p class=\"text-muted\">AI estimated time</p>\r\n                  </div>\r\n\r\n                  <div class=\"row text-center mb-3\">\r\n                    <div class=\"col-6\">\r\n                      <div class=\"p-2 bg-light rounded\">\r\n                        <h5 class=\"mb-0\">{{ devTimeEstimate }}</h5>\r\n                        <p class=\"text-muted mb-0 small\">Development</p>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-6\">\r\n                      <div class=\"p-2 bg-light rounded\">\r\n                        <h5 class=\"mb-0\">{{ testTimeEstimate }}</h5>\r\n                        <p class=\"text-muted mb-0 small\">Testing</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"mb-3\">\r\n                    <h6>Confidence</h6>\r\n                    <div class=\"progress\">\r\n                      <div \r\n                        class=\"progress-bar\" \r\n                        [ngClass]=\"getConfidenceClass(estimationResult.confidenceScore)\"\r\n                        [style.width.%]=\"estimationResult.confidenceScore * 100\" \r\n                        role=\"progressbar\" \r\n                        [attr.aria-valuenow]=\"estimationResult.confidenceScore * 100\" \r\n                        aria-valuemin=\"0\" \r\n                        aria-valuemax=\"100\">\r\n                        {{ formatConfidence(estimationResult.confidenceScore) }}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <h6>Factors Considered</h6>\r\n                  <ul class=\"list-group list-group-flush small\">\r\n                    <li class=\"list-group-item px-0\" *ngFor=\"let factor of estimationResult.factors\">\r\n                      {{ factor }}\r\n                    </li>\r\n                    <!-- Show test cases factor if test cases were provided -->\r\n                    <li class=\"list-group-item px-0\" *ngIf=\"testCaseCount > 0\">\r\n                      <i class=\"bi bi-checklist\"></i> {{ testCaseCount }} test cases included in estimation\r\n                    </li>\r\n                    <!-- Show user story factor if a user story was linked -->\r\n                    <li class=\"list-group-item px-0\" *ngIf=\"userStoryDetails\">\r\n                      <i class=\"bi bi-journal-text\"></i> User Story #{{ userStoryDetails.id }} ({{ userStoryDetails.points }} points)\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                <div class=\"card-footer bg-light small\">\r\n                  <i class=\"bi bi-info-circle\"></i> Based on historical data and ML algorithms\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Human Estimation -->\r\n            <div class=\"col-md-6\">\r\n              <div class=\"card h-100 mb-0\">\r\n                <div class=\"card-header bg-success text-white\">\r\n                  <h5 class=\"card-title mb-0\">\r\n                    <i class=\"bi bi-person me-2\"></i>Human Estimation\r\n                  </h5>\r\n                </div>\r\n                <div class=\"card-body\">\r\n                  <div class=\"mb-4 text-center\">\r\n                    <h2 class=\"display-5 mb-0\">{{ humanTotalHours }} hours</h2>\r\n                    <p class=\"text-muted\">Human estimated time</p>\r\n                  </div>\r\n\r\n                  <div class=\"row text-center mb-3\">\r\n                    <div class=\"col-6\">\r\n                      <div class=\"p-2 bg-light rounded\">\r\n                        <h5 class=\"mb-0\">{{ humanDevHours }}</h5>\r\n                        <p class=\"text-muted mb-0 small\">Development</p>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-6\">\r\n                      <div class=\"p-2 bg-light rounded\">\r\n                        <h5 class=\"mb-0\">{{ humanTestHours }}</h5>\r\n                        <p class=\"text-muted mb-0 small\">Testing</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"mb-3\">\r\n                    <h6>Confidence</h6>\r\n                    <div class=\"progress\">\r\n                      <div \r\n                        class=\"progress-bar bg-success\" \r\n                        style=\"width: 100%\" \r\n                        role=\"progressbar\" \r\n                        aria-valuenow=\"100\" \r\n                        aria-valuemin=\"0\" \r\n                        aria-valuemax=\"100\">\r\n                        100%\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <h6>Factors Considered</h6>\r\n                  <ul class=\"list-group list-group-flush small\">\r\n                    <li class=\"list-group-item px-0\">\r\n                      <i class=\"bi bi-check-circle-fill text-success\"></i> Manual development effort assessment\r\n                    </li>\r\n                    <li class=\"list-group-item px-0\">\r\n                      <i class=\"bi bi-check-circle-fill text-success\"></i> Professional judgment\r\n                    </li>\r\n                    <li class=\"list-group-item px-0\">\r\n                      Task type: {{ estimationForm.get('type')?.value }}\r\n                    </li>\r\n                    <li class=\"list-group-item px-0\">\r\n                      {{ estimationForm.get('complexity')?.value }} complexity\r\n                    </li>\r\n                    <li class=\"list-group-item px-0\" *ngIf=\"testCaseCount > 0\">\r\n                      <i class=\"bi bi-checklist\"></i> {{ testCaseCount }} test cases considered\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                <div class=\"card-footer bg-light small\">\r\n                  <i class=\"bi bi-info-circle\"></i> Based on developer expertise and direct coding knowledge\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Comparison and Differential -->\r\n          <div class=\"row mt-4\">\r\n            <div class=\"col-12\">\r\n              <div class=\"alert\" [ngClass]=\"{\r\n                'alert-success': humanTotalHours >= estimationResult.estimatedHours,\r\n                'alert-warning': humanTotalHours < estimationResult.estimatedHours\r\n              }\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div>\r\n                    <h5 class=\"mb-1\">Estimation Comparison</h5>\r\n                    <p class=\"mb-0\">\r\n                      <span *ngIf=\"humanTotalHours > estimationResult.estimatedHours\">\r\n                        Human estimate is <strong>{{ (humanTotalHours - estimationResult.estimatedHours).toFixed(1) }} hours higher</strong> than AI estimate\r\n                      </span>\r\n                      <span *ngIf=\"humanTotalHours < estimationResult.estimatedHours\">\r\n                        Human estimate is <strong>{{ (estimationResult.estimatedHours - humanTotalHours).toFixed(1) }} hours lower</strong> than AI estimate\r\n                      </span>\r\n                      <span *ngIf=\"humanTotalHours === estimationResult.estimatedHours\">\r\n                        <strong>Both estimates are identical</strong> at {{ humanTotalHours }} hours\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <div class=\"badge bg-dark p-2\">\r\n                      <span class=\"h5 mb-0\">{{ (humanTotalHours / estimationResult.estimatedHours * 100).toFixed(0) }}%</span>\r\n                      <small class=\"d-block\">of AI estimate</small>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-footer text-muted small\">\r\n          <i class=\"bi bi-lightbulb\"></i> Combining both estimation approaches provides a more reliable forecast and helps identify potential gaps in the estimate.\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Placeholder when no result is shown -->\r\n      <div *ngIf=\"!showResult && !error\" class=\"card bg-light\">\r\n        <div class=\"card-body text-center p-5\">\r\n          <i class=\"bi bi-graph-up display-1 text-muted\"></i>\r\n          <h4 class=\"mt-3\">Task Time Prediction</h4>\r\n          <p class=\"text-muted\">Fill in the task details and click \"Estimate Time\" to get both AI and human time estimates</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}