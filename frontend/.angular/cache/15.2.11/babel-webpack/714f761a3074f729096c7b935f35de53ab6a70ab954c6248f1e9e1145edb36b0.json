{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet TaskDistributionComponent = class TaskDistributionComponent {\n  constructor(taskService, teamService) {\n    this.taskService = taskService;\n    this.teamService = teamService;\n    this.tasks = [];\n    this.teamMembers = [];\n    this.filteredTeamMembers = []; // New property for filtered team members\n    this.selectedTaskId = null;\n    this.selectedTeamMemberId = '';\n    this.selectedTask = null; // Added for modal display\n    this.selectedMember = ''; // Added for member selection in modal\n    this.currentIterationPath = 'Techoil\\\\2.3.23'; // Default value\n    this.iterationPaths = []; // Will be loaded from API\n    // Convert simple boolean to object with specific loading states\n    this.loading = {\n      tasks: false,\n      members: false,\n      assign: false,\n      autoAssign: false,\n      iterationPaths: false\n    };\n    // Convert simple string to object with specific error states\n    this.error = {\n      tasks: null,\n      members: null,\n      assign: null,\n      autoAssign: null,\n      iterationPaths: null\n    };\n  }\n  ngOnInit() {\n    this.loadIterationPaths();\n  }\n  loadIterationPaths() {\n    this.loading.iterationPaths = true;\n    this.error.iterationPaths = null;\n    this.taskService.getIterationPaths().subscribe({\n      next: paths => {\n        this.iterationPaths = paths;\n        this.loading.iterationPaths = false;\n        if (paths.length > 0) {\n          // Use the first path as default if available\n          this.currentIterationPath = paths[0];\n        }\n        // After loading iteration paths, load tasks and team members\n        this.loadTasks();\n        this.loadTeamMembers();\n      },\n      error: err => {\n        console.error('Error loading iteration paths:', err);\n        this.error.iterationPaths = `Failed to load iteration paths: ${err.message}`;\n        this.loading.iterationPaths = false;\n        // Add fallback iteration paths if API call fails\n        this.iterationPaths = ['Techoil\\\\2.3.23', 'Techoil\\\\2.3.24', 'Techoil\\\\2.3.25', 'Techoil\\\\2.3.26'];\n        console.log('Using fallback iteration paths:', this.iterationPaths);\n        // Even if iteration paths loading fails, try to load tasks and team members\n        this.loadTasks();\n        this.loadTeamMembers();\n      }\n    });\n  }\n  loadTasks() {\n    this.loading.tasks = true;\n    this.error.tasks = null;\n    console.log(`Loading tasks for iteration path: ${this.currentIterationPath}`);\n    this.taskService.getTasks(this.currentIterationPath).subscribe({\n      next: tasks => {\n        this.tasks = tasks;\n        this.loading.tasks = false;\n        console.log(`Loaded ${tasks.length} tasks for iteration path ${this.currentIterationPath}`);\n        // After loading tasks, update team workload\n        if (this.teamMembers.length > 0) {\n          this.updateTeamWorkload();\n        }\n      },\n      error: err => {\n        console.error(`Error loading tasks for iteration path ${this.currentIterationPath}:`, err);\n        this.error.tasks = `Failed to load tasks: ${err.message}`;\n        this.loading.tasks = false;\n      }\n    });\n  }\n  loadTeamMembers() {\n    this.loading.members = true;\n    this.error.members = null;\n    // Use the taskService directly to get team members by iteration path\n    this.taskService.getTeamMembers(this.currentIterationPath).subscribe({\n      next: members => {\n        this.teamMembers = members;\n        console.log('Loaded team members:', members);\n        this.loading.members = false;\n        // If tasks are already loaded, update workload\n        if (this.tasks.length > 0) {\n          this.updateTeamWorkload();\n        } else {\n          // If no tasks are loaded yet, still show the team members\n          this.filteredTeamMembers = [...this.teamMembers];\n          console.log('No tasks loaded yet, showing all team members');\n        }\n      },\n      error: err => {\n        console.error('Error loading team members:', err);\n        this.error.members = `Failed to load team members: ${err.message}`;\n        this.loading.members = false;\n        // Add fallback team members if API call fails\n        this.teamMembers = [{\n          id: '1',\n          displayName: 'Ranjith Kumar S',\n          email: 'ranjithkumar.s@inatech.onmicrosoft.com',\n          currentWorkload: 0,\n          isActive: true,\n          uniqueName: 'ranjithkumar.s'\n        }, {\n          id: '2',\n          displayName: 'Rabirai Madhavan',\n          email: 'rabiraj.m@example.com',\n          currentWorkload: 0,\n          isActive: true,\n          uniqueName: 'rabiraj.m'\n        }, {\n          id: '3',\n          displayName: 'Dhinakarraj Sivakumar',\n          email: 'dhivakarraj.s@example.com',\n          currentWorkload: 0,\n          isActive: true,\n          uniqueName: 'dhivakarraj.s'\n        }];\n        this.filteredTeamMembers = [...this.teamMembers];\n        console.log('Using fallback team members:', this.teamMembers);\n      }\n    });\n  }\n  /**\r\n   * Calculate and update team members' workload based on task assignments\r\n   */\n  updateTeamWorkload() {\n    console.log('Updating team workload');\n    console.log('Team members before update:', JSON.stringify(this.teamMembers));\n    console.log('Tasks for workload calculation:', JSON.stringify(this.tasks));\n    // Reset all workloads to 0\n    this.teamMembers.forEach(member => {\n      member.currentWorkload = 0;\n    });\n    // Count assignments for each team member\n    this.tasks.forEach(task => {\n      if (task.assignedTo) {\n        // Normalize the assignedTo value by removing leading/trailing spaces and converting to lowercase\n        const normalizedAssignedTo = task.assignedTo.trim().toLowerCase();\n        // Try to find matching team member with more flexible matching\n        let matchedMember = this.teamMembers.find(member => {\n          // Try exact match on displayName\n          if (member.displayName.toLowerCase() === normalizedAssignedTo) {\n            return true;\n          }\n          // Try match by ID\n          if (member.id.toLowerCase() === normalizedAssignedTo) {\n            return true;\n          }\n          // Try partial name match (e.g., \"John Doe\" should match \"John\")\n          if (normalizedAssignedTo.includes(member.displayName.toLowerCase()) || member.displayName.toLowerCase().includes(normalizedAssignedTo)) {\n            return true;\n          }\n          // Try matching by email (username part)\n          if (member.email && normalizedAssignedTo.includes(member.email.split('@')[0].toLowerCase())) {\n            return true;\n          }\n          return false;\n        });\n        // If a member was found, increment their workload\n        if (matchedMember) {\n          console.log(`Task \"${task.title}\" (ID: ${task.id}) matched to team member: ${matchedMember.displayName}`);\n          matchedMember.currentWorkload += 1;\n        } else {\n          console.log(`No team member found for task assignment: \"${task.assignedTo}\" (Task ID: ${task.id}, Title: ${task.title})`);\n        }\n      }\n    });\n    // Include all team members in the filtered list, even those without tasks\n    // This ensures we always show team members even if they don't have tasks\n    this.filteredTeamMembers = [...this.teamMembers];\n    console.log('Updated team members workload:', JSON.stringify(this.teamMembers));\n    console.log('Filtered team members:', JSON.stringify(this.filteredTeamMembers));\n  }\n  /**\r\n   * Check if a team member is part of the current iteration team\r\n   * This is a placeholder - you may need to implement actual logic based on your data model\r\n   */\n  isPartOfCurrentIterationTeam(member) {\n    // By default, include all team members\n    // You might want to enhance this with actual iteration team membership logic\n    return true;\n  }\n  assignTask() {\n    if (!this.selectedTask) {\n      this.error.assign = 'Error: No task selected for assignment';\n      return;\n    }\n    if (!this.selectedMember) {\n      this.error.assign = 'Please select a team member for assignment';\n      return;\n    }\n    this.loading.assign = true;\n    this.error.assign = null;\n    console.log(`Assigning task ${this.selectedTask} to member ${this.selectedMember}`);\n    this.taskService.assignTask(this.selectedTask, this.selectedMember).subscribe({\n      next: response => {\n        console.log('Task assignment successful:', response);\n        // Close the modal\n        this.cancelAssign();\n        // Show success message (could be implemented with a toast/snackbar service)\n        this.showSuccessMessage('Task assigned successfully');\n        // Reload tasks to reflect changes\n        this.loadTasks();\n      },\n      error: err => {\n        console.error('Error assigning task:', err);\n        this.error.assign = `Failed to assign task: ${err.message}`;\n        this.loading.assign = false;\n      }\n    });\n  }\n  // Helper method to show success message (placeholder for toast/snackbar)\n  showSuccessMessage(message) {\n    console.log('SUCCESS:', message);\n    // In a real implementation, you would use a toast/snackbar service\n    // Example: this.toastService.show(message, { classname: 'bg-success' });\n    // For now, create a simple alert element that disappears after a few seconds\n    const alertDiv = document.createElement('div');\n    alertDiv.className = 'alert alert-success position-fixed top-0 end-0 m-3';\n    alertDiv.textContent = message;\n    alertDiv.style.zIndex = '9999';\n    document.body.appendChild(alertDiv);\n    // Remove after 3 seconds\n    setTimeout(() => {\n      alertDiv.remove();\n    }, 3000);\n  }\n  autoAssignTasks() {\n    this.loading.autoAssign = true;\n    this.error.autoAssign = null;\n    this.taskService.autoAssignTasks(this.currentIterationPath).subscribe({\n      next: () => {\n        this.loadTasks(); // Reload tasks to reflect changes\n        this.loading.autoAssign = false;\n      },\n      error: err => {\n        this.error.autoAssign = `Failed to auto-assign tasks: ${err.message}`;\n        this.loading.autoAssign = false;\n      }\n    });\n  }\n  openAssignModal(taskId) {\n    this.selectedTask = taskId;\n    this.selectedMember = '';\n    this.error.assign = null;\n    // Ensure we have team members loaded before showing the modal\n    if (this.filteredTeamMembers.length === 0 && !this.loading.members) {\n      this.loadTeamMembers();\n    }\n  }\n  cancelAssign() {\n    this.selectedTask = null;\n    this.selectedMember = '';\n    this.error.assign = null;\n    this.loading.assign = false;\n  }\n  /**\r\n   * Get CSS class for priority badge\r\n   * @param priority Priority value (number or string)\r\n   * @returns CSS class name\r\n   */\n  getPriorityClass(priority) {\n    // Convert priority to number if it's a string\n    const priorityNum = typeof priority === 'string' ? parseInt(priority, 10) : priority;\n    if (isNaN(priorityNum)) {\n      return 'bg-secondary'; // Default for invalid priority\n    }\n\n    switch (priorityNum) {\n      case 1:\n        return 'bg-danger';\n      case 2:\n        return 'bg-warning text-dark';\n      case 3:\n        return 'bg-info text-dark';\n      case 4:\n        return 'bg-success';\n      default:\n        return 'bg-secondary';\n    }\n  }\n  /**\r\n   * Get CSS class for status badge\r\n   * @param status Status string or undefined\r\n   * @returns CSS class name\r\n   */\n  getStatusClass(status) {\n    if (!status) {\n      return 'bg-secondary'; // Default for undefined status\n    }\n\n    const statusLower = status.toLowerCase();\n    if (statusLower.includes('progress') || statusLower === 'active') {\n      return 'bg-primary';\n    } else if (statusLower === 'completed' || statusLower === 'done' || statusLower === 'closed') {\n      return 'bg-success';\n    } else if (statusLower === 'blocked') {\n      return 'bg-danger';\n    } else if (statusLower === 'to do' || statusLower === 'new') {\n      return 'bg-secondary';\n    } else {\n      return 'bg-info';\n    }\n  }\n  /**\r\n   * Get CSS class for team member workload indicator\r\n   * @param workload Current workload value\r\n   * @returns CSS class name\r\n   */\n  getTeamMemberWorkloadClass(workload) {\n    if (workload === 0) {\n      return 'bg-secondary';\n    } else if (workload < 3) {\n      return 'bg-success';\n    } else if (workload < 7) {\n      return 'bg-warning text-dark';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  /**\r\n   * Get the progress bar class based on workload\r\n   * @param workload Current workload\r\n   * @returns Bootstrap progress bar class\r\n   */\n  getProgressBarClass(workload) {\n    if (workload === 0) {\n      return 'bg-secondary';\n    } else if (workload < 3) {\n      return 'bg-success';\n    } else if (workload < 7) {\n      return 'bg-warning';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  /**\r\n   * Calculate workload as a percentage (for progress bar width)\r\n   * @param workload Current workload\r\n   * @returns Percentage value (0-100)\r\n   */\n  getWorkloadPercentage(workload) {\n    // Using 10 as maximum reasonable workload\n    const maxWorkload = 10;\n    return Math.min(100, workload / maxWorkload * 100);\n  }\n  /**\r\n   * Change the iteration path and reload tasks\r\n   * @param iterationPath New iteration path to load tasks from\r\n   */\n  changeIterationPath(iterationPath) {\n    console.log(`Changing iteration path to: ${iterationPath}`);\n    this.currentIterationPath = iterationPath;\n    // Reset selected task if any\n    this.selectedTask = null;\n    // Load tasks and team members for the new iteration path\n    this.loadTasks();\n    this.loadTeamMembers(); // Now this will pass the current iteration path\n  }\n};\n\nTaskDistributionComponent = __decorate([Component({\n  selector: 'app-task-distribution',\n  templateUrl: './task-distribution.component.html',\n  styleUrls: ['./task-distribution.component.scss']\n})], TaskDistributionComponent);\nexport { TaskDistributionComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,IAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAyCpCC,YACUC,WAAwB,EACxBC,WAAwB;IADxB,gBAAW,GAAXD,WAAW;IACX,gBAAW,GAAXC,WAAW;IA1CrB,UAAK,GAAe,EAAE;IACtB,gBAAW,GAAiB,EAAE;IAC9B,wBAAmB,GAAiB,EAAE,CAAC,CAAC;IACxC,mBAAc,GAAkB,IAAI;IACpC,yBAAoB,GAAW,EAAE;IACjC,iBAAY,GAAkB,IAAI,CAAC,CAAC;IACpC,mBAAc,GAAW,EAAE,CAAC,CAAC;IAC7B,yBAAoB,GAAW,iBAAiB,CAAC,CAAC;IAClD,mBAAc,GAAa,EAAE,CAAC,CAAC;IAE/B;IACA,YAAO,GAMH;MACFC,KAAK,EAAE,KAAK;MACZC,OAAO,EAAE,KAAK;MACdC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAE,KAAK;MACjBC,cAAc,EAAE;KACjB;IAED;IACA,UAAK,GAMD;MACFJ,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,IAAI;MACbC,MAAM,EAAE,IAAI;MACZC,UAAU,EAAE,IAAI;MAChBC,cAAc,EAAE;KACjB;EAKE;EAEHC,QAAQ;IACN,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAA,kBAAkB;IAChB,IAAI,CAACC,OAAO,CAACH,cAAc,GAAG,IAAI;IAClC,IAAI,CAACI,KAAK,CAACJ,cAAc,GAAG,IAAI;IAEhC,IAAI,CAACN,WAAW,CAACW,iBAAiB,EAAE,CAACC,SAAS,CAAC;MAC7CC,IAAI,EAAGC,KAAK,IAAI;QACd,IAAI,CAACR,cAAc,GAAGQ,KAAK;QAC3B,IAAI,CAACL,OAAO,CAACH,cAAc,GAAG,KAAK;QAEnC,IAAIQ,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;UACpB;UACA,IAAI,CAACC,oBAAoB,GAAGF,KAAK,CAAC,CAAC,CAAC;;QAGtC;QACA,IAAI,CAACG,SAAS,EAAE;QAChB,IAAI,CAACC,eAAe,EAAE;MACxB,CAAC;MACDR,KAAK,EAAGS,GAAG,IAAI;QACbC,OAAO,CAACV,KAAK,CAAC,gCAAgC,EAAES,GAAG,CAAC;QACpD,IAAI,CAACT,KAAK,CAACJ,cAAc,GAAG,mCAAmCa,GAAG,CAACE,OAAO,EAAE;QAC5E,IAAI,CAACZ,OAAO,CAACH,cAAc,GAAG,KAAK;QAEnC;QACA,IAAI,CAACA,cAAc,GAAG,CACpB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,CAClB;QACDc,OAAO,CAACE,GAAG,CAAC,iCAAiC,EAAE,IAAI,CAAChB,cAAc,CAAC;QAEnE;QACA,IAAI,CAACW,SAAS,EAAE;QAChB,IAAI,CAACC,eAAe,EAAE;MACxB;KACD,CAAC;EACJ;EAEAD,SAAS;IACP,IAAI,CAACR,OAAO,CAACP,KAAK,GAAG,IAAI;IACzB,IAAI,CAACQ,KAAK,CAACR,KAAK,GAAG,IAAI;IAEvBkB,OAAO,CAACE,GAAG,CAAC,qCAAqC,IAAI,CAACN,oBAAoB,EAAE,CAAC;IAE7E,IAAI,CAAChB,WAAW,CAACuB,QAAQ,CAAC,IAAI,CAACP,oBAAoB,CAAC,CAACJ,SAAS,CAAC;MAC7DC,IAAI,EAAGX,KAAK,IAAI;QACd,IAAI,CAACA,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACO,OAAO,CAACP,KAAK,GAAG,KAAK;QAC1BkB,OAAO,CAACE,GAAG,CAAC,UAAUpB,KAAK,CAACa,MAAM,6BAA6B,IAAI,CAACC,oBAAoB,EAAE,CAAC;QAE3F;QACA,IAAI,IAAI,CAACQ,WAAW,CAACT,MAAM,GAAG,CAAC,EAAE;UAC/B,IAAI,CAACU,kBAAkB,EAAE;;MAE7B,CAAC;MACDf,KAAK,EAAGS,GAAG,IAAI;QACbC,OAAO,CAACV,KAAK,CAAC,0CAA0C,IAAI,CAACM,oBAAoB,GAAG,EAAEG,GAAG,CAAC;QAC1F,IAAI,CAACT,KAAK,CAACR,KAAK,GAAG,yBAAyBiB,GAAG,CAACE,OAAO,EAAE;QACzD,IAAI,CAACZ,OAAO,CAACP,KAAK,GAAG,KAAK;MAC5B;KACD,CAAC;EACJ;EAEAgB,eAAe;IACb,IAAI,CAACT,OAAO,CAACN,OAAO,GAAG,IAAI;IAC3B,IAAI,CAACO,KAAK,CAACP,OAAO,GAAG,IAAI;IAEzB;IACA,IAAI,CAACH,WAAW,CAAC0B,cAAc,CAAC,IAAI,CAACV,oBAAoB,CAAC,CAACJ,SAAS,CAAC;MACnEC,IAAI,EAAGV,OAAO,IAAI;QAChB,IAAI,CAACqB,WAAW,GAAGrB,OAAO;QAC1BiB,OAAO,CAACE,GAAG,CAAC,sBAAsB,EAAEnB,OAAO,CAAC;QAC5C,IAAI,CAACM,OAAO,CAACN,OAAO,GAAG,KAAK;QAE5B;QACA,IAAI,IAAI,CAACD,KAAK,CAACa,MAAM,GAAG,CAAC,EAAE;UACzB,IAAI,CAACU,kBAAkB,EAAE;SAC1B,MAAM;UACL;UACA,IAAI,CAACE,mBAAmB,GAAG,CAAC,GAAG,IAAI,CAACH,WAAW,CAAC;UAChDJ,OAAO,CAACE,GAAG,CAAC,+CAA+C,CAAC;;MAEhE,CAAC;MACDZ,KAAK,EAAGS,GAAG,IAAI;QACbC,OAAO,CAACV,KAAK,CAAC,6BAA6B,EAAES,GAAG,CAAC;QACjD,IAAI,CAACT,KAAK,CAACP,OAAO,GAAG,gCAAgCgB,GAAG,CAACE,OAAO,EAAE;QAClE,IAAI,CAACZ,OAAO,CAACN,OAAO,GAAG,KAAK;QAE5B;QACA,IAAI,CAACqB,WAAW,GAAG,CACjB;UAAEI,EAAE,EAAE,GAAG;UAAEC,WAAW,EAAE,iBAAiB;UAAEC,KAAK,EAAE,wCAAwC;UAAEC,eAAe,EAAE,CAAC;UAAEC,QAAQ,EAAE,IAAI;UAAEC,UAAU,EAAE;QAAgB,CAAE,EAC9J;UAAEL,EAAE,EAAE,GAAG;UAAEC,WAAW,EAAE,kBAAkB;UAAEC,KAAK,EAAE,uBAAuB;UAAEC,eAAe,EAAE,CAAC;UAAEC,QAAQ,EAAE,IAAI;UAAEC,UAAU,EAAE;QAAW,CAAE,EACzI;UAAEL,EAAE,EAAE,GAAG;UAAEC,WAAW,EAAE,uBAAuB;UAAEC,KAAK,EAAE,2BAA2B;UAAEC,eAAe,EAAE,CAAC;UAAEC,QAAQ,EAAE,IAAI;UAAEC,UAAU,EAAE;QAAe,CAAE,CACvJ;QACD,IAAI,CAACN,mBAAmB,GAAG,CAAC,GAAG,IAAI,CAACH,WAAW,CAAC;QAChDJ,OAAO,CAACE,GAAG,CAAC,8BAA8B,EAAE,IAAI,CAACE,WAAW,CAAC;MAC/D;KACD,CAAC;EACJ;EAEA;;;EAGAC,kBAAkB;IAChBL,OAAO,CAACE,GAAG,CAAC,wBAAwB,CAAC;IACrCF,OAAO,CAACE,GAAG,CAAC,6BAA6B,EAAEY,IAAI,CAACC,SAAS,CAAC,IAAI,CAACX,WAAW,CAAC,CAAC;IAC5EJ,OAAO,CAACE,GAAG,CAAC,iCAAiC,EAAEY,IAAI,CAACC,SAAS,CAAC,IAAI,CAACjC,KAAK,CAAC,CAAC;IAE1E;IACA,IAAI,CAACsB,WAAW,CAACY,OAAO,CAACC,MAAM,IAAG;MAChCA,MAAM,CAACN,eAAe,GAAG,CAAC;IAC5B,CAAC,CAAC;IAEF;IACA,IAAI,CAAC7B,KAAK,CAACkC,OAAO,CAACE,IAAI,IAAG;MACxB,IAAIA,IAAI,CAACC,UAAU,EAAE;QACnB;QACA,MAAMC,oBAAoB,GAAGF,IAAI,CAACC,UAAU,CAACE,IAAI,EAAE,CAACC,WAAW,EAAE;QAEjE;QACA,IAAIC,aAAa,GAAG,IAAI,CAACnB,WAAW,CAACoB,IAAI,CAACP,MAAM,IAAG;UACjD;UACA,IAAIA,MAAM,CAACR,WAAW,CAACa,WAAW,EAAE,KAAKF,oBAAoB,EAAE;YAC7D,OAAO,IAAI;;UAGb;UACA,IAAIH,MAAM,CAACT,EAAE,CAACc,WAAW,EAAE,KAAKF,oBAAoB,EAAE;YACpD,OAAO,IAAI;;UAGb;UACA,IAAIA,oBAAoB,CAACK,QAAQ,CAACR,MAAM,CAACR,WAAW,CAACa,WAAW,EAAE,CAAC,IAC/DL,MAAM,CAACR,WAAW,CAACa,WAAW,EAAE,CAACG,QAAQ,CAACL,oBAAoB,CAAC,EAAE;YACnE,OAAO,IAAI;;UAGb;UACA,IAAIH,MAAM,CAACP,KAAK,IAAIU,oBAAoB,CAACK,QAAQ,CAACR,MAAM,CAACP,KAAK,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACJ,WAAW,EAAE,CAAC,EAAE;YAC3F,OAAO,IAAI;;UAGb,OAAO,KAAK;QACd,CAAC,CAAC;QAEF;QACA,IAAIC,aAAa,EAAE;UACjBvB,OAAO,CAACE,GAAG,CAAC,SAASgB,IAAI,CAACS,KAAK,UAAUT,IAAI,CAACV,EAAE,6BAA6Be,aAAa,CAACd,WAAW,EAAE,CAAC;UACzGc,aAAa,CAACZ,eAAe,IAAI,CAAC;SACnC,MAAM;UACLX,OAAO,CAACE,GAAG,CAAC,8CAA8CgB,IAAI,CAACC,UAAU,eAAeD,IAAI,CAACV,EAAE,YAAYU,IAAI,CAACS,KAAK,GAAG,CAAC;;;IAG/H,CAAC,CAAC;IAEF;IACA;IACA,IAAI,CAACpB,mBAAmB,GAAG,CAAC,GAAG,IAAI,CAACH,WAAW,CAAC;IAEhDJ,OAAO,CAACE,GAAG,CAAC,gCAAgC,EAAEY,IAAI,CAACC,SAAS,CAAC,IAAI,CAACX,WAAW,CAAC,CAAC;IAC/EJ,OAAO,CAACE,GAAG,CAAC,wBAAwB,EAAEY,IAAI,CAACC,SAAS,CAAC,IAAI,CAACR,mBAAmB,CAAC,CAAC;EACjF;EAEA;;;;EAIAqB,4BAA4B,CAACX,MAAkB;IAC7C;IACA;IACA,OAAO,IAAI;EACb;EAEAY,UAAU;IACR,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACtB,IAAI,CAACxC,KAAK,CAACN,MAAM,GAAG,wCAAwC;MAC5D;;IAGF,IAAI,CAAC,IAAI,CAAC+C,cAAc,EAAE;MACxB,IAAI,CAACzC,KAAK,CAACN,MAAM,GAAG,4CAA4C;MAChE;;IAGF,IAAI,CAACK,OAAO,CAACL,MAAM,GAAG,IAAI;IAC1B,IAAI,CAACM,KAAK,CAACN,MAAM,GAAG,IAAI;IAExBgB,OAAO,CAACE,GAAG,CAAC,kBAAkB,IAAI,CAAC4B,YAAY,cAAc,IAAI,CAACC,cAAc,EAAE,CAAC;IAEnF,IAAI,CAACnD,WAAW,CAACiD,UAAU,CAAC,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,cAAc,CAAC,CAACvC,SAAS,CAAC;MAC5EC,IAAI,EAAGuC,QAAQ,IAAI;QACjBhC,OAAO,CAACE,GAAG,CAAC,6BAA6B,EAAE8B,QAAQ,CAAC;QACpD;QACA,IAAI,CAACC,YAAY,EAAE;QACnB;QACA,IAAI,CAACC,kBAAkB,CAAC,4BAA4B,CAAC;QACrD;QACA,IAAI,CAACrC,SAAS,EAAE;MAClB,CAAC;MACDP,KAAK,EAAGS,GAAG,IAAI;QACbC,OAAO,CAACV,KAAK,CAAC,uBAAuB,EAAES,GAAG,CAAC;QAC3C,IAAI,CAACT,KAAK,CAACN,MAAM,GAAG,0BAA0Be,GAAG,CAACE,OAAO,EAAE;QAC3D,IAAI,CAACZ,OAAO,CAACL,MAAM,GAAG,KAAK;MAC7B;KACD,CAAC;EACJ;EAEA;EACAkD,kBAAkB,CAACjC,OAAe;IAChCD,OAAO,CAACE,GAAG,CAAC,UAAU,EAAED,OAAO,CAAC;IAChC;IACA;IAEA;IACA,MAAMkC,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC9CF,QAAQ,CAACG,SAAS,GAAG,oDAAoD;IACzEH,QAAQ,CAACI,WAAW,GAAGtC,OAAO;IAC9BkC,QAAQ,CAACK,KAAK,CAACC,MAAM,GAAG,MAAM;IAC9BL,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,QAAQ,CAAC;IAEnC;IACAS,UAAU,CAAC,MAAK;MACdT,QAAQ,CAACU,MAAM,EAAE;IACnB,CAAC,EAAE,IAAI,CAAC;EACV;EAEAC,eAAe;IACb,IAAI,CAACzD,OAAO,CAACJ,UAAU,GAAG,IAAI;IAC9B,IAAI,CAACK,KAAK,CAACL,UAAU,GAAG,IAAI;IAE5B,IAAI,CAACL,WAAW,CAACkE,eAAe,CAAC,IAAI,CAAClD,oBAAoB,CAAC,CAACJ,SAAS,CAAC;MACpEC,IAAI,EAAE,MAAK;QACT,IAAI,CAACI,SAAS,EAAE,CAAC,CAAC;QAClB,IAAI,CAACR,OAAO,CAACJ,UAAU,GAAG,KAAK;MACjC,CAAC;MACDK,KAAK,EAAGS,GAAG,IAAI;QACb,IAAI,CAACT,KAAK,CAACL,UAAU,GAAG,gCAAgCc,GAAG,CAACE,OAAO,EAAE;QACrE,IAAI,CAACZ,OAAO,CAACJ,UAAU,GAAG,KAAK;MACjC;KACD,CAAC;EACJ;EAEA8D,eAAe,CAACC,MAAc;IAC5B,IAAI,CAAClB,YAAY,GAAGkB,MAAM;IAC1B,IAAI,CAACjB,cAAc,GAAG,EAAE;IACxB,IAAI,CAACzC,KAAK,CAACN,MAAM,GAAG,IAAI;IAExB;IACA,IAAI,IAAI,CAACuB,mBAAmB,CAACZ,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,CAACN,OAAO,CAACN,OAAO,EAAE;MAClE,IAAI,CAACe,eAAe,EAAE;;EAE1B;EAEAmC,YAAY;IACV,IAAI,CAACH,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB,IAAI,CAACzC,KAAK,CAACN,MAAM,GAAG,IAAI;IACxB,IAAI,CAACK,OAAO,CAACL,MAAM,GAAG,KAAK;EAC7B;EAEA;;;;;EAKAiE,gBAAgB,CAACC,QAAyB;IACxC;IACA,MAAMC,WAAW,GAAG,OAAOD,QAAQ,KAAK,QAAQ,GAAGE,QAAQ,CAACF,QAAQ,EAAE,EAAE,CAAC,GAAGA,QAAQ;IAEpF,IAAIG,KAAK,CAACF,WAAW,CAAC,EAAE;MACtB,OAAO,cAAc,CAAC,CAAC;;;IAGzB,QAAQA,WAAW;MACjB,KAAK,CAAC;QACJ,OAAO,WAAW;MACpB,KAAK,CAAC;QACJ,OAAO,sBAAsB;MAC/B,KAAK,CAAC;QACJ,OAAO,mBAAmB;MAC5B,KAAK,CAAC;QACJ,OAAO,YAAY;MACrB;QACE,OAAO,cAAc;IAAC;EAE5B;EAEA;;;;;EAKAG,cAAc,CAACC,MAA0B;IACvC,IAAI,CAACA,MAAM,EAAE;MACX,OAAO,cAAc,CAAC,CAAC;;;IAGzB,MAAMC,WAAW,GAAGD,MAAM,CAACjC,WAAW,EAAE;IAExC,IAAIkC,WAAW,CAAC/B,QAAQ,CAAC,UAAU,CAAC,IAAI+B,WAAW,KAAK,QAAQ,EAAE;MAChE,OAAO,YAAY;KACpB,MAAM,IAAIA,WAAW,KAAK,WAAW,IAAIA,WAAW,KAAK,MAAM,IAAIA,WAAW,KAAK,QAAQ,EAAE;MAC5F,OAAO,YAAY;KACpB,MAAM,IAAIA,WAAW,KAAK,SAAS,EAAE;MACpC,OAAO,WAAW;KACnB,MAAM,IAAIA,WAAW,KAAK,OAAO,IAAIA,WAAW,KAAK,KAAK,EAAE;MAC3D,OAAO,cAAc;KACtB,MAAM;MACL,OAAO,SAAS;;EAEpB;EAEA;;;;;EAKAC,0BAA0B,CAACC,QAAgB;IACzC,IAAIA,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAO,cAAc;KACtB,MAAM,IAAIA,QAAQ,GAAG,CAAC,EAAE;MACvB,OAAO,YAAY;KACpB,MAAM,IAAIA,QAAQ,GAAG,CAAC,EAAE;MACvB,OAAO,sBAAsB;KAC9B,MAAM;MACL,OAAO,WAAW;;EAEtB;EAEA;;;;;EAKAC,mBAAmB,CAACD,QAAgB;IAClC,IAAIA,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAO,cAAc;KACtB,MAAM,IAAIA,QAAQ,GAAG,CAAC,EAAE;MACvB,OAAO,YAAY;KACpB,MAAM,IAAIA,QAAQ,GAAG,CAAC,EAAE;MACvB,OAAO,YAAY;KACpB,MAAM;MACL,OAAO,WAAW;;EAEtB;EAEA;;;;;EAKAE,qBAAqB,CAACF,QAAgB;IACpC;IACA,MAAMG,WAAW,GAAG,EAAE;IACtB,OAAOC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAGL,QAAQ,GAAGG,WAAW,GAAI,GAAG,CAAC;EACtD;EAEA;;;;EAIAG,mBAAmB,CAACC,aAAqB;IACvCjE,OAAO,CAACE,GAAG,CAAC,+BAA+B+D,aAAa,EAAE,CAAC;IAC3D,IAAI,CAACrE,oBAAoB,GAAGqE,aAAa;IAEzC;IACA,IAAI,CAACnC,YAAY,GAAG,IAAI;IAExB;IACA,IAAI,CAACjC,SAAS,EAAE;IAChB,IAAI,CAACC,eAAe,EAAE,CAAC,CAAC;EAC1B;CACD;;AAvaYpB,yBAAyB,eALrCD,SAAS,CAAC;EACTyF,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACW1F,yBAAyB,CAuarC;SAvaYA,yBAAyB","names":["Component","TaskDistributionComponent","constructor","taskService","teamService","tasks","members","assign","autoAssign","iterationPaths","ngOnInit","loadIterationPaths","loading","error","getIterationPaths","subscribe","next","paths","length","currentIterationPath","loadTasks","loadTeamMembers","err","console","message","log","getTasks","teamMembers","updateTeamWorkload","getTeamMembers","filteredTeamMembers","id","displayName","email","currentWorkload","isActive","uniqueName","JSON","stringify","forEach","member","task","assignedTo","normalizedAssignedTo","trim","toLowerCase","matchedMember","find","includes","split","title","isPartOfCurrentIterationTeam","assignTask","selectedTask","selectedMember","response","cancelAssign","showSuccessMessage","alertDiv","document","createElement","className","textContent","style","zIndex","body","appendChild","setTimeout","remove","autoAssignTasks","openAssignModal","taskId","getPriorityClass","priority","priorityNum","parseInt","isNaN","getStatusClass","status","statusLower","getTeamMemberWorkloadClass","workload","getProgressBarClass","getWorkloadPercentage","maxWorkload","Math","min","changeIterationPath","iterationPath","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-distribution\\task-distribution.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { TaskService } from '../../services/task.service';\r\nimport { TeamService } from '../../services/team.service';\r\nimport { WorkItem, TeamMember } from '../../models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task-distribution',\r\n  templateUrl: './task-distribution.component.html',\r\n  styleUrls: ['./task-distribution.component.scss']\r\n})\r\nexport class TaskDistributionComponent implements OnInit {\r\n  tasks: WorkItem[] = [];\r\n  teamMembers: TeamMember[] = [];\r\n  filteredTeamMembers: TeamMember[] = []; // New property for filtered team members\r\n  selectedTaskId: number | null = null;\r\n  selectedTeamMemberId: string = '';\r\n  selectedTask: number | null = null; // Added for modal display\r\n  selectedMember: string = ''; // Added for member selection in modal\r\n  currentIterationPath: string = 'Techoil\\\\2.3.23'; // Default value\r\n  iterationPaths: string[] = []; // Will be loaded from API\r\n  \r\n  // Convert simple boolean to object with specific loading states\r\n  loading: { \r\n    tasks: boolean; \r\n    members: boolean; \r\n    assign: boolean; \r\n    autoAssign: boolean;\r\n    iterationPaths: boolean;\r\n  } = {\r\n    tasks: false,\r\n    members: false,\r\n    assign: false,\r\n    autoAssign: false,\r\n    iterationPaths: false\r\n  };\r\n  \r\n  // Convert simple string to object with specific error states\r\n  error: { \r\n    tasks: string | null; \r\n    members: string | null; \r\n    assign: string | null; \r\n    autoAssign: string | null;\r\n    iterationPaths: string | null;\r\n  } = {\r\n    tasks: null,\r\n    members: null,\r\n    assign: null,\r\n    autoAssign: null,\r\n    iterationPaths: null\r\n  };\r\n\r\n  constructor(\r\n    private taskService: TaskService,\r\n    private teamService: TeamService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadIterationPaths();\r\n  }\r\n\r\n  loadIterationPaths(): void {\r\n    this.loading.iterationPaths = true;\r\n    this.error.iterationPaths = null;\r\n\r\n    this.taskService.getIterationPaths().subscribe({\r\n      next: (paths) => {\r\n        this.iterationPaths = paths;\r\n        this.loading.iterationPaths = false;\r\n        \r\n        if (paths.length > 0) {\r\n          // Use the first path as default if available\r\n          this.currentIterationPath = paths[0];\r\n        }\r\n        \r\n        // After loading iteration paths, load tasks and team members\r\n        this.loadTasks();\r\n        this.loadTeamMembers();\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading iteration paths:', err);\r\n        this.error.iterationPaths = `Failed to load iteration paths: ${err.message}`;\r\n        this.loading.iterationPaths = false;\r\n        \r\n        // Add fallback iteration paths if API call fails\r\n        this.iterationPaths = [\r\n          'Techoil\\\\2.3.23',\r\n          'Techoil\\\\2.3.24',\r\n          'Techoil\\\\2.3.25',\r\n          'Techoil\\\\2.3.26'\r\n        ];\r\n        console.log('Using fallback iteration paths:', this.iterationPaths);\r\n        \r\n        // Even if iteration paths loading fails, try to load tasks and team members\r\n        this.loadTasks();\r\n        this.loadTeamMembers();\r\n      }\r\n    });\r\n  }\r\n\r\n  loadTasks(): void {\r\n    this.loading.tasks = true;\r\n    this.error.tasks = null;\r\n    \r\n    console.log(`Loading tasks for iteration path: ${this.currentIterationPath}`);\r\n    \r\n    this.taskService.getTasks(this.currentIterationPath).subscribe({\r\n      next: (tasks) => {\r\n        this.tasks = tasks;\r\n        this.loading.tasks = false;\r\n        console.log(`Loaded ${tasks.length} tasks for iteration path ${this.currentIterationPath}`);\r\n        \r\n        // After loading tasks, update team workload\r\n        if (this.teamMembers.length > 0) {\r\n          this.updateTeamWorkload();\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error(`Error loading tasks for iteration path ${this.currentIterationPath}:`, err);\r\n        this.error.tasks = `Failed to load tasks: ${err.message}`;\r\n        this.loading.tasks = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  loadTeamMembers(): void {\r\n    this.loading.members = true;\r\n    this.error.members = null;\r\n\r\n    // Use the taskService directly to get team members by iteration path\r\n    this.taskService.getTeamMembers(this.currentIterationPath).subscribe({\r\n      next: (members) => {\r\n        this.teamMembers = members;\r\n        console.log('Loaded team members:', members);\r\n        this.loading.members = false;\r\n        \r\n        // If tasks are already loaded, update workload\r\n        if (this.tasks.length > 0) {\r\n          this.updateTeamWorkload();\r\n        } else {\r\n          // If no tasks are loaded yet, still show the team members\r\n          this.filteredTeamMembers = [...this.teamMembers];\r\n          console.log('No tasks loaded yet, showing all team members');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading team members:', err);\r\n        this.error.members = `Failed to load team members: ${err.message}`;\r\n        this.loading.members = false;\r\n        \r\n        // Add fallback team members if API call fails\r\n        this.teamMembers = [\r\n          { id: '1', displayName: 'Ranjith Kumar S', email: 'ranjithkumar.s@inatech.onmicrosoft.com', currentWorkload: 0, isActive: true, uniqueName: 'ranjithkumar.s' },\r\n          { id: '2', displayName: 'Rabirai Madhavan', email: 'rabiraj.m@example.com', currentWorkload: 0, isActive: true, uniqueName: 'rabiraj.m' },\r\n          { id: '3', displayName: 'Dhinakarraj Sivakumar', email: 'dhivakarraj.s@example.com', currentWorkload: 0, isActive: true, uniqueName: 'dhivakarraj.s' }\r\n        ];\r\n        this.filteredTeamMembers = [...this.teamMembers];\r\n        console.log('Using fallback team members:', this.teamMembers);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate and update team members' workload based on task assignments\r\n   */\r\n  updateTeamWorkload(): void {\r\n    console.log('Updating team workload');\r\n    console.log('Team members before update:', JSON.stringify(this.teamMembers));\r\n    console.log('Tasks for workload calculation:', JSON.stringify(this.tasks));\r\n    \r\n    // Reset all workloads to 0\r\n    this.teamMembers.forEach(member => {\r\n      member.currentWorkload = 0;\r\n    });\r\n    \r\n    // Count assignments for each team member\r\n    this.tasks.forEach(task => {\r\n      if (task.assignedTo) {\r\n        // Normalize the assignedTo value by removing leading/trailing spaces and converting to lowercase\r\n        const normalizedAssignedTo = task.assignedTo.trim().toLowerCase();\r\n        \r\n        // Try to find matching team member with more flexible matching\r\n        let matchedMember = this.teamMembers.find(member => {\r\n          // Try exact match on displayName\r\n          if (member.displayName.toLowerCase() === normalizedAssignedTo) {\r\n            return true;\r\n          }\r\n          \r\n          // Try match by ID\r\n          if (member.id.toLowerCase() === normalizedAssignedTo) {\r\n            return true;\r\n          }\r\n          \r\n          // Try partial name match (e.g., \"John Doe\" should match \"John\")\r\n          if (normalizedAssignedTo.includes(member.displayName.toLowerCase()) || \r\n              member.displayName.toLowerCase().includes(normalizedAssignedTo)) {\r\n            return true;\r\n          }\r\n          \r\n          // Try matching by email (username part)\r\n          if (member.email && normalizedAssignedTo.includes(member.email.split('@')[0].toLowerCase())) {\r\n            return true;\r\n          }\r\n          \r\n          return false;\r\n        });\r\n        \r\n        // If a member was found, increment their workload\r\n        if (matchedMember) {\r\n          console.log(`Task \"${task.title}\" (ID: ${task.id}) matched to team member: ${matchedMember.displayName}`);\r\n          matchedMember.currentWorkload += 1;\r\n        } else {\r\n          console.log(`No team member found for task assignment: \"${task.assignedTo}\" (Task ID: ${task.id}, Title: ${task.title})`);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Include all team members in the filtered list, even those without tasks\r\n    // This ensures we always show team members even if they don't have tasks\r\n    this.filteredTeamMembers = [...this.teamMembers];\r\n    \r\n    console.log('Updated team members workload:', JSON.stringify(this.teamMembers));\r\n    console.log('Filtered team members:', JSON.stringify(this.filteredTeamMembers));\r\n  }\r\n\r\n  /**\r\n   * Check if a team member is part of the current iteration team\r\n   * This is a placeholder - you may need to implement actual logic based on your data model\r\n   */\r\n  isPartOfCurrentIterationTeam(member: TeamMember): boolean {\r\n    // By default, include all team members\r\n    // You might want to enhance this with actual iteration team membership logic\r\n    return true;\r\n  }\r\n\r\n  assignTask(): void {\r\n    if (!this.selectedTask) {\r\n      this.error.assign = 'Error: No task selected for assignment';\r\n      return;\r\n    }\r\n    \r\n    if (!this.selectedMember) {\r\n      this.error.assign = 'Please select a team member for assignment';\r\n      return;\r\n    }\r\n\r\n    this.loading.assign = true;\r\n    this.error.assign = null;\r\n    \r\n    console.log(`Assigning task ${this.selectedTask} to member ${this.selectedMember}`);\r\n    \r\n    this.taskService.assignTask(this.selectedTask, this.selectedMember).subscribe({\r\n      next: (response) => {\r\n        console.log('Task assignment successful:', response);\r\n        // Close the modal\r\n        this.cancelAssign();\r\n        // Show success message (could be implemented with a toast/snackbar service)\r\n        this.showSuccessMessage('Task assigned successfully');\r\n        // Reload tasks to reflect changes\r\n        this.loadTasks();\r\n      },\r\n      error: (err) => {\r\n        console.error('Error assigning task:', err);\r\n        this.error.assign = `Failed to assign task: ${err.message}`;\r\n        this.loading.assign = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Helper method to show success message (placeholder for toast/snackbar)\r\n  showSuccessMessage(message: string): void {\r\n    console.log('SUCCESS:', message);\r\n    // In a real implementation, you would use a toast/snackbar service\r\n    // Example: this.toastService.show(message, { classname: 'bg-success' });\r\n    \r\n    // For now, create a simple alert element that disappears after a few seconds\r\n    const alertDiv = document.createElement('div');\r\n    alertDiv.className = 'alert alert-success position-fixed top-0 end-0 m-3';\r\n    alertDiv.textContent = message;\r\n    alertDiv.style.zIndex = '9999';\r\n    document.body.appendChild(alertDiv);\r\n    \r\n    // Remove after 3 seconds\r\n    setTimeout(() => {\r\n      alertDiv.remove();\r\n    }, 3000);\r\n  }\r\n\r\n  autoAssignTasks(): void {\r\n    this.loading.autoAssign = true;\r\n    this.error.autoAssign = null;\r\n    \r\n    this.taskService.autoAssignTasks(this.currentIterationPath).subscribe({\r\n      next: () => {\r\n        this.loadTasks(); // Reload tasks to reflect changes\r\n        this.loading.autoAssign = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.autoAssign = `Failed to auto-assign tasks: ${err.message}`;\r\n        this.loading.autoAssign = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  openAssignModal(taskId: number): void {\r\n    this.selectedTask = taskId;\r\n    this.selectedMember = '';\r\n    this.error.assign = null;\r\n\r\n    // Ensure we have team members loaded before showing the modal\r\n    if (this.filteredTeamMembers.length === 0 && !this.loading.members) {\r\n      this.loadTeamMembers();\r\n    }\r\n  }\r\n\r\n  cancelAssign(): void {\r\n    this.selectedTask = null;\r\n    this.selectedMember = '';\r\n    this.error.assign = null;\r\n    this.loading.assign = false;\r\n  }\r\n\r\n  /**\r\n   * Get CSS class for priority badge\r\n   * @param priority Priority value (number or string)\r\n   * @returns CSS class name\r\n   */\r\n  getPriorityClass(priority: number | string): string {\r\n    // Convert priority to number if it's a string\r\n    const priorityNum = typeof priority === 'string' ? parseInt(priority, 10) : priority;\r\n    \r\n    if (isNaN(priorityNum)) {\r\n      return 'bg-secondary'; // Default for invalid priority\r\n    }\r\n    \r\n    switch (priorityNum) {\r\n      case 1:\r\n        return 'bg-danger';\r\n      case 2:\r\n        return 'bg-warning text-dark';\r\n      case 3:\r\n        return 'bg-info text-dark';\r\n      case 4:\r\n        return 'bg-success';\r\n      default:\r\n        return 'bg-secondary';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CSS class for status badge\r\n   * @param status Status string or undefined\r\n   * @returns CSS class name\r\n   */\r\n  getStatusClass(status: string | undefined): string {\r\n    if (!status) {\r\n      return 'bg-secondary'; // Default for undefined status\r\n    }\r\n    \r\n    const statusLower = status.toLowerCase();\r\n    \r\n    if (statusLower.includes('progress') || statusLower === 'active') {\r\n      return 'bg-primary';\r\n    } else if (statusLower === 'completed' || statusLower === 'done' || statusLower === 'closed') {\r\n      return 'bg-success';\r\n    } else if (statusLower === 'blocked') {\r\n      return 'bg-danger';\r\n    } else if (statusLower === 'to do' || statusLower === 'new') {\r\n      return 'bg-secondary';\r\n    } else {\r\n      return 'bg-info';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CSS class for team member workload indicator\r\n   * @param workload Current workload value\r\n   * @returns CSS class name\r\n   */\r\n  getTeamMemberWorkloadClass(workload: number): string {\r\n    if (workload === 0) {\r\n      return 'bg-secondary';\r\n    } else if (workload < 3) {\r\n      return 'bg-success';\r\n    } else if (workload < 7) {\r\n      return 'bg-warning text-dark';\r\n    } else {\r\n      return 'bg-danger';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the progress bar class based on workload\r\n   * @param workload Current workload\r\n   * @returns Bootstrap progress bar class\r\n   */\r\n  getProgressBarClass(workload: number): string {\r\n    if (workload === 0) {\r\n      return 'bg-secondary';\r\n    } else if (workload < 3) {\r\n      return 'bg-success';\r\n    } else if (workload < 7) {\r\n      return 'bg-warning';\r\n    } else {\r\n      return 'bg-danger';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate workload as a percentage (for progress bar width)\r\n   * @param workload Current workload\r\n   * @returns Percentage value (0-100)\r\n   */\r\n  getWorkloadPercentage(workload: number): number {\r\n    // Using 10 as maximum reasonable workload\r\n    const maxWorkload = 10;\r\n    return Math.min(100, (workload / maxWorkload) * 100);\r\n  }\r\n\r\n  /**\r\n   * Change the iteration path and reload tasks\r\n   * @param iterationPath New iteration path to load tasks from\r\n   */\r\n  changeIterationPath(iterationPath: string): void {\r\n    console.log(`Changing iteration path to: ${iterationPath}`);\r\n    this.currentIterationPath = iterationPath;\r\n    \r\n    // Reset selected task if any\r\n    this.selectedTask = null;\r\n    \r\n    // Load tasks and team members for the new iteration path\r\n    this.loadTasks();\r\n    this.loadTeamMembers(); // Now this will pass the current iteration path\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}