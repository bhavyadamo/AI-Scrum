{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/estimation.service\";\nimport * as i3 from \"../../services/task.service\";\nimport * as i4 from \"@angular/common\";\nfunction TaskEstimationComponent_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 48);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const path_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", path_r17);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(path_r17);\n  }\n}\nfunction TaskEstimationComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.iterationError);\n  }\n}\nfunction TaskEstimationComponent_span_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 50);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.workItems.length, \" items\");\n  }\n}\nfunction TaskEstimationComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"div\", 52)(2, \"span\", 53);\n    i0.ɵɵtext(3, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 54);\n    i0.ɵɵtext(5, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"p\", 55);\n    i0.ɵɵtext(2, \"No work items found. Please select an iteration path and click \\\"Load Items\\\".\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function () {\n  return [\"Bug\", \"Feature\", \"Change Request\", \"Test\"];\n};\nconst _c1 = function (a0, a1, a2, a3, a4) {\n  return {\n    \"bg-danger\": a0,\n    \"bg-primary\": a1,\n    \"bg-warning\": a2,\n    \"bg-info\": a3,\n    \"bg-secondary\": a4\n  };\n};\nfunction TaskEstimationComponent_div_37_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 58);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_div_37_button_1_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r21);\n      const item_r19 = restoredCtx.$implicit;\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.selectWorkItem(item_r19));\n    });\n    i0.ɵɵelementStart(1, \"div\")(2, \"span\", 59);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 60);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"span\", 61);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r19 = ctx.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"active\", (ctx_r18.selectedWorkItem == null ? null : ctx_r18.selectedWorkItem.id) === item_r19.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction5(8, _c1, item_r19.type === \"Bug\", item_r19.type === \"Feature\", item_r19.type === \"Change Request\", item_r19.type === \"Test\", !item_r19.type || i0.ɵɵpureFunction0(7, _c0).indexOf(item_r19.type) === -1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r19.type || \"Task\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"#\", item_r19.id, \": \", item_r19.title, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r19.state);\n  }\n}\nfunction TaskEstimationComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtemplate(1, TaskEstimationComponent_div_37_button_1_Template, 8, 14, \"button\", 57);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.workItems);\n  }\n}\nfunction TaskEstimationComponent_button_50_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 62);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_button_50_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.resetForm());\n    });\n    i0.ɵɵelement(1, \"i\", 63);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_51_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_51_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title must be at least 5 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 64);\n    i0.ɵɵtemplate(1, TaskEstimationComponent_div_51_small_1_Template, 2, 0, \"small\", 42);\n    i0.ɵɵtemplate(2, TaskEstimationComponent_div_51_small_2_Template, 2, 0, \"small\", 42);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r7.estimationForm.get(\"title\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r7.estimationForm.get(\"title\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nfunction TaskEstimationComponent_div_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 65)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Found matching work item #\", ctx_r8.selectedWorkItem.id, \"\");\n  }\n}\nfunction TaskEstimationComponent_option_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 48);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r26 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r26);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r26);\n  }\n}\nfunction TaskEstimationComponent_option_64_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 48);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r27 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", member_r27);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r27);\n  }\n}\nfunction TaskEstimationComponent_div_69_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66);\n    i0.ɵɵelement(1, \"input\", 67);\n    i0.ɵɵelementStart(2, \"label\", 68);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const level_r28 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"complexity-\" + level_r28.toLowerCase())(\"value\", level_r28);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", \"complexity-\" + level_r28.toLowerCase());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", level_r28, \" \");\n  }\n}\nfunction TaskEstimationComponent_span_75_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"i\", 69);\n    i0.ɵɵtext(2, \" Estimate Time \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_span_76_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 70);\n    i0.ɵɵtext(2, \" Estimating... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_79_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 71);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r14.error, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_80_li_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 85);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const factor_r30 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", factor_r30, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_80_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 72)(2, \"h4\", 7);\n    i0.ɵɵtext(3, \"Estimation Results\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 8)(5, \"div\", 19)(6, \"div\", 10)(7, \"div\", 73)(8, \"h2\", 74);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 55);\n    i0.ɵɵtext(11, \"Total estimated time\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 75)(13, \"div\", 76)(14, \"div\", 77)(15, \"h3\", 3);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"p\", 78);\n    i0.ɵɵtext(18, \"Development Time\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"div\", 76)(20, \"div\", 77)(21, \"h3\", 3);\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"p\", 78);\n    i0.ɵɵtext(24, \"Testing Time\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(25, \"div\", 79)(26, \"h5\");\n    i0.ɵɵtext(27, \"Prediction Confidence\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"div\", 80)(29, \"div\", 81);\n    i0.ɵɵtext(30);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(31, \"div\", 10)(32, \"h5\");\n    i0.ɵɵtext(33, \"Factors Considered\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"ul\", 56);\n    i0.ɵɵtemplate(35, TaskEstimationComponent_div_80_li_35_Template, 2, 1, \"li\", 82);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(36, \"div\", 83);\n    i0.ɵɵelement(37, \"i\", 84);\n    i0.ɵɵtext(38, \" These estimates are based on machine learning models analyzing historical task data. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r15.estimationResult.estimatedHours, \" hours\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r15.devTimeEstimate);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r15.testTimeEstimate);\n    i0.ɵɵadvance(7);\n    i0.ɵɵstyleProp(\"width\", ctx_r15.estimationResult.confidenceScore * 100, \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r15.getConfidenceClass(ctx_r15.estimationResult.confidenceScore));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r15.estimationResult.confidenceScore * 100);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r15.formatConfidence(ctx_r15.estimationResult.confidenceScore), \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r15.estimationResult.factors);\n  }\n}\nfunction TaskEstimationComponent_div_81_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 86)(1, \"div\", 87);\n    i0.ɵɵelement(2, \"i\", 88);\n    i0.ɵɵelementStart(3, \"h4\", 89);\n    i0.ɵɵtext(4, \"Task Time Prediction\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 55);\n    i0.ɵɵtext(6, \"Fill in the task details and click \\\"Estimate Time\\\" to get an ML-based time estimate\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"is-valid\": a0\n  };\n};\nexport class TaskEstimationComponent {\n  constructor(fb, estimationService, taskService) {\n    this.fb = fb;\n    this.estimationService = estimationService;\n    this.taskService = taskService;\n    this.teamMembers = [];\n    // Include all available work item types from the enum\n    this.taskTypes = ['User Story', 'Task', 'Bug', 'Epic', 'Feature', 'Issue', 'Change Request', 'Documentation', 'Test', 'Research'];\n    this.complexityLevels = ['Low', 'Medium', 'High'];\n    this.loading = false;\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n    // New properties for iteration path functionality\n    this.availableIterationPaths = [];\n    this.selectedIterationPath = '';\n    this.manualIterationPath = ''; // For manually entered iteration path\n    this.workItems = [];\n    this.loadingIterationItems = false;\n    this.iterationError = null;\n    this.selectedWorkItem = null;\n    this.devTimeEstimate = 0;\n    this.testTimeEstimate = 0;\n    this.totalEstimate = 0;\n    this.estimationForm = this.fb.group({\n      title: ['', [Validators.required, Validators.minLength(5)]],\n      type: ['Feature', Validators.required],\n      assignee: [''],\n      complexity: ['Medium', Validators.required]\n    });\n  }\n  ngOnInit() {\n    // Load team members\n    this.loadTeamMembers();\n    // Load available iteration paths\n    this.loadIterationPaths();\n    // Listen for title changes to auto-fill fields\n    this.estimationForm.get('title')?.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe(title => {\n      if (title && title.length > 5) {\n        this.autoPopulateFormFields(title);\n      }\n    });\n  }\n  // Load team members with better error handling\n  loadTeamMembers() {\n    this.taskService.getTeamMembers().subscribe({\n      next: response => {\n        if (Array.isArray(response)) {\n          if (response.length === 0) {\n            console.warn('No team members returned from API');\n            return;\n          }\n          if (typeof response[0] === 'string') {\n            // It's an array of strings\n            this.teamMembers = response;\n          } else {\n            // It's an array of TeamMember objects\n            this.teamMembers = response.filter(m => m && m.displayName) // Filter out invalid entries\n            .map(m => m.displayName);\n          }\n          console.log(`Loaded ${this.teamMembers.length} team members`);\n        }\n      },\n      error: err => {\n        console.error('Error loading team members:', err);\n        this.error = 'Failed to load team members';\n      }\n    });\n  }\n  // Auto-populate form fields based on entered title\n  autoPopulateFormFields(title) {\n    if (!this.workItems || this.workItems.length === 0) {\n      return; // No items to search through\n    }\n    // Find matching work item by title (full or partial match)\n    const matchingItem = this.workItems.find(item => item.title.toLowerCase().includes(title.toLowerCase()) || title.toLowerCase().includes(item.title.toLowerCase()));\n    if (matchingItem) {\n      this.selectedWorkItem = matchingItem;\n      this.populateFormWithWorkItem(matchingItem);\n    }\n  }\n  // Load available iteration paths\n  loadIterationPaths() {\n    this.taskService.getIterationPaths().subscribe({\n      next: paths => {\n        if (paths && paths.length > 0) {\n          this.availableIterationPaths = paths;\n          console.log(`Loaded ${paths.length} iteration paths`);\n        } else {\n          console.warn('No iteration paths returned from the API');\n        }\n      },\n      error: err => {\n        console.error('Error loading iteration paths:', err);\n        this.iterationError = 'Failed to load iteration paths';\n      }\n    });\n  }\n  // Handle manual iteration path entry and load work items\n  loadWorkItemsByIteration() {\n    // Check if we have a manual iteration path entered\n    if (this.manualIterationPath && this.manualIterationPath.trim() !== '') {\n      this.selectedIterationPath = this.manualIterationPath.trim();\n    }\n    if (!this.selectedIterationPath) {\n      this.iterationError = 'Please enter or select an iteration path';\n      return;\n    }\n    this.loadingIterationItems = true;\n    this.workItems = [];\n    this.selectedWorkItem = null;\n    this.iterationError = null;\n    // If this is a new iteration path, add it to the available paths\n    if (this.selectedIterationPath && !this.availableIterationPaths.includes(this.selectedIterationPath)) {\n      this.availableIterationPaths.push(this.selectedIterationPath);\n    }\n    this.taskService.getTasks(this.selectedIterationPath).subscribe({\n      next: items => {\n        this.workItems = items;\n        this.loadingIterationItems = false;\n        console.log(`Loaded ${items.length} work items for iteration ${this.selectedIterationPath}`);\n      },\n      error: err => {\n        console.error('Error loading work items:', err);\n        this.iterationError = 'Failed to load work items for the selected iteration';\n        this.loadingIterationItems = false;\n      }\n    });\n  }\n  // Select a work item for estimation\n  selectWorkItem(item) {\n    this.selectedWorkItem = item;\n    this.populateFormWithWorkItem(item);\n  }\n  // Populate the form with selected work item details\n  populateFormWithWorkItem(item) {\n    const complexity = this.determineComplexity(item);\n    // Ensure we have the assignee's name properly formatted\n    let assignee = '';\n    if (item.assignedTo) {\n      // The assignedTo might be a string or an object with displayName\n      if (typeof item.assignedTo === 'string') {\n        assignee = item.assignedTo;\n      } else if (typeof item.assignedTo === 'object' && item.assignedTo.displayName) {\n        assignee = item.assignedTo.displayName;\n      }\n    }\n    this.estimationForm.patchValue({\n      title: item.title,\n      type: item.type || 'Feature',\n      assignee: assignee,\n      complexity: complexity\n    });\n    // Pre-calculate estimates based on historical data if we have this information\n    if (this.estimationResult) {\n      this.calculateTimeEstimates(this.estimationResult.estimatedHours);\n    }\n  }\n  // Determine complexity based on work item properties\n  determineComplexity(item) {\n    // Logic to determine complexity based on priority or other factors\n    if (item.priority <= 1) {\n      return 'High';\n    } else if (item.priority === 2) {\n      return 'Medium';\n    } else {\n      return 'Low';\n    }\n  }\n  resetForm() {\n    this.estimationForm.reset({\n      type: 'Feature',\n      complexity: 'Medium'\n    });\n    this.error = null;\n    this.showResult = false;\n    this.estimationResult = null;\n  }\n  estimateTaskTime() {\n    if (this.estimationForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.estimationForm.controls).forEach(key => {\n        this.estimationForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n    this.loading = true;\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n    const request = {\n      title: this.estimationForm.value.title,\n      type: this.estimationForm.value.type,\n      assignee: this.estimationForm.value.assignee,\n      complexity: this.estimationForm.value.complexity\n    };\n    // Add work item ID if we have a selected work item\n    if (this.selectedWorkItem) {\n      // Convert to number if it's a string, or use as is if it's already a number\n      const workItemId = typeof this.selectedWorkItem.id === 'string' ? parseInt(this.selectedWorkItem.id, 10) : this.selectedWorkItem.id;\n      if (!isNaN(workItemId)) {\n        request.workItemId = workItemId;\n      }\n    }\n    // Use work history estimation if iteration path is selected\n    if (this.selectedIterationPath) {\n      this.estimationService.estimateTaskTimeWithWorkHistory(request, this.selectedIterationPath).subscribe({\n        next: result => {\n          this.estimationResult = result;\n          this.showResult = true;\n          this.loading = false;\n          // If result includes dev and test time estimates, use them directly\n          if (result.devTimeHours && result.testTimeHours) {\n            this.devTimeEstimate = result.devTimeHours;\n            this.testTimeEstimate = result.testTimeHours;\n            this.totalEstimate = result.estimatedHours;\n          } else {\n            // Otherwise calculate them based on our algorithm\n            this.calculateTimeEstimates(result.estimatedHours);\n          }\n        },\n        error: err => {\n          this.error = err.message || 'An error occurred during estimation';\n          this.loading = false;\n        }\n      });\n    } else {\n      // Standard estimation without work history\n      this.estimationService.estimateTaskTime(request).subscribe({\n        next: result => {\n          this.estimationResult = result;\n          this.showResult = true;\n          this.loading = false;\n          // Calculate dev and test time estimates\n          this.calculateTimeEstimates(result.estimatedHours);\n        },\n        error: err => {\n          this.error = err.message || 'An error occurred during estimation';\n          this.loading = false;\n        }\n      });\n    }\n  }\n  // Calculate development and testing time estimates\n  calculateTimeEstimates(totalHours) {\n    // Typical distribution: dev 60-70%, testing 30-40%\n    const complexity = this.estimationForm.value.complexity;\n    let devRatio = 0.65; // Default dev ratio\n    // Adjust ratio based on complexity\n    if (complexity === 'High') {\n      devRatio = 0.7; // Higher complexity = more dev time\n    } else if (complexity === 'Low') {\n      devRatio = 0.6; // Lower complexity = less dev time\n    }\n\n    this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\n    this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\n    this.totalEstimate = totalHours;\n  }\n  // Format confidence score as percentage\n  formatConfidence(score) {\n    return `${Math.round(score * 100)}%`;\n  }\n  // Get appropriate class for confidence level\n  getConfidenceClass(score) {\n    if (score >= 0.8) {\n      return 'bg-success';\n    } else if (score >= 0.6) {\n      return 'bg-primary';\n    } else if (score >= 0.4) {\n      return 'bg-warning';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  static {\n    this.ɵfac = function TaskEstimationComponent_Factory(t) {\n      return new (t || TaskEstimationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EstimationService), i0.ɵɵdirectiveInject(i3.TaskService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskEstimationComponent,\n      selectors: [[\"app-task-estimation\"]],\n      decls: 82,\n      vars: 24,\n      consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"mb-0\"], [1, \"text-muted\", \"mt-2\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"mb-0\"], [1, \"card-body\"], [1, \"row\", \"g-3\", \"align-items-center\"], [1, \"col-md-6\"], [1, \"input-group\"], [\"for\", \"iterationPath\", 1, \"input-group-text\"], [\"id\", \"iterationPath\", \"aria-label\", \"Iteration Path\", 1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-search\"], [\"class\", \"text-danger mt-2\", 4, \"ngIf\"], [1, \"row\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [\"class\", \"badge bg-primary\", 4, \"ngIf\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"list-group\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"taskTitle\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"taskTitle\", \"formControlName\", \"title\", \"placeholder\", \"Enter or select task title\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"btn btn-outline-secondary\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"text-danger mt-1\", 4, \"ngIf\"], [\"class\", \"text-success mt-1\", 4, \"ngIf\"], [\"for\", \"taskType\", 1, \"form-label\"], [\"id\", \"taskType\", \"formControlName\", \"type\", 1, \"form-select\"], [\"for\", \"assignee\", 1, \"form-label\"], [\"id\", \"assignee\", \"formControlName\", \"assignee\", 1, \"form-select\"], [1, \"form-label\"], [1, \"d-flex\"], [\"class\", \"form-check me-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"d-flex\", \"justify-content-between\", \"mt-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-arrow-counterclockwise\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [4, \"ngIf\"], [1, \"row\", \"mt-4\"], [1, \"col-md-12\"], [\"class\", \"alert alert-danger mb-4\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"class\", \"card bg-light\", 4, \"ngIf\"], [3, \"value\"], [1, \"text-danger\", \"mt-2\"], [1, \"badge\", \"bg-primary\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"mt-2\", \"text-muted\"], [1, \"text-muted\"], [1, \"list-group\"], [\"class\", \"list-group-item list-group-item-action d-flex justify-content-between align-items-center\", 3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\", \"list-group-item-action\", \"d-flex\", \"justify-content-between\", \"align-items-center\", 3, \"click\"], [1, \"badge\", \"rounded-pill\", 3, \"ngClass\"], [1, \"ms-2\"], [1, \"badge\", \"rounded-pill\", \"bg-secondary\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"bi\", \"bi-x-lg\"], [1, \"text-danger\", \"mt-1\"], [1, \"text-success\", \"mt-1\"], [1, \"form-check\", \"me-3\"], [\"type\", \"radio\", \"formControlName\", \"complexity\", 1, \"form-check-input\", 3, \"id\", \"value\"], [1, \"form-check-label\", 3, \"for\"], [1, \"bi\", \"bi-stopwatch\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\", \"mb-4\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"mb-4\", \"text-center\"], [1, \"display-4\", \"mb-0\"], [1, \"row\", \"text-center\", \"mb-4\"], [1, \"col-6\"], [1, \"p-3\", \"bg-light\", \"rounded\"], [1, \"text-muted\", \"mb-0\"], [1, \"mb-4\"], [1, \"progress\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", 3, \"ngClass\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-footer\", \"text-muted\", \"small\"], [1, \"bi\", \"bi-info-circle\"], [1, \"list-group-item\"], [1, \"card\", \"bg-light\"], [1, \"card-body\", \"text-center\", \"p-5\"], [1, \"bi\", \"bi-graph-up\", \"display-1\", \"text-muted\"], [1, \"mt-3\"]],\n      template: function TaskEstimationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\", 3);\n          i0.ɵɵtext(4, \"ML-Based Task Estimation\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p\", 4);\n          i0.ɵɵtext(6, \"Estimate task duration using machine learning predictions based on historical data\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 2)(9, \"div\", 5)(10, \"div\", 6)(11, \"h4\", 7);\n          i0.ɵɵtext(12, \"Select Iteration\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 8)(14, \"div\", 9)(15, \"div\", 10)(16, \"div\", 11)(17, \"label\", 12);\n          i0.ɵɵtext(18, \"Iteration Path\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"select\", 13);\n          i0.ɵɵlistener(\"ngModelChange\", function TaskEstimationComponent_Template_select_ngModelChange_19_listener($event) {\n            return ctx.selectedIterationPath = $event;\n          });\n          i0.ɵɵelementStart(20, \"option\", 14);\n          i0.ɵɵtext(21, \"-- Select Iteration Path --\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(22, TaskEstimationComponent_option_22_Template, 2, 2, \"option\", 15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 16);\n          i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_23_listener() {\n            return ctx.loadWorkItemsByIteration();\n          });\n          i0.ɵɵelement(24, \"i\", 17);\n          i0.ɵɵtext(25, \" Load Items \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(26, TaskEstimationComponent_div_26_Template, 3, 1, \"div\", 18);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(27, \"div\", 19)(28, \"div\", 10)(29, \"div\", 5)(30, \"div\", 20)(31, \"h4\", 7);\n          i0.ɵɵtext(32, \"Work Items\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(33, TaskEstimationComponent_span_33_Template, 2, 1, \"span\", 21);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(34, \"div\", 8);\n          i0.ɵɵtemplate(35, TaskEstimationComponent_div_35_Template, 6, 0, \"div\", 22);\n          i0.ɵɵtemplate(36, TaskEstimationComponent_div_36_Template, 3, 0, \"div\", 22);\n          i0.ɵɵtemplate(37, TaskEstimationComponent_div_37_Template, 2, 1, \"div\", 23);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(38, \"div\", 10)(39, \"div\", 5)(40, \"div\", 6)(41, \"h4\", 7);\n          i0.ɵɵtext(42, \"Task Details\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(43, \"div\", 8)(44, \"form\", 24);\n          i0.ɵɵlistener(\"ngSubmit\", function TaskEstimationComponent_Template_form_ngSubmit_44_listener() {\n            return ctx.estimateTaskTime();\n          });\n          i0.ɵɵelementStart(45, \"div\", 25)(46, \"label\", 26);\n          i0.ɵɵtext(47, \"Task Title\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(48, \"div\", 11);\n          i0.ɵɵelement(49, \"input\", 27);\n          i0.ɵɵtemplate(50, TaskEstimationComponent_button_50_Template, 2, 0, \"button\", 28);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(51, TaskEstimationComponent_div_51_Template, 3, 2, \"div\", 29);\n          i0.ɵɵtemplate(52, TaskEstimationComponent_div_52_Template, 3, 1, \"div\", 30);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(53, \"div\", 25)(54, \"label\", 31);\n          i0.ɵɵtext(55, \"Task Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(56, \"select\", 32);\n          i0.ɵɵtemplate(57, TaskEstimationComponent_option_57_Template, 2, 2, \"option\", 15);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(58, \"div\", 25)(59, \"label\", 33);\n          i0.ɵɵtext(60, \"Assignee\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(61, \"select\", 34)(62, \"option\", 14);\n          i0.ɵɵtext(63, \"-- Unassigned --\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(64, TaskEstimationComponent_option_64_Template, 2, 2, \"option\", 15);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(65, \"div\", 25)(66, \"label\", 35);\n          i0.ɵɵtext(67, \"Complexity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(68, \"div\", 36);\n          i0.ɵɵtemplate(69, TaskEstimationComponent_div_69_Template, 4, 4, \"div\", 37);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(70, \"div\", 38)(71, \"button\", 39);\n          i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_71_listener() {\n            return ctx.resetForm();\n          });\n          i0.ɵɵelement(72, \"i\", 40);\n          i0.ɵɵtext(73, \" Reset \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(74, \"button\", 41);\n          i0.ɵɵtemplate(75, TaskEstimationComponent_span_75_Template, 3, 0, \"span\", 42);\n          i0.ɵɵtemplate(76, TaskEstimationComponent_span_76_Template, 3, 0, \"span\", 42);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(77, \"div\", 43)(78, \"div\", 44);\n          i0.ɵɵtemplate(79, TaskEstimationComponent_div_79_Template, 2, 1, \"div\", 45);\n          i0.ɵɵtemplate(80, TaskEstimationComponent_div_80_Template, 39, 9, \"div\", 46);\n          i0.ɵɵtemplate(81, TaskEstimationComponent_div_81_Template, 7, 0, \"div\", 47);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          let tmp_10_0;\n          let tmp_11_0;\n          i0.ɵɵadvance(19);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedIterationPath);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.availableIterationPaths);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", !ctx.selectedIterationPath);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.iterationError);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.workItems.length > 0);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.loadingIterationItems);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length === 0 && !ctx.iterationError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length > 0);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"formGroup\", ctx.estimationForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(22, _c2, ctx.selectedWorkItem !== null));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (tmp_10_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_10_0.value);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_11_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_11_0.invalid) && ((tmp_11_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_11_0.touched));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.taskTypes);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.teamMembers);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.complexityLevels);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"disabled\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showResult && ctx.estimationResult);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.showResult && !ctx.error);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.NgModel, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"h2[_ngcontent-%COMP%] {\\n  margin-bottom: 1.5rem;\\n  color: #2c3e50;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  padding-top: 1.5rem;\\n}\\n\\n.display-4[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  transition: all 0.3s ease;\\n}\\n.card[_ngcontent-%COMP%]:hover {\\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\\n}\\n\\n.progress[_ngcontent-%COMP%] {\\n  height: 25px;\\n  font-weight: 600;\\n}\\n\\n.list-group-item[_ngcontent-%COMP%]:first-child {\\n  font-weight: 500;\\n}\\n\\n.bg-light[_ngcontent-%COMP%] {\\n  opacity: 0.8;\\n}\\n.bg-light[_ngcontent-%COMP%]   i.bi-graph-up[_ngcontent-%COMP%] {\\n  opacity: 0.5;\\n}\\n\\n.form-check[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n.form-check[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%], .form-check[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n\\n@keyframes _ngcontent-%COMP%_fadeIn {\\n  from {\\n    opacity: 0;\\n    transform: translateY(10px);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n}\\n.alert[_ngcontent-%COMP%], .card[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_fadeIn 0.3s ease-out;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWVzdGltYXRpb24vdGFzay1lc3RpbWF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UscUJBQUE7RUFDQSxjQUFBO0FBQ0Y7O0FBRUE7RUFDRSxtQkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLHdDQUFBO0VBQ0EseUJBQUE7QUFDRjtBQUNFO0VBQ0UsMENBQUE7QUFDSjs7QUFHQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUFGOztBQUlFO0VBQ0UsZ0JBQUE7QUFESjs7QUFLQTtFQUNFLFlBQUE7QUFGRjtBQUlFO0VBQ0UsWUFBQTtBQUZKOztBQU1BO0VBQ0UsZUFBQTtBQUhGO0FBS0U7RUFDRSxlQUFBO0FBSEo7O0FBUUE7RUFDRTtJQUFPLFVBQUE7SUFBWSwyQkFBQTtFQUhuQjtFQUlBO0lBQUssVUFBQTtJQUFZLHdCQUFBO0VBQWpCO0FBQ0Y7QUFFQTtFQUNFLCtCQUFBO0FBQUYiLCJzb3VyY2VzQ29udGVudCI6WyJoMiB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMS41cmVtO1xyXG4gIGNvbG9yOiAjMmMzZTUwO1xyXG59XHJcblxyXG4uY29udGFpbmVyIHtcclxuICBwYWRkaW5nLXRvcDogMS41cmVtO1xyXG59XHJcblxyXG4uZGlzcGxheS00IHtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcblxyXG4uY2FyZCB7XHJcbiAgYm94LXNoYWRvdzogMCA0cHggNnB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlO1xyXG4gIFxyXG4gICY6aG92ZXIge1xyXG4gICAgYm94LXNoYWRvdzogMCA2cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xyXG4gIH1cclxufVxyXG5cclxuLnByb2dyZXNzIHtcclxuICBoZWlnaHQ6IDI1cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG5cclxuLmxpc3QtZ3JvdXAtaXRlbSB7XHJcbiAgJjpmaXJzdC1jaGlsZCB7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gIH1cclxufVxyXG5cclxuLmJnLWxpZ2h0IHtcclxuICBvcGFjaXR5OiAwLjg7XHJcbiAgXHJcbiAgaS5iaS1ncmFwaC11cCB7XHJcbiAgICBvcGFjaXR5OiAwLjU7XHJcbiAgfVxyXG59XHJcblxyXG4uZm9ybS1jaGVjayB7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIFxyXG4gIC5mb3JtLWNoZWNrLWlucHV0LCAuZm9ybS1jaGVjay1sYWJlbCB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBBZGQgc29tZSBhbmltYXRpb24gZWZmZWN0c1xyXG5Aa2V5ZnJhbWVzIGZhZGVJbiB7XHJcbiAgZnJvbSB7IG9wYWNpdHk6IDA7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMHB4KTsgfVxyXG4gIHRvIHsgb3BhY2l0eTogMTsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyB9XHJcbn1cclxuXHJcbi5hbGVydCwgLmNhcmQge1xyXG4gIGFuaW1hdGlvbjogZmFkZUluIDAuM3MgZWFzZS1vdXQ7XHJcbn0gIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","debounceTime","distinctUntilChanged","i0","TaskEstimationComponent","constructor","fb","estimationService","taskService","estimationForm","group","title","required","minLength","type","assignee","complexity","ngOnInit","loadTeamMembers","loadIterationPaths","get","valueChanges","pipe","subscribe","length","autoPopulateFormFields","getTeamMembers","next","response","Array","isArray","console","warn","teamMembers","filter","m","displayName","map","log","error","err","workItems","matchingItem","find","item","toLowerCase","includes","selectedWorkItem","populateFormWithWorkItem","getIterationPaths","paths","availableIterationPaths","iterationError","loadWorkItemsByIteration","manualIterationPath","trim","selectedIterationPath","loadingIterationItems","push","getTasks","items","selectWorkItem","determineComplexity","assignedTo","patchValue","estimationResult","calculateTimeEstimates","estimatedHours","priority","resetForm","reset","showResult","estimateTaskTime","invalid","Object","keys","controls","forEach","key","markAsTouched","loading","request","value","workItemId","id","parseInt","isNaN","estimateTaskTimeWithWorkHistory","result","devTimeHours","testTimeHours","devTimeEstimate","testTimeEstimate","totalEstimate","message","totalHours","devRatio","Math","round","formatConfidence","score","getConfidenceClass","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { EstimationService, TaskEstimationRequest, TaskEstimationResponse } from '../../services/estimation.service';\r\nimport { TaskService } from '../../services/task.service';\r\nimport { WorkItem, TeamMember, WorkItemType } from '../../models/task.model';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-task-estimation',\r\n  templateUrl: './task-estimation.component.html',\r\n  styleUrls: ['./task-estimation.component.scss']\r\n})\r\nexport class TaskEstimationComponent implements OnInit {\r\n  estimationForm: FormGroup;\r\n  teamMembers: string[] = [];\r\n  \r\n  // Include all available work item types from the enum\r\n  taskTypes: string[] = [\r\n    'User Story',\r\n    'Task',\r\n    'Bug',\r\n    'Epic',\r\n    'Feature',\r\n    'Issue',\r\n    'Change Request',\r\n    'Documentation',\r\n    'Test',\r\n    'Research'\r\n  ];\r\n  \r\n  complexityLevels: string[] = [\r\n    'Low',\r\n    'Medium',\r\n    'High'\r\n  ];\r\n  \r\n  loading = false;\r\n  error: string | null = null;\r\n  estimationResult: TaskEstimationResponse | null = null;\r\n  showResult = false;\r\n\r\n  // New properties for iteration path functionality\r\n  availableIterationPaths: string[] = [];\r\n  selectedIterationPath: string = '';\r\n  manualIterationPath: string = ''; // For manually entered iteration path\r\n  workItems: WorkItem[] = [];\r\n  loadingIterationItems: boolean = false;\r\n  iterationError: string | null = null;\r\n  selectedWorkItem: WorkItem | null = null;\r\n  devTimeEstimate: number = 0;\r\n  testTimeEstimate: number = 0;\r\n  totalEstimate: number = 0;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private estimationService: EstimationService,\r\n    private taskService: TaskService\r\n  ) {\r\n    this.estimationForm = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(5)]],\r\n      type: ['Feature', Validators.required],\r\n      assignee: [''],\r\n      complexity: ['Medium', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Load team members\r\n    this.loadTeamMembers();\r\n\r\n    // Load available iteration paths\r\n    this.loadIterationPaths();\r\n\r\n    // Listen for title changes to auto-fill fields\r\n    this.estimationForm.get('title')?.valueChanges\r\n      .pipe(\r\n        debounceTime(300),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe(title => {\r\n        if (title && title.length > 5) {\r\n          this.autoPopulateFormFields(title);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Load team members with better error handling\r\n  loadTeamMembers(): void {\r\n    this.taskService.getTeamMembers().subscribe({\r\n      next: (response) => {\r\n        if (Array.isArray(response)) {\r\n          if (response.length === 0) {\r\n            console.warn('No team members returned from API');\r\n            return;\r\n          }\r\n          \r\n          if (typeof response[0] === 'string') {\r\n            // It's an array of strings\r\n            this.teamMembers = response as string[];\r\n          } else {\r\n            // It's an array of TeamMember objects\r\n            this.teamMembers = (response as TeamMember[])\r\n              .filter(m => m && m.displayName) // Filter out invalid entries\r\n              .map(m => m.displayName);\r\n          }\r\n          \r\n          console.log(`Loaded ${this.teamMembers.length} team members`);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading team members:', err);\r\n        this.error = 'Failed to load team members';\r\n      }\r\n    });\r\n  }\r\n\r\n  // Auto-populate form fields based on entered title\r\n  autoPopulateFormFields(title: string): void {\r\n    if (!this.workItems || this.workItems.length === 0) {\r\n      return; // No items to search through\r\n    }\r\n\r\n    // Find matching work item by title (full or partial match)\r\n    const matchingItem = this.workItems.find(item => \r\n      item.title.toLowerCase().includes(title.toLowerCase()) || \r\n      title.toLowerCase().includes(item.title.toLowerCase())\r\n    );\r\n\r\n    if (matchingItem) {\r\n      this.selectedWorkItem = matchingItem;\r\n      this.populateFormWithWorkItem(matchingItem);\r\n    }\r\n  }\r\n\r\n  // Load available iteration paths\r\n  loadIterationPaths(): void {\r\n    this.taskService.getIterationPaths().subscribe({\r\n      next: (paths) => {\r\n        if (paths && paths.length > 0) {\r\n          this.availableIterationPaths = paths;\r\n          console.log(`Loaded ${paths.length} iteration paths`);\r\n        } else {\r\n          console.warn('No iteration paths returned from the API');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading iteration paths:', err);\r\n        this.iterationError = 'Failed to load iteration paths';\r\n      }\r\n    });\r\n  }\r\n\r\n  // Handle manual iteration path entry and load work items\r\n  loadWorkItemsByIteration(): void {\r\n    // Check if we have a manual iteration path entered\r\n    if (this.manualIterationPath && this.manualIterationPath.trim() !== '') {\r\n      this.selectedIterationPath = this.manualIterationPath.trim();\r\n    }\r\n    \r\n    if (!this.selectedIterationPath) {\r\n      this.iterationError = 'Please enter or select an iteration path';\r\n      return;\r\n    }\r\n\r\n    this.loadingIterationItems = true;\r\n    this.workItems = [];\r\n    this.selectedWorkItem = null;\r\n    this.iterationError = null;\r\n\r\n    // If this is a new iteration path, add it to the available paths\r\n    if (this.selectedIterationPath && !this.availableIterationPaths.includes(this.selectedIterationPath)) {\r\n      this.availableIterationPaths.push(this.selectedIterationPath);\r\n    }\r\n\r\n    this.taskService.getTasks(this.selectedIterationPath).subscribe({\r\n      next: (items) => {\r\n        this.workItems = items;\r\n        this.loadingIterationItems = false;\r\n        console.log(`Loaded ${items.length} work items for iteration ${this.selectedIterationPath}`);\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading work items:', err);\r\n        this.iterationError = 'Failed to load work items for the selected iteration';\r\n        this.loadingIterationItems = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Select a work item for estimation\r\n  selectWorkItem(item: WorkItem): void {\r\n    this.selectedWorkItem = item;\r\n    this.populateFormWithWorkItem(item);\r\n  }\r\n\r\n  // Populate the form with selected work item details\r\n  populateFormWithWorkItem(item: WorkItem): void {\r\n    const complexity = this.determineComplexity(item);\r\n    \r\n    // Ensure we have the assignee's name properly formatted\r\n    let assignee = '';\r\n    if (item.assignedTo) {\r\n      // The assignedTo might be a string or an object with displayName\r\n      if (typeof item.assignedTo === 'string') {\r\n        assignee = item.assignedTo;\r\n      } else if (typeof item.assignedTo === 'object' && item.assignedTo.displayName) {\r\n        assignee = item.assignedTo.displayName;\r\n      }\r\n    }\r\n    \r\n    this.estimationForm.patchValue({\r\n      title: item.title,\r\n      type: item.type || 'Feature',\r\n      assignee: assignee,\r\n      complexity: complexity\r\n    });\r\n\r\n    // Pre-calculate estimates based on historical data if we have this information\r\n    if (this.estimationResult) {\r\n      this.calculateTimeEstimates(this.estimationResult.estimatedHours);\r\n    }\r\n  }\r\n\r\n  // Determine complexity based on work item properties\r\n  determineComplexity(item: WorkItem): string {\r\n    // Logic to determine complexity based on priority or other factors\r\n    if (item.priority <= 1) {\r\n      return 'High';\r\n    } else if (item.priority === 2) {\r\n      return 'Medium';\r\n    } else {\r\n      return 'Low';\r\n    }\r\n  }\r\n\r\n  resetForm(): void {\r\n    this.estimationForm.reset({\r\n      type: 'Feature',\r\n      complexity: 'Medium'\r\n    });\r\n    this.error = null;\r\n    this.showResult = false;\r\n    this.estimationResult = null;\r\n  }\r\n\r\n  estimateTaskTime(): void {\r\n    if (this.estimationForm.invalid) {\r\n      // Mark all fields as touched to trigger validation messages\r\n      Object.keys(this.estimationForm.controls).forEach(key => {\r\n        this.estimationForm.get(key)?.markAsTouched();\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.error = null;\r\n    this.estimationResult = null;\r\n    this.showResult = false;\r\n\r\n    const request: TaskEstimationRequest = {\r\n      title: this.estimationForm.value.title,\r\n      type: this.estimationForm.value.type,\r\n      assignee: this.estimationForm.value.assignee,\r\n      complexity: this.estimationForm.value.complexity\r\n    };\r\n\r\n    // Add work item ID if we have a selected work item\r\n    if (this.selectedWorkItem) {\r\n      // Convert to number if it's a string, or use as is if it's already a number\r\n      const workItemId = typeof this.selectedWorkItem.id === 'string' \r\n        ? parseInt(this.selectedWorkItem.id, 10) \r\n        : this.selectedWorkItem.id;\r\n        \r\n      if (!isNaN(workItemId)) {\r\n        request.workItemId = workItemId;\r\n      }\r\n    }\r\n\r\n    // Use work history estimation if iteration path is selected\r\n    if (this.selectedIterationPath) {\r\n      this.estimationService.estimateTaskTimeWithWorkHistory(request, this.selectedIterationPath).subscribe({\r\n        next: (result) => {\r\n          this.estimationResult = result;\r\n          this.showResult = true;\r\n          this.loading = false;\r\n          \r\n          // If result includes dev and test time estimates, use them directly\r\n          if (result.devTimeHours && result.testTimeHours) {\r\n            this.devTimeEstimate = result.devTimeHours;\r\n            this.testTimeEstimate = result.testTimeHours;\r\n            this.totalEstimate = result.estimatedHours;\r\n          } else {\r\n            // Otherwise calculate them based on our algorithm\r\n            this.calculateTimeEstimates(result.estimatedHours);\r\n          }\r\n        },\r\n        error: (err) => {\r\n          this.error = err.message || 'An error occurred during estimation';\r\n          this.loading = false;\r\n        }\r\n      });\r\n    } else {\r\n      // Standard estimation without work history\r\n      this.estimationService.estimateTaskTime(request).subscribe({\r\n        next: (result) => {\r\n          this.estimationResult = result;\r\n          this.showResult = true;\r\n          this.loading = false;\r\n          \r\n          // Calculate dev and test time estimates\r\n          this.calculateTimeEstimates(result.estimatedHours);\r\n        },\r\n        error: (err) => {\r\n          this.error = err.message || 'An error occurred during estimation';\r\n          this.loading = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Calculate development and testing time estimates\r\n  calculateTimeEstimates(totalHours: number): void {\r\n    // Typical distribution: dev 60-70%, testing 30-40%\r\n    const complexity = this.estimationForm.value.complexity;\r\n    let devRatio = 0.65; // Default dev ratio\r\n    \r\n    // Adjust ratio based on complexity\r\n    if (complexity === 'High') {\r\n      devRatio = 0.7; // Higher complexity = more dev time\r\n    } else if (complexity === 'Low') {\r\n      devRatio = 0.6; // Lower complexity = less dev time\r\n    }\r\n    \r\n    this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\r\n    this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\r\n    this.totalEstimate = totalHours;\r\n  }\r\n\r\n  // Format confidence score as percentage\r\n  formatConfidence(score: number): string {\r\n    return `${Math.round(score * 100)}%`;\r\n  }\r\n\r\n  // Get appropriate class for confidence level\r\n  getConfidenceClass(score: number): string {\r\n    if (score >= 0.8) {\r\n      return 'bg-success';\r\n    } else if (score >= 0.6) {\r\n      return 'bg-primary';\r\n    } else if (score >= 0.4) {\r\n      return 'bg-warning';\r\n    } else {\r\n      return 'bg-danger';\r\n    }\r\n  }\r\n} ","<div class=\"container-fluid p-4\">\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <h2 class=\"mb-0\">ML-Based Task Estimation</h2>\r\n      <p class=\"text-muted mt-2\">Estimate task duration using machine learning predictions based on historical data</p>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Iteration Path Selection -->\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"card-title mb-0\">Select Iteration</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row g-3 align-items-center\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"input-group\">\r\n                <label class=\"input-group-text\" for=\"iterationPath\">Iteration Path</label>\r\n                <select \r\n                  id=\"iterationPath\" \r\n                  class=\"form-select\" \r\n                  [(ngModel)]=\"selectedIterationPath\"\r\n                  aria-label=\"Iteration Path\">\r\n                  <option value=\"\">-- Select Iteration Path --</option>\r\n                  <option *ngFor=\"let path of availableIterationPaths\" [value]=\"path\">{{ path }}</option>\r\n                </select>\r\n                <button \r\n                  class=\"btn btn-outline-primary\" \r\n                  type=\"button\" \r\n                  (click)=\"loadWorkItemsByIteration()\"\r\n                  [disabled]=\"!selectedIterationPath\">\r\n                  <i class=\"bi bi-search\"></i> Load Items\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"iterationError\" class=\"text-danger mt-2\">\r\n                <small>{{ iterationError }}</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <!-- Work Items List -->\r\n    <div class=\"col-md-6\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n          <h4 class=\"card-title mb-0\">Work Items</h4>\r\n          <span *ngIf=\"workItems.length > 0\" class=\"badge bg-primary\">{{ workItems.length }} items</span>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <!-- Loading indicator -->\r\n          <div *ngIf=\"loadingIterationItems\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading work items...</span>\r\n            </div>\r\n            <p class=\"mt-2 text-muted\">Loading work items...</p>\r\n          </div>\r\n          \r\n          <!-- No items message -->\r\n          <div *ngIf=\"!loadingIterationItems && workItems.length === 0 && !iterationError\" class=\"text-center py-4\">\r\n            <p class=\"text-muted\">No work items found. Please select an iteration path and click \"Load Items\".</p>\r\n          </div>\r\n          \r\n          <!-- Work items list -->\r\n          <div *ngIf=\"!loadingIterationItems && workItems.length > 0\" class=\"list-group\">\r\n            <button \r\n              *ngFor=\"let item of workItems\" \r\n              class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"\r\n              [class.active]=\"selectedWorkItem?.id === item.id\"\r\n              (click)=\"selectWorkItem(item)\">\r\n              <div>\r\n                <span class=\"badge rounded-pill\" [ngClass]=\"{\r\n                  'bg-danger': item.type === 'Bug',\r\n                  'bg-primary': item.type === 'Feature',\r\n                  'bg-warning': item.type === 'Change Request',\r\n                  'bg-info': item.type === 'Test',\r\n                  'bg-secondary': !item.type || ['Bug', 'Feature', 'Change Request', 'Test'].indexOf(item.type) === -1\r\n                }\">{{ item.type || 'Task' }}</span>\r\n                <span class=\"ms-2\">#{{ item.id }}: {{ item.title }}</span>\r\n              </div>\r\n              <span class=\"badge rounded-pill bg-secondary\">{{ item.state }}</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Task Estimation Form -->\r\n    <div class=\"col-md-6\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"card-title mb-0\">Task Details</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <form [formGroup]=\"estimationForm\" (ngSubmit)=\"estimateTaskTime()\">\r\n            <!-- Task Title -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"taskTitle\" class=\"form-label\">Task Title</label>\r\n              <div class=\"input-group\">\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"taskTitle\" \r\n                  formControlName=\"title\"\r\n                  placeholder=\"Enter or select task title\"\r\n                  [ngClass]=\"{'is-valid': selectedWorkItem !== null}\">\r\n                <button \r\n                  *ngIf=\"estimationForm.get('title')?.value\"\r\n                  class=\"btn btn-outline-secondary\" \r\n                  type=\"button\"\r\n                  (click)=\"resetForm()\">\r\n                  <i class=\"bi bi-x-lg\"></i>\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"estimationForm.get('title')?.invalid && estimationForm.get('title')?.touched\" class=\"text-danger mt-1\">\r\n                <small *ngIf=\"estimationForm.get('title')?.errors?.['required']\">Title is required</small>\r\n                <small *ngIf=\"estimationForm.get('title')?.errors?.['minlength']\">Title must be at least 5 characters</small>\r\n              </div>\r\n              <div *ngIf=\"selectedWorkItem\" class=\"text-success mt-1\">\r\n                <small>Found matching work item #{{ selectedWorkItem.id }}</small>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Task Type -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"taskType\" class=\"form-label\">Task Type</label>\r\n              <select class=\"form-select\" id=\"taskType\" formControlName=\"type\">\r\n                <option *ngFor=\"let type of taskTypes\" [value]=\"type\">{{ type }}</option>\r\n              </select>\r\n            </div>\r\n\r\n            <!-- Assignee -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"assignee\" class=\"form-label\">Assignee</label>\r\n              <select class=\"form-select\" id=\"assignee\" formControlName=\"assignee\">\r\n                <option value=\"\">-- Unassigned --</option>\r\n                <option *ngFor=\"let member of teamMembers\" [value]=\"member\">{{ member }}</option>\r\n              </select>\r\n            </div>\r\n\r\n            <!-- Complexity -->\r\n            <div class=\"mb-3\">\r\n              <label class=\"form-label\">Complexity</label>\r\n              <div class=\"d-flex\">\r\n                <div class=\"form-check me-3\" *ngFor=\"let level of complexityLevels\">\r\n                  <input \r\n                    class=\"form-check-input\" \r\n                    type=\"radio\" \r\n                    [id]=\"'complexity-' + level.toLowerCase()\" \r\n                    [value]=\"level\" \r\n                    formControlName=\"complexity\">\r\n                  <label class=\"form-check-label\" [for]=\"'complexity-' + level.toLowerCase()\">\r\n                    {{ level }}\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Action Buttons -->\r\n            <div class=\"d-flex justify-content-between mt-4\">\r\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"resetForm()\">\r\n                <i class=\"bi bi-arrow-counterclockwise\"></i> Reset\r\n              </button>\r\n              <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loading\">\r\n                <span *ngIf=\"!loading\">\r\n                  <i class=\"bi bi-stopwatch\"></i> Estimate Time\r\n                </span>\r\n                <span *ngIf=\"loading\">\r\n                  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                  Estimating...\r\n                </span>\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row mt-4\">\r\n    <div class=\"col-md-12\">\r\n      <!-- Error Display -->\r\n      <div *ngIf=\"error\" class=\"alert alert-danger mb-4\">\r\n        {{ error }}\r\n      </div>\r\n\r\n      <!-- Estimation Results -->\r\n      <div *ngIf=\"showResult && estimationResult\" class=\"card\">\r\n        <div class=\"card-header bg-primary text-white\">\r\n          <h4 class=\"card-title mb-0\">Estimation Results</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"mb-4 text-center\">\r\n                <h2 class=\"display-4 mb-0\">{{ estimationResult.estimatedHours }} hours</h2>\r\n                <p class=\"text-muted\">Total estimated time</p>\r\n              </div>\r\n\r\n              <div class=\"row text-center mb-4\">\r\n                <div class=\"col-6\">\r\n                  <div class=\"p-3 bg-light rounded\">\r\n                    <h3 class=\"mb-0\">{{ devTimeEstimate }}</h3>\r\n                    <p class=\"text-muted mb-0\">Development Time</p>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-6\">\r\n                  <div class=\"p-3 bg-light rounded\">\r\n                    <h3 class=\"mb-0\">{{ testTimeEstimate }}</h3>\r\n                    <p class=\"text-muted mb-0\">Testing Time</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"mb-4\">\r\n                <h5>Prediction Confidence</h5>\r\n                <div class=\"progress\">\r\n                  <div \r\n                    class=\"progress-bar\" \r\n                    [ngClass]=\"getConfidenceClass(estimationResult.confidenceScore)\"\r\n                    [style.width.%]=\"estimationResult.confidenceScore * 100\" \r\n                    role=\"progressbar\" \r\n                    [attr.aria-valuenow]=\"estimationResult.confidenceScore * 100\" \r\n                    aria-valuemin=\"0\" \r\n                    aria-valuemax=\"100\">\r\n                    {{ formatConfidence(estimationResult.confidenceScore) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <h5>Factors Considered</h5>\r\n              <ul class=\"list-group\">\r\n                <li class=\"list-group-item\" *ngFor=\"let factor of estimationResult.factors\">\r\n                  {{ factor }}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-footer text-muted small\">\r\n          <i class=\"bi bi-info-circle\"></i> These estimates are based on machine learning models analyzing historical task data.\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Placeholder when no result is shown -->\r\n      <div *ngIf=\"!showResult && !error\" class=\"card bg-light\">\r\n        <div class=\"card-body text-center p-5\">\r\n          <i class=\"bi bi-graph-up display-1 text-muted\"></i>\r\n          <h4 class=\"mt-3\">Task Time Prediction</h4>\r\n          <p class=\"text-muted\">Fill in the task details and click \"Estimate Time\" to get an ML-based time estimate</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}