{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EstimationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/estimation`;\n  }\n  /**\r\n   * Estimate task time using ML-based estimation\r\n   * @param request The task estimation request\r\n   * @returns Observable of the estimation response\r\n   */\n  estimateTaskTime(request) {\n    return this.http.post(`${this.apiUrl}/estimate-task-time`, request).pipe(catchError(this.handleError));\n  }\n  /**\r\n   * Generic error handler for HTTP requests\r\n   * @param error The error response\r\n   * @returns An error observable\r\n   */\n  handleError(error) {\n    console.error('An error occurred in estimation service:', error);\n    let errorMessage = 'An unknown error occurred';\n    if (error.error && error.error.message) {\n      errorMessage = error.error.message;\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function EstimationService_Factory(t) {\n      return new (t || EstimationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EstimationService,\n      factory: EstimationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,gCAAgC;;;AAkB5D,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,aAAa;EAEX;EAExC;;;;;EAKAC,gBAAgB,CAACC,OAA8B;IAC7C,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CACnB,GAAG,IAAI,CAACH,MAAM,qBAAqB,EACnCE,OAAO,CACR,CAACE,IAAI,CACJT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEA;;;;;EAKQA,WAAW,CAACC,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAEhE,IAAIE,YAAY,GAAG,2BAA2B;IAC9C,IAAIF,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;MACtCD,YAAY,GAAGF,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM,IAAIH,KAAK,CAACG,OAAO,EAAE;MACxBD,YAAY,GAAGF,KAAK,CAACG,OAAO;;IAG9B,OAAOf,UAAU,CAAC,MAAM,IAAIgB,KAAK,CAACF,YAAY,CAAC,CAAC;EAClD;;;uBAnCWX,iBAAiB;IAAA;EAAA;;;aAAjBA,iBAAiB;MAAAc,SAAjBd,iBAAiB;MAAAe,YAFhB;IAAM;EAAA","names":["throwError","catchError","environment","EstimationService","constructor","http","apiUrl","estimateTaskTime","request","post","pipe","handleError","error","console","errorMessage","message","Error","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\estimation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface TaskEstimationRequest {\r\n  title: string;\r\n  type: string;\r\n  assignee: string;\r\n  complexity: string;\r\n}\r\n\r\nexport interface TaskEstimationResponse {\r\n  estimatedHours: number;\r\n  confidenceScore: number;\r\n  factors: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EstimationService {\r\n  private apiUrl = `${environment.apiUrl}/estimation`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Estimate task time using ML-based estimation\r\n   * @param request The task estimation request\r\n   * @returns Observable of the estimation response\r\n   */\r\n  estimateTaskTime(request: TaskEstimationRequest): Observable<TaskEstimationResponse> {\r\n    return this.http.post<TaskEstimationResponse>(\r\n      `${this.apiUrl}/estimate-task-time`, \r\n      request\r\n    ).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generic error handler for HTTP requests\r\n   * @param error The error response\r\n   * @returns An error observable\r\n   */\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('An error occurred in estimation service:', error);\r\n    \r\n    let errorMessage = 'An unknown error occurred';\r\n    if (error.error && error.error.message) {\r\n      errorMessage = error.error.message;\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    \r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}