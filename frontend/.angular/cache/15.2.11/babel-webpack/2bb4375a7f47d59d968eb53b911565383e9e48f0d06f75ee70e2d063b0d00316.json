{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SettingsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/settings`;\n  }\n  // Get all settings (admin only)\n  getAllSettings() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n  }\n  // User role management\n  getUserRoles() {\n    return this.http.get(`${this.apiUrl}/users`).pipe(catchError(this.handleError));\n  }\n  updateUserRole(request) {\n    return this.http.post(`${this.apiUrl}/users`, request).pipe(catchError(this.handleError));\n  }\n  // Azure DevOps settings\n  getAzureDevOpsSettings() {\n    return this.http.get(`${this.apiUrl}/azure-devops-pat`).pipe(catchError(this.handleError));\n  }\n  updateAzureDevOpsPAT(request) {\n    return this.http.post(`${this.apiUrl}/azure-devops-pat`, request).pipe(catchError(this.handleError));\n  }\n  // AI model settings\n  getAiModelSettings() {\n    return this.http.get(`${this.apiUrl}/ai-model`).pipe(catchError(this.handleError));\n  }\n  updateAiModelSettings(request) {\n    return this.http.post(`${this.apiUrl}/ai-model`, request).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('Settings service error:', error);\n    let errorMessage = 'An unknown error occurred';\n    if (error.error && error.error.message) {\n      errorMessage = error.error.message;\n    } else if (error.status === 403) {\n      errorMessage = 'You do not have permission to access this resource';\n    } else if (error.status === 401) {\n      errorMessage = 'Please log in to access this resource';\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function SettingsService_Factory(t) {\n      return new (t || SettingsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SettingsService,\n      factory: SettingsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,gCAAgC;;;AAc5D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,WAAW;EAET;EAExC;EACAC,cAAc;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAc,IAAI,CAACF,MAAM,CAAC,CAC3CG,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEA;EACAC,YAAY;IACV,OAAO,IAAI,CAACN,IAAI,CAACG,GAAG,CAAgB,GAAG,IAAI,CAACF,MAAM,QAAQ,CAAC,CACxDG,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAE,cAAc,CAACC,OAA8B;IAC3C,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACR,MAAM,QAAQ,EAAEO,OAAO,CAAC,CACnDJ,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEA;EACAK,sBAAsB;IACpB,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAyB,GAAG,IAAI,CAACF,MAAM,mBAAmB,CAAC,CAC5EG,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAM,oBAAoB,CAACH,OAAoC;IACvD,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACR,MAAM,mBAAmB,EAAEO,OAAO,CAAC,CAC9DJ,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEA;EACAO,kBAAkB;IAChB,OAAO,IAAI,CAACZ,IAAI,CAACG,GAAG,CAAqB,GAAG,IAAI,CAACF,MAAM,WAAW,CAAC,CAChEG,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAQ,qBAAqB,CAACL,OAAqC;IACzD,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACR,MAAM,WAAW,EAAEO,OAAO,CAAC,CACtDJ,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAW,CAACS,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAE/C,IAAIE,YAAY,GAAG,2BAA2B;IAC9C,IAAIF,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;MACtCD,YAAY,GAAGF,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM,IAAIH,KAAK,CAACI,MAAM,KAAK,GAAG,EAAE;MAC/BF,YAAY,GAAG,oDAAoD;KACpE,MAAM,IAAIF,KAAK,CAACI,MAAM,KAAK,GAAG,EAAE;MAC/BF,YAAY,GAAG,uCAAuC;KACvD,MAAM,IAAIF,KAAK,CAACG,OAAO,EAAE;MACxBD,YAAY,GAAGF,KAAK,CAACG,OAAO;;IAG9B,OAAOtB,UAAU,CAAC,MAAM,IAAIwB,KAAK,CAACH,YAAY,CAAC,CAAC;EAClD;;;uBAzEWlB,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAsB,SAAftB,eAAe;MAAAuB,YAFd;IAAM;EAAA","names":["throwError","catchError","environment","SettingsService","constructor","http","apiUrl","getAllSettings","get","pipe","handleError","getUserRoles","updateUserRole","request","post","getAzureDevOpsSettings","updateAzureDevOpsPAT","getAiModelSettings","updateAiModelSettings","error","console","errorMessage","message","status","Error","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\settings.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport {\r\n  AiModelSettingsDto,\r\n  AzureDevOpsSettingsDto,\r\n  SettingsDto,\r\n  UpdateAiModelSettingsRequest,\r\n  UpdateAzureDevOpsPATRequest,\r\n  UpdateUserRoleRequest,\r\n  UserRoleDto\r\n} from '../models/settings.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SettingsService {\r\n  private apiUrl = `${environment.apiUrl}/settings`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Get all settings (admin only)\r\n  getAllSettings(): Observable<SettingsDto> {\r\n    return this.http.get<SettingsDto>(this.apiUrl)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // User role management\r\n  getUserRoles(): Observable<UserRoleDto[]> {\r\n    return this.http.get<UserRoleDto[]>(`${this.apiUrl}/users`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateUserRole(request: UpdateUserRoleRequest): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/users`, request)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // Azure DevOps settings\r\n  getAzureDevOpsSettings(): Observable<AzureDevOpsSettingsDto> {\r\n    return this.http.get<AzureDevOpsSettingsDto>(`${this.apiUrl}/azure-devops-pat`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateAzureDevOpsPAT(request: UpdateAzureDevOpsPATRequest): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/azure-devops-pat`, request)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // AI model settings\r\n  getAiModelSettings(): Observable<AiModelSettingsDto> {\r\n    return this.http.get<AiModelSettingsDto>(`${this.apiUrl}/ai-model`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateAiModelSettings(request: UpdateAiModelSettingsRequest): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/ai-model`, request)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('Settings service error:', error);\r\n    \r\n    let errorMessage = 'An unknown error occurred';\r\n    if (error.error && error.error.message) {\r\n      errorMessage = error.error.message;\r\n    } else if (error.status === 403) {\r\n      errorMessage = 'You do not have permission to access this resource';\r\n    } else if (error.status === 401) {\r\n      errorMessage = 'Please log in to access this resource';\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    \r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}