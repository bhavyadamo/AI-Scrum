{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { WorkItem } from '../../models/task.model';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/estimation.service\";\nimport * as i3 from \"../../services/task.service\";\nimport * as i4 from \"@angular/common\";\nfunction TaskEstimationComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.iterationError);\n  }\n}\nfunction TaskEstimationComponent_span_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 50);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.workItems.length, \" items\");\n  }\n}\nfunction TaskEstimationComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"div\", 52)(2, \"span\", 53);\n    i0.ɵɵtext(3, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 54);\n    i0.ɵɵtext(5, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"p\", 55);\n    i0.ɵɵtext(2, \"No work items found. Please select an iteration path and click \\\"Load Items\\\".\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function (a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    \"bg-danger\": a0,\n    \"bg-primary\": a1,\n    \"bg-warning\": a2,\n    \"bg-info\": a3,\n    \"bg-success\": a4,\n    \"bg-dark text-light\": a5,\n    \"bg-secondary\": a6\n  };\n};\nfunction TaskEstimationComponent_div_34_tr_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 60);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_div_34_tr_15_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const item_r20 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.selectWorkItem(item_r20));\n    });\n    i0.ɵɵelementStart(1, \"td\", 61);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\")(4, \"span\", 62);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"small\");\n    i0.ɵɵelement(10, \"i\", 63);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"td\")(13, \"span\", 64);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"table-primary\", (ctx_r19.selectedWorkItem == null ? null : ctx_r19.selectedWorkItem.id) === item_r20.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"#\", item_r20.id, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction7(8, _c0, item_r20.type === \"Bug\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Bug\", item_r20.type === \"Feature\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Feature\", item_r20.type === \"Change Request\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Change Request\", item_r20.type === \"Test\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Test\", item_r20.type === \"Requirement\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"Requirement\", item_r20.type === \"User Story\" || item_r20.fields && item_r20.fields[\"System.WorkItemType\"] === \"User Story\", !item_r20.type && (!item_r20.fields || !item_r20.fields[\"System.WorkItemType\"])));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r20.fields && item_r20.fields[\"System.WorkItemType\"] || item_r20.type || \"Task\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r20.title);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r19.getAssigneeName(item_r20) || \"Unassigned\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r19.getStateDisplay(item_r20) || \"N/A\");\n  }\n}\nfunction TaskEstimationComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56)(1, \"table\", 57)(2, \"thead\")(3, \"tr\")(4, \"th\", 58);\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\", 58);\n    i0.ɵɵtext(7, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\", 58);\n    i0.ɵɵtext(9, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\", 58);\n    i0.ɵɵtext(11, \"Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\", 58);\n    i0.ɵɵtext(13, \"State\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(14, \"tbody\");\n    i0.ɵɵtemplate(15, TaskEstimationComponent_div_34_tr_15_Template, 15, 16, \"tr\", 59);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.workItems);\n  }\n}\nfunction TaskEstimationComponent_span_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Task #\", ctx_r5.selectedWorkItem.id, \" Details\");\n  }\n}\nfunction TaskEstimationComponent_span_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Task Details\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_button_48_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 65);\n    i0.ɵɵlistener(\"click\", function TaskEstimationComponent_button_48_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.resetForm());\n    });\n    i0.ɵɵelement(1, \"i\", 66);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title must be at least 5 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 67);\n    i0.ɵɵtemplate(1, TaskEstimationComponent_div_49_small_1_Template, 2, 0, \"small\", 22);\n    i0.ɵɵtemplate(2, TaskEstimationComponent_div_49_small_2_Template, 2, 0, \"small\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r8.estimationForm.get(\"title\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r8.estimationForm.get(\"title\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nfunction TaskEstimationComponent_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 68)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Found matching work item #\", ctx_r9.selectedWorkItem.id, \"\");\n  }\n}\nfunction TaskEstimationComponent_option_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 69);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r27 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r27);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r27);\n  }\n}\nfunction TaskEstimationComponent_option_65_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 69);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r28 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", member_r28);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r28);\n  }\n}\nfunction TaskEstimationComponent_div_70_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 70);\n    i0.ɵɵelement(1, \"input\", 71);\n    i0.ɵɵelementStart(2, \"label\", 72);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const level_r29 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"complexity-\" + level_r29.toLowerCase())(\"value\", level_r29);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", \"complexity-\" + level_r29.toLowerCase());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", level_r29, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 73)(1, \"small\");\n    i0.ɵɵelement(2, \"i\", 74);\n    i0.ɵɵtext(3, \" Complexity automatically predicted based on work item attributes\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskEstimationComponent_span_77_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"i\", 75);\n    i0.ɵɵtext(2, \" Estimate Time \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_span_78_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 76);\n    i0.ɵɵtext(2, \" Estimating... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskEstimationComponent_div_81_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 77);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r16.error, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_82_li_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 91);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const factor_r31 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", factor_r31, \" \");\n  }\n}\nfunction TaskEstimationComponent_div_82_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 78)(2, \"h4\", 7);\n    i0.ɵɵtext(3, \"Estimation Results\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 8)(5, \"div\", 17)(6, \"div\", 10)(7, \"div\", 79)(8, \"h2\", 80);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 55);\n    i0.ɵɵtext(11, \"Total estimated time\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 81)(13, \"div\", 82)(14, \"div\", 83)(15, \"h3\", 3);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"p\", 84);\n    i0.ɵɵtext(18, \"Development Time\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"div\", 82)(20, \"div\", 83)(21, \"h3\", 3);\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"p\", 84);\n    i0.ɵɵtext(24, \"Testing Time\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(25, \"div\", 85)(26, \"h5\");\n    i0.ɵɵtext(27, \"Prediction Confidence\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"div\", 86)(29, \"div\", 87);\n    i0.ɵɵtext(30);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(31, \"div\", 10)(32, \"h5\");\n    i0.ɵɵtext(33, \"Factors Considered\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"ul\", 88);\n    i0.ɵɵtemplate(35, TaskEstimationComponent_div_82_li_35_Template, 2, 1, \"li\", 89);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(36, \"div\", 90);\n    i0.ɵɵelement(37, \"i\", 74);\n    i0.ɵɵtext(38, \" These estimates are based on machine learning models analyzing historical task data. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r17.estimationResult.estimatedHours, \" hours\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r17.devTimeEstimate);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r17.testTimeEstimate);\n    i0.ɵɵadvance(7);\n    i0.ɵɵstyleProp(\"width\", ctx_r17.estimationResult.confidenceScore * 100, \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r17.getConfidenceClass(ctx_r17.estimationResult.confidenceScore));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r17.estimationResult.confidenceScore * 100);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.formatConfidence(ctx_r17.estimationResult.confidenceScore), \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r17.estimationResult.factors);\n  }\n}\nfunction TaskEstimationComponent_div_83_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 92)(1, \"div\", 93);\n    i0.ɵɵelement(2, \"i\", 94);\n    i0.ɵɵelementStart(3, \"h4\", 95);\n    i0.ɵɵtext(4, \"Task Time Prediction\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 55);\n    i0.ɵɵtext(6, \"Fill in the task details and click \\\"Estimate Time\\\" to get an ML-based time estimate\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"is-valid\": a0\n  };\n};\nexport class TaskEstimationComponent {\n  constructor(fb, estimationService, taskService) {\n    this.fb = fb;\n    this.estimationService = estimationService;\n    this.taskService = taskService;\n    this.teamMembers = [];\n    // Include all available work item types from the enum\n    this.taskTypes = ['User Story', 'Task', 'Bug', 'Epic', 'Feature', 'Issue', 'Change Request', 'Documentation', 'Test', 'Research'];\n    this.complexityLevels = ['Low', 'Medium', 'High'];\n    this.loading = false;\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n    // New properties for iteration path functionality\n    this.manualIterationPath = ''; // Only use manual iteration path\n    this.workItems = [];\n    this.loadingIterationItems = false;\n    this.iterationError = null;\n    this.selectedWorkItem = null;\n    this.devTimeEstimate = 0;\n    this.testTimeEstimate = 0;\n    this.totalEstimate = 0;\n    this.estimationForm = this.fb.group({\n      title: ['', [Validators.required, Validators.minLength(5)]],\n      type: ['Feature', Validators.required],\n      assignee: [''],\n      complexity: ['Medium', Validators.required]\n    });\n  }\n  ngOnInit() {\n    // Load team members\n    this.loadTeamMembers();\n    // Listen for title changes to auto-fill fields\n    this.estimationForm.get('title')?.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe(title => {\n      if (title && title.length > 5) {\n        this.autoPopulateFormFields(title);\n      }\n    });\n  }\n  // Load team members with better error handling\n  loadTeamMembers() {\n    this.taskService.getTeamMembers().subscribe({\n      next: response => {\n        if (Array.isArray(response)) {\n          if (response.length === 0) {\n            console.warn('No team members returned from API');\n            return;\n          }\n          if (typeof response[0] === 'string') {\n            // It's an array of strings\n            this.teamMembers = response;\n          } else {\n            // It's an array of TeamMember objects\n            this.teamMembers = response.filter(m => m && m.displayName) // Filter out invalid entries\n            .map(m => m.displayName);\n          }\n          console.log(`Loaded ${this.teamMembers.length} team members`);\n        }\n      },\n      error: err => {\n        console.error('Error loading team members:', err);\n        this.error = 'Failed to load team members';\n      }\n    });\n  }\n  // Auto-populate form fields based on entered title\n  autoPopulateFormFields(title) {\n    if (!this.workItems || this.workItems.length === 0) {\n      return; // No items to search through\n    }\n    // Find matching work item by title (full or partial match)\n    const matchingItem = this.workItems.find(item => item.title.toLowerCase().includes(title.toLowerCase()) || title.toLowerCase().includes(item.title.toLowerCase()));\n    if (matchingItem) {\n      this.selectedWorkItem = matchingItem;\n      this.populateFormWithWorkItem(matchingItem);\n    }\n  }\n  // Load work items for the selected iteration path\n  loadWorkItemsByIteration() {\n    if (!this.manualIterationPath || this.manualIterationPath.trim() === '') {\n      this.iterationError = 'Please enter an iteration path';\n      return;\n    }\n    this.loadingIterationItems = true;\n    this.workItems = [];\n    this.selectedWorkItem = null;\n    this.iterationError = null;\n    this.taskService.getTasks(this.manualIterationPath.trim()).subscribe({\n      next: items => {\n        // Process items to clean up state information\n        this.workItems = items.map(item => {\n          // Process each item to ensure it has proper state\n          const processedItem = {\n            ...item\n          };\n          // Fix state display - remove \"Unknown\" prefix if present\n          if (processedItem.state && processedItem.state.toLowerCase().includes('unknown')) {\n            processedItem.state = processedItem.state.replace(/unknown/i, '').trim();\n          }\n          // Also check for state in fields\n          if (processedItem.fields && processedItem.fields['System.State']) {\n            let state = processedItem.fields['System.State'];\n            if (typeof state === 'string' && state.toLowerCase().includes('unknown')) {\n              state = state.replace(/unknown/i, '').trim();\n              processedItem.fields['System.State'] = state;\n            }\n            // If item has no state but has System.State, use it\n            if (!processedItem.state) {\n              processedItem.state = state;\n            }\n          }\n          return processedItem;\n        });\n        this.loadingIterationItems = false;\n        console.log(`Loaded ${this.workItems.length} work items for iteration ${this.manualIterationPath}`);\n      },\n      error: err => {\n        console.error('Error loading work items:', err);\n        this.iterationError = 'Failed to load work items for the specified iteration path';\n        this.loadingIterationItems = false;\n      }\n    });\n  }\n  // Helper method to find the best matching team member for an assignee\n  findMatchingTeamMember(assigneeName) {\n    if (!assigneeName || !this.teamMembers || this.teamMembers.length === 0) {\n      return '';\n    }\n    // First try exact match\n    const exactMatch = this.teamMembers.find(member => member === assigneeName);\n    if (exactMatch) {\n      return exactMatch;\n    }\n    // Then try case-insensitive exact match\n    const caseInsensitiveMatch = this.teamMembers.find(member => member.toLowerCase() === assigneeName.toLowerCase());\n    if (caseInsensitiveMatch) {\n      return caseInsensitiveMatch;\n    }\n    // Then try partial matches\n    const containsMatch = this.teamMembers.find(member => member.toLowerCase().includes(assigneeName.toLowerCase()) || assigneeName.toLowerCase().includes(member.toLowerCase()));\n    if (containsMatch) {\n      return containsMatch;\n    }\n    // Check for common name parts - this helps with \"John Doe\" vs \"Doe, John\" format issues\n    const nameParts = assigneeName.toLowerCase().split(/[\\s,]+/).filter(part => part.length > 2);\n    if (nameParts.length > 0) {\n      for (const part of nameParts) {\n        const partialMatch = this.teamMembers.find(member => member.toLowerCase().includes(part));\n        if (partialMatch) {\n          return partialMatch;\n        }\n      }\n    }\n    // If no match found, return the original name\n    return assigneeName;\n  }\n  // Select a work item for estimation\n  selectWorkItem(item) {\n    this.selectedWorkItem = item;\n    this.populateFormWithWorkItem(item);\n  }\n  // Populate the form with selected work item details\n  populateFormWithWorkItem(item) {\n    const complexity = this.determineComplexity(item);\n    // Extract assignee name, trying 'System.AssignedTo' first\n    let assignee = '';\n    // Check for fields property which might contain System.AssignedTo\n    if (item.fields && item.fields['System.AssignedTo']) {\n      const assignedTo = item.fields['System.AssignedTo'];\n      if (typeof assignedTo === 'string') {\n        assignee = assignedTo;\n      } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n        // Try to get displayName property\n        if (assignedTo.displayName) {\n          assignee = assignedTo.displayName;\n        }\n      }\n    }\n    // Fallback to assignedTo property if System.AssignedTo is not available\n    else if (item.assignedTo) {\n      if (typeof item.assignedTo === 'string') {\n        assignee = item.assignedTo;\n      } else if (typeof item.assignedTo === 'object' && item.assignedTo !== null) {\n        const assigneeObj = item.assignedTo;\n        if (assigneeObj.displayName) {\n          assignee = assigneeObj.displayName;\n        } else if (assigneeObj.name) {\n          assignee = assigneeObj.name;\n        }\n      }\n    }\n    // If we have an assignee name, find the matching team member\n    if (assignee) {\n      assignee = this.findMatchingTeamMember(assignee);\n      console.log(`Found matching team member for '${assignee}'`);\n    }\n    // Ensure the assignee exists in the teamMembers array\n    if (assignee && this.teamMembers.length > 0 && !this.teamMembers.includes(assignee)) {\n      // Try to find an exact or close match in teamMembers\n      const exactMatch = this.teamMembers.find(m => m === assignee);\n      if (exactMatch) {\n        assignee = exactMatch;\n      } else {\n        // Try to find a partial match\n        const partialMatch = this.teamMembers.find(m => m.toLowerCase().includes(assignee.toLowerCase()) || assignee.toLowerCase().includes(m.toLowerCase()));\n        if (partialMatch) {\n          assignee = partialMatch;\n        }\n      }\n    }\n    // Get type, trying both System.WorkItemType and type property\n    let itemType = '';\n    // First try to get from Azure DevOps fields\n    if (item.fields) {\n      if (item.fields['System.WorkItemType']) {\n        itemType = item.fields['System.WorkItemType'];\n      }\n    }\n    // If not found, fallback to type property\n    if (!itemType && item.type) {\n      itemType = item.type;\n    }\n    // If still not found, try to determine from title\n    if (!itemType) {\n      const title = item.title.toLowerCase();\n      if (title.includes('bug') || title.includes('fix') || title.includes('issue')) {\n        itemType = 'Bug';\n      } else if (title.includes('feature') || title.includes('implement') || title.includes('add new')) {\n        itemType = 'Feature';\n      } else if (title.includes('change') || title.includes('modify') || title.includes('update')) {\n        itemType = 'Change Request';\n      } else if (title.includes('requirement') || title.includes('must have')) {\n        itemType = 'Requirement';\n      } else {\n        // Default to Feature\n        itemType = 'Feature';\n      }\n    }\n    // Ensure the type is available in our task types list\n    if (itemType && !this.taskTypes.includes(itemType)) {\n      // Add to taskTypes if not already there\n      this.taskTypes.push(itemType);\n    }\n    // Update form with extracted values\n    this.estimationForm.patchValue({\n      title: item.title,\n      type: itemType,\n      assignee: assignee,\n      complexity: complexity\n    });\n    console.log(`Populated form with: Type=${itemType}, Assignee=${assignee}, Complexity=${complexity}`);\n    // Pre-calculate estimates based on historical data if we have this information\n    if (this.estimationResult) {\n      this.calculateTimeEstimates(this.estimationResult.estimatedHours);\n    }\n  }\n  // Determine complexity based on work item properties with enhanced logic\n  determineComplexity(item) {\n    // Initialize with default complexity\n    let complexity = 'Medium';\n    // Try to determine from title keywords\n    const title = item.title.toLowerCase();\n    if (title.includes('critical') || title.includes('urgent') || title.includes('major') || title.includes('performance issue') || title.includes('security')) {\n      return 'High';\n    }\n    if (title.includes('minor') || title.includes('small') || title.includes('trivial') || title.includes('documentation') || title.includes('typo')) {\n      return 'Low';\n    }\n    // Determine from type\n    const itemType = this.getWorkItemType(item);\n    if (itemType === 'Bug' || itemType === 'Change Request' || itemType === 'Feature') {\n      // Bugs and change requests tend to be more complex\n      complexity = 'Medium';\n      // For bugs, increase complexity\n      if (itemType === 'Bug') {\n        complexity = 'High';\n      }\n    }\n    // Determine from priority if available\n    if (item.priority !== undefined) {\n      if (item.priority <= 1) {\n        complexity = 'High';\n      } else if (item.priority === 2) {\n        complexity = 'Medium';\n      } else {\n        complexity = 'Low';\n      }\n    }\n    // Check for complexity field if available in Azure DevOps fields\n    if (item.fields) {\n      // Different systems use different field names for complexity/effort\n      const complexityFields = ['Microsoft.VSTS.Common.Complexity', 'Microsoft.VSTS.Scheduling.Effort', 'Custom.Complexity', 'System.Complexity'];\n      for (const field of complexityFields) {\n        if (item.fields[field]) {\n          const fieldValue = item.fields[field];\n          if (typeof fieldValue === 'string') {\n            if (fieldValue.includes('High') || fieldValue.includes('1')) {\n              return 'High';\n            } else if (fieldValue.includes('Low') || fieldValue.includes('3')) {\n              return 'Low';\n            }\n          } else if (typeof fieldValue === 'number') {\n            if (fieldValue <= 1) {\n              return 'High';\n            } else if (fieldValue >= 3) {\n              return 'Low';\n            }\n          }\n        }\n      }\n    }\n    return complexity;\n  }\n  // Helper method to get work item type consistently\n  getWorkItemType(item) {\n    // Try to get from System.WorkItemType first\n    if (item.fields && item.fields['System.WorkItemType']) {\n      return item.fields['System.WorkItemType'];\n    }\n    // Fallback to type property\n    return item.type || 'Feature';\n  }\n  resetForm() {\n    this.estimationForm.reset({\n      type: 'Feature',\n      complexity: 'Medium'\n    });\n    this.error = null;\n    this.showResult = false;\n    this.estimationResult = null;\n  }\n  estimateTaskTime() {\n    if (this.estimationForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.estimationForm.controls).forEach(key => {\n        this.estimationForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n    this.loading = true;\n    this.error = null;\n    this.estimationResult = null;\n    this.showResult = false;\n    const request = {\n      title: this.estimationForm.value.title,\n      type: this.estimationForm.value.type,\n      assignee: this.estimationForm.value.assignee,\n      complexity: this.estimationForm.value.complexity\n    };\n    // Add work item ID if we have a selected work item\n    if (this.selectedWorkItem) {\n      // Convert to number if it's a string, or use as is if it's already a number\n      const workItemId = typeof this.selectedWorkItem.id === 'string' ? parseInt(this.selectedWorkItem.id, 10) : this.selectedWorkItem.id;\n      if (!isNaN(workItemId)) {\n        request.workItemId = workItemId;\n      }\n      // Add fields data if available to provide more context for estimation\n      if (this.selectedWorkItem.fields) {\n        request.additionalFields = this.selectedWorkItem.fields;\n      }\n      // Include iteration path for historical context\n      if (this.selectedWorkItem.iterationPath) {\n        request.iterationPath = this.selectedWorkItem.iterationPath;\n      }\n    }\n    // Use iteration path if available, either from the work item or manual entry\n    const iterationPath = this.selectedWorkItem && this.selectedWorkItem.iterationPath || this.manualIterationPath;\n    if (iterationPath) {\n      request.includeHistory = true; // Signal to include work history analysis\n      this.estimationService.estimateTaskTimeWithWorkHistory(request, iterationPath).subscribe({\n        next: result => {\n          this.estimationResult = result;\n          this.showResult = true;\n          this.loading = false;\n          // If result includes dev and test time estimates, use them directly\n          if (result.devTimeHours && result.testTimeHours) {\n            this.devTimeEstimate = result.devTimeHours;\n            this.testTimeEstimate = result.testTimeHours;\n            this.totalEstimate = result.estimatedHours;\n          } else {\n            // Otherwise calculate them based on our algorithm\n            this.calculateTimeEstimates(result.estimatedHours);\n          }\n        },\n        error: err => {\n          this.error = err.message || 'An error occurred during estimation';\n          this.loading = false;\n        }\n      });\n    } else {\n      // Standard estimation without work history\n      this.estimationService.estimateTaskTime(request).subscribe({\n        next: result => {\n          this.estimationResult = result;\n          this.showResult = true;\n          this.loading = false;\n          // Calculate dev and test time estimates\n          this.calculateTimeEstimates(result.estimatedHours);\n        },\n        error: err => {\n          this.error = err.message || 'An error occurred during estimation';\n          this.loading = false;\n        }\n      });\n    }\n  }\n  // Calculate development and testing time estimates\n  calculateTimeEstimates(totalHours) {\n    // Typical distribution: dev 60-70%, testing 30-40%\n    const complexity = this.estimationForm.value.complexity;\n    let devRatio = 0.65; // Default dev ratio\n    // Adjust ratio based on complexity\n    if (complexity === 'High') {\n      devRatio = 0.7; // Higher complexity = more dev time\n    } else if (complexity === 'Low') {\n      devRatio = 0.6; // Lower complexity = less dev time\n    }\n\n    this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\n    this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\n    this.totalEstimate = totalHours;\n  }\n  // Format confidence score as percentage\n  formatConfidence(score) {\n    return `${Math.round(score * 100)}%`;\n  }\n  // Get appropriate class for confidence level\n  getConfidenceClass(score) {\n    if (score >= 0.8) {\n      return 'bg-success';\n    } else if (score >= 0.6) {\n      return 'bg-primary';\n    } else if (score >= 0.4) {\n      return 'bg-warning';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  // Get assignee name for display\n  getAssigneeName(item) {\n    let displayName = '';\n    // Try to get from System.AssignedTo first\n    if (item.fields && item.fields['System.AssignedTo']) {\n      const assignedTo = item.fields['System.AssignedTo'];\n      if (typeof assignedTo === 'string') {\n        displayName = assignedTo;\n      } else if (typeof assignedTo === 'object' && assignedTo !== null) {\n        if (assignedTo.displayName) {\n          displayName = assignedTo.displayName;\n        }\n      }\n    }\n    // Fallback to assignedTo property\n    if (!displayName && item.assignedTo) {\n      if (typeof item.assignedTo === 'string') {\n        displayName = item.assignedTo;\n      } else if (typeof item.assignedTo === 'object' && item.assignedTo !== null) {\n        const assigneeObj = item.assignedTo;\n        displayName = assigneeObj.displayName || assigneeObj.name || '';\n      }\n    }\n    // Find matching team member for consistent display\n    if (displayName) {\n      return this.findMatchingTeamMember(displayName);\n    }\n    return '';\n  }\n  // Get the clean state display for a work item\n  getStateDisplay(item) {\n    // First check fields for System.State\n    if (item.fields && item.fields['System.State']) {\n      const state = item.fields['System.State'];\n      if (typeof state === 'string') {\n        // Remove \"Unknown\" prefix if present\n        return state.replace(/unknown/i, '').trim();\n      }\n    }\n    // Fallback to item.state if available\n    if (item.state) {\n      return item.state.replace(/unknown/i, '').trim();\n    }\n    return ''; // Default if no state available\n  }\n\n  static {\n    this.ɵfac = function TaskEstimationComponent_Factory(t) {\n      return new (t || TaskEstimationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EstimationService), i0.ɵɵdirectiveInject(i3.TaskService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskEstimationComponent,\n      selectors: [[\"app-task-estimation\"]],\n      decls: 84,\n      vars: 26,\n      consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"mb-0\"], [1, \"text-muted\", \"mt-2\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"mb-0\"], [1, \"card-body\"], [1, \"row\", \"g-3\", \"align-items-center\"], [1, \"col-md-6\"], [1, \"input-group\"], [\"for\", \"manualIterationPath\", 1, \"input-group-text\"], [\"type\", \"text\", \"id\", \"manualIterationPath\", \"placeholder\", \"Enter iteration path (e.g. Techoil\\\\2.3.23)\", \"aria-label\", \"Manual Iteration Path\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-search\"], [\"class\", \"text-danger mt-2\", 4, \"ngIf\"], [1, \"row\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [\"class\", \"badge bg-primary\", 4, \"ngIf\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"taskTitle\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"taskTitle\", \"formControlName\", \"title\", \"placeholder\", \"Enter or select task title\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"btn btn-outline-secondary\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"text-danger mt-1\", 4, \"ngIf\"], [\"class\", \"text-success mt-1\", 4, \"ngIf\"], [\"for\", \"taskType\", 1, \"form-label\"], [\"id\", \"taskType\", \"formControlName\", \"type\", 1, \"form-select\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"assignee\", 1, \"form-label\"], [\"id\", \"assignee\", \"formControlName\", \"assignee\", 1, \"form-select\"], [\"value\", \"\"], [1, \"form-label\"], [1, \"d-flex\"], [\"class\", \"form-check me-3\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-muted mt-1\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-between\", \"mt-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-arrow-counterclockwise\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"row\", \"mt-4\"], [1, \"col-md-12\"], [\"class\", \"alert alert-danger mb-4\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"class\", \"card bg-light\", 4, \"ngIf\"], [1, \"text-danger\", \"mt-2\"], [1, \"badge\", \"bg-primary\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"mt-2\", \"text-muted\"], [1, \"text-muted\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\", \"table-striped\"], [\"scope\", \"col\"], [\"style\", \"cursor: pointer;\", 3, \"table-primary\", \"click\", 4, \"ngFor\", \"ngForOf\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"fw-bold\"], [1, \"badge\", \"rounded-pill\", 3, \"ngClass\"], [1, \"bi\", \"bi-person\", \"me-1\"], [1, \"badge\", \"bg-secondary\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"bi\", \"bi-x-lg\"], [1, \"text-danger\", \"mt-1\"], [1, \"text-success\", \"mt-1\"], [3, \"value\"], [1, \"form-check\", \"me-3\"], [\"type\", \"radio\", \"formControlName\", \"complexity\", 1, \"form-check-input\", 3, \"id\", \"value\"], [1, \"form-check-label\", 3, \"for\"], [1, \"text-muted\", \"mt-1\"], [1, \"bi\", \"bi-info-circle\"], [1, \"bi\", \"bi-stopwatch\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\", \"mb-4\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"mb-4\", \"text-center\"], [1, \"display-4\", \"mb-0\"], [1, \"row\", \"text-center\", \"mb-4\"], [1, \"col-6\"], [1, \"p-3\", \"bg-light\", \"rounded\"], [1, \"text-muted\", \"mb-0\"], [1, \"mb-4\"], [1, \"progress\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", 3, \"ngClass\"], [1, \"list-group\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-footer\", \"text-muted\", \"small\"], [1, \"list-group-item\"], [1, \"card\", \"bg-light\"], [1, \"card-body\", \"text-center\", \"p-5\"], [1, \"bi\", \"bi-graph-up\", \"display-1\", \"text-muted\"], [1, \"mt-3\"]],\n      template: function TaskEstimationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\", 3);\n          i0.ɵɵtext(4, \"ML-Based Task Estimation\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p\", 4);\n          i0.ɵɵtext(6, \"Estimate task duration using machine learning predictions based on historical data\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 2)(9, \"div\", 5)(10, \"div\", 6)(11, \"h4\", 7);\n          i0.ɵɵtext(12, \"Enter Iteration Path\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 8)(14, \"div\", 9)(15, \"div\", 10)(16, \"div\", 11)(17, \"label\", 12);\n          i0.ɵɵtext(18, \"Iteration Path\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"input\", 13);\n          i0.ɵɵlistener(\"ngModelChange\", function TaskEstimationComponent_Template_input_ngModelChange_19_listener($event) {\n            return ctx.manualIterationPath = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"button\", 14);\n          i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_20_listener() {\n            return ctx.loadWorkItemsByIteration();\n          });\n          i0.ɵɵelement(21, \"i\", 15);\n          i0.ɵɵtext(22, \" Load Items \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(23, TaskEstimationComponent_div_23_Template, 3, 1, \"div\", 16);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(24, \"div\", 17)(25, \"div\", 10)(26, \"div\", 5)(27, \"div\", 18)(28, \"h4\", 7);\n          i0.ɵɵtext(29, \"Work Items\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(30, TaskEstimationComponent_span_30_Template, 2, 1, \"span\", 19);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"div\", 8);\n          i0.ɵɵtemplate(32, TaskEstimationComponent_div_32_Template, 6, 0, \"div\", 20);\n          i0.ɵɵtemplate(33, TaskEstimationComponent_div_33_Template, 3, 0, \"div\", 20);\n          i0.ɵɵtemplate(34, TaskEstimationComponent_div_34_Template, 16, 1, \"div\", 21);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(35, \"div\", 10)(36, \"div\", 5)(37, \"div\", 6)(38, \"h4\", 7);\n          i0.ɵɵtemplate(39, TaskEstimationComponent_span_39_Template, 2, 1, \"span\", 22);\n          i0.ɵɵtemplate(40, TaskEstimationComponent_span_40_Template, 2, 0, \"span\", 22);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(41, \"div\", 8)(42, \"form\", 23);\n          i0.ɵɵlistener(\"ngSubmit\", function TaskEstimationComponent_Template_form_ngSubmit_42_listener() {\n            return ctx.estimateTaskTime();\n          });\n          i0.ɵɵelementStart(43, \"div\", 24)(44, \"label\", 25);\n          i0.ɵɵtext(45, \"Task Title\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(46, \"div\", 11);\n          i0.ɵɵelement(47, \"input\", 26);\n          i0.ɵɵtemplate(48, TaskEstimationComponent_button_48_Template, 2, 0, \"button\", 27);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(49, TaskEstimationComponent_div_49_Template, 3, 2, \"div\", 28);\n          i0.ɵɵtemplate(50, TaskEstimationComponent_div_50_Template, 3, 1, \"div\", 29);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(51, \"div\", 17)(52, \"div\", 10)(53, \"div\", 24)(54, \"label\", 30);\n          i0.ɵɵtext(55, \"Task Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(56, \"select\", 31);\n          i0.ɵɵtemplate(57, TaskEstimationComponent_option_57_Template, 2, 2, \"option\", 32);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(58, \"div\", 10)(59, \"div\", 24)(60, \"label\", 33);\n          i0.ɵɵtext(61, \"Assignee\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(62, \"select\", 34)(63, \"option\", 35);\n          i0.ɵɵtext(64, \"-- Unassigned --\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(65, TaskEstimationComponent_option_65_Template, 2, 2, \"option\", 32);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(66, \"div\", 24)(67, \"label\", 36);\n          i0.ɵɵtext(68, \"Complexity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(69, \"div\", 37);\n          i0.ɵɵtemplate(70, TaskEstimationComponent_div_70_Template, 4, 4, \"div\", 38);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(71, TaskEstimationComponent_div_71_Template, 4, 0, \"div\", 39);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(72, \"div\", 40)(73, \"button\", 41);\n          i0.ɵɵlistener(\"click\", function TaskEstimationComponent_Template_button_click_73_listener() {\n            return ctx.resetForm();\n          });\n          i0.ɵɵelement(74, \"i\", 42);\n          i0.ɵɵtext(75, \" Reset \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(76, \"button\", 43);\n          i0.ɵɵtemplate(77, TaskEstimationComponent_span_77_Template, 3, 0, \"span\", 22);\n          i0.ɵɵtemplate(78, TaskEstimationComponent_span_78_Template, 3, 0, \"span\", 22);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(79, \"div\", 44)(80, \"div\", 45);\n          i0.ɵɵtemplate(81, TaskEstimationComponent_div_81_Template, 2, 1, \"div\", 46);\n          i0.ɵɵtemplate(82, TaskEstimationComponent_div_82_Template, 39, 9, \"div\", 47);\n          i0.ɵɵtemplate(83, TaskEstimationComponent_div_83_Template, 7, 0, \"div\", 48);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          let tmp_11_0;\n          let tmp_12_0;\n          i0.ɵɵadvance(19);\n          i0.ɵɵproperty(\"ngModel\", ctx.manualIterationPath);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", !ctx.manualIterationPath);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.iterationError);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.workItems.length > 0);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.loadingIterationItems);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length === 0 && !ctx.iterationError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingIterationItems && ctx.workItems.length > 0);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.selectedWorkItem);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.estimationForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(24, _c1, ctx.selectedWorkItem !== null));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (tmp_11_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_11_0.value);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_12_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_12_0.invalid) && ((tmp_12_0 = ctx.estimationForm.get(\"title\")) == null ? null : tmp_12_0.touched));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.taskTypes);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngForOf\", ctx.teamMembers);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.complexityLevels);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkItem);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"disabled\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showResult && ctx.estimationResult);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.showResult && !ctx.error);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.NgModel, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"h2[_ngcontent-%COMP%] {\\n  margin-bottom: 1.5rem;\\n  color: #2c3e50;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  padding-top: 1.5rem;\\n}\\n\\n.display-4[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  transition: all 0.3s ease;\\n}\\n.card[_ngcontent-%COMP%]:hover {\\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\\n}\\n\\n.progress[_ngcontent-%COMP%] {\\n  height: 25px;\\n  font-weight: 600;\\n}\\n\\n.list-group-item[_ngcontent-%COMP%]:first-child {\\n  font-weight: 500;\\n}\\n\\n.bg-light[_ngcontent-%COMP%] {\\n  opacity: 0.8;\\n}\\n.bg-light[_ngcontent-%COMP%]   i.bi-graph-up[_ngcontent-%COMP%] {\\n  opacity: 0.5;\\n}\\n\\n.form-check[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n.form-check[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%], .form-check[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n\\n@keyframes _ngcontent-%COMP%_fadeIn {\\n  from {\\n    opacity: 0;\\n    transform: translateY(10px);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n}\\n.alert[_ngcontent-%COMP%], .card[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_fadeIn 0.3s ease-out;\\n}\\n\\n.table-responsive[_ngcontent-%COMP%] {\\n  max-height: 450px;\\n  overflow-y: auto;\\n}\\n\\n.table[_ngcontent-%COMP%] {\\n  font-size: 0.9rem;\\n}\\n.table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%] {\\n  position: sticky;\\n  top: 0;\\n  background-color: #f8f9fa;\\n  z-index: 1;\\n}\\n.table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\\n  transition: background-color 0.2s;\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover {\\n  background-color: rgba(0, 123, 255, 0.1);\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr.table-primary[_ngcontent-%COMP%] {\\n  background-color: rgba(0, 123, 255, 0.15);\\n}\\n.table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr.table-primary[_ngcontent-%COMP%]:hover {\\n  background-color: rgba(0, 123, 255, 0.25);\\n}\\n.table[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%] {\\n  font-size: 0.75rem;\\n}\\n\\n.form-select.ng-touched.ng-valid[_ngcontent-%COMP%], .form-control.ng-touched.ng-valid[_ngcontent-%COMP%] {\\n  border-color: #28a745;\\n}\\n\\n.form-check-input[_ngcontent-%COMP%]:checked {\\n  background-color: #0d6efd;\\n  border-color: #0d6efd;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWVzdGltYXRpb24vdGFzay1lc3RpbWF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UscUJBQUE7RUFDQSxjQUFBO0FBQ0Y7O0FBRUE7RUFDRSxtQkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLHdDQUFBO0VBQ0EseUJBQUE7QUFDRjtBQUNFO0VBQ0UsMENBQUE7QUFDSjs7QUFHQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUFGOztBQUlFO0VBQ0UsZ0JBQUE7QUFESjs7QUFLQTtFQUNFLFlBQUE7QUFGRjtBQUlFO0VBQ0UsWUFBQTtBQUZKOztBQU1BO0VBQ0UsZUFBQTtBQUhGO0FBS0U7RUFDRSxlQUFBO0FBSEo7O0FBUUE7RUFDRTtJQUFPLFVBQUE7SUFBWSwyQkFBQTtFQUhuQjtFQUlBO0lBQUssVUFBQTtJQUFZLHdCQUFBO0VBQWpCO0FBQ0Y7QUFFQTtFQUNFLCtCQUFBO0FBQUY7O0FBSUE7RUFDRSxpQkFBQTtFQUNBLGdCQUFBO0FBREY7O0FBSUE7RUFDRSxpQkFBQTtBQURGO0FBR0U7RUFDRSxnQkFBQTtFQUNBLE1BQUE7RUFDQSx5QkFBQTtFQUNBLFVBQUE7QUFESjtBQUdJO0VBQ0UsZ0JBQUE7QUFETjtBQUtFO0VBQ0UsaUNBQUE7QUFISjtBQUtJO0VBQ0Usd0NBQUE7QUFITjtBQU1JO0VBQ0UseUNBQUE7QUFKTjtBQU1NO0VBQ0UseUNBQUE7QUFKUjtBQVNFO0VBQ0Usa0JBQUE7QUFQSjs7QUFhRTtFQUNFLHFCQUFBO0FBVko7O0FBZUE7RUFDRSx5QkFBQTtFQUNBLHFCQUFBO0FBWkYiLCJzb3VyY2VzQ29udGVudCI6WyJoMiB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMS41cmVtO1xyXG4gIGNvbG9yOiAjMmMzZTUwO1xyXG59XHJcblxyXG4uY29udGFpbmVyIHtcclxuICBwYWRkaW5nLXRvcDogMS41cmVtO1xyXG59XHJcblxyXG4uZGlzcGxheS00IHtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcblxyXG4uY2FyZCB7XHJcbiAgYm94LXNoYWRvdzogMCA0cHggNnB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlO1xyXG4gIFxyXG4gICY6aG92ZXIge1xyXG4gICAgYm94LXNoYWRvdzogMCA2cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xyXG4gIH1cclxufVxyXG5cclxuLnByb2dyZXNzIHtcclxuICBoZWlnaHQ6IDI1cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG5cclxuLmxpc3QtZ3JvdXAtaXRlbSB7XHJcbiAgJjpmaXJzdC1jaGlsZCB7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gIH1cclxufVxyXG5cclxuLmJnLWxpZ2h0IHtcclxuICBvcGFjaXR5OiAwLjg7XHJcbiAgXHJcbiAgaS5iaS1ncmFwaC11cCB7XHJcbiAgICBvcGFjaXR5OiAwLjU7XHJcbiAgfVxyXG59XHJcblxyXG4uZm9ybS1jaGVjayB7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIFxyXG4gIC5mb3JtLWNoZWNrLWlucHV0LCAuZm9ybS1jaGVjay1sYWJlbCB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBBZGQgc29tZSBhbmltYXRpb24gZWZmZWN0c1xyXG5Aa2V5ZnJhbWVzIGZhZGVJbiB7XHJcbiAgZnJvbSB7IG9wYWNpdHk6IDA7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMHB4KTsgfVxyXG4gIHRvIHsgb3BhY2l0eTogMTsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyB9XHJcbn1cclxuXHJcbi5hbGVydCwgLmNhcmQge1xyXG4gIGFuaW1hdGlvbjogZmFkZUluIDAuM3MgZWFzZS1vdXQ7XHJcbn1cclxuXHJcbi8vIEN1c3RvbSBzdHlsaW5nIGZvciB0aGUgd29yayBpdGVtcyB0YWJsZVxyXG4udGFibGUtcmVzcG9uc2l2ZSB7XHJcbiAgbWF4LWhlaWdodDogNDUwcHg7XHJcbiAgb3ZlcmZsb3cteTogYXV0bztcclxufVxyXG5cclxuLnRhYmxlIHtcclxuICBmb250LXNpemU6IDAuOXJlbTtcclxuICBcclxuICB0aGVhZCB7XHJcbiAgICBwb3NpdGlvbjogc3RpY2t5O1xyXG4gICAgdG9wOiAwO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICBcclxuICAgIHRoIHtcclxuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGJvZHkgdHIge1xyXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjJzO1xyXG4gICAgXHJcbiAgICAmOmhvdmVyIHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAxMjMsIDI1NSwgMC4xKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgJi50YWJsZS1wcmltYXJ5IHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAxMjMsIDI1NSwgMC4xNSk7XHJcbiAgICAgIFxyXG4gICAgICAmOmhvdmVyIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAuYmFkZ2Uge1xyXG4gICAgZm9udC1zaXplOiAwLjc1cmVtO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQ3VzdG9tIGZvcm0gc3R5bGluZ1xyXG4uZm9ybS1zZWxlY3QsIC5mb3JtLWNvbnRyb2wge1xyXG4gICYubmctdG91Y2hlZC5uZy12YWxpZCB7XHJcbiAgICBib3JkZXItY29sb3I6ICMyOGE3NDU7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBJbXByb3ZlIHJhZGlvIGJ1dHRvbnMgdmlzaWJpbGl0eVxyXG4uZm9ybS1jaGVjay1pbnB1dDpjaGVja2VkIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGQ2ZWZkO1xyXG4gIGJvcmRlci1jb2xvcjogIzBkNmVmZDtcclxufSAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","WorkItem","debounceTime","distinctUntilChanged","i0","TaskEstimationComponent","constructor","fb","estimationService","taskService","estimationForm","group","title","required","minLength","type","assignee","complexity","ngOnInit","loadTeamMembers","get","valueChanges","pipe","subscribe","length","autoPopulateFormFields","getTeamMembers","next","response","Array","isArray","console","warn","teamMembers","filter","m","displayName","map","log","error","err","workItems","matchingItem","find","item","toLowerCase","includes","selectedWorkItem","populateFormWithWorkItem","loadWorkItemsByIteration","manualIterationPath","trim","iterationError","loadingIterationItems","getTasks","items","processedItem","state","replace","fields","findMatchingTeamMember","assigneeName","exactMatch","member","caseInsensitiveMatch","containsMatch","nameParts","split","part","partialMatch","selectWorkItem","determineComplexity","assignedTo","assigneeObj","name","itemType","taskTypes","push","patchValue","estimationResult","calculateTimeEstimates","estimatedHours","getWorkItemType","priority","undefined","complexityFields","field","fieldValue","resetForm","reset","showResult","estimateTaskTime","invalid","Object","keys","controls","forEach","key","markAsTouched","loading","request","value","workItemId","id","parseInt","isNaN","additionalFields","iterationPath","includeHistory","estimateTaskTimeWithWorkHistory","result","devTimeHours","testTimeHours","devTimeEstimate","testTimeEstimate","totalEstimate","message","totalHours","devRatio","Math","round","formatConfidence","score","getConfidenceClass","getAssigneeName","getStateDisplay","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-estimation\\task-estimation.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { EstimationService, TaskEstimationRequest, TaskEstimationResponse } from '../../services/estimation.service';\r\nimport { TaskService } from '../../services/task.service';\r\nimport { WorkItem, TeamMember, WorkItemType } from '../../models/task.model';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\n\r\n// Extended WorkItem interface to include fields property\r\ninterface ExtendedWorkItem extends WorkItem {\r\n  fields?: {\r\n    'System.AssignedTo'?: string | { displayName: string; [key: string]: any };\r\n    'System.WorkItemType'?: string;\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-task-estimation',\r\n  templateUrl: './task-estimation.component.html',\r\n  styleUrls: ['./task-estimation.component.scss']\r\n})\r\nexport class TaskEstimationComponent implements OnInit {\r\n  estimationForm: FormGroup;\r\n  teamMembers: string[] = [];\r\n  \r\n  // Include all available work item types from the enum\r\n  taskTypes: string[] = [\r\n    'User Story',\r\n    'Task',\r\n    'Bug',\r\n    'Epic',\r\n    'Feature',\r\n    'Issue',\r\n    'Change Request',\r\n    'Documentation',\r\n    'Test',\r\n    'Research'\r\n  ];\r\n  \r\n  complexityLevels: string[] = [\r\n    'Low',\r\n    'Medium',\r\n    'High'\r\n  ];\r\n  \r\n  loading = false;\r\n  error: string | null = null;\r\n  estimationResult: TaskEstimationResponse | null = null;\r\n  showResult = false;\r\n\r\n  // New properties for iteration path functionality\r\n  manualIterationPath: string = ''; // Only use manual iteration path\r\n  workItems: ExtendedWorkItem[] = [];\r\n  loadingIterationItems: boolean = false;\r\n  iterationError: string | null = null;\r\n  selectedWorkItem: ExtendedWorkItem | null = null;\r\n  devTimeEstimate: number = 0;\r\n  testTimeEstimate: number = 0;\r\n  totalEstimate: number = 0;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private estimationService: EstimationService,\r\n    private taskService: TaskService\r\n  ) {\r\n    this.estimationForm = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(5)]],\r\n      type: ['Feature', Validators.required],\r\n      assignee: [''],\r\n      complexity: ['Medium', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Load team members\r\n    this.loadTeamMembers();\r\n\r\n    // Listen for title changes to auto-fill fields\r\n    this.estimationForm.get('title')?.valueChanges\r\n      .pipe(\r\n        debounceTime(300),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe(title => {\r\n        if (title && title.length > 5) {\r\n          this.autoPopulateFormFields(title);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Load team members with better error handling\r\n  loadTeamMembers(): void {\r\n    this.taskService.getTeamMembers().subscribe({\r\n      next: (response) => {\r\n        if (Array.isArray(response)) {\r\n          if (response.length === 0) {\r\n            console.warn('No team members returned from API');\r\n            return;\r\n          }\r\n          \r\n          if (typeof response[0] === 'string') {\r\n            // It's an array of strings\r\n            this.teamMembers = response as string[];\r\n          } else {\r\n            // It's an array of TeamMember objects\r\n            this.teamMembers = (response as TeamMember[])\r\n              .filter(m => m && m.displayName) // Filter out invalid entries\r\n              .map(m => m.displayName);\r\n          }\r\n          \r\n          console.log(`Loaded ${this.teamMembers.length} team members`);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading team members:', err);\r\n        this.error = 'Failed to load team members';\r\n      }\r\n    });\r\n  }\r\n\r\n  // Auto-populate form fields based on entered title\r\n  autoPopulateFormFields(title: string): void {\r\n    if (!this.workItems || this.workItems.length === 0) {\r\n      return; // No items to search through\r\n    }\r\n\r\n    // Find matching work item by title (full or partial match)\r\n    const matchingItem = this.workItems.find(item => \r\n      item.title.toLowerCase().includes(title.toLowerCase()) || \r\n      title.toLowerCase().includes(item.title.toLowerCase())\r\n    );\r\n\r\n    if (matchingItem) {\r\n      this.selectedWorkItem = matchingItem;\r\n      this.populateFormWithWorkItem(matchingItem);\r\n    }\r\n  }\r\n\r\n  // Load work items for the selected iteration path\r\n  loadWorkItemsByIteration(): void {\r\n    if (!this.manualIterationPath || this.manualIterationPath.trim() === '') {\r\n      this.iterationError = 'Please enter an iteration path';\r\n      return;\r\n    }\r\n\r\n    this.loadingIterationItems = true;\r\n    this.workItems = [];\r\n    this.selectedWorkItem = null;\r\n    this.iterationError = null;\r\n\r\n    this.taskService.getTasks(this.manualIterationPath.trim()).subscribe({\r\n      next: (items) => {\r\n        // Process items to clean up state information\r\n        this.workItems = items.map(item => {\r\n          // Process each item to ensure it has proper state\r\n          const processedItem = { ...item } as ExtendedWorkItem;\r\n          \r\n          // Fix state display - remove \"Unknown\" prefix if present\r\n          if (processedItem.state && processedItem.state.toLowerCase().includes('unknown')) {\r\n            processedItem.state = processedItem.state.replace(/unknown/i, '').trim();\r\n          }\r\n          \r\n          // Also check for state in fields\r\n          if (processedItem.fields && processedItem.fields['System.State']) {\r\n            let state = processedItem.fields['System.State'];\r\n            if (typeof state === 'string' && state.toLowerCase().includes('unknown')) {\r\n              state = state.replace(/unknown/i, '').trim();\r\n              processedItem.fields['System.State'] = state;\r\n            }\r\n            // If item has no state but has System.State, use it\r\n            if (!processedItem.state) {\r\n              processedItem.state = state;\r\n            }\r\n          }\r\n          \r\n          return processedItem;\r\n        });\r\n        \r\n        this.loadingIterationItems = false;\r\n        console.log(`Loaded ${this.workItems.length} work items for iteration ${this.manualIterationPath}`);\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading work items:', err);\r\n        this.iterationError = 'Failed to load work items for the specified iteration path';\r\n        this.loadingIterationItems = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Helper method to find the best matching team member for an assignee\r\n  findMatchingTeamMember(assigneeName: string): string {\r\n    if (!assigneeName || !this.teamMembers || this.teamMembers.length === 0) {\r\n      return '';\r\n    }\r\n    \r\n    // First try exact match\r\n    const exactMatch = this.teamMembers.find(member => member === assigneeName);\r\n    if (exactMatch) {\r\n      return exactMatch;\r\n    }\r\n    \r\n    // Then try case-insensitive exact match\r\n    const caseInsensitiveMatch = this.teamMembers.find(\r\n      member => member.toLowerCase() === assigneeName.toLowerCase()\r\n    );\r\n    if (caseInsensitiveMatch) {\r\n      return caseInsensitiveMatch;\r\n    }\r\n    \r\n    // Then try partial matches\r\n    const containsMatch = this.teamMembers.find(\r\n      member => member.toLowerCase().includes(assigneeName.toLowerCase()) ||\r\n               assigneeName.toLowerCase().includes(member.toLowerCase())\r\n    );\r\n    if (containsMatch) {\r\n      return containsMatch;\r\n    }\r\n    \r\n    // Check for common name parts - this helps with \"John Doe\" vs \"Doe, John\" format issues\r\n    const nameParts = assigneeName.toLowerCase().split(/[\\s,]+/).filter(part => part.length > 2);\r\n    if (nameParts.length > 0) {\r\n      for (const part of nameParts) {\r\n        const partialMatch = this.teamMembers.find(\r\n          member => member.toLowerCase().includes(part)\r\n        );\r\n        if (partialMatch) {\r\n          return partialMatch;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // If no match found, return the original name\r\n    return assigneeName;\r\n  }\r\n\r\n  // Select a work item for estimation\r\n  selectWorkItem(item: ExtendedWorkItem): void {\r\n    this.selectedWorkItem = item;\r\n    this.populateFormWithWorkItem(item);\r\n  }\r\n\r\n  // Populate the form with selected work item details\r\n  populateFormWithWorkItem(item: ExtendedWorkItem): void {\r\n    const complexity = this.determineComplexity(item);\r\n    \r\n    // Extract assignee name, trying 'System.AssignedTo' first\r\n    let assignee = '';\r\n    \r\n    // Check for fields property which might contain System.AssignedTo\r\n    if (item.fields && item.fields['System.AssignedTo']) {\r\n      const assignedTo = item.fields['System.AssignedTo'];\r\n      if (typeof assignedTo === 'string') {\r\n        assignee = assignedTo;\r\n      } else if (typeof assignedTo === 'object' && assignedTo !== null) {\r\n        // Try to get displayName property\r\n        if (assignedTo.displayName) {\r\n          assignee = assignedTo.displayName;\r\n        }\r\n      }\r\n    }\r\n    // Fallback to assignedTo property if System.AssignedTo is not available\r\n    else if (item.assignedTo) {\r\n      if (typeof item.assignedTo === 'string') {\r\n        assignee = item.assignedTo;\r\n      } else if (typeof item.assignedTo === 'object' && item.assignedTo !== null) {\r\n        const assigneeObj = item.assignedTo as any;\r\n        if (assigneeObj.displayName) {\r\n          assignee = assigneeObj.displayName;\r\n        } else if (assigneeObj.name) {\r\n          assignee = assigneeObj.name;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // If we have an assignee name, find the matching team member\r\n    if (assignee) {\r\n      assignee = this.findMatchingTeamMember(assignee);\r\n      console.log(`Found matching team member for '${assignee}'`);\r\n    }\r\n    \r\n    // Ensure the assignee exists in the teamMembers array\r\n    if (assignee && this.teamMembers.length > 0 && !this.teamMembers.includes(assignee)) {\r\n      // Try to find an exact or close match in teamMembers\r\n      const exactMatch = this.teamMembers.find(m => m === assignee);\r\n      if (exactMatch) {\r\n        assignee = exactMatch;\r\n      } else {\r\n        // Try to find a partial match\r\n        const partialMatch = this.teamMembers.find(m => \r\n          m.toLowerCase().includes(assignee.toLowerCase()) || \r\n          assignee.toLowerCase().includes(m.toLowerCase())\r\n        );\r\n        if (partialMatch) {\r\n          assignee = partialMatch;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Get type, trying both System.WorkItemType and type property\r\n    let itemType = '';\r\n    \r\n    // First try to get from Azure DevOps fields\r\n    if (item.fields) {\r\n      if (item.fields['System.WorkItemType']) {\r\n        itemType = item.fields['System.WorkItemType'];\r\n      }\r\n    }\r\n    \r\n    // If not found, fallback to type property\r\n    if (!itemType && item.type) {\r\n      itemType = item.type;\r\n    }\r\n    \r\n    // If still not found, try to determine from title\r\n    if (!itemType) {\r\n      const title = item.title.toLowerCase();\r\n      if (title.includes('bug') || title.includes('fix') || title.includes('issue')) {\r\n        itemType = 'Bug';\r\n      } else if (title.includes('feature') || title.includes('implement') || title.includes('add new')) {\r\n        itemType = 'Feature';\r\n      } else if (title.includes('change') || title.includes('modify') || title.includes('update')) {\r\n        itemType = 'Change Request';\r\n      } else if (title.includes('requirement') || title.includes('must have')) {\r\n        itemType = 'Requirement';\r\n      } else {\r\n        // Default to Feature\r\n        itemType = 'Feature';\r\n      }\r\n    }\r\n    \r\n    // Ensure the type is available in our task types list\r\n    if (itemType && !this.taskTypes.includes(itemType)) {\r\n      // Add to taskTypes if not already there\r\n      this.taskTypes.push(itemType);\r\n    }\r\n    \r\n    // Update form with extracted values\r\n    this.estimationForm.patchValue({\r\n      title: item.title,\r\n      type: itemType,\r\n      assignee: assignee,\r\n      complexity: complexity\r\n    });\r\n\r\n    console.log(`Populated form with: Type=${itemType}, Assignee=${assignee}, Complexity=${complexity}`);\r\n\r\n    // Pre-calculate estimates based on historical data if we have this information\r\n    if (this.estimationResult) {\r\n      this.calculateTimeEstimates(this.estimationResult.estimatedHours);\r\n    }\r\n  }\r\n\r\n  // Determine complexity based on work item properties with enhanced logic\r\n  determineComplexity(item: ExtendedWorkItem): string {\r\n    // Initialize with default complexity\r\n    let complexity = 'Medium';\r\n    \r\n    // Try to determine from title keywords\r\n    const title = item.title.toLowerCase();\r\n    if (title.includes('critical') || title.includes('urgent') || title.includes('major') || \r\n        title.includes('performance issue') || title.includes('security')) {\r\n      return 'High';\r\n    }\r\n    \r\n    if (title.includes('minor') || title.includes('small') || title.includes('trivial') || \r\n        title.includes('documentation') || title.includes('typo')) {\r\n      return 'Low';\r\n    }\r\n    \r\n    // Determine from type\r\n    const itemType = this.getWorkItemType(item);\r\n    if (itemType === 'Bug' || itemType === 'Change Request' || itemType === 'Feature') {\r\n      // Bugs and change requests tend to be more complex\r\n      complexity = 'Medium';\r\n      \r\n      // For bugs, increase complexity\r\n      if (itemType === 'Bug') {\r\n        complexity = 'High';\r\n      }\r\n    }\r\n    \r\n    // Determine from priority if available\r\n    if (item.priority !== undefined) {\r\n      if (item.priority <= 1) {\r\n        complexity = 'High';\r\n      } else if (item.priority === 2) {\r\n        complexity = 'Medium';\r\n      } else {\r\n        complexity = 'Low';\r\n      }\r\n    }\r\n    \r\n    // Check for complexity field if available in Azure DevOps fields\r\n    if (item.fields) {\r\n      // Different systems use different field names for complexity/effort\r\n      const complexityFields = [\r\n        'Microsoft.VSTS.Common.Complexity',\r\n        'Microsoft.VSTS.Scheduling.Effort',\r\n        'Custom.Complexity',\r\n        'System.Complexity'\r\n      ];\r\n      \r\n      for (const field of complexityFields) {\r\n        if (item.fields[field]) {\r\n          const fieldValue = item.fields[field];\r\n          if (typeof fieldValue === 'string') {\r\n            if (fieldValue.includes('High') || fieldValue.includes('1')) {\r\n              return 'High';\r\n            } else if (fieldValue.includes('Low') || fieldValue.includes('3')) {\r\n              return 'Low';\r\n            }\r\n          } else if (typeof fieldValue === 'number') {\r\n            if (fieldValue <= 1) {\r\n              return 'High';\r\n            } else if (fieldValue >= 3) {\r\n              return 'Low';\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return complexity;\r\n  }\r\n\r\n  // Helper method to get work item type consistently\r\n  getWorkItemType(item: ExtendedWorkItem): string {\r\n    // Try to get from System.WorkItemType first\r\n    if (item.fields && item.fields['System.WorkItemType']) {\r\n      return item.fields['System.WorkItemType'];\r\n    }\r\n    \r\n    // Fallback to type property\r\n    return item.type || 'Feature';\r\n  }\r\n\r\n  resetForm(): void {\r\n    this.estimationForm.reset({\r\n      type: 'Feature',\r\n      complexity: 'Medium'\r\n    });\r\n    this.error = null;\r\n    this.showResult = false;\r\n    this.estimationResult = null;\r\n  }\r\n\r\n  estimateTaskTime(): void {\r\n    if (this.estimationForm.invalid) {\r\n      // Mark all fields as touched to trigger validation messages\r\n      Object.keys(this.estimationForm.controls).forEach(key => {\r\n        this.estimationForm.get(key)?.markAsTouched();\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.error = null;\r\n    this.estimationResult = null;\r\n    this.showResult = false;\r\n\r\n    const request: TaskEstimationRequest = {\r\n      title: this.estimationForm.value.title,\r\n      type: this.estimationForm.value.type,\r\n      assignee: this.estimationForm.value.assignee,\r\n      complexity: this.estimationForm.value.complexity\r\n    };\r\n\r\n    // Add work item ID if we have a selected work item\r\n    if (this.selectedWorkItem) {\r\n      // Convert to number if it's a string, or use as is if it's already a number\r\n      const workItemId = typeof this.selectedWorkItem.id === 'string' \r\n        ? parseInt(this.selectedWorkItem.id, 10) \r\n        : this.selectedWorkItem.id;\r\n        \r\n      if (!isNaN(workItemId)) {\r\n        request.workItemId = workItemId;\r\n      }\r\n      \r\n      // Add fields data if available to provide more context for estimation\r\n      if (this.selectedWorkItem.fields) {\r\n        request.additionalFields = this.selectedWorkItem.fields;\r\n      }\r\n      \r\n      // Include iteration path for historical context\r\n      if (this.selectedWorkItem.iterationPath) {\r\n        request.iterationPath = this.selectedWorkItem.iterationPath;\r\n      }\r\n    }\r\n\r\n    // Use iteration path if available, either from the work item or manual entry\r\n    const iterationPath = (this.selectedWorkItem && this.selectedWorkItem.iterationPath) || this.manualIterationPath;\r\n    \r\n    if (iterationPath) {\r\n      request.includeHistory = true; // Signal to include work history analysis\r\n      \r\n      this.estimationService.estimateTaskTimeWithWorkHistory(request, iterationPath).subscribe({\r\n        next: (result) => {\r\n          this.estimationResult = result;\r\n          this.showResult = true;\r\n          this.loading = false;\r\n          \r\n          // If result includes dev and test time estimates, use them directly\r\n          if (result.devTimeHours && result.testTimeHours) {\r\n            this.devTimeEstimate = result.devTimeHours;\r\n            this.testTimeEstimate = result.testTimeHours;\r\n            this.totalEstimate = result.estimatedHours;\r\n          } else {\r\n            // Otherwise calculate them based on our algorithm\r\n            this.calculateTimeEstimates(result.estimatedHours);\r\n          }\r\n        },\r\n        error: (err) => {\r\n          this.error = err.message || 'An error occurred during estimation';\r\n          this.loading = false;\r\n        }\r\n      });\r\n    } else {\r\n      // Standard estimation without work history\r\n      this.estimationService.estimateTaskTime(request).subscribe({\r\n        next: (result) => {\r\n          this.estimationResult = result;\r\n          this.showResult = true;\r\n          this.loading = false;\r\n          \r\n          // Calculate dev and test time estimates\r\n          this.calculateTimeEstimates(result.estimatedHours);\r\n        },\r\n        error: (err) => {\r\n          this.error = err.message || 'An error occurred during estimation';\r\n          this.loading = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Calculate development and testing time estimates\r\n  calculateTimeEstimates(totalHours: number): void {\r\n    // Typical distribution: dev 60-70%, testing 30-40%\r\n    const complexity = this.estimationForm.value.complexity;\r\n    let devRatio = 0.65; // Default dev ratio\r\n    \r\n    // Adjust ratio based on complexity\r\n    if (complexity === 'High') {\r\n      devRatio = 0.7; // Higher complexity = more dev time\r\n    } else if (complexity === 'Low') {\r\n      devRatio = 0.6; // Lower complexity = less dev time\r\n    }\r\n    \r\n    this.devTimeEstimate = Math.round(totalHours * devRatio * 10) / 10;\r\n    this.testTimeEstimate = Math.round((totalHours - this.devTimeEstimate) * 10) / 10;\r\n    this.totalEstimate = totalHours;\r\n  }\r\n\r\n  // Format confidence score as percentage\r\n  formatConfidence(score: number): string {\r\n    return `${Math.round(score * 100)}%`;\r\n  }\r\n\r\n  // Get appropriate class for confidence level\r\n  getConfidenceClass(score: number): string {\r\n    if (score >= 0.8) {\r\n      return 'bg-success';\r\n    } else if (score >= 0.6) {\r\n      return 'bg-primary';\r\n    } else if (score >= 0.4) {\r\n      return 'bg-warning';\r\n    } else {\r\n      return 'bg-danger';\r\n    }\r\n  }\r\n\r\n  // Get assignee name for display\r\n  getAssigneeName(item: ExtendedWorkItem): string {\r\n    let displayName = '';\r\n    \r\n    // Try to get from System.AssignedTo first\r\n    if (item.fields && item.fields['System.AssignedTo']) {\r\n      const assignedTo = item.fields['System.AssignedTo'];\r\n      if (typeof assignedTo === 'string') {\r\n        displayName = assignedTo;\r\n      } else if (typeof assignedTo === 'object' && assignedTo !== null) {\r\n        if (assignedTo.displayName) {\r\n          displayName = assignedTo.displayName;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Fallback to assignedTo property\r\n    if (!displayName && item.assignedTo) {\r\n      if (typeof item.assignedTo === 'string') {\r\n        displayName = item.assignedTo;\r\n      } else if (typeof item.assignedTo === 'object' && item.assignedTo !== null) {\r\n        const assigneeObj = item.assignedTo as any;\r\n        displayName = assigneeObj.displayName || assigneeObj.name || '';\r\n      }\r\n    }\r\n    \r\n    // Find matching team member for consistent display\r\n    if (displayName) {\r\n      return this.findMatchingTeamMember(displayName);\r\n    }\r\n    \r\n    return '';\r\n  }\r\n\r\n  // Get the clean state display for a work item\r\n  getStateDisplay(item: ExtendedWorkItem): string {\r\n    // First check fields for System.State\r\n    if (item.fields && item.fields['System.State']) {\r\n      const state = item.fields['System.State'];\r\n      if (typeof state === 'string') {\r\n        // Remove \"Unknown\" prefix if present\r\n        return state.replace(/unknown/i, '').trim();\r\n      }\r\n    }\r\n    \r\n    // Fallback to item.state if available\r\n    if (item.state) {\r\n      return item.state.replace(/unknown/i, '').trim();\r\n    }\r\n    \r\n    return ''; // Default if no state available\r\n  }\r\n} ","<div class=\"container-fluid p-4\">\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <h2 class=\"mb-0\">ML-Based Task Estimation</h2>\r\n      <p class=\"text-muted mt-2\">Estimate task duration using machine learning predictions based on historical data</p>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Iteration Path Selection -->\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"card-title mb-0\">Enter Iteration Path</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row g-3 align-items-center\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"input-group\">\r\n                <label class=\"input-group-text\" for=\"manualIterationPath\">Iteration Path</label>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"manualIterationPath\" \r\n                  [(ngModel)]=\"manualIterationPath\"\r\n                  placeholder=\"Enter iteration path (e.g. Techoil\\2.3.23)\" \r\n                  aria-label=\"Manual Iteration Path\">\r\n                <button \r\n                  class=\"btn btn-outline-primary\" \r\n                  type=\"button\" \r\n                  (click)=\"loadWorkItemsByIteration()\"\r\n                  [disabled]=\"!manualIterationPath\">\r\n                  <i class=\"bi bi-search\"></i> Load Items\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"iterationError\" class=\"text-danger mt-2\">\r\n                <small>{{ iterationError }}</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <!-- Work Items List -->\r\n    <div class=\"col-md-6\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n          <h4 class=\"card-title mb-0\">Work Items</h4>\r\n          <span *ngIf=\"workItems.length > 0\" class=\"badge bg-primary\">{{ workItems.length }} items</span>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <!-- Loading indicator -->\r\n          <div *ngIf=\"loadingIterationItems\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading work items...</span>\r\n            </div>\r\n            <p class=\"mt-2 text-muted\">Loading work items...</p>\r\n          </div>\r\n          \r\n          <!-- No items message -->\r\n          <div *ngIf=\"!loadingIterationItems && workItems.length === 0 && !iterationError\" class=\"text-center py-4\">\r\n            <p class=\"text-muted\">No work items found. Please select an iteration path and click \"Load Items\".</p>\r\n          </div>\r\n          \r\n          <!-- Work items table -->\r\n          <div *ngIf=\"!loadingIterationItems && workItems.length > 0\" class=\"table-responsive\">\r\n            <table class=\"table table-hover table-striped\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">ID</th>\r\n                  <th scope=\"col\">Type</th>\r\n                  <th scope=\"col\">Title</th>\r\n                  <th scope=\"col\">Assignee</th>\r\n                  <th scope=\"col\">State</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let item of workItems\" \r\n                    [class.table-primary]=\"selectedWorkItem?.id === item.id\"\r\n                    (click)=\"selectWorkItem(item)\"\r\n                    style=\"cursor: pointer;\">\r\n                  <td class=\"fw-bold\">#{{ item.id }}</td>\r\n                  <td>\r\n                    <span class=\"badge rounded-pill\" [ngClass]=\"{\r\n                      'bg-danger': item.type === 'Bug' || (item.fields && item.fields['System.WorkItemType'] === 'Bug'),\r\n                      'bg-primary': item.type === 'Feature' || (item.fields && item.fields['System.WorkItemType'] === 'Feature'),\r\n                      'bg-warning': item.type === 'Change Request' || (item.fields && item.fields['System.WorkItemType'] === 'Change Request'),\r\n                      'bg-info': item.type === 'Test' || (item.fields && item.fields['System.WorkItemType'] === 'Test'),\r\n                      'bg-success': item.type === 'Requirement' || (item.fields && item.fields['System.WorkItemType'] === 'Requirement'),\r\n                      'bg-dark text-light': item.type === 'User Story' || (item.fields && item.fields['System.WorkItemType'] === 'User Story'),\r\n                      'bg-secondary': !item.type && (!item.fields || !item.fields['System.WorkItemType'])\r\n                    }\">{{ (item.fields && item.fields['System.WorkItemType']) || item.type || 'Task' }}</span>\r\n                  </td>\r\n                  <td>{{ item.title }}</td>\r\n                  <td><small><i class=\"bi bi-person me-1\"></i>{{ getAssigneeName(item) || 'Unassigned' }}</small></td>\r\n                  <td><span class=\"badge bg-secondary\">{{ getStateDisplay(item) || 'N/A' }}</span></td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Task Estimation Form -->\r\n    <div class=\"col-md-6\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"card-title mb-0\">\r\n            <span *ngIf=\"selectedWorkItem\">Task #{{ selectedWorkItem.id }} Details</span>\r\n            <span *ngIf=\"!selectedWorkItem\">Task Details</span>\r\n          </h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <form [formGroup]=\"estimationForm\" (ngSubmit)=\"estimateTaskTime()\">\r\n            <!-- Task Title -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"taskTitle\" class=\"form-label\">Task Title</label>\r\n              <div class=\"input-group\">\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"taskTitle\" \r\n                  formControlName=\"title\"\r\n                  placeholder=\"Enter or select task title\"\r\n                  [ngClass]=\"{'is-valid': selectedWorkItem !== null}\">\r\n                <button \r\n                  *ngIf=\"estimationForm.get('title')?.value\"\r\n                  class=\"btn btn-outline-secondary\" \r\n                  type=\"button\"\r\n                  (click)=\"resetForm()\">\r\n                  <i class=\"bi bi-x-lg\"></i>\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"estimationForm.get('title')?.invalid && estimationForm.get('title')?.touched\" class=\"text-danger mt-1\">\r\n                <small *ngIf=\"estimationForm.get('title')?.errors?.['required']\">Title is required</small>\r\n                <small *ngIf=\"estimationForm.get('title')?.errors?.['minlength']\">Title must be at least 5 characters</small>\r\n              </div>\r\n              <div *ngIf=\"selectedWorkItem\" class=\"text-success mt-1\">\r\n                <small>Found matching work item #{{ selectedWorkItem.id }}</small>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <!-- Task Type -->\r\n                <div class=\"mb-3\">\r\n                  <label for=\"taskType\" class=\"form-label\">Task Type</label>\r\n                  <select class=\"form-select\" id=\"taskType\" formControlName=\"type\">\r\n                    <option *ngFor=\"let type of taskTypes\" [value]=\"type\">{{ type }}</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"col-md-6\">\r\n                <!-- Assignee -->\r\n                <div class=\"mb-3\">\r\n                  <label for=\"assignee\" class=\"form-label\">Assignee</label>\r\n                  <select class=\"form-select\" id=\"assignee\" formControlName=\"assignee\">\r\n                    <option value=\"\">-- Unassigned --</option>\r\n                    <option *ngFor=\"let member of teamMembers\" [value]=\"member\">{{ member }}</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Complexity -->\r\n            <div class=\"mb-3\">\r\n              <label class=\"form-label\">Complexity</label>\r\n              <div class=\"d-flex\">\r\n                <div class=\"form-check me-3\" *ngFor=\"let level of complexityLevels\">\r\n                  <input \r\n                    class=\"form-check-input\" \r\n                    type=\"radio\" \r\n                    [id]=\"'complexity-' + level.toLowerCase()\" \r\n                    [value]=\"level\" \r\n                    formControlName=\"complexity\">\r\n                  <label class=\"form-check-label\" [for]=\"'complexity-' + level.toLowerCase()\">\r\n                    {{ level }}\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"selectedWorkItem\" class=\"text-muted mt-1\">\r\n                <small><i class=\"bi bi-info-circle\"></i> Complexity automatically predicted based on work item attributes</small>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Action Buttons -->\r\n            <div class=\"d-flex justify-content-between mt-4\">\r\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"resetForm()\">\r\n                <i class=\"bi bi-arrow-counterclockwise\"></i> Reset\r\n              </button>\r\n              <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loading\">\r\n                <span *ngIf=\"!loading\">\r\n                  <i class=\"bi bi-stopwatch\"></i> Estimate Time\r\n                </span>\r\n                <span *ngIf=\"loading\">\r\n                  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                  Estimating...\r\n                </span>\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row mt-4\">\r\n    <div class=\"col-md-12\">\r\n      <!-- Error Display -->\r\n      <div *ngIf=\"error\" class=\"alert alert-danger mb-4\">\r\n        {{ error }}\r\n      </div>\r\n\r\n      <!-- Estimation Results -->\r\n      <div *ngIf=\"showResult && estimationResult\" class=\"card\">\r\n        <div class=\"card-header bg-primary text-white\">\r\n          <h4 class=\"card-title mb-0\">Estimation Results</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"mb-4 text-center\">\r\n                <h2 class=\"display-4 mb-0\">{{ estimationResult.estimatedHours }} hours</h2>\r\n                <p class=\"text-muted\">Total estimated time</p>\r\n              </div>\r\n\r\n              <div class=\"row text-center mb-4\">\r\n                <div class=\"col-6\">\r\n                  <div class=\"p-3 bg-light rounded\">\r\n                    <h3 class=\"mb-0\">{{ devTimeEstimate }}</h3>\r\n                    <p class=\"text-muted mb-0\">Development Time</p>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-6\">\r\n                  <div class=\"p-3 bg-light rounded\">\r\n                    <h3 class=\"mb-0\">{{ testTimeEstimate }}</h3>\r\n                    <p class=\"text-muted mb-0\">Testing Time</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"mb-4\">\r\n                <h5>Prediction Confidence</h5>\r\n                <div class=\"progress\">\r\n                  <div \r\n                    class=\"progress-bar\" \r\n                    [ngClass]=\"getConfidenceClass(estimationResult.confidenceScore)\"\r\n                    [style.width.%]=\"estimationResult.confidenceScore * 100\" \r\n                    role=\"progressbar\" \r\n                    [attr.aria-valuenow]=\"estimationResult.confidenceScore * 100\" \r\n                    aria-valuemin=\"0\" \r\n                    aria-valuemax=\"100\">\r\n                    {{ formatConfidence(estimationResult.confidenceScore) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <h5>Factors Considered</h5>\r\n              <ul class=\"list-group\">\r\n                <li class=\"list-group-item\" *ngFor=\"let factor of estimationResult.factors\">\r\n                  {{ factor }}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-footer text-muted small\">\r\n          <i class=\"bi bi-info-circle\"></i> These estimates are based on machine learning models analyzing historical task data.\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Placeholder when no result is shown -->\r\n      <div *ngIf=\"!showResult && !error\" class=\"card bg-light\">\r\n        <div class=\"card-body text-center p-5\">\r\n          <i class=\"bi bi-graph-up display-1 text-muted\"></i>\r\n          <h4 class=\"mt-3\">Task Time Prediction</h4>\r\n          <p class=\"text-muted\">Fill in the task details and click \"Estimate Time\" to get an ML-based time estimate</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}