{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TeamService = /*#__PURE__*/(() => {\n  class TeamService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiUrl}/work-items/team-members`;\n    }\n    /**\r\n     * Fetches all team members from the API\r\n     * @returns Observable of TeamMember array\r\n     */\n    getTeamMembers() {\n      return this.http.get(this.apiUrl).pipe(retry(1),\n      // Retry once on failure\n      catchError(this.handleError), map(response => this.processTeamMembersResponse(response)));\n    }\n    /**\r\n     * Handles HTTP errors and returns a user-friendly error message\r\n     * @param error The HTTP error response\r\n     * @returns An observable that errors with a user-friendly message\r\n     */\n    handleError(error) {\n      let errorMessage = 'An unknown error occurred while fetching team members';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        errorMessage = `Server returned code ${error.status}: ${error.statusText}`;\n        if (error.error?.message) {\n          errorMessage += ` - ${error.error.message}`;\n        }\n      }\n      console.error(errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    /**\r\n     * Processes the API response to ensure it conforms to the expected structure\r\n     * @param response The raw API response\r\n     * @returns An array of properly formatted TeamMember objects\r\n     */\n    processTeamMembersResponse(response) {\n      if (!Array.isArray(response)) {\n        console.warn('Unexpected response format for team members:', response);\n        return [];\n      }\n      return response.map(member => ({\n        id: member.id || '',\n        displayName: member.displayName || 'Unknown User',\n        uniqueName: member.uniqueName || '',\n        imageUrl: member.imageUrl || undefined,\n        // Add missing properties with default values\n        currentWorkload: member.currentWorkload || 0,\n        isActive: member.isActive !== undefined ? member.isActive : true,\n        email: member.email || member.uniqueName || ''\n      }));\n    }\n    static {\n      this.ɵfac = function TeamService_Factory(t) {\n        return new (t || TeamService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: TeamService,\n        factory: TeamService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return TeamService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}