{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, finalize, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/dashboard.service\";\nimport * as i2 from \"../../services/azure-devops.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"stateDistributionChart\"];\nconst _c1 = [\"iterationDistributionChart\"];\nconst _c2 = [\"statusPieChart\"];\nfunction DashboardComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"span\", 31);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.error.sprint, \" \");\n  }\n}\nfunction DashboardComponent_div_19_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 39)(1, \"div\", 40)(2, \"span\");\n    i0.ɵɵtext(3, \"Sprint Progress\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"number\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 41);\n    i0.ɵɵelement(8, \"div\", 42);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(6, 4, ctx_r14.sprintSummary.completionPercentage, \"1.0-0\"), \"%\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r14.sprintSummary.completionPercentage, \"%\");\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r14.sprintSummary.completionPercentage);\n  }\n}\nfunction DashboardComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 33);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 34)(4, \"div\")(5, \"p\", 35);\n    i0.ɵɵtext(6, \"Start Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\", 36);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\")(11, \"p\", 35);\n    i0.ɵɵtext(12, \"End Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\", 36);\n    i0.ɵɵtext(14);\n    i0.ɵɵpipe(15, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\")(17, \"p\", 35);\n    i0.ɵɵtext(18, \"Days Remaining\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p\", 37);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(21, DashboardComponent_div_19_div_21_Template, 9, 7, \"div\", 38);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.sprintOverview.sprintName);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 5, ctx_r2.sprintOverview.startDate, \"mediumDate\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(15, 8, ctx_r2.sprintOverview.endDate, \"mediumDate\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r2.sprintOverview.daysRemaining);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.sprintSummary);\n  }\n}\nfunction DashboardComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"p\", 43);\n    i0.ɵɵtext(2, \"Ask me anything about your project or tasks.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 44);\n    i0.ɵɵtext(4, \"Examples:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ul\", 45)(6, \"li\");\n    i0.ɵɵtext(7, \"How many tasks are in the current sprint?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"li\");\n    i0.ɵɵtext(9, \"Show me tasks assigned to John\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"li\");\n    i0.ɵɵtext(11, \"Assign task #1234 to Sarah\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c3 = function (a0, a1) {\n  return {\n    \"user-message\": a0,\n    \"assistant-message\": a1\n  };\n};\nfunction DashboardComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46)(1, \"div\", 47)(2, \"div\", 48);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 49);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const msg_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c3, msg_r15.role === \"user\", msg_r15.role === \"assistant\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(msg_r15.content);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 3, msg_r15.timestamp, \"shortTime\"));\n  }\n}\nfunction DashboardComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"span\", 31);\n    i0.ɵɵtext(3, \"Loading work items...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 50);\n    i0.ɵɵtext(5, \"Fetching data from Azure DevOps...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.error.summary || ctx_r6.azureDevOpsError, \" \");\n  }\n}\nfunction DashboardComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"div\", 52)(2, \"div\", 53)(3, \"div\", 13)(4, \"h5\", 54);\n    i0.ɵɵtext(5, \"Total Tasks\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"h2\", 55);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(8, \"div\", 52)(9, \"div\", 56)(10, \"div\", 13)(11, \"h5\", 54);\n    i0.ɵɵtext(12, \"In Progress\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"h2\", 55);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(15, \"div\", 52)(16, \"div\", 57)(17, \"div\", 13)(18, \"h5\", 54);\n    i0.ɵɵtext(19, \"Completed\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"h2\", 55);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(22, \"div\", 52)(23, \"div\", 58)(24, \"div\", 13)(25, \"h5\", 54);\n    i0.ɵɵtext(26, \"Blocked\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"h2\", 55);\n    i0.ɵɵtext(28);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r7.workItemCounts.totalTasks || (ctx_r7.sprintSummary == null ? null : ctx_r7.sprintSummary.totalTasks) || 0);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r7.workItemCounts.inProgress || (ctx_r7.sprintSummary == null ? null : ctx_r7.sprintSummary.inProgress) || 0);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r7.workItemCounts.completed || (ctx_r7.sprintSummary == null ? null : ctx_r7.sprintSummary.completed) || 0);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r7.workItemCounts.blocked || (ctx_r7.sprintSummary == null ? null : ctx_r7.sprintSummary.blocked) || 0);\n  }\n}\nfunction DashboardComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"span\", 31);\n    i0.ɵɵtext(3, \"Loading status data...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"canvas\", null, 59);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r10.azureDevOpsError, \" \");\n  }\n}\nfunction DashboardComponent_div_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"span\", 31);\n    i0.ɵɵtext(3, \"Loading assignee data...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_55_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"p\", 43);\n    i0.ɵɵtext(2, \"No assignee data available\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_div_55_div_2_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 75);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const assignee_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Dev-New: \", assignee_r19.devNew, \" \");\n  }\n}\nfunction DashboardComponent_div_55_div_2_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 76);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const assignee_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" In Progress: \", assignee_r19.inProgress, \" \");\n  }\n}\nfunction DashboardComponent_div_55_div_2_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 77);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const assignee_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Code Review: \", assignee_r19.codeReview, \" \");\n  }\n}\nfunction DashboardComponent_div_55_div_2_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 78);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const assignee_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Dev Complete: \", assignee_r19.devComplete, \" \");\n  }\n}\nfunction DashboardComponent_div_55_div_2_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 78);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const assignee_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Completed: \", assignee_r19.completed, \" \");\n  }\n}\nfunction DashboardComponent_div_55_div_2_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 79);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const assignee_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Blocked: \", assignee_r19.blocked, \" \");\n  }\n}\nfunction DashboardComponent_div_55_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 61)(1, \"div\", 62)(2, \"h6\", 5);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 63);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 64);\n    i0.ɵɵtemplate(7, DashboardComponent_div_55_div_2_div_7_Template, 2, 1, \"div\", 65);\n    i0.ɵɵtemplate(8, DashboardComponent_div_55_div_2_div_8_Template, 2, 1, \"div\", 66);\n    i0.ɵɵtemplate(9, DashboardComponent_div_55_div_2_div_9_Template, 2, 1, \"div\", 67);\n    i0.ɵɵtemplate(10, DashboardComponent_div_55_div_2_div_10_Template, 2, 1, \"div\", 68);\n    i0.ɵɵtemplate(11, DashboardComponent_div_55_div_2_div_11_Template, 2, 1, \"div\", 68);\n    i0.ɵɵtemplate(12, DashboardComponent_div_55_div_2_div_12_Template, 2, 1, \"div\", 69);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 70);\n    i0.ɵɵelement(14, \"div\", 71)(15, \"div\", 72)(16, \"div\", 73)(17, \"div\", 74);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const assignee_r19 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(assignee_r19.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", assignee_r19.total, \" tasks\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", assignee_r19.devNew > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", assignee_r19.inProgress > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", assignee_r19.codeReview > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", assignee_r19.devComplete > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", assignee_r19.completed > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", assignee_r19.blocked > 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", assignee_r19.inProgress / assignee_r19.total * 100, \"%\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", assignee_r19.codeReview / assignee_r19.total * 100, \"%\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", (assignee_r19.devComplete + assignee_r19.completed) / assignee_r19.total * 100, \"%\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", assignee_r19.blocked / assignee_r19.total * 100, \"%\");\n  }\n}\nfunction DashboardComponent_div_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, DashboardComponent_div_55_div_1_Template, 3, 0, \"div\", 14);\n    i0.ɵɵtemplate(2, DashboardComponent_div_55_div_2_Template, 18, 16, \"div\", 60);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.getAssigneeDistribution().length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r12.getAssigneeDistribution());\n  }\n}\nfunction DashboardComponent_div_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r13.azureDevOpsError, \" \");\n  }\n}\nexport class DashboardComponent {\n  constructor(dashboardService, azureDevOpsService) {\n    this.dashboardService = dashboardService;\n    this.azureDevOpsService = azureDevOpsService;\n    this.sprintOverview = null;\n    this.sprintSummary = null;\n    this.activityFeed = null;\n    this.dailyTip = '';\n    this.workItemDistribution = null;\n    this.stateDistributions = [];\n    this.longTermDevNewItems = [];\n    this.supportItems = [];\n    this.aiTips = null;\n    // Define state colors for consistency\n    this.stateColors = {\n      'Proposed': '#e6e6e6',\n      'New': '#b4d7a8',\n      'Dev-New': '#b4d7a8',\n      'Active': '#4a86e8',\n      'Dev-WIP': '#4a86e8',\n      'In Progress': '#4a86e8',\n      'Resolved': '#ffd966',\n      'Code Review': '#9fc5e8',\n      'QA': '#d5a6bd',\n      'Testing': '#d5a6bd',\n      'Done': '#93c47d',\n      'Closed': '#6aa84f',\n      'Completed': '#6aa84f',\n      'Blocked': '#e06666',\n      'Removed': '#999999'\n    };\n    // Default chart colors if state not found in mapping\n    this.defaultChartColors = ['#4a86e8', '#6aa84f', '#ffd966', '#e06666', '#9fc5e8', '#d5a6bd', '#b4d7a8', '#e6e6e6', '#93c47d', '#6fa8dc'];\n    // Properties for the new task board\n    this.taskStatusBoard = [];\n    // Chat properties\n    this.chatMessages = [];\n    this.currentMessage = '';\n    // Define status colors based on Azure DevOps board from the image\n    this.statusColors = {\n      'PMG - Proposed': '#e0e0e0',\n      'DEV - Yet to Start': '#9a9a9a',\n      'DEV - WIP': '#0078d4',\n      'DEV - Code Review': '#324e93',\n      'DEV - Done': '#00b7c3',\n      'DEV/QC - Reopened': '#e81123',\n      'Clarifications': '#fff100',\n      'On Hold': '#e3008c',\n      'QC - In Test Bed': '#8764b8',\n      'Completed': '#107c10'\n    };\n    // Track loading and error states\n    this.loading = {\n      sprint: true,\n      summary: true,\n      activity: true,\n      tip: true,\n      distribution: true,\n      stateDistribution: true,\n      longTermDevNew: true,\n      supportItems: true,\n      aiTips: true,\n      taskStatusBoard: true\n    };\n    this.error = {\n      sprint: '',\n      summary: '',\n      activity: '',\n      tip: '',\n      distribution: '',\n      stateDistribution: '',\n      longTermDevNew: '',\n      supportItems: '',\n      aiTips: '',\n      taskStatusBoard: ''\n    };\n    // Starting with a default Iteration Path that can be changed\n    this.selectedIterationPath = 'Techoil\\\\2.3.23';\n    this.availableIterationPaths = ['Techoil\\\\2.3.23'];\n    // Work item status counts from Azure DevOps\n    this.azureDevOpsWorkItems = [];\n    this.workItemCounts = {\n      totalTasks: 0,\n      devNew: 0,\n      inProgress: 0,\n      codeReview: 0,\n      devComplete: 0,\n      completed: 0,\n      blocked: 0\n    };\n    // Assignee distribution data\n    this.assigneeDistribution = {};\n    // Loading and error states\n    this.loadingAzureDevOps = false;\n    this.azureDevOpsError = '';\n  }\n  ngOnInit() {\n    this.loadDashboardData();\n  }\n  ngAfterViewInit() {\n    // Charts will be initialized after data is loaded\n  }\n  loadDashboardData() {\n    this.loadSprintOverview();\n    this.loadAiTips();\n    this.loadTaskStatusBoard();\n  }\n  loadIterationData() {\n    // Validate iteration path\n    if (!this.selectedIterationPath) {\n      return;\n    }\n    // Trim whitespace and ensure consistent formatting\n    this.selectedIterationPath = this.selectedIterationPath.trim();\n    // Load data for the selected iteration\n    this.loadSprintSummary(this.selectedIterationPath);\n    this.loadTaskStatusBoard();\n    this.loadAzureDevOpsWorkItemsWithWiql();\n    // Update available paths if this is a new one\n    if (!this.availableIterationPaths.includes(this.selectedIterationPath)) {\n      this.availableIterationPaths.push(this.selectedIterationPath);\n    }\n  }\n  loadSprintOverview() {\n    this.loading.sprint = true;\n    this.dashboardService.getCurrentSprint().subscribe({\n      next: data => {\n        this.sprintOverview = data;\n        // Use hard-coded iteration path instead of data.iterationPath\n        // this.selectedIterationPath = data.iterationPath;\n        this.loading.sprint = false;\n        this.loadSprintSummary(this.selectedIterationPath);\n        this.loadActivityFeed();\n        this.loadWorkItemDistribution(this.selectedIterationPath);\n        this.loadStateDistributions();\n      },\n      error: err => {\n        this.error.sprint = 'Failed to load sprint data';\n        this.loading.sprint = false;\n        console.error('Error loading sprint data:', err);\n      }\n    });\n  }\n  loadSprintSummary(iterationPath) {\n    this.loading.summary = true;\n    this.dashboardService.getSprintSummary(iterationPath).subscribe({\n      next: data => {\n        this.sprintSummary = data;\n        this.loading.summary = false;\n      },\n      error: err => {\n        this.error.summary = 'Failed to load summary data';\n        this.loading.summary = false;\n        console.error('Error loading summary data:', err);\n      }\n    });\n  }\n  loadActivityFeed() {\n    this.loading.activity = true;\n    this.dashboardService.getActivityFeed().subscribe({\n      next: data => {\n        this.activityFeed = data;\n        this.loading.activity = false;\n      },\n      error: err => {\n        this.error.activity = 'Failed to load activity feed';\n        this.loading.activity = false;\n        console.error('Error loading activity feed:', err);\n      }\n    });\n  }\n  loadDailyTip() {\n    this.loading.tip = true;\n    this.dashboardService.getDailyTip().subscribe({\n      next: data => {\n        this.dailyTip = data.tip;\n        this.loading.tip = false;\n      },\n      error: err => {\n        this.error.tip = 'Failed to load daily tip';\n        this.loading.tip = false;\n        console.error('Error loading daily tip:', err);\n      }\n    });\n  }\n  loadWorkItemDistribution(iterationPath) {\n    this.loading.distribution = true;\n    this.dashboardService.getWorkItemDistribution(iterationPath).subscribe({\n      next: data => {\n        this.workItemDistribution = data;\n        this.loading.distribution = false;\n        // Initialize distribution chart after data is loaded\n        setTimeout(() => {\n          this.initializeWorkItemDistributionChart();\n        }, 100);\n      },\n      error: err => {\n        this.error.distribution = 'Failed to load work item distribution';\n        this.loading.distribution = false;\n        console.error('Error loading work item distribution:', err);\n      }\n    });\n  }\n  loadStateDistributions() {\n    this.loading.stateDistribution = true;\n    this.dashboardService.getStateDistribution(this.selectedIterationPath).subscribe({\n      next: data => {\n        this.stateDistributions = data;\n        // Keep hard-coded iteration paths instead of dynamically loading them\n        // this.availableIterationPaths = data.map(d => d.iterationPath);\n        this.loading.stateDistribution = false;\n        // Initialize state distribution chart after data is loaded\n        setTimeout(() => {\n          this.initializeStateDistributionsChart();\n        }, 100);\n      },\n      error: err => {\n        this.error.stateDistribution = 'Failed to load state distributions';\n        this.loading.stateDistribution = false;\n        console.error('Error loading state distributions:', err);\n      }\n    });\n  }\n  loadLongTermDevNewItems() {\n    this.loading.longTermDevNew = true;\n    this.dashboardService.getLongTermDevNewItems(5).subscribe({\n      next: data => {\n        this.longTermDevNewItems = data;\n        this.loading.longTermDevNew = false;\n      },\n      error: err => {\n        this.error.longTermDevNew = 'Failed to load long-term Dev-New items';\n        this.loading.longTermDevNew = false;\n        console.error('Error loading long-term Dev-New items:', err);\n      }\n    });\n  }\n  loadSupportItems() {\n    this.loading.supportItems = true;\n    this.dashboardService.getSupportItems(6).subscribe({\n      next: data => {\n        this.supportItems = data;\n        this.loading.supportItems = false;\n      },\n      error: err => {\n        this.error.supportItems = 'Failed to load support items';\n        this.loading.supportItems = false;\n        console.error('Error loading support items:', err);\n      }\n    });\n  }\n  loadAiTips() {\n    this.loading.aiTips = true;\n    this.dashboardService.getAiTips().subscribe({\n      next: data => {\n        this.aiTips = data;\n        this.longTermDevNewItems = data.longTermDevNewItems;\n        this.supportItems = data.supportItems;\n        this.dailyTip = data.tip;\n        this.loading.aiTips = false;\n      },\n      error: err => {\n        this.error.aiTips = 'Failed to load AI tips';\n        this.loading.aiTips = false;\n        console.error('Error loading AI tips:', err);\n        // Fall back to individual methods\n        this.loadDailyTip();\n        this.loadLongTermDevNewItems();\n        this.loadSupportItems();\n      }\n    });\n  }\n  initializeWorkItemDistributionChart() {\n    if (!this.workItemDistribution || !this.stateDistributionChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.stateDistributionChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    const labels = this.workItemDistribution.states.map(s => s.state);\n    const data = this.workItemDistribution.states.map(s => s.count);\n    const colors = this.workItemDistribution.states.map(s => this.stateColors[s.state] || this.getRandomColor());\n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            backgroundColor: colors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right'\n            },\n            title: {\n              display: true,\n              text: `Work Item States - ${this.workItemDistribution.iterationPath}`\n            }\n          }\n        }\n      });\n    }\n  }\n  initializeStateDistributionsChart() {\n    if (this.stateDistributions.length === 0 || !this.iterationDistributionChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.iterationDistributionChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    // Prepare data for stacked bar chart\n    const iterationLabels = this.stateDistributions.map(d => d.iterationPath);\n    // Find all unique states across all iterations\n    const allStates = new Set();\n    this.stateDistributions.forEach(dist => {\n      dist.states.forEach(state => {\n        allStates.add(state.state);\n      });\n    });\n    // Create datasets, one for each state\n    const datasets = Array.from(allStates).map(stateName => {\n      // Find color for this state\n      const stateColor = this.stateColors[stateName] || this.getRandomColor();\n      // Create dataset for this state across all iterations\n      return {\n        label: stateName,\n        data: this.stateDistributions.map(dist => {\n          const stateData = dist.states.find(s => s.state === stateName);\n          return stateData ? stateData.count : 0;\n        }),\n        backgroundColor: stateColor\n      };\n    });\n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: iterationLabels,\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'right'\n            },\n            title: {\n              display: true,\n              text: 'Work Item Distribution by Iteration'\n            }\n          }\n        }\n      });\n    }\n  }\n  changeIterationPath(iterationPath) {\n    // Even with hardcoded path, keep the method in case it's called from elsewhere\n    if (iterationPath !== this.selectedIterationPath) {\n      this.selectedIterationPath = iterationPath;\n      this.loadWorkItemDistribution(iterationPath);\n      this.loadSprintSummary(iterationPath);\n    }\n  }\n  getStateColor(state) {\n    return this.stateColors[state] || this.getRandomColor();\n  }\n  getRandomColor() {\n    const randomIndex = Math.floor(Math.random() * this.defaultChartColors.length);\n    return this.defaultChartColors[randomIndex];\n  }\n  reload() {\n    this.loadDashboardData();\n  }\n  loadTaskStatusBoard() {\n    this.loading.taskStatusBoard = true;\n    this.error.taskStatusBoard = '';\n    // Try the direct tasks API first which appears to be working correctly\n    this.dashboardService.getTaskDistribution(this.selectedIterationPath).subscribe({\n      next: data => {\n        if (data && Array.isArray(data)) {\n          // Process task data from tasks API\n          this.processTaskData(data);\n        } else {\n          // Fallback to work item distribution API\n          this.tryWorkItemDistribution();\n        }\n      },\n      error: err => {\n        console.error('Error loading task distribution:', err);\n        // Fallback to work item distribution API\n        this.tryWorkItemDistribution();\n      }\n    });\n  }\n  // Process raw task data from /api/tasks endpoint\n  processTaskData(tasks) {\n    if (!tasks || tasks.length === 0) {\n      this.error.taskStatusBoard = 'No tasks found for this iteration';\n      this.loading.taskStatusBoard = false;\n      this.createDummyTaskBoard();\n      this.initializeStatusPieChart();\n      return;\n    }\n    // Group tasks by status\n    const statusGroups = tasks.reduce((acc, task) => {\n      const status = task.status || 'Unknown';\n      if (!acc[status]) {\n        acc[status] = [];\n      }\n      acc[status].push(task);\n      return acc;\n    }, {});\n    // Convert to our TaskStatusItem format\n    this.taskStatusBoard = Object.keys(statusGroups).map(status => ({\n      status: status,\n      count: statusGroups[status].length,\n      color: this.getStatusColor(status)\n    }));\n    this.loading.taskStatusBoard = false;\n    // Initialize the pie chart\n    setTimeout(() => {\n      this.initializeStatusPieChart();\n    }, 100);\n  }\n  tryWorkItemDistribution() {\n    // First try to use the work item distribution API\n    this.dashboardService.getWorkItemDistribution(this.selectedIterationPath).subscribe({\n      next: data => {\n        if (data && data.states && data.states.length > 0) {\n          // Convert from WorkItemDistribution to TaskStatusItem[]\n          this.taskStatusBoard = data.states.map(state => ({\n            status: state.state,\n            count: state.count,\n            color: state.color || this.getStatusColor(state.state)\n          }));\n          this.loading.taskStatusBoard = false;\n          // Initialize the pie chart\n          setTimeout(() => {\n            this.initializeStatusPieChart();\n          }, 100);\n        } else {\n          // Fallback to tasks-by-status if data is empty\n          this.loadTasksByStatus();\n        }\n      },\n      error: err => {\n        console.error('Error loading work item distribution:', err);\n        // Fallback to tasks-by-status API\n        this.loadTasksByStatus();\n      }\n    });\n  }\n  loadTasksByStatus() {\n    this.dashboardService.getTasksByStatus(this.selectedIterationPath).subscribe({\n      next: data => {\n        if (data && data.items) {\n          this.taskStatusBoard = data.items;\n          this.loading.taskStatusBoard = false;\n          // Initialize the pie chart\n          setTimeout(() => {\n            this.initializeStatusPieChart();\n          }, 100);\n        } else {\n          this.error.taskStatusBoard = 'No task status data available for this iteration';\n          this.loading.taskStatusBoard = false;\n          // Create dummy data as a last resort\n          this.createDummyTaskBoard();\n          setTimeout(() => {\n            this.initializeStatusPieChart();\n          }, 100);\n        }\n      },\n      error: err => {\n        this.error.taskStatusBoard = 'Failed to load task status data';\n        this.loading.taskStatusBoard = false;\n        console.error('Error loading task status data:', err);\n        // Fallback to dummy data for development\n        this.createDummyTaskBoard();\n        // Initialize the pie chart with dummy data\n        setTimeout(() => {\n          this.initializeStatusPieChart();\n        }, 100);\n      }\n    });\n  }\n  createDummyTaskBoard() {\n    // Create dummy data similar to the Azure DevOps board in the image\n    this.taskStatusBoard = [{\n      status: 'PMG - Proposed',\n      count: 0,\n      color: this.statusColors['PMG - Proposed']\n    }, {\n      status: 'DEV - Yet to Start',\n      count: 2,\n      color: this.statusColors['DEV - Yet to Start']\n    }, {\n      status: 'DEV - WIP',\n      count: 4,\n      color: this.statusColors['DEV - WIP']\n    }, {\n      status: 'DEV - Code Review',\n      count: 2,\n      color: this.statusColors['DEV - Code Review']\n    }, {\n      status: 'DEV - Done',\n      count: 5,\n      color: this.statusColors['DEV - Done']\n    }, {\n      status: 'DEV/QC - Reopened',\n      count: 1,\n      color: this.statusColors['DEV/QC - Reopened']\n    }, {\n      status: 'Clarifications',\n      count: 1,\n      color: this.statusColors['Clarifications']\n    }, {\n      status: 'On Hold',\n      count: 0,\n      color: this.statusColors['On Hold']\n    }, {\n      status: 'QC - In Test Bed',\n      count: 7,\n      color: this.statusColors['QC - In Test Bed']\n    }, {\n      status: 'Completed',\n      count: 123,\n      color: this.statusColors['Completed']\n    }];\n  }\n  initializeStatusPieChart() {\n    if (!this.statusPieChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.statusPieChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    // Setup data for pie chart from work item counts\n    const statusData = [{\n      status: 'Dev-New',\n      count: this.workItemCounts.devNew,\n      color: '#00a8e8'\n    }, {\n      status: 'In Progress',\n      count: this.workItemCounts.inProgress,\n      color: '#0078d4'\n    }, {\n      status: 'Code Review',\n      count: this.workItemCounts.codeReview,\n      color: '#8764b8'\n    }, {\n      status: 'Dev Complete',\n      count: this.workItemCounts.devComplete,\n      color: '#107c10'\n    }, {\n      status: 'Completed',\n      count: this.workItemCounts.completed,\n      color: '#00b7c3'\n    }, {\n      status: 'Blocked',\n      count: this.workItemCounts.blocked,\n      color: '#e81123'\n    }];\n    // Filter out states with 0 count for better visualization\n    const filteredStatuses = statusData.filter(item => item.count > 0);\n    const labels = filteredStatuses.map(s => s.status);\n    const data = filteredStatuses.map(s => s.count);\n    const colors = filteredStatuses.map(s => s.color);\n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            backgroundColor: colors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n              display: true\n            },\n            title: {\n              display: true,\n              text: 'Work Item States Distribution'\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  const total = context.dataset.data.reduce((a, b) => Number(a) + Number(b), 0);\n                  const percentage = Math.round(value / total * 100);\n                  return `${label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  getStatusColor(status) {\n    return this.statusColors[status] || '#9a9a9a'; // Default gray color\n  }\n  // Chat methods\n  sendChatMessage() {\n    if (!this.currentMessage.trim()) return;\n    // Add user message\n    const userMessage = {\n      role: 'user',\n      content: this.currentMessage.trim(),\n      timestamp: new Date()\n    };\n    this.chatMessages.push(userMessage);\n    // Store message and clear input\n    const message = this.currentMessage;\n    this.currentMessage = '';\n    // Call API to get response\n    this.dashboardService.sendChatMessage(message).subscribe({\n      next: response => {\n        const assistantMessage = {\n          role: 'assistant',\n          content: response,\n          timestamp: new Date()\n        };\n        this.chatMessages.push(assistantMessage);\n      },\n      error: err => {\n        console.error('Error getting chat response:', err);\n        // Add fallback response\n        const fallbackMessage = {\n          role: 'assistant',\n          content: 'Sorry, I encountered an error processing your request. Please try again later.',\n          timestamp: new Date()\n        };\n        this.chatMessages.push(fallbackMessage);\n      }\n    });\n  }\n  /**\r\n   * Load work items from Azure DevOps for the selected iteration using WIQL API\r\n   */\n  loadAzureDevOpsWorkItemsWithWiql() {\n    this.loadingAzureDevOps = true;\n    this.azureDevOpsError = '';\n    this.azureDevOpsService.getWorkItemsByWiql(this.selectedIterationPath).pipe(finalize(() => {\n      this.loadingAzureDevOps = false;\n    })).subscribe({\n      next: dashboardStats => {\n        // Store the work item counts\n        this.workItemCounts = {\n          totalTasks: dashboardStats.totalTasks,\n          devNew: dashboardStats.devNew,\n          inProgress: dashboardStats.inProgress,\n          codeReview: dashboardStats.codeReview,\n          devComplete: dashboardStats.devComplete,\n          completed: dashboardStats.completed,\n          blocked: dashboardStats.blocked\n        };\n        // Store the work items if available\n        if (dashboardStats.workItems) {\n          this.azureDevOpsWorkItems = dashboardStats.workItems;\n        }\n        // Store assignee distribution data\n        if (dashboardStats.statsByAssignee) {\n          this.assigneeDistribution = dashboardStats.statsByAssignee;\n        }\n        // Update the summary data with the Azure DevOps counts\n        this.updateSummaryWithAzureDevOpsCounts();\n        // Update pie chart\n        setTimeout(() => {\n          this.initializeStatusPieChart();\n        }, 100);\n      },\n      error: error => {\n        console.error('Error loading Azure DevOps work items with WIQL:', error);\n        this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\n        // Fall back to the legacy method if WIQL fails\n        this.loadAzureDevOpsWorkItems();\n      }\n    });\n  }\n  /**\r\n   * Load work items from Azure DevOps for the selected iteration\r\n   */\n  loadAzureDevOpsWorkItems() {\n    this.loadingAzureDevOps = true;\n    this.azureDevOpsError = '';\n    // First try to get the status counts directly from the backend proxy\n    this.azureDevOpsService.getWorkItemStatusCounts(this.selectedIterationPath).pipe(catchError(error => {\n      console.error('Error loading status counts, falling back to work items:', error);\n      // Fall back to getting work items and counting them\n      return this.azureDevOpsService.getWorkItemsByIteration(this.selectedIterationPath).pipe(map(workItems => {\n        // Process the work items to get counts\n        return this.azureDevOpsService.getWorkItemCounts(workItems);\n      }), catchError(err => {\n        this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\n        console.error('Error loading Azure DevOps work items:', err);\n        return of({\n          totalTasks: 0,\n          devNew: 0,\n          inProgress: 0,\n          codeReview: 0,\n          devComplete: 0,\n          completed: 0,\n          blocked: 0\n        });\n      }));\n    }), finalize(() => {\n      this.loadingAzureDevOps = false;\n    })).subscribe(counts => {\n      // Store the counts\n      this.workItemCounts = counts;\n      // Also store the work items if available\n      if (Array.isArray(counts.workItems)) {\n        this.azureDevOpsWorkItems = counts.workItems;\n      }\n      // Update the summary data with the Azure DevOps counts\n      this.updateSummaryWithAzureDevOpsCounts();\n    });\n  }\n  /**\r\n   * Update summary data with the counts from Azure DevOps\r\n   */\n  updateSummaryWithAzureDevOpsCounts() {\n    if (!this.sprintSummary) {\n      this.sprintSummary = {\n        totalTasks: this.workItemCounts.totalTasks,\n        inProgress: this.workItemCounts.inProgress,\n        completed: this.workItemCounts.completed,\n        blocked: this.workItemCounts.blocked,\n        completionPercentage: this.calculateCompletionPercentage()\n      };\n    } else {\n      this.sprintSummary.totalTasks = this.workItemCounts.totalTasks;\n      this.sprintSummary.inProgress = this.workItemCounts.inProgress;\n      this.sprintSummary.completed = this.workItemCounts.completed;\n      this.sprintSummary.blocked = this.workItemCounts.blocked;\n      this.sprintSummary.completionPercentage = this.calculateCompletionPercentage();\n    }\n    // Also update task status board with Azure DevOps data\n    this.updateTaskStatusBoardWithAzureDevOpsCounts();\n  }\n  /**\r\n   * Calculate completion percentage based on work item counts\r\n   */\n  calculateCompletionPercentage() {\n    const total = this.workItemCounts.totalTasks;\n    if (total === 0) return 0;\n    const completed = this.workItemCounts.completed;\n    return Math.round(completed / total * 100);\n  }\n  /**\r\n   * Update task status board with counts from Azure DevOps\r\n   * This method is now only used for compatibility with other parts of the code\r\n   */\n  updateTaskStatusBoardWithAzureDevOpsCounts() {\n    // Update pie chart with the Azure DevOps data\n    setTimeout(() => {\n      this.initializeStatusPieChart();\n    }, 100);\n  }\n  /**\r\n   * Get assignee data as an array for display in the UI\r\n   * @returns Array of assignee data with counts\r\n   */\n  getAssigneeDistribution() {\n    if (!this.assigneeDistribution) {\n      return [];\n    }\n    return Object.keys(this.assigneeDistribution).map(assignee => {\n      return {\n        name: assignee,\n        ...this.assigneeDistribution[assignee]\n      };\n    });\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DashboardService), i0.ɵɵdirectiveInject(i2.AzureDevOpsService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      viewQuery: function DashboardComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n          i0.ɵɵviewQuery(_c2, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stateDistributionChartRef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iterationDistributionChartRef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusPieChartRef = _t.first);\n        }\n      },\n      decls: 57,\n      vars: 16,\n      consts: [[1, \"dashboard-container\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-md-8\"], [1, \"card\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [1, \"d-flex\", \"align-items-center\"], [1, \"input-group\", \"input-group-sm\", \"me-2\", 2, \"max-width\", \"250px\"], [\"type\", \"text\", \"placeholder\", \"Enter Iteration Path\", \"aria-label\", \"Iteration Path\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", \"title\", \"Load data for this iteration path\", 1, \"btn\", \"btn-outline-primary\", 3, \"click\"], [1, \"bi\", \"bi-search\"], [1, \"btn\", \"btn-outline-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-arrow-clockwise\"], [1, \"card-body\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"col-md-4\"], [1, \"card-header\"], [1, \"card-body\", \"d-flex\", \"flex-column\", 2, \"height\", \"350px\"], [1, \"chat-messages\", \"flex-grow-1\", \"overflow-auto\", \"mb-3\"], [\"class\", \"message mb-2\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"chat-input\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Type your message...\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"bi\", \"bi-send\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"col-md-6\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"alert\", \"alert-danger\"], [1, \"sprint-title\"], [1, \"d-flex\", \"justify-content-between\", \"mt-3\"], [1, \"text-muted\", \"mb-1\"], [1, \"fw-bold\"], [1, \"fw-bold\", \"days-remaining\"], [\"class\", \"mt-4\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"d-flex\", \"justify-content-between\", \"mb-1\"], [1, \"progress\", 2, \"height\", \"10px\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", \"bg-success\"], [1, \"text-muted\"], [1, \"text-muted\", \"small\"], [1, \"text-muted\", \"small\", \"text-start\"], [1, \"message\", \"mb-2\", 3, \"ngClass\"], [1, \"message-content\"], [1, \"message-text\"], [1, \"message-time\", \"small\", \"text-muted\"], [1, \"mt-2\", \"text-muted\"], [1, \"row\"], [1, \"col-md-3\", \"mb-3\"], [1, \"card\", \"summary-card\", \"total-card\"], [1, \"card-title\"], [1, \"card-value\"], [1, \"card\", \"summary-card\", \"in-progress-card\"], [1, \"card\", \"summary-card\", \"completed-card\"], [1, \"card\", \"summary-card\", \"blocked-card\"], [\"statusPieChart\", \"\"], [\"class\", \"assignee-row mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"assignee-row\", \"mb-3\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-1\"], [1, \"badge\", \"bg-secondary\"], [1, \"d-flex\", \"flex-wrap\"], [\"class\", \"status-badge bg-light text-dark me-2 mb-1\", 4, \"ngIf\"], [\"class\", \"status-badge bg-primary text-white me-2 mb-1\", 4, \"ngIf\"], [\"class\", \"status-badge bg-info text-dark me-2 mb-1\", 4, \"ngIf\"], [\"class\", \"status-badge bg-success text-white me-2 mb-1\", 4, \"ngIf\"], [\"class\", \"status-badge bg-danger text-white me-2 mb-1\", 4, \"ngIf\"], [1, \"progress\", \"mt-2\", 2, \"height\", \"6px\"], [\"role\", \"progressbar\", 1, \"progress-bar\", \"bg-primary\"], [\"role\", \"progressbar\", 1, \"progress-bar\", \"bg-info\"], [\"role\", \"progressbar\", 1, \"progress-bar\", \"bg-success\"], [\"role\", \"progressbar\", 1, \"progress-bar\", \"bg-danger\"], [1, \"status-badge\", \"bg-light\", \"text-dark\", \"me-2\", \"mb-1\"], [1, \"status-badge\", \"bg-primary\", \"text-white\", \"me-2\", \"mb-1\"], [1, \"status-badge\", \"bg-info\", \"text-dark\", \"me-2\", \"mb-1\"], [1, \"status-badge\", \"bg-success\", \"text-white\", \"me-2\", \"mb-1\"], [1, \"status-badge\", \"bg-danger\", \"text-white\", \"me-2\", \"mb-1\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\", 5);\n          i0.ɵɵtext(6, \"Sprint Overview\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\")(8, \"div\", 6)(9, \"div\", 7)(10, \"input\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_10_listener($event) {\n            return ctx.selectedIterationPath = $event;\n          })(\"keyup.enter\", function DashboardComponent_Template_input_keyup_enter_10_listener() {\n            return ctx.loadIterationData();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_11_listener() {\n            return ctx.loadIterationData();\n          });\n          i0.ɵɵelement(12, \"i\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_13_listener() {\n            return ctx.reload();\n          });\n          i0.ɵɵelement(14, \"i\", 12);\n          i0.ɵɵtext(15, \" Refresh \");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(16, \"div\", 13);\n          i0.ɵɵtemplate(17, DashboardComponent_div_17_Template, 4, 0, \"div\", 14);\n          i0.ɵɵtemplate(18, DashboardComponent_div_18_Template, 2, 1, \"div\", 15);\n          i0.ɵɵtemplate(19, DashboardComponent_div_19_Template, 22, 11, \"div\", 16);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(20, \"div\", 17)(21, \"div\", 3)(22, \"div\", 18)(23, \"h4\", 5);\n          i0.ɵɵtext(24, \"AI Assistant\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"div\", 19)(26, \"div\", 20);\n          i0.ɵɵtemplate(27, DashboardComponent_div_27_Template, 12, 0, \"div\", 14);\n          i0.ɵɵtemplate(28, DashboardComponent_div_28_Template, 7, 9, \"div\", 21);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(29, \"div\", 22)(30, \"div\", 23)(31, \"input\", 24);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_31_listener($event) {\n            return ctx.currentMessage = $event;\n          })(\"keyup.enter\", function DashboardComponent_Template_input_keyup_enter_31_listener() {\n            return ctx.sendChatMessage();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"button\", 25);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_32_listener() {\n            return ctx.sendChatMessage();\n          });\n          i0.ɵɵelement(33, \"i\", 26);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(34, \"div\", 1);\n          i0.ɵɵtemplate(35, DashboardComponent_div_35_Template, 6, 0, \"div\", 14);\n          i0.ɵɵtemplate(36, DashboardComponent_div_36_Template, 2, 1, \"div\", 15);\n          i0.ɵɵtemplate(37, DashboardComponent_div_37_Template, 29, 4, \"div\", 27);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(38, \"div\", 1)(39, \"div\", 28)(40, \"div\", 3)(41, \"div\", 18)(42, \"h4\", 5);\n          i0.ɵɵtext(43, \"Tasks by Status\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(44, \"div\", 13);\n          i0.ɵɵtemplate(45, DashboardComponent_div_45_Template, 4, 0, \"div\", 14);\n          i0.ɵɵtemplate(46, DashboardComponent_div_46_Template, 3, 0, \"div\", 16);\n          i0.ɵɵtemplate(47, DashboardComponent_div_47_Template, 2, 1, \"div\", 15);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(48, \"div\", 28)(49, \"div\", 3)(50, \"div\", 18)(51, \"h4\", 5);\n          i0.ɵɵtext(52, \"Tasks by Assignee\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(53, \"div\", 13);\n          i0.ɵɵtemplate(54, DashboardComponent_div_54_Template, 4, 0, \"div\", 14);\n          i0.ɵɵtemplate(55, DashboardComponent_div_55_Template, 3, 2, \"div\", 16);\n          i0.ɵɵtemplate(56, DashboardComponent_div_56_Template, 2, 1, \"div\", 15);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedIterationPath);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.sprint);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.sprint);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.sprint && !ctx.error.sprint && ctx.sprintOverview);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.chatMessages.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.chatMessages);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.currentMessage);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.summary || ctx.loadingAzureDevOps);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.summary || ctx.azureDevOpsError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.summary && !ctx.error.summary && ctx.sprintSummary || !ctx.loadingAzureDevOps && !ctx.azureDevOpsError);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.loadingAzureDevOps);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingAzureDevOps && !ctx.azureDevOpsError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.azureDevOpsError);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.loadingAzureDevOps);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadingAzureDevOps && !ctx.azureDevOpsError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.azureDevOpsError);\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i3.DecimalPipe, i3.DatePipe],\n      styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n  padding: 20px;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n  border-radius: 8px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n  border: none;\\n  margin-bottom: 20px;\\n}\\n.card[_ngcontent-%COMP%]   .card-header[_ngcontent-%COMP%] {\\n  background-color: #fff;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\\n  font-weight: 600;\\n  padding: 12px 16px;\\n}\\n\\n.days-remaining[_ngcontent-%COMP%] {\\n  font-size: 24px;\\n  color: #3050e6;\\n}\\n\\n.sprint-title[_ngcontent-%COMP%] {\\n  font-size: 1.5rem;\\n  font-weight: 600;\\n  color: #333;\\n  margin-bottom: 1rem;\\n}\\n\\n\\n.summary-card[_ngcontent-%COMP%] {\\n  text-align: center;\\n  border-radius: 8px;\\n  transition: transform 0.2s;\\n  height: 100%;\\n}\\n.summary-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n}\\n.summary-card[_ngcontent-%COMP%]   .card-value[_ngcontent-%COMP%] {\\n  font-size: 2.5rem;\\n  font-weight: 700;\\n}\\n\\n.total-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #6c757d;\\n}\\n\\n.in-progress-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #0078d4;\\n}\\n\\n.completed-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #107c10;\\n}\\n\\n.blocked-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #e81123;\\n}\\n\\n\\n.status-card[_ngcontent-%COMP%] {\\n  transition: transform 0.2s;\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\\n}\\n.status-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\\n}\\n.status-card[_ngcontent-%COMP%]   .status-count[_ngcontent-%COMP%] {\\n  font-size: 2.5rem;\\n  font-weight: bold;\\n}\\n.status-card[_ngcontent-%COMP%]   .status-title[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n\\n\\n.chat-messages[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 250px;\\n  overflow-y: auto;\\n}\\n\\n.message[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n  max-width: 85%;\\n  padding: 8px 12px;\\n  border-radius: 12px;\\n  position: relative;\\n}\\n\\n.user-message[_ngcontent-%COMP%] {\\n  align-self: flex-end;\\n  background-color: #007bff;\\n  color: white;\\n  margin-left: auto;\\n  border-bottom-right-radius: 2px;\\n}\\n.user-message[_ngcontent-%COMP%]   .message-time[_ngcontent-%COMP%] {\\n  text-align: right;\\n  color: rgba(255, 255, 255, 0.7) !important;\\n}\\n\\n.assistant-message[_ngcontent-%COMP%] {\\n  align-self: flex-start;\\n  background-color: #f1f1f1;\\n  color: #333;\\n  margin-right: auto;\\n  border-bottom-left-radius: 2px;\\n}\\n\\n.message-content[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.message-text[_ngcontent-%COMP%] {\\n  margin-bottom: 4px;\\n}\\n\\n\\n.activity-list[_ngcontent-%COMP%] {\\n  max-height: 400px;\\n  overflow-y: auto;\\n}\\n\\n.activity-title[_ngcontent-%COMP%] {\\n  font-weight: 500;\\n}\\n\\n.activity-details[_ngcontent-%COMP%] {\\n  font-size: 0.9rem;\\n  color: #666;\\n}\\n\\n.activity-meta[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  margin-left: 15px;\\n}\\n\\n\\n.color-box[_ngcontent-%COMP%] {\\n  width: 12px;\\n  height: 12px;\\n  display: inline-block;\\n  border-radius: 2px;\\n}\\n\\n\\n.assignee-row[_ngcontent-%COMP%] {\\n  padding: 12px;\\n  border-radius: 6px;\\n  background-color: #f8f9fa;\\n  transition: all 0.2s ease;\\n}\\n.assignee-row[_ngcontent-%COMP%]:hover {\\n  background-color: #f1f3f5;\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\\n}\\n\\n.status-badge[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  padding: 4px 8px;\\n  border-radius: 4px;\\n  font-size: 0.8rem;\\n  font-weight: 500;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSx3Q0FBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtBQUNGO0FBQ0U7RUFDRSxzQkFBQTtFQUNBLDRDQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtBQUNKOztBQUdBO0VBQ0UsZUFBQTtFQUNBLGNBQUE7QUFBRjs7QUFHQTtFQUNFLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EsbUJBQUE7QUFBRjs7QUFHQSxrQkFBQTtBQUNBO0VBQ0Usa0JBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0VBQ0EsWUFBQTtBQUFGO0FBRUU7RUFDRSwyQkFBQTtBQUFKO0FBR0U7RUFDRSxpQkFBQTtFQUNBLGdCQUFBO0FBREo7O0FBS0E7RUFDRSw2QkFBQTtBQUZGOztBQUtBO0VBQ0UsNkJBQUE7QUFGRjs7QUFLQTtFQUNFLDZCQUFBO0FBRkY7O0FBS0E7RUFDRSw2QkFBQTtBQUZGOztBQUtBLHdCQUFBO0FBQ0E7RUFDRSwwQkFBQTtFQUNBLHdDQUFBO0FBRkY7QUFJRTtFQUNFLDJCQUFBO0VBQ0EseUNBQUE7QUFGSjtBQUtFO0VBQ0UsaUJBQUE7RUFDQSxpQkFBQTtBQUhKO0FBTUU7RUFDRSxtQkFBQTtFQUNBLGdCQUFBO0VBQ0EsdUJBQUE7QUFKSjs7QUFRQSxvQkFBQTtBQUNBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQkFBQTtBQUxGOztBQVFBO0VBQ0UsbUJBQUE7RUFDQSxjQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0FBTEY7O0FBUUE7RUFDRSxvQkFBQTtFQUNBLHlCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0EsK0JBQUE7QUFMRjtBQU9FO0VBQ0UsaUJBQUE7RUFDQSwwQ0FBQTtBQUxKOztBQVNBO0VBQ0Usc0JBQUE7RUFDQSx5QkFBQTtFQUNBLFdBQUE7RUFDQSxrQkFBQTtFQUNBLDhCQUFBO0FBTkY7O0FBU0E7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7QUFORjs7QUFTQTtFQUNFLGtCQUFBO0FBTkY7O0FBU0EsMEJBQUE7QUFDQTtFQUNFLGlCQUFBO0VBQ0EsZ0JBQUE7QUFORjs7QUFTQTtFQUNFLGdCQUFBO0FBTkY7O0FBU0E7RUFDRSxpQkFBQTtFQUNBLFdBQUE7QUFORjs7QUFTQTtFQUNFLG1CQUFBO0VBQ0EsaUJBQUE7QUFORjs7QUFTQSwwQkFBQTtBQUNBO0VBQ0UsV0FBQTtFQUNBLFlBQUE7RUFDQSxxQkFBQTtFQUNBLGtCQUFBO0FBTkY7O0FBU0Esa0NBQUE7QUFDQTtFQUNFLGFBQUE7RUFDQSxrQkFBQTtFQUNBLHlCQUFBO0VBQ0EseUJBQUE7QUFORjtBQVFFO0VBQ0UseUJBQUE7RUFDQSx5Q0FBQTtBQU5KOztBQVVBO0VBQ0UscUJBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQkFBQTtBQVBGIiwic291cmNlc0NvbnRlbnQiOlsiLmRhc2hib2FyZC1jb250YWluZXIge1xuICBwYWRkaW5nOiAyMHB4O1xufVxuXG4uY2FyZCB7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgYm94LXNoYWRvdzogMCAycHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgYm9yZGVyOiBub25lO1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBcbiAgLmNhcmQtaGVhZGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMDUpO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgcGFkZGluZzogMTJweCAxNnB4O1xuICB9XG59XG5cbi5kYXlzLXJlbWFpbmluZyB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgY29sb3I6ICMzMDUwZTY7XG59XG5cbi5zcHJpbnQtdGl0bGUge1xuICBmb250LXNpemU6IDEuNXJlbTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICMzMzM7XG4gIG1hcmdpbi1ib3R0b206IDFyZW07XG59XG5cbi8qIFN1bW1hcnkgQ2FyZHMgKi9cbi5zdW1tYXJ5LWNhcmQge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnM7XG4gIGhlaWdodDogMTAwJTtcbiAgXG4gICY6aG92ZXIge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNXB4KTtcbiAgfVxuICBcbiAgLmNhcmQtdmFsdWUge1xuICAgIGZvbnQtc2l6ZTogMi41cmVtO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIH1cbn1cblxuLnRvdGFsLWNhcmQge1xuICBib3JkZXItdG9wOiA0cHggc29saWQgIzZjNzU3ZDtcbn1cblxuLmluLXByb2dyZXNzLWNhcmQge1xuICBib3JkZXItdG9wOiA0cHggc29saWQgIzAwNzhkNDtcbn1cblxuLmNvbXBsZXRlZC1jYXJkIHtcbiAgYm9yZGVyLXRvcDogNHB4IHNvbGlkICMxMDdjMTA7XG59XG5cbi5ibG9ja2VkLWNhcmQge1xuICBib3JkZXItdG9wOiA0cHggc29saWQgI2U4MTEyMztcbn1cblxuLyogU3RhdHVzIGNhcmQgc3R5bGluZyAqL1xuLnN0YXR1cy1jYXJkIHtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnM7XG4gIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG5cbiAgJjpob3ZlciB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01cHgpO1xuICAgIGJveC1zaGFkb3c6IDAgNXB4IDE1cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG5cbiAgLnN0YXR1cy1jb3VudCB7XG4gICAgZm9udC1zaXplOiAyLjVyZW07XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIH1cblxuICAuc3RhdHVzLXRpdGxlIHtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIH1cbn1cblxuLyogQUkgQ2hhdCBzdHlsaW5nICovXG4uY2hhdC1tZXNzYWdlcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1heC1oZWlnaHQ6IDI1MHB4O1xuICBvdmVyZmxvdy15OiBhdXRvO1xufVxuXG4ubWVzc2FnZSB7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gIG1heC13aWR0aDogODUlO1xuICBwYWRkaW5nOiA4cHggMTJweDtcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4udXNlci1tZXNzYWdlIHtcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAycHg7XG4gIFxuICAubWVzc2FnZS10aW1lIHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpICFpbXBvcnRhbnQ7XG4gIH1cbn1cblxuLmFzc2lzdGFudC1tZXNzYWdlIHtcbiAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjFmMTtcbiAgY29sb3I6ICMzMzM7XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMnB4O1xufVxuXG4ubWVzc2FnZS1jb250ZW50IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLm1lc3NhZ2UtdGV4dCB7XG4gIG1hcmdpbi1ib3R0b206IDRweDtcbn1cblxuLyogQWN0aXZpdHkgZmVlZCBzdHlsaW5nICovXG4uYWN0aXZpdHktbGlzdCB7XG4gIG1heC1oZWlnaHQ6IDQwMHB4O1xuICBvdmVyZmxvdy15OiBhdXRvO1xufVxuXG4uYWN0aXZpdHktdGl0bGUge1xuICBmb250LXdlaWdodDogNTAwO1xufVxuXG4uYWN0aXZpdHktZGV0YWlscyB7XG4gIGZvbnQtc2l6ZTogMC45cmVtO1xuICBjb2xvcjogIzY2Njtcbn1cblxuLmFjdGl2aXR5LW1ldGEge1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBtYXJnaW4tbGVmdDogMTVweDtcbn1cblxuLyogQ29sb3IgYm94IGZvciBsZWdlbmRzICovXG4uY29sb3ItYm94IHtcbiAgd2lkdGg6IDEycHg7XG4gIGhlaWdodDogMTJweDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG59XG5cbi8qIEFzc2lnbmVlIGRpc3RyaWJ1dGlvbiBzdHlsaW5nICovXG4uYXNzaWduZWUtcm93IHtcbiAgcGFkZGluZzogMTJweDtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xuICBcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjNmNTtcbiAgICBib3gtc2hhZG93OiAwIDJweCA1cHggcmdiYSgwLDAsMCwwLjA1KTtcbiAgfVxufVxuXG4uc3RhdHVzLWJhZGdlIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwYWRkaW5nOiA0cHggOHB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGZvbnQtc2l6ZTogMC44cmVtO1xuICBmb250LXdlaWdodDogNTAwO1xufSAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["of","catchError","finalize","map","i0","DashboardComponent","constructor","dashboardService","azureDevOpsService","sprint","summary","activity","tip","distribution","stateDistribution","longTermDevNew","supportItems","aiTips","taskStatusBoard","totalTasks","devNew","inProgress","codeReview","devComplete","completed","blocked","ngOnInit","loadDashboardData","ngAfterViewInit","loadSprintOverview","loadAiTips","loadTaskStatusBoard","loadIterationData","selectedIterationPath","trim","loadSprintSummary","loadAzureDevOpsWorkItemsWithWiql","availableIterationPaths","includes","push","loading","getCurrentSprint","subscribe","next","data","sprintOverview","loadActivityFeed","loadWorkItemDistribution","loadStateDistributions","error","err","console","iterationPath","getSprintSummary","sprintSummary","getActivityFeed","activityFeed","loadDailyTip","getDailyTip","dailyTip","getWorkItemDistribution","workItemDistribution","setTimeout","initializeWorkItemDistributionChart","getStateDistribution","stateDistributions","initializeStateDistributionsChart","loadLongTermDevNewItems","getLongTermDevNewItems","longTermDevNewItems","loadSupportItems","getSupportItems","getAiTips","stateDistributionChartRef","nativeElement","ctx","getContext","labels","states","s","state","count","colors","stateColors","getRandomColor","window","Chart","chart","destroy","type","datasets","backgroundColor","borderWidth","options","responsive","plugins","legend","position","title","display","text","length","iterationDistributionChartRef","iterationLabels","d","allStates","Set","forEach","dist","add","Array","from","stateName","stateColor","label","stateData","find","scales","x","stacked","y","beginAtZero","changeIterationPath","getStateColor","randomIndex","Math","floor","random","defaultChartColors","reload","getTaskDistribution","isArray","processTaskData","tryWorkItemDistribution","tasks","createDummyTaskBoard","initializeStatusPieChart","statusGroups","reduce","acc","task","status","Object","keys","color","getStatusColor","loadTasksByStatus","getTasksByStatus","items","statusColors","statusPieChartRef","statusData","workItemCounts","filteredStatuses","filter","item","tooltip","callbacks","context","value","raw","total","dataset","a","b","Number","percentage","round","sendChatMessage","currentMessage","userMessage","role","content","timestamp","Date","chatMessages","message","response","assistantMessage","fallbackMessage","loadingAzureDevOps","azureDevOpsError","getWorkItemsByWiql","pipe","dashboardStats","workItems","azureDevOpsWorkItems","statsByAssignee","assigneeDistribution","updateSummaryWithAzureDevOpsCounts","loadAzureDevOpsWorkItems","getWorkItemStatusCounts","getWorkItemsByIteration","getWorkItemCounts","counts","completionPercentage","calculateCompletionPercentage","updateTaskStatusBoardWithAzureDevOpsCounts","getAssigneeDistribution","assignee","name","selectors","viewQuery"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\dashboard\\dashboard.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\dashboard\\dashboard.component.html"],"sourcesContent":["import { Component, OnInit, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\r\nimport { DashboardService } from '../../services/dashboard.service';\r\nimport { AzureDevOpsService } from '../../services/azure-devops.service';\r\nimport { \r\n  SprintOverview, \r\n  SprintSummary, \r\n  ActivityFeed, \r\n  WorkItemDistribution, \r\n  LongTermDevNewItem, \r\n  SupportItem,\r\n  AiDashboardTip,\r\n  StateCount,\r\n  TaskStatusBoard,\r\n  TaskStatusItem,\r\n  ChatMessage\r\n} from '../../models/sprint.model';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { catchError, finalize, map } from 'rxjs/operators';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    Chart: any;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('stateDistributionChart') stateDistributionChartRef!: ElementRef;\r\n  @ViewChild('iterationDistributionChart') iterationDistributionChartRef!: ElementRef;\r\n  @ViewChild('statusPieChart') statusPieChartRef!: ElementRef;\r\n  \r\n  sprintOverview: SprintOverview | null = null;\r\n  sprintSummary: SprintSummary | null = null;\r\n  activityFeed: ActivityFeed | null = null;\r\n  dailyTip: string = '';\r\n  workItemDistribution: WorkItemDistribution | null = null;\r\n  stateDistributions: WorkItemDistribution[] = [];\r\n  longTermDevNewItems: LongTermDevNewItem[] = [];\r\n  supportItems: SupportItem[] = [];\r\n  aiTips: AiDashboardTip | null = null;\r\n  \r\n  // Define state colors for consistency\r\n  stateColors: Record<string, string> = {\r\n    'Proposed': '#e6e6e6',\r\n    'New': '#b4d7a8',\r\n    'Dev-New': '#b4d7a8',\r\n    'Active': '#4a86e8',\r\n    'Dev-WIP': '#4a86e8',\r\n    'In Progress': '#4a86e8',\r\n    'Resolved': '#ffd966',\r\n    'Code Review': '#9fc5e8',\r\n    'QA': '#d5a6bd',\r\n    'Testing': '#d5a6bd',\r\n    'Done': '#93c47d',\r\n    'Closed': '#6aa84f',\r\n    'Completed': '#6aa84f',\r\n    'Blocked': '#e06666',\r\n    'Removed': '#999999'\r\n  };\r\n  \r\n  // Default chart colors if state not found in mapping\r\n  defaultChartColors = [\r\n    '#4a86e8', '#6aa84f', '#ffd966', '#e06666', '#9fc5e8', \r\n    '#d5a6bd', '#b4d7a8', '#e6e6e6', '#93c47d', '#6fa8dc'\r\n  ];\r\n  \r\n  // Properties for the new task board\r\n  taskStatusBoard: TaskStatusItem[] = [];\r\n  \r\n  // Chat properties\r\n  chatMessages: ChatMessage[] = [];\r\n  currentMessage: string = '';\r\n  \r\n  // Define status colors based on Azure DevOps board from the image\r\n  statusColors: Record<string, string> = {\r\n    'PMG - Proposed': '#e0e0e0',\r\n    'DEV - Yet to Start': '#9a9a9a',\r\n    'DEV - WIP': '#0078d4',\r\n    'DEV - Code Review': '#324e93',\r\n    'DEV - Done': '#00b7c3',\r\n    'DEV/QC - Reopened': '#e81123',\r\n    'Clarifications': '#fff100',\r\n    'On Hold': '#e3008c',\r\n    'QC - In Test Bed': '#8764b8',\r\n    'Completed': '#107c10'\r\n  };\r\n  \r\n  // Track loading and error states\r\n  loading = {\r\n    sprint: true,\r\n    summary: true,\r\n    activity: true,\r\n    tip: true,\r\n    distribution: true,\r\n    stateDistribution: true,\r\n    longTermDevNew: true,\r\n    supportItems: true,\r\n    aiTips: true,\r\n    taskStatusBoard: true\r\n  };\r\n  \r\n  error = {\r\n    sprint: '',\r\n    summary: '',\r\n    activity: '',\r\n    tip: '',\r\n    distribution: '',\r\n    stateDistribution: '',\r\n    longTermDevNew: '',\r\n    supportItems: '',\r\n    aiTips: '',\r\n    taskStatusBoard: ''\r\n  };\r\n\r\n  // Starting with a default Iteration Path that can be changed\r\n  selectedIterationPath: string = 'Techoil\\\\2.3.23';\r\n  availableIterationPaths: string[] = ['Techoil\\\\2.3.23'];\r\n\r\n  // Work item status counts from Azure DevOps\r\n  azureDevOpsWorkItems: any[] = [];\r\n  workItemCounts = {\r\n    totalTasks: 0,\r\n    devNew: 0,\r\n    inProgress: 0,\r\n    codeReview: 0,\r\n    devComplete: 0,\r\n    completed: 0,\r\n    blocked: 0\r\n  };\r\n  \r\n  // Assignee distribution data\r\n  assigneeDistribution: any = {};\r\n  \r\n  // Loading and error states\r\n  loadingAzureDevOps = false;\r\n  azureDevOpsError = '';\r\n\r\n  constructor(\r\n    private dashboardService: DashboardService,\r\n    private azureDevOpsService: AzureDevOpsService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Charts will be initialized after data is loaded\r\n  }\r\n\r\n  loadDashboardData(): void {\r\n    this.loadSprintOverview();\r\n    this.loadAiTips();\r\n    this.loadTaskStatusBoard();\r\n  }\r\n\r\n  loadIterationData(): void {\r\n    // Validate iteration path\r\n    if (!this.selectedIterationPath) {\r\n      return;\r\n    }\r\n    \r\n    // Trim whitespace and ensure consistent formatting\r\n    this.selectedIterationPath = this.selectedIterationPath.trim();\r\n    \r\n    // Load data for the selected iteration\r\n    this.loadSprintSummary(this.selectedIterationPath);\r\n    this.loadTaskStatusBoard();\r\n    this.loadAzureDevOpsWorkItemsWithWiql();\r\n    \r\n    // Update available paths if this is a new one\r\n    if (!this.availableIterationPaths.includes(this.selectedIterationPath)) {\r\n      this.availableIterationPaths.push(this.selectedIterationPath);\r\n    }\r\n  }\r\n\r\n  loadSprintOverview(): void {\r\n    this.loading.sprint = true;\r\n    this.dashboardService.getCurrentSprint().subscribe({\r\n      next: (data) => {\r\n        this.sprintOverview = data;\r\n        // Use hard-coded iteration path instead of data.iterationPath\r\n        // this.selectedIterationPath = data.iterationPath;\r\n        this.loading.sprint = false;\r\n        this.loadSprintSummary(this.selectedIterationPath);\r\n        this.loadActivityFeed();\r\n        this.loadWorkItemDistribution(this.selectedIterationPath);\r\n        this.loadStateDistributions();\r\n      },\r\n      error: (err) => {\r\n        this.error.sprint = 'Failed to load sprint data';\r\n        this.loading.sprint = false;\r\n        console.error('Error loading sprint data:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadSprintSummary(iterationPath: string): void {\r\n    this.loading.summary = true;\r\n    this.dashboardService.getSprintSummary(iterationPath).subscribe({\r\n      next: (data) => {\r\n        this.sprintSummary = data;\r\n        this.loading.summary = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.summary = 'Failed to load summary data';\r\n        this.loading.summary = false;\r\n        console.error('Error loading summary data:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadActivityFeed(): void {\r\n    this.loading.activity = true;\r\n    this.dashboardService.getActivityFeed().subscribe({\r\n      next: (data) => {\r\n        this.activityFeed = data;\r\n        this.loading.activity = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.activity = 'Failed to load activity feed';\r\n        this.loading.activity = false;\r\n        console.error('Error loading activity feed:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadDailyTip(): void {\r\n    this.loading.tip = true;\r\n    this.dashboardService.getDailyTip().subscribe({\r\n      next: (data) => {\r\n        this.dailyTip = data.tip;\r\n        this.loading.tip = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.tip = 'Failed to load daily tip';\r\n        this.loading.tip = false;\r\n        console.error('Error loading daily tip:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadWorkItemDistribution(iterationPath?: string): void {\r\n    this.loading.distribution = true;\r\n    this.dashboardService.getWorkItemDistribution(iterationPath).subscribe({\r\n      next: (data) => {\r\n        this.workItemDistribution = data;\r\n        this.loading.distribution = false;\r\n        \r\n        // Initialize distribution chart after data is loaded\r\n        setTimeout(() => {\r\n          this.initializeWorkItemDistributionChart();\r\n        }, 100);\r\n      },\r\n      error: (err) => {\r\n        this.error.distribution = 'Failed to load work item distribution';\r\n        this.loading.distribution = false;\r\n        console.error('Error loading work item distribution:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadStateDistributions(): void {\r\n    this.loading.stateDistribution = true;\r\n    this.dashboardService.getStateDistribution(this.selectedIterationPath).subscribe({\r\n      next: (data) => {\r\n        this.stateDistributions = data;\r\n        // Keep hard-coded iteration paths instead of dynamically loading them\r\n        // this.availableIterationPaths = data.map(d => d.iterationPath);\r\n        this.loading.stateDistribution = false;\r\n        \r\n        // Initialize state distribution chart after data is loaded\r\n        setTimeout(() => {\r\n          this.initializeStateDistributionsChart();\r\n        }, 100);\r\n      },\r\n      error: (err) => {\r\n        this.error.stateDistribution = 'Failed to load state distributions';\r\n        this.loading.stateDistribution = false;\r\n        console.error('Error loading state distributions:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadLongTermDevNewItems(): void {\r\n    this.loading.longTermDevNew = true;\r\n    this.dashboardService.getLongTermDevNewItems(5).subscribe({\r\n      next: (data) => {\r\n        this.longTermDevNewItems = data;\r\n        this.loading.longTermDevNew = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.longTermDevNew = 'Failed to load long-term Dev-New items';\r\n        this.loading.longTermDevNew = false;\r\n        console.error('Error loading long-term Dev-New items:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadSupportItems(): void {\r\n    this.loading.supportItems = true;\r\n    this.dashboardService.getSupportItems(6).subscribe({\r\n      next: (data) => {\r\n        this.supportItems = data;\r\n        this.loading.supportItems = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.supportItems = 'Failed to load support items';\r\n        this.loading.supportItems = false;\r\n        console.error('Error loading support items:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadAiTips(): void {\r\n    this.loading.aiTips = true;\r\n    this.dashboardService.getAiTips().subscribe({\r\n      next: (data) => {\r\n        this.aiTips = data;\r\n        this.longTermDevNewItems = data.longTermDevNewItems;\r\n        this.supportItems = data.supportItems;\r\n        this.dailyTip = data.tip;\r\n        this.loading.aiTips = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.aiTips = 'Failed to load AI tips';\r\n        this.loading.aiTips = false;\r\n        console.error('Error loading AI tips:', err);\r\n        // Fall back to individual methods\r\n        this.loadDailyTip();\r\n        this.loadLongTermDevNewItems();\r\n        this.loadSupportItems();\r\n      }\r\n    });\r\n  }\r\n  \r\n  initializeWorkItemDistributionChart(): void {\r\n    if (!this.workItemDistribution || !this.stateDistributionChartRef?.nativeElement) {\r\n      return;\r\n    }\r\n    \r\n    // Get canvas element\r\n    const ctx = this.stateDistributionChartRef.nativeElement.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    const labels = this.workItemDistribution.states.map(s => s.state);\r\n    const data = this.workItemDistribution.states.map(s => s.count);\r\n    const colors = this.workItemDistribution.states.map(s => \r\n      this.stateColors[s.state] || this.getRandomColor()\r\n    );\r\n    \r\n    // Clear any existing chart\r\n    if (window.Chart && ctx.chart) {\r\n      ctx.chart.destroy();\r\n    }\r\n    \r\n    // Create new chart\r\n    if (window.Chart) {\r\n      ctx.chart = new window.Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [{\r\n            data: data,\r\n            backgroundColor: colors,\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: `Work Item States - ${this.workItemDistribution.iterationPath}`\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  initializeStateDistributionsChart(): void {\r\n    if (this.stateDistributions.length === 0 || !this.iterationDistributionChartRef?.nativeElement) {\r\n      return;\r\n    }\r\n    \r\n    // Get canvas element\r\n    const ctx = this.iterationDistributionChartRef.nativeElement.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    // Clear any existing chart\r\n    if (window.Chart && ctx.chart) {\r\n      ctx.chart.destroy();\r\n    }\r\n    \r\n    // Prepare data for stacked bar chart\r\n    const iterationLabels = this.stateDistributions.map(d => d.iterationPath);\r\n    \r\n    // Find all unique states across all iterations\r\n    const allStates = new Set<string>();\r\n    this.stateDistributions.forEach(dist => {\r\n      dist.states.forEach(state => {\r\n        allStates.add(state.state);\r\n      });\r\n    });\r\n    \r\n    // Create datasets, one for each state\r\n    const datasets = Array.from(allStates).map(stateName => {\r\n      // Find color for this state\r\n      const stateColor = this.stateColors[stateName] || this.getRandomColor();\r\n      \r\n      // Create dataset for this state across all iterations\r\n      return {\r\n        label: stateName,\r\n        data: this.stateDistributions.map(dist => {\r\n          const stateData = dist.states.find(s => s.state === stateName);\r\n          return stateData ? stateData.count : 0;\r\n        }),\r\n        backgroundColor: stateColor\r\n      };\r\n    });\r\n    \r\n    // Create new chart\r\n    if (window.Chart) {\r\n      ctx.chart = new window.Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: iterationLabels,\r\n          datasets: datasets\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            x: {\r\n              stacked: true,\r\n            },\r\n            y: {\r\n              stacked: true,\r\n              beginAtZero: true\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Work Item Distribution by Iteration'\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  changeIterationPath(iterationPath: string): void {\r\n    // Even with hardcoded path, keep the method in case it's called from elsewhere\r\n    if (iterationPath !== this.selectedIterationPath) {\r\n      this.selectedIterationPath = iterationPath;\r\n      this.loadWorkItemDistribution(iterationPath);\r\n      this.loadSprintSummary(iterationPath);\r\n    }\r\n  }\r\n  \r\n  getStateColor(state: string): string {\r\n    return this.stateColors[state] || this.getRandomColor();\r\n  }\r\n  \r\n  getRandomColor(): string {\r\n    const randomIndex = Math.floor(Math.random() * this.defaultChartColors.length);\r\n    return this.defaultChartColors[randomIndex];\r\n  }\r\n\r\n  reload(): void {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  loadTaskStatusBoard(): void {\r\n    this.loading.taskStatusBoard = true;\r\n    this.error.taskStatusBoard = '';\r\n    \r\n    // Try the direct tasks API first which appears to be working correctly\r\n    this.dashboardService.getTaskDistribution(this.selectedIterationPath).subscribe({\r\n      next: (data) => {\r\n        if (data && Array.isArray(data)) {\r\n          // Process task data from tasks API\r\n          this.processTaskData(data);\r\n        } else {\r\n          // Fallback to work item distribution API\r\n          this.tryWorkItemDistribution();\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading task distribution:', err);\r\n        // Fallback to work item distribution API\r\n        this.tryWorkItemDistribution();\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Process raw task data from /api/tasks endpoint\r\n  processTaskData(tasks: any[]): void {\r\n    if (!tasks || tasks.length === 0) {\r\n      this.error.taskStatusBoard = 'No tasks found for this iteration';\r\n      this.loading.taskStatusBoard = false;\r\n      this.createDummyTaskBoard();\r\n      this.initializeStatusPieChart();\r\n      return;\r\n    }\r\n    \r\n    // Group tasks by status\r\n    const statusGroups = tasks.reduce((acc, task) => {\r\n      const status = task.status || 'Unknown';\r\n      if (!acc[status]) {\r\n        acc[status] = [];\r\n      }\r\n      acc[status].push(task);\r\n      return acc;\r\n    }, {});\r\n    \r\n    // Convert to our TaskStatusItem format\r\n    this.taskStatusBoard = Object.keys(statusGroups).map(status => ({\r\n      status: status,\r\n      count: statusGroups[status].length,\r\n      color: this.getStatusColor(status)\r\n    }));\r\n    \r\n    this.loading.taskStatusBoard = false;\r\n    \r\n    // Initialize the pie chart\r\n    setTimeout(() => {\r\n      this.initializeStatusPieChart();\r\n    }, 100);\r\n  }\r\n  \r\n  tryWorkItemDistribution(): void {\r\n    // First try to use the work item distribution API\r\n    this.dashboardService.getWorkItemDistribution(this.selectedIterationPath).subscribe({\r\n      next: (data) => {\r\n        if (data && data.states && data.states.length > 0) {\r\n          // Convert from WorkItemDistribution to TaskStatusItem[]\r\n          this.taskStatusBoard = data.states.map(state => ({\r\n            status: state.state,\r\n            count: state.count,\r\n            color: state.color || this.getStatusColor(state.state)\r\n          }));\r\n          \r\n          this.loading.taskStatusBoard = false;\r\n          \r\n          // Initialize the pie chart\r\n          setTimeout(() => {\r\n            this.initializeStatusPieChart();\r\n          }, 100);\r\n        } else {\r\n          // Fallback to tasks-by-status if data is empty\r\n          this.loadTasksByStatus();\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading work item distribution:', err);\r\n        // Fallback to tasks-by-status API\r\n        this.loadTasksByStatus();\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadTasksByStatus(): void {\r\n    this.dashboardService.getTasksByStatus(this.selectedIterationPath).subscribe({\r\n      next: (data) => {\r\n        if (data && data.items) {\r\n          this.taskStatusBoard = data.items;\r\n          this.loading.taskStatusBoard = false;\r\n          \r\n          // Initialize the pie chart\r\n          setTimeout(() => {\r\n            this.initializeStatusPieChart();\r\n          }, 100);\r\n        } else {\r\n          this.error.taskStatusBoard = 'No task status data available for this iteration';\r\n          this.loading.taskStatusBoard = false;\r\n          // Create dummy data as a last resort\r\n          this.createDummyTaskBoard();\r\n          setTimeout(() => {\r\n            this.initializeStatusPieChart();\r\n          }, 100);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.error.taskStatusBoard = 'Failed to load task status data';\r\n        this.loading.taskStatusBoard = false;\r\n        console.error('Error loading task status data:', err);\r\n        \r\n        // Fallback to dummy data for development\r\n        this.createDummyTaskBoard();\r\n        \r\n        // Initialize the pie chart with dummy data\r\n        setTimeout(() => {\r\n          this.initializeStatusPieChart();\r\n        }, 100);\r\n      }\r\n    });\r\n  }\r\n  \r\n  createDummyTaskBoard(): void {\r\n    // Create dummy data similar to the Azure DevOps board in the image\r\n    this.taskStatusBoard = [\r\n      { status: 'PMG - Proposed', count: 0, color: this.statusColors['PMG - Proposed'] },\r\n      { status: 'DEV - Yet to Start', count: 2, color: this.statusColors['DEV - Yet to Start'] },\r\n      { status: 'DEV - WIP', count: 4, color: this.statusColors['DEV - WIP'] },\r\n      { status: 'DEV - Code Review', count: 2, color: this.statusColors['DEV - Code Review'] },\r\n      { status: 'DEV - Done', count: 5, color: this.statusColors['DEV - Done'] },\r\n      { status: 'DEV/QC - Reopened', count: 1, color: this.statusColors['DEV/QC - Reopened'] },\r\n      { status: 'Clarifications', count: 1, color: this.statusColors['Clarifications'] },\r\n      { status: 'On Hold', count: 0, color: this.statusColors['On Hold'] },\r\n      { status: 'QC - In Test Bed', count: 7, color: this.statusColors['QC - In Test Bed'] },\r\n      { status: 'Completed', count: 123, color: this.statusColors['Completed'] }\r\n    ];\r\n  }\r\n  \r\n  initializeStatusPieChart(): void {\r\n    if (!this.statusPieChartRef?.nativeElement) {\r\n      return;\r\n    }\r\n    \r\n    // Get canvas element\r\n    const ctx = this.statusPieChartRef.nativeElement.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    // Setup data for pie chart from work item counts\r\n    const statusData = [\r\n      { status: 'Dev-New', count: this.workItemCounts.devNew, color: '#00a8e8' },\r\n      { status: 'In Progress', count: this.workItemCounts.inProgress, color: '#0078d4' },\r\n      { status: 'Code Review', count: this.workItemCounts.codeReview, color: '#8764b8' },\r\n      { status: 'Dev Complete', count: this.workItemCounts.devComplete, color: '#107c10' },\r\n      { status: 'Completed', count: this.workItemCounts.completed, color: '#00b7c3' },\r\n      { status: 'Blocked', count: this.workItemCounts.blocked, color: '#e81123' }\r\n    ];\r\n    \r\n    // Filter out states with 0 count for better visualization\r\n    const filteredStatuses = statusData.filter(item => item.count > 0);\r\n    \r\n    const labels = filteredStatuses.map(s => s.status);\r\n    const data = filteredStatuses.map(s => s.count);\r\n    const colors = filteredStatuses.map(s => s.color);\r\n    \r\n    // Clear any existing chart\r\n    if (window.Chart && ctx.chart) {\r\n      ctx.chart.destroy();\r\n    }\r\n    \r\n    // Create new chart\r\n    if (window.Chart) {\r\n      ctx.chart = new window.Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [{\r\n            data: data,\r\n            backgroundColor: colors,\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n              display: true\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Work Item States Distribution'\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context: any) {\r\n                  const label = context.label || '';\r\n                  const value = context.raw || 0;\r\n                  const total = context.dataset.data.reduce((a: number, b: number) => Number(a) + Number(b), 0);\r\n                  const percentage = Math.round((value / total) * 100);\r\n                  return `${label}: ${value} (${percentage}%)`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  getStatusColor(status: string): string {\r\n    return this.statusColors[status] || '#9a9a9a'; // Default gray color\r\n  }\r\n  \r\n  // Chat methods\r\n  sendChatMessage(): void {\r\n    if (!this.currentMessage.trim()) return;\r\n    \r\n    // Add user message\r\n    const userMessage: ChatMessage = {\r\n      role: 'user',\r\n      content: this.currentMessage.trim(),\r\n      timestamp: new Date()\r\n    };\r\n    this.chatMessages.push(userMessage);\r\n    \r\n    // Store message and clear input\r\n    const message = this.currentMessage;\r\n    this.currentMessage = '';\r\n    \r\n    // Call API to get response\r\n    this.dashboardService.sendChatMessage(message).subscribe({\r\n      next: (response) => {\r\n        const assistantMessage: ChatMessage = {\r\n          role: 'assistant',\r\n          content: response,\r\n          timestamp: new Date()\r\n        };\r\n        this.chatMessages.push(assistantMessage);\r\n      },\r\n      error: (err) => {\r\n        console.error('Error getting chat response:', err);\r\n        // Add fallback response\r\n        const fallbackMessage: ChatMessage = {\r\n          role: 'assistant',\r\n          content: 'Sorry, I encountered an error processing your request. Please try again later.',\r\n          timestamp: new Date()\r\n        };\r\n        this.chatMessages.push(fallbackMessage);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load work items from Azure DevOps for the selected iteration using WIQL API\r\n   */\r\n  loadAzureDevOpsWorkItemsWithWiql(): void {\r\n    this.loadingAzureDevOps = true;\r\n    this.azureDevOpsError = '';\r\n    \r\n    this.azureDevOpsService.getWorkItemsByWiql(this.selectedIterationPath)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loadingAzureDevOps = false;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (dashboardStats) => {\r\n          // Store the work item counts\r\n          this.workItemCounts = {\r\n            totalTasks: dashboardStats.totalTasks,\r\n            devNew: dashboardStats.devNew,\r\n            inProgress: dashboardStats.inProgress,\r\n            codeReview: dashboardStats.codeReview,\r\n            devComplete: dashboardStats.devComplete,\r\n            completed: dashboardStats.completed,\r\n            blocked: dashboardStats.blocked\r\n          };\r\n          \r\n          // Store the work items if available\r\n          if (dashboardStats.workItems) {\r\n            this.azureDevOpsWorkItems = dashboardStats.workItems;\r\n          }\r\n          \r\n          // Store assignee distribution data\r\n          if (dashboardStats.statsByAssignee) {\r\n            this.assigneeDistribution = dashboardStats.statsByAssignee;\r\n          }\r\n          \r\n          // Update the summary data with the Azure DevOps counts\r\n          this.updateSummaryWithAzureDevOpsCounts();\r\n          \r\n          // Update pie chart\r\n          setTimeout(() => {\r\n            this.initializeStatusPieChart();\r\n          }, 100);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading Azure DevOps work items with WIQL:', error);\r\n          this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\r\n          \r\n          // Fall back to the legacy method if WIQL fails\r\n          this.loadAzureDevOpsWorkItems();\r\n        }\r\n      });\r\n  }\r\n  \r\n  /**\r\n   * Load work items from Azure DevOps for the selected iteration\r\n   */\r\n  loadAzureDevOpsWorkItems(): void {\r\n    this.loadingAzureDevOps = true;\r\n    this.azureDevOpsError = '';\r\n    \r\n    // First try to get the status counts directly from the backend proxy\r\n    this.azureDevOpsService.getWorkItemStatusCounts(this.selectedIterationPath)\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error loading status counts, falling back to work items:', error);\r\n          // Fall back to getting work items and counting them\r\n          return this.azureDevOpsService.getWorkItemsByIteration(this.selectedIterationPath)\r\n            .pipe(\r\n              map(workItems => {\r\n                // Process the work items to get counts\r\n                return this.azureDevOpsService.getWorkItemCounts(workItems);\r\n              }),\r\n              catchError(err => {\r\n                this.azureDevOpsError = 'Failed to load Azure DevOps work items. Please try again.';\r\n                console.error('Error loading Azure DevOps work items:', err);\r\n                return of({\r\n                  totalTasks: 0,\r\n                  devNew: 0,\r\n                  inProgress: 0,\r\n                  codeReview: 0,\r\n                  devComplete: 0,\r\n                  completed: 0,\r\n                  blocked: 0\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        finalize(() => {\r\n          this.loadingAzureDevOps = false;\r\n        })\r\n      )\r\n      .subscribe(counts => {\r\n        // Store the counts\r\n        this.workItemCounts = counts;\r\n        \r\n        // Also store the work items if available\r\n        if (Array.isArray(counts.workItems)) {\r\n          this.azureDevOpsWorkItems = counts.workItems;\r\n        }\r\n        \r\n        // Update the summary data with the Azure DevOps counts\r\n        this.updateSummaryWithAzureDevOpsCounts();\r\n      });\r\n  }\r\n  \r\n  /**\r\n   * Update summary data with the counts from Azure DevOps\r\n   */\r\n  updateSummaryWithAzureDevOpsCounts(): void {\r\n    if (!this.sprintSummary) {\r\n      this.sprintSummary = {\r\n        totalTasks: this.workItemCounts.totalTasks,\r\n        inProgress: this.workItemCounts.inProgress,\r\n        completed: this.workItemCounts.completed,\r\n        blocked: this.workItemCounts.blocked,\r\n        completionPercentage: this.calculateCompletionPercentage()\r\n      };\r\n    } else {\r\n      this.sprintSummary.totalTasks = this.workItemCounts.totalTasks;\r\n      this.sprintSummary.inProgress = this.workItemCounts.inProgress;\r\n      this.sprintSummary.completed = this.workItemCounts.completed;\r\n      this.sprintSummary.blocked = this.workItemCounts.blocked;\r\n      this.sprintSummary.completionPercentage = this.calculateCompletionPercentage();\r\n    }\r\n    \r\n    // Also update task status board with Azure DevOps data\r\n    this.updateTaskStatusBoardWithAzureDevOpsCounts();\r\n  }\r\n  \r\n  /**\r\n   * Calculate completion percentage based on work item counts\r\n   */\r\n  calculateCompletionPercentage(): number {\r\n    const total = this.workItemCounts.totalTasks;\r\n    if (total === 0) return 0;\r\n    \r\n    const completed = this.workItemCounts.completed;\r\n    return Math.round((completed / total) * 100);\r\n  }\r\n  \r\n  /**\r\n   * Update task status board with counts from Azure DevOps\r\n   * This method is now only used for compatibility with other parts of the code\r\n   */\r\n  updateTaskStatusBoardWithAzureDevOpsCounts(): void {\r\n    // Update pie chart with the Azure DevOps data\r\n    setTimeout(() => {\r\n      this.initializeStatusPieChart();\r\n    }, 100);\r\n  }\r\n  \r\n  /**\r\n   * Get assignee data as an array for display in the UI\r\n   * @returns Array of assignee data with counts\r\n   */\r\n  getAssigneeDistribution(): any[] {\r\n    if (!this.assigneeDistribution) {\r\n      return [];\r\n    }\r\n    \r\n    return Object.keys(this.assigneeDistribution).map(assignee => {\r\n      return {\r\n        name: assignee,\r\n        ...this.assigneeDistribution[assignee]\r\n      };\r\n    });\r\n  }\r\n} ","<div class=\"dashboard-container p-4\">\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-md-8\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n          <h4 class=\"mb-0\">Sprint Overview</h4>\r\n          <div>\r\n            <div class=\"d-flex align-items-center\">\r\n              <div class=\"input-group input-group-sm me-2\" style=\"max-width: 250px;\">\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  placeholder=\"Enter Iteration Path\" \r\n                  [(ngModel)]=\"selectedIterationPath\"\r\n                  (keyup.enter)=\"loadIterationData()\"\r\n                  aria-label=\"Iteration Path\">\r\n                <button \r\n                  class=\"btn btn-outline-primary\" \r\n                  type=\"button\" \r\n                  (click)=\"loadIterationData()\"\r\n                  title=\"Load data for this iteration path\">\r\n                  <i class=\"bi bi-search\"></i>\r\n                </button>\r\n              </div>\r\n              <button class=\"btn btn-outline-primary btn-sm\" (click)=\"reload()\">\r\n                <i class=\"bi bi-arrow-clockwise\"></i> Refresh\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div *ngIf=\"loading.sprint\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div *ngIf=\"error.sprint\" class=\"alert alert-danger\">\r\n            {{ error.sprint }}\r\n          </div>\r\n          \r\n          <div *ngIf=\"!loading.sprint && !error.sprint && sprintOverview\">\r\n            <h2 class=\"sprint-title\">{{ sprintOverview.sprintName }}</h2>\r\n            <div class=\"d-flex justify-content-between mt-3\">\r\n              <div>\r\n                <p class=\"text-muted mb-1\">Start Date</p>\r\n                <p class=\"fw-bold\">{{ sprintOverview.startDate | date:'mediumDate' }}</p>\r\n              </div>\r\n              <div>\r\n                <p class=\"text-muted mb-1\">End Date</p>\r\n                <p class=\"fw-bold\">{{ sprintOverview.endDate | date:'mediumDate' }}</p>\r\n              </div>\r\n              <div>\r\n                <p class=\"text-muted mb-1\">Days Remaining</p>\r\n                <p class=\"fw-bold days-remaining\">{{ sprintOverview.daysRemaining }}</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Progress Bar -->\r\n            <div *ngIf=\"sprintSummary\" class=\"mt-4\">\r\n              <div class=\"d-flex justify-content-between mb-1\">\r\n                <span>Sprint Progress</span>\r\n                <span>{{ sprintSummary.completionPercentage | number:'1.0-0' }}%</span>\r\n              </div>\r\n              <div class=\"progress\" style=\"height: 10px;\">\r\n                <div class=\"progress-bar bg-success\" \r\n                     [style.width.%]=\"sprintSummary.completionPercentage\"\r\n                     role=\"progressbar\" \r\n                     [attr.aria-valuenow]=\"sprintSummary.completionPercentage\" \r\n                     aria-valuemin=\"0\" \r\n                     aria-valuemax=\"100\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"col-md-4\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"mb-0\">AI Assistant</h4>\r\n        </div>\r\n        <div class=\"card-body d-flex flex-column\" style=\"height: 350px;\">\r\n          <!-- Chat Messages -->\r\n          <div class=\"chat-messages flex-grow-1 overflow-auto mb-3\">\r\n            <div *ngIf=\"chatMessages.length === 0\" class=\"text-center py-4\">\r\n              <p class=\"text-muted\">Ask me anything about your project or tasks.</p>\r\n              <p class=\"text-muted small\">Examples:</p>\r\n              <ul class=\"text-muted small text-start\">\r\n                <li>How many tasks are in the current sprint?</li>\r\n                <li>Show me tasks assigned to John</li>\r\n                <li>Assign task #1234 to Sarah</li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <div *ngFor=\"let msg of chatMessages\" class=\"message mb-2\"\r\n                 [ngClass]=\"{'user-message': msg.role === 'user', 'assistant-message': msg.role === 'assistant'}\">\r\n              <div class=\"message-content\">\r\n                <div class=\"message-text\">{{ msg.content }}</div>\r\n                <div class=\"message-time small text-muted\">{{ msg.timestamp | date:'shortTime' }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Chat Input -->\r\n          <div class=\"chat-input\">\r\n            <div class=\"input-group\">\r\n              <input type=\"text\" class=\"form-control\" \r\n                     placeholder=\"Type your message...\" \r\n                     [(ngModel)]=\"currentMessage\"\r\n                     (keyup.enter)=\"sendChatMessage()\">\r\n              <button class=\"btn btn-primary\" type=\"button\" (click)=\"sendChatMessage()\">\r\n                <i class=\"bi bi-send\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Summary Cards Row -->\r\n  <div class=\"row mb-4\">\r\n    <div *ngIf=\"loading.summary || loadingAzureDevOps\" class=\"text-center py-4\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading work items...</span>\r\n      </div>\r\n      <p class=\"mt-2 text-muted\">Fetching data from Azure DevOps...</p>\r\n    </div>\r\n    \r\n    <div *ngIf=\"error.summary || azureDevOpsError\" class=\"alert alert-danger\">\r\n      {{ error.summary || azureDevOpsError }}\r\n    </div>\r\n    \r\n    <div *ngIf=\"(!loading.summary && !error.summary && sprintSummary) || (!loadingAzureDevOps && !azureDevOpsError)\" class=\"row\">\r\n      <div class=\"col-md-3 mb-3\">\r\n        <div class=\"card summary-card total-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Total Tasks</h5>\r\n            <h2 class=\"card-value\">{{ workItemCounts.totalTasks || sprintSummary?.totalTasks || 0 }}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-3 mb-3\">\r\n        <div class=\"card summary-card in-progress-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">In Progress</h5>\r\n            <h2 class=\"card-value\">{{ workItemCounts.inProgress || sprintSummary?.inProgress || 0 }}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-3 mb-3\">\r\n        <div class=\"card summary-card completed-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Completed</h5>\r\n            <h2 class=\"card-value\">{{ workItemCounts.completed || sprintSummary?.completed || 0 }}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-3 mb-3\">\r\n        <div class=\"card summary-card blocked-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Blocked</h5>\r\n            <h2 class=\"card-value\">{{ workItemCounts.blocked || sprintSummary?.blocked || 0 }}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <!-- Task Distribution Rows -->\r\n  <div class=\"row mb-4\">\r\n    <!-- Task Status Chart -->\r\n    <div class=\"col-md-6\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"mb-0\">Tasks by Status</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div *ngIf=\"loadingAzureDevOps\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading status data...</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div *ngIf=\"!loadingAzureDevOps && !azureDevOpsError\">\r\n            <canvas #statusPieChart></canvas>\r\n          </div>\r\n          \r\n          <div *ngIf=\"azureDevOpsError\" class=\"alert alert-danger\">\r\n            {{ azureDevOpsError }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Assignee Distribution -->\r\n    <div class=\"col-md-6\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"mb-0\">Tasks by Assignee</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div *ngIf=\"loadingAzureDevOps\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading assignee data...</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div *ngIf=\"!loadingAzureDevOps && !azureDevOpsError\">\r\n            <div *ngIf=\"getAssigneeDistribution().length === 0\" class=\"text-center py-4\">\r\n              <p class=\"text-muted\">No assignee data available</p>\r\n            </div>\r\n            \r\n            <div *ngFor=\"let assignee of getAssigneeDistribution()\" class=\"assignee-row mb-3\">\r\n              <div class=\"d-flex justify-content-between align-items-center mb-1\">\r\n                <h6 class=\"mb-0\">{{ assignee.name }}</h6>\r\n                <span class=\"badge bg-secondary\">{{ assignee.total }} tasks</span>\r\n              </div>\r\n              \r\n              <div class=\"d-flex flex-wrap\">\r\n                <div *ngIf=\"assignee.devNew > 0\" class=\"status-badge bg-light text-dark me-2 mb-1\">\r\n                  Dev-New: {{ assignee.devNew }}\r\n                </div>\r\n                <div *ngIf=\"assignee.inProgress > 0\" class=\"status-badge bg-primary text-white me-2 mb-1\">\r\n                  In Progress: {{ assignee.inProgress }}\r\n                </div>\r\n                <div *ngIf=\"assignee.codeReview > 0\" class=\"status-badge bg-info text-dark me-2 mb-1\">\r\n                  Code Review: {{ assignee.codeReview }}\r\n                </div>\r\n                <div *ngIf=\"assignee.devComplete > 0\" class=\"status-badge bg-success text-white me-2 mb-1\">\r\n                  Dev Complete: {{ assignee.devComplete }}\r\n                </div>\r\n                <div *ngIf=\"assignee.completed > 0\" class=\"status-badge bg-success text-white me-2 mb-1\">\r\n                  Completed: {{ assignee.completed }}\r\n                </div>\r\n                <div *ngIf=\"assignee.blocked > 0\" class=\"status-badge bg-danger text-white me-2 mb-1\">\r\n                  Blocked: {{ assignee.blocked }}\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"progress mt-2\" style=\"height: 6px;\">\r\n                <div class=\"progress-bar bg-primary\" \r\n                     [style.width.%]=\"(assignee.inProgress / assignee.total) * 100\"\r\n                     role=\"progressbar\"></div>\r\n                <div class=\"progress-bar bg-info\" \r\n                     [style.width.%]=\"(assignee.codeReview / assignee.total) * 100\"\r\n                     role=\"progressbar\"></div>\r\n                <div class=\"progress-bar bg-success\" \r\n                     [style.width.%]=\"((assignee.devComplete + assignee.completed) / assignee.total) * 100\"\r\n                     role=\"progressbar\"></div>\r\n                <div class=\"progress-bar bg-danger\" \r\n                     [style.width.%]=\"(assignee.blocked / assignee.total) * 100\"\r\n                     role=\"progressbar\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div *ngIf=\"azureDevOpsError\" class=\"alert alert-danger\">\r\n            {{ azureDevOpsError }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}