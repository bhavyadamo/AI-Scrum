{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/task.service\";\nimport * as i2 from \"../../services/team.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction TaskDistributionComponent_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"option\", 62);\n  }\n  if (rf & 2) {\n    const path_r32 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", path_r32);\n  }\n}\nfunction TaskDistributionComponent_span_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Search\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 63);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Auto-Assign Tasks\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 63);\n    i0.ɵɵtext(2, \" Loading Preview... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 63);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 64);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.error.autoAssign);\n  }\n}\nfunction TaskDistributionComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 65);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r7.error.iterationPaths);\n  }\n}\nfunction TaskDistributionComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 64);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.error.tasks);\n  }\n}\nfunction TaskDistributionComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 64);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r9.error.members);\n  }\n}\nfunction TaskDistributionComponent_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"div\", 67)(2, \"span\", 68);\n    i0.ɵɵtext(3, \"Loading tasks...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction TaskDistributionComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 64);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r11.error.tasks);\n  }\n}\nfunction TaskDistributionComponent_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"p\", 8);\n    i0.ɵɵtext(2, \"No tasks found for the current iteration path.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_51_tr_17_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r34 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r34.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_51_tr_17_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 79);\n    i0.ɵɵtext(1, \"Unassigned\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_51_tr_17_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 80)(1, \"small\", 81);\n    i0.ɵɵelement(2, \"i\", 82);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r34 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Suggest: \", task_r34.autoAssignSuggestion, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_51_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r41 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"span\", 72);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"td\")(9, \"div\", 73);\n    i0.ɵɵtemplate(10, TaskDistributionComponent_div_51_tr_17_span_10_Template, 2, 1, \"span\", 74);\n    i0.ɵɵtemplate(11, TaskDistributionComponent_div_51_tr_17_span_11_Template, 2, 0, \"span\", 75);\n    i0.ɵɵtemplate(12, TaskDistributionComponent_div_51_tr_17_div_12_Template, 4, 1, \"div\", 76);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"td\")(14, \"span\", 72);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"td\")(17, \"button\", 77);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_51_tr_17_Template_button_click_17_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r41);\n      const task_r34 = restoredCtx.$implicit;\n      const ctx_r40 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r40.openAssignModal(task_r34.id));\n    });\n    i0.ɵɵelement(18, \"i\", 78);\n    i0.ɵɵtext(19, \" Assign \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const task_r34 = ctx.$implicit;\n    const ctx_r33 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r34.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r34.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r33.getPriorityClass(task_r34.priority));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r34.priority, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", task_r34.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r34.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r34.autoAssignSuggestion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r33.getStatusClass(task_r34.status));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r34.status, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 69)(1, \"table\", 70)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Priority\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Assigned To\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\");\n    i0.ɵɵtext(13, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"th\");\n    i0.ɵɵtext(15, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"tbody\");\n    i0.ɵɵtemplate(17, TaskDistributionComponent_div_51_tr_17_Template, 20, 9, \"tr\", 71);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(17);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r13.filteredTasks);\n  }\n}\nfunction TaskDistributionComponent_div_63_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"div\", 67)(2, \"span\", 68);\n    i0.ɵɵtext(3, \"Loading team members...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction TaskDistributionComponent_div_64_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 64);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r15.error.members);\n  }\n}\nfunction TaskDistributionComponent_div_65_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"p\", 8);\n    i0.ɵɵtext(2, \"No team members found for the current iteration path.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_66_div_1_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 91);\n    i0.ɵɵelement(1, \"i\", 92);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r43 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", member_r43.email, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"bg-light\": a0\n  };\n};\nfunction TaskDistributionComponent_div_66_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 84)(1, \"div\", 85)(2, \"div\", 30)(3, \"h5\", 86);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 87)(6, \"span\", 72);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 88);\n    i0.ɵɵelement(9, \"div\", 89);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, TaskDistributionComponent_div_66_div_1_div_10_Template, 3, 1, \"div\", 90);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const member_r43 = ctx.$implicit;\n    const ctx_r42 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r42.getTaskCount(member_r43.displayName) === 0));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(member_r43.displayName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r42.getTeamMemberWorkloadClass(ctx_r42.getTaskCount(member_r43.displayName)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r42.getTaskCount(member_r43.displayName), \" Tasks \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r42.getWorkloadPercentage(ctx_r42.getTaskCount(member_r43.displayName)), \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r42.getProgressBarClass(ctx_r42.getTaskCount(member_r43.displayName)));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r42.getTaskCount(member_r43.displayName));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", member_r43.email);\n  }\n}\nfunction TaskDistributionComponent_div_66_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtemplate(1, TaskDistributionComponent_div_66_div_1_Template, 11, 11, \"div\", 83);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r17.filteredTeamMembers);\n  }\n}\nfunction TaskDistributionComponent_div_75_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 93);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r18.error.assign);\n  }\n}\nfunction TaskDistributionComponent_div_76_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 94)(2, \"label\", 95);\n    i0.ɵɵtext(3, \"Task ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 96);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 94)(7, \"label\", 95);\n    i0.ɵɵtext(8, \"Task Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 96);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r19.selectedTask);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r19.getSelectedTaskTitle(), \" \");\n  }\n}\nfunction TaskDistributionComponent_div_81_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r48 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 97)(1, \"input\", 98);\n    i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_div_81_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r48);\n      const ctx_r47 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r47.selectedMember = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 99)(3, \"div\", 3)(4, \"span\", 100);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"span\", 72);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const member_r46 = ctx.$implicit;\n    const ctx_r20 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"member-\" + member_r46.id)(\"value\", member_r46.displayName)(\"ngModel\", ctx_r20.selectedMember);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"for\", \"member-\" + member_r46.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(member_r46.displayName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r20.getTeamMemberWorkloadClass(ctx_r20.getTaskCount(member_r46.displayName)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.getTaskCount(member_r46.displayName), \" Tasks \");\n  }\n}\nfunction TaskDistributionComponent_span_86_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Assign\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_87_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 63);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_88_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 101);\n  }\n}\nfunction TaskDistributionComponent_div_98_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 93);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r24.error.preview);\n  }\n}\nfunction TaskDistributionComponent_div_104_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"div\", 67)(2, \"span\", 68);\n    i0.ɵɵtext(3, \"Loading assignment suggestions...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 102);\n    i0.ɵɵtext(5, \"Analyzing tasks and developer performance...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_105_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 103);\n    i0.ɵɵelement(1, \"i\", 59);\n    i0.ɵɵtext(2, \" No \\\"Dev-New\\\" tasks available for assignment. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_106_div_13_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r54 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", status_r54.status, \": \", status_r54.count, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_106_div_13_div_7_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r56 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r56.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r56.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r56.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r56.assignedTo || \"Unassigned\");\n  }\n}\nfunction TaskDistributionComponent_div_106_div_13_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 69)(1, \"table\", 112)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Assigned To\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"tbody\");\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_106_div_13_div_7_tr_13_Template, 9, 4, \"tr\", 71);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r51 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r51.getDevNewTasks());\n  }\n}\nfunction TaskDistributionComponent_div_106_div_13_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 65);\n    i0.ɵɵtext(1, \" No tasks with 'Dev-New' status found in the data. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_106_div_13_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 65);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r53 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Found \", ctx_r53.getDevNewTasks().length, \" Dev-New tasks, but all are already assigned. \");\n  }\n}\nfunction TaskDistributionComponent_div_106_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h6\");\n    i0.ɵɵtext(2, \"Status Distribution:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, TaskDistributionComponent_div_106_div_13_li_4_Template, 2, 2, \"li\", 71);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"h6\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, TaskDistributionComponent_div_106_div_13_div_7_Template, 14, 1, \"div\", 32);\n    i0.ɵɵtemplate(8, TaskDistributionComponent_div_106_div_13_div_8_Template, 2, 0, \"div\", 19);\n    i0.ɵɵtemplate(9, TaskDistributionComponent_div_106_div_13_div_9_Template, 2, 1, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r49 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r49.getStatusDistribution());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Dev-New Tasks (\", ctx_r49.getDevNewTasks().length, \"):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r49.getDevNewTasks().length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r49.getDevNewTasks().length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r49.getUnassignedDevNewTasks().length === 0 && ctx_r49.getDevNewTasks().length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_106_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 104)(1, \"div\", 105)(2, \"div\", 106)(3, \"h2\", 107)(4, \"button\", 108);\n    i0.ɵɵelement(5, \"i\", 109);\n    i0.ɵɵtext(6, \" Debug Information \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 110)(8, \"div\", 111)(9, \"h6\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"h6\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_106_div_13_Template, 10, 5, \"div\", 14);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r27 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate1(\"Total Tasks: \", ctx_r27.tasks.length, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Total Tasks: \", ctx_r27.filteredTasks.length, \" (filtered from \", ctx_r27.tasks.length, \" total)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r27.filteredTasks.length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_107_tr_20_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r58 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r58.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_107_tr_20_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 125);\n    i0.ɵɵtext(1, \"Unassigned\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_107_tr_20_ng_container_15_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 128);\n    i0.ɵɵtext(1, \"Reassignment\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_107_tr_20_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 73)(2, \"span\", 126);\n    i0.ɵɵtext(3, \"AI Pick\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"strong\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, TaskDistributionComponent_div_107_tr_20_ng_container_15_span_6_Template, 2, 0, \"span\", 127);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const task_r58 = i0.ɵɵnextContext().$implicit;\n    const ctx_r61 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r61.extractDeveloperName(ctx_r61.assignPreviewSuggestions[task_r58.id]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r61.extractDeveloperName(ctx_r61.assignPreviewSuggestions[task_r58.id]) !== task_r58.assignedTo && task_r58.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_107_tr_20_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵtext(1, \"No suggestion available\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_107_tr_20_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 129);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r58 = i0.ɵɵnextContext().$implicit;\n    const ctx_r63 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r63.extractLogicExplanation(ctx_r63.assignPreviewSuggestions[task_r58.id]), \" \");\n  }\n}\nfunction TaskDistributionComponent_div_107_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\")(4, \"span\", 120);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"span\", 121);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtemplate(12, TaskDistributionComponent_div_107_tr_20_span_12_Template, 2, 1, \"span\", 122);\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_107_tr_20_span_13_Template, 2, 0, \"span\", 123);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtemplate(15, TaskDistributionComponent_div_107_tr_20_ng_container_15_Template, 7, 2, \"ng-container\", 14);\n    i0.ɵɵtemplate(16, TaskDistributionComponent_div_107_tr_20_span_16_Template, 2, 0, \"span\", 122);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"td\");\n    i0.ɵɵtemplate(18, TaskDistributionComponent_div_107_tr_20_span_18_Template, 2, 1, \"span\", 124);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r58 = ctx.$implicit;\n    const ctx_r57 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r58.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r58.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r58.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r58.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", task_r58.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r58.assignedTo);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r57.assignPreviewSuggestions[task_r58.id]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r57.assignPreviewSuggestions[task_r58.id]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r57.assignPreviewSuggestions[task_r58.id]);\n  }\n}\nfunction TaskDistributionComponent_div_107_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 69)(2, \"table\", 70)(3, \"thead\")(4, \"tr\")(5, \"th\");\n    i0.ɵɵtext(6, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14, \"Current Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16, \"Suggested Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"th\");\n    i0.ɵɵtext(18, \"Assignment Logic\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"tbody\");\n    i0.ɵɵtemplate(20, TaskDistributionComponent_div_107_tr_20_Template, 19, 9, \"tr\", 71);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(21, \"div\", 113)(22, \"h6\");\n    i0.ɵɵtext(23, \"Assignment Logic Explanation:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"ul\", 114)(25, \"li\", 115);\n    i0.ɵɵelement(26, \"i\", 116);\n    i0.ɵɵelementStart(27, \"small\")(28, \"strong\");\n    i0.ɵɵtext(29, \"Past Expertise\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(30, \" - Completed similar tasks in the past 3 months\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"li\", 115);\n    i0.ɵɵelement(32, \"i\", 117);\n    i0.ɵɵelementStart(33, \"small\")(34, \"strong\");\n    i0.ɵɵtext(35, \"Recent Completion\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(36, \" - Recently completed tasks with no active work\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(37, \"li\", 115);\n    i0.ɵɵelement(38, \"i\", 118);\n    i0.ɵɵelementStart(39, \"small\")(40, \"strong\");\n    i0.ɵɵtext(41, \"Low Workload\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(42, \" - Developer with few active tasks\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(43, \"li\", 115);\n    i0.ɵɵelement(44, \"i\", 119);\n    i0.ɵɵelementStart(45, \"small\")(46, \"strong\");\n    i0.ɵɵtext(47, \"Least Assigned\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(48, \" - Developer with lowest total task count\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r28 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(20);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r28.assignPreviewTasks);\n  }\n}\nfunction TaskDistributionComponent_span_113_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Confirm & Assign\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_114_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 63);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_115_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 101);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"show\": a0\n  };\n};\nexport class TaskDistributionComponent {\n  constructor(taskService, teamService) {\n    this.taskService = taskService;\n    this.teamService = teamService;\n    this.tasks = [];\n    this.filteredTasks = [];\n    this.teamMembers = [];\n    this.filteredTeamMembers = []; // New property for filtered team members\n    this.selectedTaskId = null;\n    this.selectedTeamMemberId = '';\n    this.selectedTask = null; // Added for modal display\n    this.selectedMember = ''; // Added for member selection in modal\n    this.currentIterationPath = 'Techoil\\\\2.3.23'; // Default value\n    this.manualIterationPath = ''; // For manual input\n    this.teamName = 'RND'; // Default team name\n    this.iterationPaths = []; // Will be loaded from API\n    this.teamMemberTaskCounts = {}; // Added for task counts\n    // Auto-assign preview properties\n    this.showingPreview = false;\n    this.assignPreviewTasks = [];\n    this.assignPreviewSuggestions = {};\n    // Track the active tab\n    this.activeTab = 'distribution';\n    // Convert simple boolean to object with specific loading states\n    this.loading = {\n      tasks: false,\n      members: false,\n      assign: false,\n      autoAssign: false,\n      iterationPaths: false,\n      taskCounts: false,\n      preview: false // Added for auto-assign preview loading\n    };\n    // Convert simple string to object with specific error states\n    this.error = {\n      tasks: null,\n      members: null,\n      assign: null,\n      autoAssign: null,\n      iterationPaths: null,\n      taskCounts: null,\n      preview: null // Added for auto-assign preview errors\n    };\n  }\n\n  ngOnInit() {\n    this.loadIterationPaths();\n  }\n  /**\r\n   * Handle tab change events\r\n   * @param tabId The ID of the selected tab\r\n   */\n  onTabChange(tabId) {\n    console.log(`Tab changed to: ${tabId}`);\n    this.activeTab = tabId;\n    // Load specific data based on the selected tab\n    if (tabId === 'workload') {\n      // Force refresh team members and workload data\n      this.loadTeamMembers();\n      this.loadTeamMemberTaskCounts();\n      console.log('Refreshing team workload data');\n    } else if (tabId === 'distribution') {\n      // Refresh tasks if needed\n      if (this.filteredTasks.length === 0 && !this.loading.tasks) {\n        this.loadTasks();\n        console.log('Refreshing task distribution data');\n      }\n    }\n  }\n  ngAfterViewInit() {\n    // Initialize Bootstrap tabs\n    this.initializeBootstrapTabs();\n  }\n  /**\r\n   * Initialize Bootstrap tabs programmatically\r\n   */\n  initializeBootstrapTabs() {\n    try {\n      // Check if Bootstrap's Tab class is available globally\n      if (typeof window.bootstrap !== 'undefined' && window.bootstrap.Tab) {\n        // Initialize all tabs\n        const tabElements = document.querySelectorAll('[data-bs-toggle=\"tab\"]');\n        tabElements.forEach(tabEl => {\n          // Create tab instance\n          const tab = new window.bootstrap.Tab(tabEl);\n          // Add event listener for tab shown event\n          tabEl.addEventListener('shown.bs.tab', event => {\n            // Extract tab ID from the target\n            const targetId = event.target.getAttribute('data-bs-target');\n            const tabId = targetId === '#task-distribution' ? 'distribution' : 'workload';\n            console.log(`Tab shown event: ${tabId}`);\n            // Update active tab and ensure data is loaded\n            this.activeTab = tabId;\n            // Ensure tab content is loaded/refreshed\n            if (tabId === 'workload' && this.filteredTeamMembers.length === 0 && !this.loading.members) {\n              this.loadTeamMembers();\n              this.loadTeamMemberTaskCounts();\n            }\n          });\n        });\n        console.log('Bootstrap tabs initialized successfully with event listeners');\n      } else {\n        console.warn('Bootstrap JavaScript not found. Tabs may not function properly.');\n      }\n    } catch (error) {\n      console.error('Error initializing Bootstrap tabs:', error);\n    }\n  }\n  loadIterationPaths() {\n    this.loading.iterationPaths = true;\n    this.error.iterationPaths = null;\n    this.taskService.getIterationPaths().subscribe({\n      next: paths => {\n        this.iterationPaths = paths;\n        this.loading.iterationPaths = false;\n        if (paths.length > 0) {\n          // Use the first path as default if available\n          this.currentIterationPath = paths[0];\n          this.manualIterationPath = paths[0];\n        }\n        // We no longer automatically load data after loading iteration paths\n        // Data will be loaded when the search button is clicked\n      },\n\n      error: err => {\n        console.error('Error loading iteration paths:', err);\n        this.error.iterationPaths = `Failed to load iteration paths: ${err.message}`;\n        this.loading.iterationPaths = false;\n        // Add fallback iteration paths if API call fails\n        this.iterationPaths = ['Techoil\\\\2.3.23', 'Techoil\\\\2.3.24', 'Techoil\\\\2.3.25', 'Techoil\\\\2.3.26'];\n        console.log('Using fallback iteration paths:', this.iterationPaths);\n        // We no longer automatically load data after loading iteration paths\n        // Data will be loaded when the search button is clicked\n      }\n    });\n  }\n  /**\r\n   * Search button handler - loads data based on manual inputs\r\n   */\n  searchClicked() {\n    // Update the current iteration path with the manual input\n    this.currentIterationPath = this.manualIterationPath;\n    // Clear previous errors\n    this.error.tasks = null;\n    this.error.members = null;\n    // Load data based on the manual inputs\n    this.loadTasks();\n    this.loadTeamMembers();\n  }\n  loadTasks() {\n    this.loading.tasks = true;\n    this.error.tasks = null;\n    console.log(`Loading tasks for iteration path: ${this.currentIterationPath}`);\n    this.taskService.getTasks(this.currentIterationPath).subscribe({\n      next: tasks => {\n        this.tasks = tasks;\n        this.loading.tasks = false;\n        console.log(`Loaded ${tasks.length} tasks for iteration path ${this.currentIterationPath}`);\n        // After loading tasks, update team workload and filter tasks\n        if (this.teamMembers.length > 0) {\n          this.updateTeamWorkload();\n          this.filterTasksByRnDTeamMembers();\n        }\n      },\n      error: err => {\n        console.error(`Error loading tasks for iteration path ${this.currentIterationPath}:`, err);\n        this.error.tasks = `Failed to load tasks: ${err.message}`;\n        this.loading.tasks = false;\n      }\n    });\n  }\n  loadTeamMembers() {\n    this.loading.members = true;\n    this.error.members = null;\n    // Use the teamService directly to get team members by team name\n    this.teamService.getTeamMembersByTeam(this.teamName, this.currentIterationPath).subscribe({\n      next: teamMembers => {\n        this.teamMembers = teamMembers;\n        console.log(`Loaded ${this.teamName} team members:`, this.teamMembers);\n        this.loading.members = false;\n        // Filter out non-R&D team members\n        this.filterRnDTeamMembers();\n        // Load team member task counts after loading team members\n        this.loadTeamMemberTaskCounts();\n        // If tasks are already loaded, update workload\n        if (this.tasks.length > 0) {\n          this.updateTeamWorkload();\n        } else {\n          // If no tasks are loaded yet, still show the team members\n          console.log('No tasks loaded yet, showing filtered team members');\n        }\n      },\n      error: err => {\n        console.error(`Error loading ${this.teamName} team members:`, err);\n        // Fallback to regular team members if team-specific call fails\n        this.taskService.getTeamMembers(this.currentIterationPath).subscribe({\n          next: response => {\n            // Process the response as an array of TeamMember objects\n            if (Array.isArray(response)) {\n              this.teamMembers = response;\n              // Filter out non-R&D team members\n              this.filterRnDTeamMembers();\n              // If tasks are already loaded, update team workload data\n              if (this.tasks.length > 0) {\n                this.updateTeamWorkload();\n              }\n            } else {\n              console.error('Unexpected response format from getTeamMembers:', response);\n              this.error.members = 'Failed to load team members: Invalid response format';\n            }\n            this.loading.members = false;\n          },\n          error: memberErr => {\n            console.error(`Error loading team members for iteration path ${this.currentIterationPath}:`, memberErr);\n            this.error.members = `Failed to load team members: ${memberErr.message}`;\n            this.loading.members = false;\n          }\n        });\n      }\n    });\n  }\n  /**\r\n   * Filter team members to only include R&D team members\r\n   */\n  filterRnDTeamMembers() {\n    // Filter out members that don't have an R&D-related team property\n    this.filteredTeamMembers = this.teamMembers.filter(member => {\n      // If member has a team property and it contains R&D-related terms\n      if (member.team) {\n        return member.team.toLowerCase().includes('r&d') || member.team.toLowerCase().includes('rnd') || member.team.toLowerCase().includes('research');\n      }\n      // Log members without team info\n      console.log(`Team member without team info: ${member.displayName}`);\n      // If no team property, default to including the member (backend should have already filtered)\n      return true;\n    });\n    // Log the results\n    console.log(`Filtered ${this.teamMembers.length} team members down to ${this.filteredTeamMembers.length} R&D members`);\n  }\n  /**\r\n   * Load task counts for each team member from the API\r\n   */\n  loadTeamMemberTaskCounts() {\n    this.loading.taskCounts = true;\n    this.error.taskCounts = null;\n    this.taskService.getTeamMemberTaskCounts(this.currentIterationPath).subscribe({\n      next: counts => {\n        this.teamMemberTaskCounts = counts;\n        this.loading.taskCounts = false;\n        console.log('Loaded team member task counts:', this.teamMemberTaskCounts);\n        // Update the team members with their task counts\n        this.updateTeamWorkload();\n      },\n      error: err => {\n        console.error('Error loading team member task counts:', err);\n        this.error.taskCounts = `Failed to load task counts: ${err.message}`;\n        this.loading.taskCounts = false;\n        // Fall back to counting tasks manually\n        this.updateTeamWorkload();\n      }\n    });\n  }\n  /**\r\n   * Calculate and update team members' workload based on task assignments\r\n   */\n  updateTeamWorkload() {\n    console.log('Updating team workload');\n    // Reset all workloads to 0 for all team members\n    this.teamMembers.forEach(member => {\n      member.currentWorkload = 0;\n    });\n    // If we have task counts from the API, use those\n    if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n      this.teamMembers.forEach(member => {\n        // Try to find this member in the task counts\n        const counts = Object.entries(this.teamMemberTaskCounts).find(([name, _]) => name.toLowerCase() === member.displayName.toLowerCase());\n        if (counts) {\n          member.currentWorkload = counts[1]; // Set the count from the API\n        }\n      });\n    } else {\n      // Fall back to counting from tasks array\n      this.tasks.forEach(task => {\n        if (task.assignedTo) {\n          // Normalize the assignedTo value\n          const normalizedAssignedTo = task.assignedTo.trim().toLowerCase();\n          // Find matching team member\n          const matchedMember = this.teamMembers.find(member => member.displayName.toLowerCase() === normalizedAssignedTo);\n          if (matchedMember) {\n            matchedMember.currentWorkload++;\n          }\n        }\n      });\n    }\n    // Re-apply R&D filter to ensure we only show R&D team members\n    this.filterRnDTeamMembers();\n    // Also filter tasks to match R&D team members\n    this.filterTasksByRnDTeamMembers();\n    console.log('Updated team workload for filtered members:', this.filteredTeamMembers);\n  }\n  /**\r\n   * Check if a team member is part of the current iteration team\r\n   * This is a placeholder - you may need to implement actual logic based on your data model\r\n   */\n  isPartOfCurrentIterationTeam(member) {\n    // By default, include all team members\n    // You might want to enhance this with actual iteration team membership logic\n    return true;\n  }\n  assignTask() {\n    if (!this.selectedTask) {\n      this.error.assign = 'Error: No task selected for assignment';\n      return;\n    }\n    if (!this.selectedMember) {\n      this.error.assign = 'Please select a team member for assignment';\n      return;\n    }\n    this.loading.assign = true;\n    this.error.assign = null;\n    // Use the selected member name directly for the API call\n    console.log(`Assigning task ${this.selectedTask} to member ${this.selectedMember}`);\n    this.taskService.assignTask(this.selectedTask, this.selectedMember).subscribe({\n      next: response => {\n        console.log('Task assignment successful:', response);\n        // Close the modal\n        this.cancelAssign();\n        // Show success message (could be implemented with a toast/snackbar service)\n        this.showSuccessMessage('Task assigned successfully');\n        // Reload tasks and task counts to reflect changes\n        this.loadTasks();\n        this.loadTeamMemberTaskCounts();\n      },\n      error: err => {\n        console.error('Error assigning task:', err);\n        this.error.assign = `Failed to assign task: ${err.message}`;\n        this.loading.assign = false;\n      }\n    });\n  }\n  // Helper method to show success message (placeholder for toast/snackbar)\n  showSuccessMessage(message) {\n    console.log('SUCCESS:', message);\n    // In a real implementation, you would use a toast/snackbar service\n    // Example: this.toastService.show(message, { classname: 'bg-success' });\n    // For now, create a simple alert element that disappears after a few seconds\n    const alertDiv = document.createElement('div');\n    alertDiv.className = 'alert alert-success position-fixed top-0 end-0 m-3';\n    alertDiv.textContent = message;\n    alertDiv.style.zIndex = '9999';\n    document.body.appendChild(alertDiv);\n    // Remove after 3 seconds\n    setTimeout(() => {\n      alertDiv.remove();\n    }, 3000);\n  }\n  /**\r\n   * Show auto-assign preview before actually assigning tasks\r\n   */\n  showAutoAssignPreview() {\n    this.loading.preview = true;\n    this.error.preview = null;\n    this.showingPreview = true;\n    // First get all tasks for the iteration path\n    this.taskService.getTasks(this.currentIterationPath).subscribe({\n      next: tasks => {\n        console.log('Got tasks from service:', tasks);\n        console.log('Tasks with Dev-New status:', tasks.filter(t => t.status && t.status.toLowerCase() === 'dev-new'));\n        // First, get all Dev-New tasks\n        const allDevNewTasks = tasks.filter(t => t.status && t.status.toLowerCase() === 'dev-new');\n        console.log('All Dev-New tasks:', allDevNewTasks);\n        // Get R&D team members for this iteration path\n        this.teamService.getTeamMembersByTeam('RND', this.currentIterationPath).subscribe({\n          next: rndMembers => {\n            console.log('Got R&D team members for auto-assign:', rndMembers);\n            // Extract the list of R&D team member names for the API\n            const rndMemberNames = rndMembers.map(m => m.displayName);\n            // Then, get suggestions for which tasks should be reassigned\n            // Pass the R&D team member names to the API for filtering\n            this.taskService.getAutoAssignSuggestionsForTeam(this.currentIterationPath, rndMemberNames).subscribe({\n              next: suggestions => {\n                this.assignPreviewSuggestions = suggestions;\n                console.log('Got suggestions for R&D members:', suggestions);\n                // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n                const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n                this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(task.id));\n                console.log('Filtered tasks to be reassigned:', this.assignPreviewTasks);\n                this.loading.preview = false;\n              },\n              error: err => {\n                // Fall back to the standard auto-assign if the R&D-specific endpoint fails\n                console.error('Failed to get R&D-specific suggestions, falling back to standard auto-assign:', err);\n                this.getStandardAutoAssignSuggestions(allDevNewTasks);\n              }\n            });\n          },\n          error: err => {\n            console.error('Error loading R&D team members for auto-assign:', err);\n            // Fall back to the standard auto-assign if R&D team member loading fails\n            this.getStandardAutoAssignSuggestions(allDevNewTasks);\n          }\n        });\n      },\n      error: err => {\n        this.error.preview = `Failed to load tasks: ${err.message}`;\n        this.loading.preview = false;\n      }\n    });\n  }\n  /**\r\n   * Fallback method to get standard auto-assign suggestions if R&D-specific fails\r\n   */\n  getStandardAutoAssignSuggestions(allDevNewTasks) {\n    this.taskService.getAutoAssignSuggestions(this.currentIterationPath).subscribe({\n      next: suggestions => {\n        this.assignPreviewSuggestions = suggestions;\n        console.log('Got standard suggestions (fallback):', suggestions);\n        // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n        const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n        this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(task.id));\n        console.log('Filtered tasks to be reassigned (fallback):', this.assignPreviewTasks);\n        this.loading.preview = false;\n      },\n      error: err => {\n        this.error.preview = `Failed to load auto-assign suggestions: ${err.message}`;\n        this.loading.preview = false;\n      }\n    });\n  }\n  /**\r\n   * Check if there are valid assignment suggestions\r\n   */\n  hasAssignmentSuggestions() {\n    return this.assignPreviewSuggestions && Object.keys(this.assignPreviewSuggestions).length > 0;\n  }\n  /**\r\n   * Cancel auto-assign preview and close the modal\r\n   */\n  cancelAutoAssignPreview() {\n    this.showingPreview = false;\n    this.assignPreviewTasks = [];\n    this.assignPreviewSuggestions = {};\n    this.error.preview = null;\n  }\n  /**\r\n   * Confirm and perform the auto-assignments\r\n   */\n  confirmAutoAssign() {\n    this.loading.autoAssign = true;\n    this.error.autoAssign = null;\n    const assignmentPromises = [];\n    let assignmentCount = 0;\n    // For each task with a suggestion, create an assignment\n    for (const task of this.assignPreviewTasks) {\n      if (this.assignPreviewSuggestions[task.id]) {\n        const developerName = this.extractDeveloperName(this.assignPreviewSuggestions[task.id]);\n        assignmentPromises.push(this.taskService.assignTask(task.id, developerName));\n        assignmentCount++;\n      }\n    }\n    // If we have assignments to make, execute them all in parallel\n    if (assignmentPromises.length > 0) {\n      forkJoin(assignmentPromises).subscribe({\n        next: () => {\n          // Hide the preview after successful assignment\n          this.showingPreview = false;\n          // Refresh the task list\n          this.loadTasks();\n          // Show success message\n          alert(`Successfully assigned ${assignmentCount} tasks.`);\n          this.loading.autoAssign = false;\n        },\n        error: err => {\n          this.error.autoAssign = `Error assigning tasks: ${err.message}`;\n          this.loading.autoAssign = false;\n        }\n      });\n    } else {\n      this.loading.autoAssign = false;\n      this.error.preview = \"No tasks available for assignment.\";\n    }\n  }\n  /**\r\n   * Extract just the developer name from the suggestion string\r\n   * Format is typically \"Name (explanation)\"\r\n   */\n  extractDeveloperName(suggestion) {\n    if (!suggestion) return '';\n    const parts = suggestion.split(' (');\n    return parts[0];\n  }\n  /**\r\n   * Extract the logic explanation from the suggestion string\r\n   * Format is typically \"Name (explanation)\"\r\n   */\n  extractLogicExplanation(suggestion) {\n    if (!suggestion) return '';\n    const match = suggestion.match(/\\((.*?)\\)/);\n    return match ? match[1] : '';\n  }\n  /**\r\n   * Original auto-assign tasks method - replaced with preview workflow\r\n   */\n  autoAssignTasks() {\n    this.loading.autoAssign = true;\n    this.error.autoAssign = null;\n    this.taskService.autoAssignTasks(this.currentIterationPath).subscribe({\n      next: () => {\n        // Reload tasks and task counts to reflect changes\n        this.loadTasks();\n        this.loadTeamMemberTaskCounts();\n        this.loading.autoAssign = false;\n      },\n      error: err => {\n        this.error.autoAssign = `Failed to auto-assign tasks: ${err.message}`;\n        this.loading.autoAssign = false;\n      }\n    });\n  }\n  openAssignModal(taskId) {\n    this.selectedTask = taskId;\n    this.selectedMember = '';\n    this.error.assign = null;\n    // Get the iteration path for this specific task - first try filtered tasks\n    let task = this.filteredTasks.find(t => t.id === taskId);\n    // If not found, check all tasks (in case this is accessing a non-filtered task)\n    if (!task) {\n      task = this.tasks.find(t => t.id === taskId);\n    }\n    if (task && task.iterationPath) {\n      // Fetch R&D team members specifically for this task's iteration path\n      this.loading.members = true;\n      this.teamService.getTeamMembersByTeam('RND', task.iterationPath).subscribe({\n        next: members => {\n          this.teamMembers = members;\n          this.loading.members = false;\n          // Filter to R&D team members\n          this.filterRnDTeamMembers();\n          // Load task counts after team members are loaded\n          if (task && task.iterationPath) {\n            this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n          }\n        },\n        error: err => {\n          console.error(`Error loading R&D team members for iteration path ${task?.iterationPath ?? 'unknown'}:`, err);\n          this.error.members = `Failed to load team members: ${err.message}`;\n          this.loading.members = false;\n          // Fallback to regular team members if R&D team fetch fails\n          if (task && task.iterationPath) {\n            this.taskService.getTeamMembers(task.iterationPath).subscribe({\n              next: response => {\n                if (Array.isArray(response) && response.length > 0) {\n                  if (typeof response[0] === 'string') {\n                    // String array response\n                    const names = response;\n                    this.teamMembers = names.map((name, index) => ({\n                      id: `member-${index}`,\n                      displayName: name,\n                      uniqueName: '',\n                      currentWorkload: 0,\n                      isActive: true,\n                      email: ''\n                    }));\n                  } else {\n                    // TeamMember array response\n                    this.teamMembers = response;\n                  }\n                } else {\n                  this.teamMembers = [];\n                }\n                this.loading.members = false;\n                // Filter to R&D team members even with fallback response\n                this.filterRnDTeamMembers();\n                if (task && task.iterationPath) {\n                  this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n                }\n              },\n              error: fallbackErr => {\n                console.error(`Error loading fallback team members:`, fallbackErr);\n                this.error.members = `Failed to load team members: ${fallbackErr.message}`;\n                this.loading.members = false;\n              }\n            });\n          } else {\n            console.error('Cannot load team members: task or iterationPath is undefined');\n            this.loading.members = false;\n          }\n        }\n      });\n    } else {\n      // Ensure we have team members loaded before showing the modal\n      if (this.filteredTeamMembers.length === 0 && !this.loading.members) {\n        this.loadTeamMembers();\n      }\n      // Make sure we have task counts loaded\n      if (Object.keys(this.teamMemberTaskCounts).length === 0) {\n        this.loadTeamMemberTaskCounts();\n      }\n    }\n  }\n  /**\r\n   * Load task counts specifically for the modal dialogue\r\n   * This ensures counts are up-to-date when assigning tasks\r\n   */\n  loadTeamMemberTaskCountsForModal(iterationPath) {\n    this.loading.taskCounts = true;\n    this.taskService.getTeamMemberTaskCounts(iterationPath).subscribe({\n      next: counts => {\n        this.teamMemberTaskCounts = counts;\n        this.loading.taskCounts = false;\n        console.log('Loaded team member task counts for modal:', this.teamMemberTaskCounts);\n      },\n      error: err => {\n        console.error('Error loading team member task counts for modal:', err);\n        this.loading.taskCounts = false;\n      }\n    });\n  }\n  cancelAssign() {\n    this.selectedTask = null;\n    this.selectedMember = '';\n    this.error.assign = null;\n    this.loading.assign = false;\n  }\n  /**\r\n   * Get CSS class for priority badge\r\n   * @param priority Priority value (number or string)\r\n   * @returns CSS class name\r\n   */\n  getPriorityClass(priority) {\n    // Convert priority to number if it's a string\n    const priorityNum = typeof priority === 'string' ? parseInt(priority, 10) : priority;\n    if (isNaN(priorityNum)) {\n      return 'bg-secondary'; // Default for invalid priority\n    }\n\n    switch (priorityNum) {\n      case 1:\n        return 'bg-danger';\n      case 2:\n        return 'bg-warning text-dark';\n      case 3:\n        return 'bg-info text-dark';\n      case 4:\n        return 'bg-success';\n      default:\n        return 'bg-secondary';\n    }\n  }\n  /**\r\n   * Get CSS class for status badge\r\n   * @param status Status string or undefined\r\n   * @returns CSS class name\r\n   */\n  getStatusClass(status) {\n    if (!status) {\n      return 'bg-secondary'; // Default for undefined status\n    }\n\n    const statusLower = status.toLowerCase();\n    if (statusLower.includes('progress') || statusLower === 'active') {\n      return 'bg-primary';\n    } else if (statusLower === 'completed' || statusLower === 'done' || statusLower === 'closed') {\n      return 'bg-success';\n    } else if (statusLower === 'blocked') {\n      return 'bg-danger';\n    } else if (statusLower === 'to do' || statusLower === 'new') {\n      return 'bg-secondary';\n    } else {\n      return 'bg-info';\n    }\n  }\n  /**\r\n   * Get CSS class for team member workload indicator\r\n   * @param workload Current workload value\r\n   * @returns CSS class name\r\n   */\n  getTeamMemberWorkloadClass(workload) {\n    if (workload === 0) {\n      return 'bg-secondary';\n    } else if (workload < 3) {\n      return 'bg-success';\n    } else if (workload < 7) {\n      return 'bg-warning text-dark';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  /**\r\n   * Get the progress bar class based on workload\r\n   * @param workload Current workload\r\n   * @returns Bootstrap progress bar class\r\n   */\n  getProgressBarClass(workload) {\n    if (workload === 0) {\n      return 'bg-secondary';\n    } else if (workload < 3) {\n      return 'bg-success';\n    } else if (workload < 7) {\n      return 'bg-warning';\n    } else {\n      return 'bg-danger';\n    }\n  }\n  /**\r\n   * Calculate workload as a percentage (for progress bar width)\r\n   * @param workload Current workload\r\n   * @returns Percentage value (0-100)\r\n   */\n  getWorkloadPercentage(workload) {\n    // Using 10 as maximum reasonable workload\n    const maxWorkload = 10;\n    return Math.min(100, workload / maxWorkload * 100);\n  }\n  /**\r\n   * Handle changing the iteration path\r\n   * @param iterationPath The new iteration path\r\n   */\n  changeIterationPath(iterationPath) {\n    console.log(`Changing iteration path to: ${iterationPath}`);\n    if (this.currentIterationPath === iterationPath) {\n      console.log('Iteration path unchanged, skipping reload');\n      return;\n    }\n    // Update both the current and manual iteration paths\n    this.currentIterationPath = iterationPath;\n    this.manualIterationPath = iterationPath;\n    // For backward compatibility, trigger the search (load data)\n    this.searchClicked();\n  }\n  /**\r\n   * Get the title of the currently selected task\r\n   * @returns The task title or a fallback message\r\n   */\n  getSelectedTaskTitle() {\n    if (this.selectedTask === null) {\n      return 'No task selected';\n    }\n    const selectedTaskId = this.selectedTask;\n    // First try to find in filtered tasks\n    let task = this.filteredTasks.find(t => t.id === selectedTaskId);\n    // If not found (could be a non-R&D task), look in all tasks\n    if (!task) {\n      task = this.tasks.find(t => t.id === selectedTaskId);\n    }\n    return task ? task.title : 'Unknown Task';\n  }\n  /**\r\n   * Get the task count for a specific team member\r\n   * @param memberName The name of the team member\r\n   * @returns The number of tasks assigned to that member\r\n   */\n  getTaskCount(memberName) {\n    // First check if we have task counts from the API\n    if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n      // Look for an exact match\n      if (this.teamMemberTaskCounts[memberName] !== undefined) {\n        return this.teamMemberTaskCounts[memberName];\n      }\n      // Try case-insensitive match\n      const key = Object.keys(this.teamMemberTaskCounts).find(k => k.toLowerCase() === memberName.toLowerCase());\n      if (key) {\n        return this.teamMemberTaskCounts[key];\n      }\n    }\n    // Fall back to the currentWorkload from team members\n    const member = this.teamMembers.find(m => m.displayName.toLowerCase() === memberName.toLowerCase());\n    return member ? member.currentWorkload : 0;\n  }\n  /**\r\n   * Get a list of all tasks with Dev-New status\r\n   * @returns List of Dev-New tasks\r\n   */\n  getDevNewTasks() {\n    return this.filteredTasks.filter(task => task.status && task.status.toLowerCase() === 'dev-new');\n  }\n  /**\r\n   * Get a list of unassigned Dev-New tasks\r\n   * @returns List of unassigned Dev-New tasks\r\n   */\n  getUnassignedDevNewTasks() {\n    return this.filteredTasks.filter(task => task.status && task.status.toLowerCase() === 'dev-new' && !task.assignedTo);\n  }\n  /**\r\n   * Get a summary of task status distribution\r\n   * @returns Array of status counts\r\n   */\n  getStatusDistribution() {\n    const statusCounts = {};\n    this.filteredTasks.forEach(task => {\n      const status = task.status || 'Unknown';\n      statusCounts[status] = (statusCounts[status] || 0) + 1;\n    });\n    return Object.entries(statusCounts).map(([status, count]) => ({\n      status,\n      count\n    })).sort((a, b) => b.count - a.count);\n  }\n  /**\r\n   * Filter tasks to only show those assigned to R&D team members\r\n   */\n  filterTasksByRnDTeamMembers() {\n    // First ensure we have filtered team members\n    if (this.filteredTeamMembers.length === 0) {\n      this.filterRnDTeamMembers();\n    }\n    // Get a list of display names of filtered R&D team members\n    const rndMemberNames = this.filteredTeamMembers.map(member => member.displayName.toLowerCase());\n    console.log('R&D team member names for task filtering:', rndMemberNames);\n    // Filter tasks to only include those assigned to R&D members and unassigned tasks\n    this.filteredTasks = this.tasks.filter(task => {\n      // Always include unassigned tasks\n      if (!task.assignedTo) {\n        return true;\n      }\n      // Check if task is assigned to an R&D team member\n      return rndMemberNames.includes(task.assignedTo.toLowerCase());\n    });\n    console.log(`Filtered ${this.tasks.length} tasks down to ${this.filteredTasks.length} tasks assigned to R&D members or unassigned`);\n  }\n  static {\n    this.ɵfac = function TaskDistributionComponent_Factory(t) {\n      return new (t || TaskDistributionComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.TeamService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskDistributionComponent,\n      selectors: [[\"app-task-distribution\"]],\n      decls: 116,\n      vars: 50,\n      consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [1, \"d-flex\"], [1, \"me-2\"], [\"type\", \"text\", \"placeholder\", \"Team Name\", 1, \"form-control\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [1, \"text-muted\"], [\"type\", \"text\", \"placeholder\", \"Iteration Path\", \"list\", \"iterationPathsList\", 1, \"form-control\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [\"id\", \"iterationPathsList\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", \"me-2\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-search\", \"me-1\"], [4, \"ngIf\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-magic\"], [1, \"text-muted\", \"mt-2\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [\"id\", \"taskTabs\", \"role\", \"tablist\", 1, \"nav\", \"nav-tabs\", \"mb-4\"], [\"role\", \"presentation\", 1, \"nav-item\"], [\"id\", \"task-distribution-tab\", \"data-bs-toggle\", \"tab\", \"data-bs-target\", \"#task-distribution\", \"type\", \"button\", \"role\", \"tab\", \"aria-controls\", \"task-distribution\", \"aria-selected\", \"true\", 1, \"nav-link\", \"active\", 3, \"click\"], [1, \"bi\", \"bi-list-task\", \"me-2\"], [\"id\", \"task-workload-tab\", \"data-bs-toggle\", \"tab\", \"data-bs-target\", \"#task-workload\", \"type\", \"button\", \"role\", \"tab\", \"aria-controls\", \"task-workload\", \"aria-selected\", \"false\", 1, \"nav-link\", 3, \"click\"], [1, \"bi\", \"bi-bar-chart-line\", \"me-2\"], [\"id\", \"taskTabsContent\", 1, \"tab-content\"], [\"id\", \"task-distribution\", \"role\", \"tabpanel\", \"aria-labelledby\", \"task-distribution-tab\", 1, \"tab-pane\", \"fade\", \"show\", \"active\"], [1, \"row\"], [1, \"card\"], [1, \"card-body\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [\"id\", \"task-workload\", \"role\", \"tabpanel\", \"aria-labelledby\", \"task-workload-tab\", 1, \"tab-pane\", \"fade\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"btn\", \"btn-outline-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-arrow-clockwise\", \"me-1\"], [\"class\", \"row\", 4, \"ngIf\"], [\"tabindex\", \"-1\", 1, \"modal\", 3, \"ngClass\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\"], [\"class\", \"alert alert-danger mb-3\", 4, \"ngIf\"], [1, \"mb-4\"], [\"for\", \"teamMemberSelect\", 1, \"form-label\", \"fw-bold\", \"mb-2\"], [1, \"team-member-options\"], [\"class\", \"form-check mb-2 border p-2 rounded\", 4, \"ngFor\", \"ngForOf\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"class\", \"modal-backdrop fade show\", 4, \"ngIf\"], [1, \"modal-dialog\", \"modal-lg\"], [1, \"modal-header\", \"bg-primary\", \"text-white\"], [1, \"bi\", \"bi-magic\", \"me-2\"], [\"type\", \"button\", 1, \"btn-close\", \"btn-close-white\", 3, \"click\"], [1, \"alert\", \"alert-primary\", \"mb-3\"], [1, \"bi\", \"bi-info-circle\", \"me-2\"], [\"class\", \"alert alert-info\", 4, \"ngIf\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [3, \"value\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-warning\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\"], [4, \"ngFor\", \"ngForOf\"], [1, \"badge\", \"rounded-pill\", 3, \"ngClass\"], [1, \"d-flex\", \"align-items-center\"], [\"class\", \"me-2\", 4, \"ngIf\"], [\"class\", \"text-muted me-2\", 4, \"ngIf\"], [\"class\", \"ms-1 suggestion-box\", 4, \"ngIf\"], [1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-person-plus\"], [1, \"text-muted\", \"me-2\"], [1, \"ms-1\", \"suggestion-box\"], [1, \"text-primary\"], [1, \"bi\", \"bi-lightbulb-fill\"], [\"class\", \"col-md-3 col-sm-6 mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-3\", \"col-sm-6\", \"mb-3\"], [1, \"card\", \"team-member-card\", \"h-100\", 3, \"ngClass\"], [1, \"card-title\"], [1, \"workload-stats\", \"mt-2\"], [1, \"progress\", \"mt-2\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"10\", 1, \"progress-bar\", 3, \"ngClass\"], [\"class\", \"text-muted mt-2 small\", 4, \"ngIf\"], [1, \"text-muted\", \"mt-2\", \"small\"], [1, \"bi\", \"bi-envelope\"], [1, \"alert\", \"alert-danger\", \"mb-3\"], [1, \"mb-3\"], [1, \"form-label\", \"fw-bold\"], [1, \"py-2\", \"px-3\", \"bg-light\", \"rounded\"], [1, \"form-check\", \"mb-2\", \"border\", \"p-2\", \"rounded\"], [\"type\", \"radio\", \"name\", \"teamMemberRadio\", 1, \"form-check-input\", 3, \"id\", \"value\", \"ngModel\", \"ngModelChange\"], [1, \"form-check-label\", \"w-100\"], [1, \"member-name\"], [1, \"modal-backdrop\", \"fade\", \"show\"], [1, \"mt-2\"], [1, \"alert\", \"alert-info\"], [1, \"mt-3\"], [\"id\", \"debugAccordion\", 1, \"accordion\"], [1, \"accordion-item\"], [\"id\", \"headingOne\", 1, \"accordion-header\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#collapseOne\", \"aria-expanded\", \"false\", \"aria-controls\", \"collapseOne\", 1, \"accordion-button\", \"collapsed\"], [1, \"bi\", \"bi-bug\", \"me-2\"], [\"id\", \"collapseOne\", \"aria-labelledby\", \"headingOne\", \"data-bs-parent\", \"#debugAccordion\", 1, \"accordion-collapse\", \"collapse\"], [1, \"accordion-body\"], [1, \"table\", \"table-sm\", \"table-bordered\"], [1, \"mt-4\"], [1, \"list-unstyled\", \"row\"], [1, \"col-md-6\", \"mb-2\"], [1, \"bi\", \"bi-trophy\", \"text-warning\", \"me-2\"], [1, \"bi\", \"bi-check-circle\", \"text-success\", \"me-2\"], [1, \"bi\", \"bi-speedometer2\", \"text-info\", \"me-2\"], [1, \"bi\", \"bi-person-plus\", \"text-primary\", \"me-2\"], [1, \"badge\", \"bg-info\", \"text-dark\"], [1, \"badge\", \"bg-secondary\"], [\"class\", \"text-muted\", 4, \"ngIf\"], [\"class\", \"badge bg-warning text-dark\", 4, \"ngIf\"], [\"class\", \"text-muted small\", 4, \"ngIf\"], [1, \"badge\", \"bg-warning\", \"text-dark\"], [1, \"badge\", \"bg-success\", \"me-2\"], [\"class\", \"ms-2 badge bg-warning text-dark\", 4, \"ngIf\"], [1, \"ms-2\", \"badge\", \"bg-warning\", \"text-dark\"], [1, \"text-muted\", \"small\"]],\n      template: function TaskDistributionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\", 4);\n          i0.ɵɵtext(5, \"Task Distribution\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\")(7, \"div\", 5)(8, \"div\", 6)(9, \"input\", 7);\n          i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_Template_input_ngModelChange_9_listener($event) {\n            return ctx.teamName = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"small\", 8);\n          i0.ɵɵtext(11, \"e.g., RND\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"div\", 6)(13, \"input\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_Template_input_ngModelChange_13_listener($event) {\n            return ctx.manualIterationPath = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"small\", 8);\n          i0.ɵɵtext(15, \"e.g., Techoil\\\\2.3.23\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"datalist\", 10);\n          i0.ɵɵtemplate(17, TaskDistributionComponent_option_17_Template, 1, 1, \"option\", 11);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(18, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_18_listener() {\n            return ctx.searchClicked();\n          });\n          i0.ɵɵelement(19, \"i\", 13);\n          i0.ɵɵtemplate(20, TaskDistributionComponent_span_20_Template, 2, 0, \"span\", 14);\n          i0.ɵɵtemplate(21, TaskDistributionComponent_span_21_Template, 3, 0, \"span\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"button\", 15);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_22_listener() {\n            return ctx.showAutoAssignPreview();\n          });\n          i0.ɵɵelement(23, \"i\", 16);\n          i0.ɵɵtemplate(24, TaskDistributionComponent_span_24_Template, 2, 0, \"span\", 14);\n          i0.ɵɵtemplate(25, TaskDistributionComponent_span_25_Template, 3, 0, \"span\", 14);\n          i0.ɵɵtemplate(26, TaskDistributionComponent_span_26_Template, 3, 0, \"span\", 14);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(27, \"p\", 17);\n          i0.ɵɵtext(28, \"Manage and assign tasks for the current sprint\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(29, TaskDistributionComponent_div_29_Template, 2, 1, \"div\", 18);\n          i0.ɵɵtemplate(30, TaskDistributionComponent_div_30_Template, 2, 1, \"div\", 19);\n          i0.ɵɵtemplate(31, TaskDistributionComponent_div_31_Template, 2, 1, \"div\", 18);\n          i0.ɵɵtemplate(32, TaskDistributionComponent_div_32_Template, 2, 1, \"div\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(33, \"ul\", 20)(34, \"li\", 21)(35, \"button\", 22);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_35_listener() {\n            return ctx.onTabChange(\"distribution\");\n          });\n          i0.ɵɵelement(36, \"i\", 23);\n          i0.ɵɵtext(37, \"Task Distribution \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(38, \"li\", 21)(39, \"button\", 24);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_39_listener() {\n            return ctx.onTabChange(\"workload\");\n          });\n          i0.ɵɵelement(40, \"i\", 25);\n          i0.ɵɵtext(41, \"Task Workload \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(42, \"div\", 26)(43, \"div\", 27)(44, \"div\", 28)(45, \"div\", 2)(46, \"div\", 29)(47, \"div\", 30);\n          i0.ɵɵtemplate(48, TaskDistributionComponent_div_48_Template, 4, 0, \"div\", 31);\n          i0.ɵɵtemplate(49, TaskDistributionComponent_div_49_Template, 2, 1, \"div\", 18);\n          i0.ɵɵtemplate(50, TaskDistributionComponent_div_50_Template, 3, 0, \"div\", 31);\n          i0.ɵɵtemplate(51, TaskDistributionComponent_div_51_Template, 18, 1, \"div\", 32);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(52, \"div\", 33)(53, \"div\", 28)(54, \"div\", 2)(55, \"div\", 29)(56, \"div\", 34)(57, \"h4\", 4);\n          i0.ɵɵtext(58, \"Team Workload\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(59, \"button\", 35);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_59_listener() {\n            ctx.loadTeamMembers();\n            return ctx.loadTeamMemberTaskCounts();\n          });\n          i0.ɵɵelement(60, \"i\", 36);\n          i0.ɵɵtext(61, \" Refresh Data \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(62, \"div\", 30);\n          i0.ɵɵtemplate(63, TaskDistributionComponent_div_63_Template, 4, 0, \"div\", 31);\n          i0.ɵɵtemplate(64, TaskDistributionComponent_div_64_Template, 2, 1, \"div\", 18);\n          i0.ɵɵtemplate(65, TaskDistributionComponent_div_65_Template, 3, 0, \"div\", 31);\n          i0.ɵɵtemplate(66, TaskDistributionComponent_div_66_Template, 2, 1, \"div\", 37);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(67, \"div\", 38)(68, \"div\", 39)(69, \"div\", 40)(70, \"div\", 41)(71, \"h5\", 42);\n          i0.ɵɵtext(72, \"Assign Task\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(73, \"button\", 43);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_73_listener() {\n            return ctx.cancelAssign();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(74, \"div\", 44);\n          i0.ɵɵtemplate(75, TaskDistributionComponent_div_75_Template, 2, 1, \"div\", 45);\n          i0.ɵɵtemplate(76, TaskDistributionComponent_div_76_Template, 11, 2, \"div\", 14);\n          i0.ɵɵelementStart(77, \"div\", 46)(78, \"label\", 47);\n          i0.ɵɵtext(79, \"Select Team Member\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(80, \"div\", 48);\n          i0.ɵɵtemplate(81, TaskDistributionComponent_div_81_Template, 8, 7, \"div\", 49);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(82, \"div\", 50)(83, \"button\", 51);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_83_listener() {\n            return ctx.cancelAssign();\n          });\n          i0.ɵɵtext(84, \"Cancel\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(85, \"button\", 52);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_85_listener() {\n            return ctx.assignTask();\n          });\n          i0.ɵɵtemplate(86, TaskDistributionComponent_span_86_Template, 2, 0, \"span\", 14);\n          i0.ɵɵtemplate(87, TaskDistributionComponent_span_87_Template, 3, 0, \"span\", 14);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(88, TaskDistributionComponent_div_88_Template, 1, 0, \"div\", 53);\n          i0.ɵɵelementStart(89, \"div\", 38)(90, \"div\", 54)(91, \"div\", 40)(92, \"div\", 55)(93, \"h5\", 42);\n          i0.ɵɵelement(94, \"i\", 56);\n          i0.ɵɵtext(95, \" Auto-Assign Preview \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(96, \"button\", 57);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_96_listener() {\n            return ctx.cancelAutoAssignPreview();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(97, \"div\", 44);\n          i0.ɵɵtemplate(98, TaskDistributionComponent_div_98_Template, 2, 1, \"div\", 45);\n          i0.ɵɵelementStart(99, \"div\", 58);\n          i0.ɵɵelement(100, \"i\", 59);\n          i0.ɵɵelementStart(101, \"strong\");\n          i0.ɵɵtext(102, \"Preview Mode:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(103, \" Review AI-suggested assignments before confirming. No changes will be made until you click \\\"Confirm & Assign\\\". \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(104, TaskDistributionComponent_div_104_Template, 6, 0, \"div\", 31);\n          i0.ɵɵtemplate(105, TaskDistributionComponent_div_105_Template, 3, 0, \"div\", 60);\n          i0.ɵɵtemplate(106, TaskDistributionComponent_div_106_Template, 14, 4, \"div\", 61);\n          i0.ɵɵtemplate(107, TaskDistributionComponent_div_107_Template, 49, 1, \"div\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(108, \"div\", 50)(109, \"button\", 51);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_109_listener() {\n            return ctx.cancelAutoAssignPreview();\n          });\n          i0.ɵɵtext(110, \"Cancel\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(111, \"button\", 52);\n          i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_111_listener() {\n            return ctx.confirmAutoAssign();\n          });\n          i0.ɵɵelement(112, \"i\", 56);\n          i0.ɵɵtemplate(113, TaskDistributionComponent_span_113_Template, 2, 0, \"span\", 14);\n          i0.ɵɵtemplate(114, TaskDistributionComponent_span_114_Template, 3, 0, \"span\", 14);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(115, TaskDistributionComponent_div_115_Template, 1, 0, \"div\", 53);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngModel\", ctx.teamName)(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.manualIterationPath)(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.iterationPaths);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.loading.tasks || ctx.loading.members);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.loading.members);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.tasks || ctx.loading.members);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.loading.autoAssign || ctx.loading.preview);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.autoAssign && !ctx.loading.preview);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.preview);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.autoAssign);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.autoAssign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.iterationPaths);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.tasks);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.members);\n          i0.ɵɵadvance(16);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.tasks);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.tasks);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.error.tasks && ctx.tasks.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.error.tasks && ctx.tasks.length > 0);\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.members);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.members);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.members && !ctx.error.members && ctx.filteredTeamMembers.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.members && !ctx.error.members && ctx.filteredTeamMembers.length > 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleProp(\"display\", ctx.selectedTask !== null ? \"block\" : \"none\");\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(46, _c1, ctx.selectedTask !== null));\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.assign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTask !== null);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.filteredTeamMembers);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", ctx.loading.assign || !ctx.selectedMember);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.assign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.assign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTask !== null);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleProp(\"display\", ctx.showingPreview ? \"block\" : \"none\");\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(48, _c1, ctx.showingPreview));\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.preview);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.preview);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length > 0);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", ctx.loading.autoAssign || !ctx.assignPreviewTasks || ctx.assignPreviewTasks.length === 0 || !ctx.hasAssignmentSuggestions());\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.autoAssign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.autoAssign);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showingPreview);\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.RadioControlValueAccessor, i4.NgControlStatus, i4.NgModel],\n      styles: [\".card[_ngcontent-%COMP%] {\\n  border-radius: 8px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n  margin-bottom: 20px;\\n}\\n\\n\\n.nav-tabs[_ngcontent-%COMP%] {\\n  border-bottom: 1px solid #dee2e6;\\n}\\n\\n.nav-tabs[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%] {\\n  border: none;\\n  color: #495057;\\n  font-weight: 500;\\n  padding: 10px 16px;\\n  margin-right: 4px;\\n  border-radius: 4px 4px 0 0;\\n  transition: all 0.2s ease;\\n}\\n\\n.nav-tabs[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%]:hover {\\n  background-color: rgba(13, 110, 253, 0.05);\\n  border-color: transparent;\\n}\\n\\n.nav-tabs[_ngcontent-%COMP%]   .nav-link.active[_ngcontent-%COMP%] {\\n  color: #0d6efd;\\n  background-color: #fff;\\n  border-bottom: 3px solid #0d6efd;\\n  font-weight: 600;\\n}\\n\\n.tab-content[_ngcontent-%COMP%] {\\n  padding: 20px 0;\\n}\\n\\n.card-header[_ngcontent-%COMP%] {\\n  background-color: #f8f9fa;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\\n  padding: 12px 16px;\\n}\\n\\n.table[_ngcontent-%COMP%] {\\n  margin-bottom: 0;\\n}\\n\\n.table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n  color: #495057;\\n}\\n\\n.suggestion-box[_ngcontent-%COMP%] {\\n  background-color: rgba(13, 110, 253, 0.05);\\n  padding: 3px 6px;\\n  border-radius: 4px;\\n  border-left: 2px solid #0d6efd;\\n  font-size: 0.8rem;\\n}\\n\\n\\n.team-member-card[_ngcontent-%COMP%] {\\n  transition: all 0.3s ease;\\n  border-radius: 8px;\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\\n}\\n.team-member-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\\n}\\n.team-member-card[_ngcontent-%COMP%]   .card-title[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n  margin-bottom: 0.5rem;\\n}\\n\\n\\n.workload-indicator[_ngcontent-%COMP%] {\\n  position: relative;\\n  height: 24px;\\n  border-radius: 12px;\\n  background-color: #f0f0f0;\\n  overflow: hidden;\\n  margin-top: 10px;\\n}\\n\\n.workload-bar[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  height: 100%;\\n  z-index: 1;\\n}\\n\\n.workload-label[_ngcontent-%COMP%] {\\n  position: relative;\\n  z-index: 2;\\n  display: block;\\n  text-align: center;\\n  line-height: 24px;\\n  font-size: 0.8rem;\\n  font-weight: 500;\\n  color: #333;\\n}\\n\\n.low-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%] {\\n  background-color: #28a745;\\n}\\n\\n.medium-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%] {\\n  background-color: #ffc107;\\n}\\n\\n.high-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%] {\\n  background-color: #dc3545;\\n}\\n\\n.workload-stats[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  justify-content: flex-start;\\n  margin-bottom: 0.5rem;\\n}\\n.workload-stats[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%] {\\n  font-size: 0.8rem;\\n  padding: 5px 10px;\\n}\\n\\n.progress[_ngcontent-%COMP%] {\\n  height: 8px;\\n  background-color: #f0f0f0;\\n}\\n\\n\\n.modal-backdrop[_ngcontent-%COMP%] {\\n  opacity: 0.5;\\n}\\n\\n.modal-content[_ngcontent-%COMP%] {\\n  border-radius: 8px;\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\\n}\\n\\n\\n#teamMemberSelect[_ngcontent-%COMP%] {\\n  max-height: 300px;\\n  width: 100%;\\n}\\n\\n#teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%] {\\n  padding: 8px 12px;\\n  cursor: pointer;\\n}\\n\\n#teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]:hover, #teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]:focus {\\n  background-color: #e9ecef;\\n}\\n\\n\\nselect.form-select[_ngcontent-%COMP%] {\\n  height: auto !important;\\n}\\n\\nselect.form-select[_ngcontent-%COMP%]   option[_ngcontent-%COMP%] {\\n  display: block;\\n  font-size: 16px;\\n  line-height: 1.5;\\n  padding: 8px 12px;\\n}\\n\\n\\n@keyframes _ngcontent-%COMP%_pulse {\\n  0% {\\n    box-shadow: 0 0 0 0 rgba(13, 110, 253, 0.4);\\n  }\\n  70% {\\n    box-shadow: 0 0 0 10px rgba(13, 110, 253, 0);\\n  }\\n  100% {\\n    box-shadow: 0 0 0 0 rgba(13, 110, 253, 0);\\n  }\\n}\\n\\n.team-member-options[_ngcontent-%COMP%] {\\n  max-height: 300px;\\n  overflow-y: auto;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%] {\\n  transition: all 0.2s ease;\\n  cursor: pointer;\\n  border: 1px solid #dee2e6 !important;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]:hover {\\n  background-color: #f8f9fa;\\n  transform: translateY(-2px);\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n  padding: 4px 0;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .member-name[_ngcontent-%COMP%] {\\n  font-weight: 500;\\n}\\n\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]:checked    + .form-check-label[_ngcontent-%COMP%] {\\n  color: #0d6efd;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]:checked    + .form-check-label[_ngcontent-%COMP%]   .member-name[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n}\\n\\n.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]:has(.form-check-input:checked) {\\n  background-color: rgba(13, 110, 253, 0.05);\\n  border-color: #0d6efd !important;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWRpc3RyaWJ1dGlvbi90YXNrLWRpc3RyaWJ1dGlvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBQ0Esd0NBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBLGdCQUFBO0FBQ0E7RUFDRSxnQ0FBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtFQUNBLGNBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0VBQ0EsaUJBQUE7RUFDQSwwQkFBQTtFQUNBLHlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSwwQ0FBQTtFQUNBLHlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxjQUFBO0VBQ0Esc0JBQUE7RUFDQSxnQ0FBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxlQUFBO0FBQ0Y7O0FBRUE7RUFDRSx5QkFBQTtFQUNBLDZDQUFBO0VBQ0Esa0JBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxnQkFBQTtFQUNBLGNBQUE7QUFDRjs7QUFFQTtFQUNFLDBDQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUNBLDhCQUFBO0VBQ0EsaUJBQUE7QUFDRjs7QUFFQSxzQkFBQTtBQUNBO0VBQ0UseUJBQUE7RUFDQSxrQkFBQTtFQUNBLHdDQUFBO0FBQ0Y7QUFDRTtFQUNFLDJCQUFBO0VBQ0EseUNBQUE7QUFDSjtBQUVFO0VBQ0UsZ0JBQUE7RUFDQSxxQkFBQTtBQUFKOztBQUlBLHdCQUFBO0FBQ0E7RUFDRSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtFQUNBLHlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxnQkFBQTtBQURGOztBQUlBO0VBQ0Usa0JBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLFlBQUE7RUFDQSxVQUFBO0FBREY7O0FBSUE7RUFDRSxrQkFBQTtFQUNBLFVBQUE7RUFDQSxjQUFBO0VBQ0Esa0JBQUE7RUFDQSxpQkFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0FBREY7O0FBSUE7RUFDRSx5QkFBQTtBQURGOztBQUlBO0VBQ0UseUJBQUE7QUFERjs7QUFJQTtFQUNFLHlCQUFBO0FBREY7O0FBSUE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSwyQkFBQTtFQUNBLHFCQUFBO0FBREY7QUFHRTtFQUNFLGlCQUFBO0VBQ0EsaUJBQUE7QUFESjs7QUFLQTtFQUNFLFdBQUE7RUFDQSx5QkFBQTtBQUZGOztBQUtBLHdCQUFBO0FBQ0E7RUFDRSxZQUFBO0FBRkY7O0FBS0E7RUFDRSxrQkFBQTtFQUNBLHlDQUFBO0FBRkY7O0FBS0Esc0NBQUE7QUFDQTtFQUNFLGlCQUFBO0VBQ0EsV0FBQTtBQUZGOztBQUtBO0VBQ0UsaUJBQUE7RUFDQSxlQUFBO0FBRkY7O0FBS0E7O0VBRUUseUJBQUE7QUFGRjs7QUFLQSxvRUFBQTtBQUNBO0VBQ0UsdUJBQUE7QUFGRjs7QUFLQTtFQUNFLGNBQUE7RUFDQSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxpQkFBQTtBQUZGOztBQUtBLGVBQUE7QUFDQTtFQUNFO0lBQ0UsMkNBQUE7RUFGRjtFQUlBO0lBQ0UsNENBQUE7RUFGRjtFQUlBO0lBQ0UseUNBQUE7RUFGRjtBQUNGO0FBS0EsK0JBQUE7QUFDQTtFQUNFLGlCQUFBO0VBQ0EsZ0JBQUE7QUFIRjs7QUFNQTtFQUNFLHlCQUFBO0VBQ0EsZUFBQTtFQUNBLG9DQUFBO0FBSEY7O0FBTUE7RUFDRSx5QkFBQTtFQUNBLDJCQUFBO0VBQ0Esd0NBQUE7QUFIRjs7QUFNQTtFQUNFLGVBQUE7QUFIRjs7QUFNQTtFQUNFLGVBQUE7RUFDQSxjQUFBO0FBSEY7O0FBTUE7RUFDRSxnQkFBQTtBQUhGOztBQU1BLGdDQUFBO0FBQ0E7RUFDRSxjQUFBO0FBSEY7O0FBTUE7RUFDRSxnQkFBQTtBQUhGOztBQU1BO0VBQ0UsMENBQUE7RUFDQSxnQ0FBQTtBQUhGIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmQge1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGJveC1zaGFkb3c6IDAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG59XG5cbi8qIFRhYiBTdHlsaW5nICovXG4ubmF2LXRhYnMge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RlZTJlNjtcbn1cblxuLm5hdi10YWJzIC5uYXYtbGluayB7XG4gIGJvcmRlcjogbm9uZTtcbiAgY29sb3I6ICM0OTUwNTc7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIHBhZGRpbmc6IDEwcHggMTZweDtcbiAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweCA0cHggMCAwO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xufVxuXG4ubmF2LXRhYnMgLm5hdi1saW5rOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMywgMTEwLCAyNTMsIDAuMDUpO1xuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4ubmF2LXRhYnMgLm5hdi1saW5rLmFjdGl2ZSB7XG4gIGNvbG9yOiAjMGQ2ZWZkO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIzBkNmVmZDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbn1cblxuLnRhYi1jb250ZW50IHtcbiAgcGFkZGluZzogMjBweCAwO1xufVxuXG4uY2FyZC1oZWFkZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjEyNSk7XG4gIHBhZGRpbmc6IDEycHggMTZweDtcbn1cblxuLnRhYmxlIHtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn1cblxuLnRhYmxlIHRoIHtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICM0OTUwNTc7XG59XG5cbi5zdWdnZXN0aW9uLWJveCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTMsIDExMCwgMjUzLCAwLjA1KTtcbiAgcGFkZGluZzogM3B4IDZweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICMwZDZlZmQ7XG4gIGZvbnQtc2l6ZTogMC44cmVtO1xufVxuXG4vKiBUZWFtIE1lbWJlciBDYXJkcyAqL1xuLnRlYW0tbWVtYmVyLWNhcmQge1xuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsMCwwLDAuMSk7XG4gIFxuICAmOmhvdmVyIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTVweCk7XG4gICAgYm94LXNoYWRvdzogMCA1cHggMTVweCByZ2JhKDAsMCwwLDAuMSk7XG4gIH1cbiAgXG4gIC5jYXJkLXRpdGxlIHtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgfVxufVxuXG4vKiBXb3JrbG9hZCBJbmRpY2F0b3JzICovXG4ud29ya2xvYWQtaW5kaWNhdG9yIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG5cbi53b3JrbG9hZC1iYXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB6LWluZGV4OiAxO1xufVxuXG4ud29ya2xvYWQtbGFiZWwge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDI7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6ICMzMzM7XG59XG5cbi5sb3ctd29ya2xvYWQgLndvcmtsb2FkLWJhciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMyOGE3NDU7XG59XG5cbi5tZWRpdW0td29ya2xvYWQgLndvcmtsb2FkLWJhciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmMxMDc7XG59XG5cbi5oaWdoLXdvcmtsb2FkIC53b3JrbG9hZC1iYXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xufVxuXG4ud29ya2xvYWQtc3RhdHMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgXG4gIC5iYWRnZSB7XG4gICAgZm9udC1zaXplOiAwLjhyZW07XG4gICAgcGFkZGluZzogNXB4IDEwcHg7XG4gIH1cbn1cblxuLnByb2dyZXNzIHtcbiAgaGVpZ2h0OiA4cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XG59XG5cbi8qIE1vZGFsIGN1c3RvbWl6YXRpb24gKi9cbi5tb2RhbC1iYWNrZHJvcCB7XG4gIG9wYWNpdHk6IDAuNTtcbn1cblxuLm1vZGFsLWNvbnRlbnQge1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGJveC1zaGFkb3c6IDAgNXB4IDE1cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xufVxuXG4vKiBEcm9wZG93biBpbiB0aGUgQXNzaWduIFRhc2sgbW9kYWwgKi9cbiN0ZWFtTWVtYmVyU2VsZWN0IHtcbiAgbWF4LWhlaWdodDogMzAwcHg7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4jdGVhbU1lbWJlclNlbGVjdCBvcHRpb24ge1xuICBwYWRkaW5nOiA4cHggMTJweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4jdGVhbU1lbWJlclNlbGVjdCBvcHRpb246aG92ZXIsXG4jdGVhbU1lbWJlclNlbGVjdCBvcHRpb246Zm9jdXMge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xufVxuXG4vKiBPdmVycmlkZSBicm93c2VyIHN0eWxlcyB0byBlbnN1cmUgZHJvcGRvd24gc2hvd3MgbXVsdGlwbGUgaXRlbXMgKi9cbnNlbGVjdC5mb3JtLXNlbGVjdCB7XG4gIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xufVxuXG5zZWxlY3QuZm9ybS1zZWxlY3Qgb3B0aW9uIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgcGFkZGluZzogOHB4IDEycHg7XG59XG5cbi8qIEFuaW1hdGlvbnMgKi9cbkBrZXlmcmFtZXMgcHVsc2Uge1xuICAwJSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMCByZ2JhKDEzLCAxMTAsIDI1MywgMC40KTtcbiAgfVxuICA3MCUge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDEwcHggcmdiYSgxMywgMTEwLCAyNTMsIDApO1xuICB9XG4gIDEwMCUge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAgcmdiYSgxMywgMTEwLCAyNTMsIDApO1xuICB9XG59XG5cbi8qIEN1c3RvbSB0ZWFtIG1lbWJlciBvcHRpb25zICovXG4udGVhbS1tZW1iZXItb3B0aW9ucyB7XG4gIG1heC1oZWlnaHQ6IDMwMHB4O1xuICBvdmVyZmxvdy15OiBhdXRvO1xufVxuXG4udGVhbS1tZW1iZXItb3B0aW9ucyAuZm9ybS1jaGVjayB7XG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RlZTJlNiAhaW1wb3J0YW50O1xufVxuXG4udGVhbS1tZW1iZXItb3B0aW9ucyAuZm9ybS1jaGVjazpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTtcbiAgYm94LXNoYWRvdzogMCAycHggNXB4IHJnYmEoMCwwLDAsMC4xKTtcbn1cblxuLnRlYW0tbWVtYmVyLW9wdGlvbnMgLmZvcm0tY2hlY2staW5wdXQge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi50ZWFtLW1lbWJlci1vcHRpb25zIC5mb3JtLWNoZWNrLWxhYmVsIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBwYWRkaW5nOiA0cHggMDtcbn1cblxuLnRlYW0tbWVtYmVyLW9wdGlvbnMgLm1lbWJlci1uYW1lIHtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbn1cblxuLyogU2VsZWN0ZWQgdGVhbSBtZW1iZXIgb3B0aW9uICovXG4udGVhbS1tZW1iZXItb3B0aW9ucyAuZm9ybS1jaGVjay1pbnB1dDpjaGVja2VkICsgLmZvcm0tY2hlY2stbGFiZWwge1xuICBjb2xvcjogIzBkNmVmZDtcbn1cblxuLnRlYW0tbWVtYmVyLW9wdGlvbnMgLmZvcm0tY2hlY2staW5wdXQ6Y2hlY2tlZCArIC5mb3JtLWNoZWNrLWxhYmVsIC5tZW1iZXItbmFtZSB7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG59XG5cbi50ZWFtLW1lbWJlci1vcHRpb25zIC5mb3JtLWNoZWNrOmhhcyguZm9ybS1jaGVjay1pbnB1dDpjaGVja2VkKSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTMsIDExMCwgMjUzLCAwLjA1KTtcbiAgYm9yZGVyLWNvbG9yOiAjMGQ2ZWZkICFpbXBvcnRhbnQ7XG59ICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["forkJoin","i0","TaskDistributionComponent","constructor","taskService","teamService","tasks","members","assign","autoAssign","iterationPaths","taskCounts","preview","ngOnInit","loadIterationPaths","onTabChange","tabId","console","log","activeTab","loadTeamMembers","loadTeamMemberTaskCounts","filteredTasks","length","loading","loadTasks","ngAfterViewInit","initializeBootstrapTabs","window","bootstrap","Tab","tabElements","document","querySelectorAll","forEach","tabEl","tab","addEventListener","event","targetId","target","getAttribute","filteredTeamMembers","warn","error","getIterationPaths","subscribe","next","paths","currentIterationPath","manualIterationPath","err","message","searchClicked","getTasks","teamMembers","updateTeamWorkload","filterTasksByRnDTeamMembers","getTeamMembersByTeam","teamName","filterRnDTeamMembers","getTeamMembers","response","Array","isArray","memberErr","filter","member","team","toLowerCase","includes","displayName","getTeamMemberTaskCounts","counts","teamMemberTaskCounts","currentWorkload","Object","keys","entries","find","name","_","task","assignedTo","normalizedAssignedTo","trim","matchedMember","isPartOfCurrentIterationTeam","assignTask","selectedTask","selectedMember","cancelAssign","showSuccessMessage","alertDiv","createElement","className","textContent","style","zIndex","body","appendChild","setTimeout","remove","showAutoAssignPreview","showingPreview","t","status","allDevNewTasks","rndMembers","rndMemberNames","map","m","getAutoAssignSuggestionsForTeam","suggestions","assignPreviewSuggestions","suggestedTaskIds","id","parseInt","assignPreviewTasks","getStandardAutoAssignSuggestions","getAutoAssignSuggestions","hasAssignmentSuggestions","cancelAutoAssignPreview","confirmAutoAssign","assignmentPromises","assignmentCount","developerName","extractDeveloperName","push","alert","suggestion","parts","split","extractLogicExplanation","match","autoAssignTasks","openAssignModal","taskId","iterationPath","loadTeamMemberTaskCountsForModal","names","index","uniqueName","isActive","email","fallbackErr","getPriorityClass","priority","priorityNum","isNaN","getStatusClass","statusLower","getTeamMemberWorkloadClass","workload","getProgressBarClass","getWorkloadPercentage","maxWorkload","Math","min","changeIterationPath","getSelectedTaskTitle","selectedTaskId","title","getTaskCount","memberName","undefined","key","k","getDevNewTasks","getUnassignedDevNewTasks","getStatusDistribution","statusCounts","count","sort","a","b","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-distribution\\task-distribution.component.ts","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\task-distribution\\task-distribution.component.html"],"sourcesContent":["import { Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport { TaskService } from '../../services/task.service';\r\nimport { TeamService } from '../../services/team.service';\r\nimport { WorkItem, TeamMember } from '../../models/task.model';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n// Declare the global bootstrap variable for TypeScript\r\ndeclare global {\r\n  interface Window {\r\n    bootstrap: any;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-task-distribution',\r\n  templateUrl: './task-distribution.component.html',\r\n  styleUrls: ['./task-distribution.component.scss']\r\n})\r\nexport class TaskDistributionComponent implements OnInit, AfterViewInit {\r\n  tasks: WorkItem[] = [];\r\n  filteredTasks: WorkItem[] = [];\r\n  teamMembers: TeamMember[] = [];\r\n  filteredTeamMembers: TeamMember[] = []; // New property for filtered team members\r\n  selectedTaskId: number | null = null;\r\n  selectedTeamMemberId: string = '';\r\n  selectedTask: number | null = null; // Added for modal display\r\n  selectedMember: string = ''; // Added for member selection in modal\r\n  currentIterationPath: string = 'Techoil\\\\2.3.23'; // Default value\r\n  manualIterationPath: string = ''; // For manual input\r\n  teamName: string = 'RND'; // Default team name\r\n  iterationPaths: string[] = []; // Will be loaded from API\r\n  teamMemberTaskCounts: Record<string, number> = {}; // Added for task counts\r\n  \r\n  // Auto-assign preview properties\r\n  showingPreview: boolean = false;\r\n  assignPreviewTasks: WorkItem[] = [];\r\n  assignPreviewSuggestions: Record<string, string> = {};\r\n  \r\n  // Track the active tab\r\n  activeTab: string = 'distribution';\r\n  \r\n  // Convert simple boolean to object with specific loading states\r\n  loading: { \r\n    tasks: boolean; \r\n    members: boolean; \r\n    assign: boolean; \r\n    autoAssign: boolean;\r\n    iterationPaths: boolean;\r\n    taskCounts: boolean; // Added for task counts loading\r\n    preview: boolean; // Added for auto-assign preview loading\r\n  } = {\r\n    tasks: false,\r\n    members: false,\r\n    assign: false,\r\n    autoAssign: false,\r\n    iterationPaths: false,\r\n    taskCounts: false, // Added for task counts loading\r\n    preview: false // Added for auto-assign preview loading\r\n  };\r\n  \r\n  // Convert simple string to object with specific error states\r\n  error: { \r\n    tasks: string | null; \r\n    members: string | null; \r\n    assign: string | null; \r\n    autoAssign: string | null;\r\n    iterationPaths: string | null;\r\n    taskCounts: string | null; // Added for task counts errors\r\n    preview: string | null; // Added for auto-assign preview errors\r\n  } = {\r\n    tasks: null,\r\n    members: null,\r\n    assign: null,\r\n    autoAssign: null,\r\n    iterationPaths: null,\r\n    taskCounts: null, // Added for task counts errors\r\n    preview: null // Added for auto-assign preview errors\r\n  };\r\n\r\n  constructor(\r\n    private taskService: TaskService,\r\n    private teamService: TeamService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadIterationPaths();\r\n  }\r\n\r\n  /**\r\n   * Handle tab change events\r\n   * @param tabId The ID of the selected tab\r\n   */\r\n  onTabChange(tabId: string): void {\r\n    console.log(`Tab changed to: ${tabId}`);\r\n    this.activeTab = tabId;\r\n    \r\n    // Load specific data based on the selected tab\r\n    if (tabId === 'workload') {\r\n      // Force refresh team members and workload data\r\n      this.loadTeamMembers();\r\n      this.loadTeamMemberTaskCounts();\r\n      console.log('Refreshing team workload data');\r\n    } else if (tabId === 'distribution') {\r\n      // Refresh tasks if needed\r\n      if (this.filteredTasks.length === 0 && !this.loading.tasks) {\r\n        this.loadTasks();\r\n        console.log('Refreshing task distribution data');\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Initialize Bootstrap tabs\r\n    this.initializeBootstrapTabs();\r\n  }\r\n\r\n  /**\r\n   * Initialize Bootstrap tabs programmatically\r\n   */\r\n  private initializeBootstrapTabs(): void {\r\n    try {\r\n      // Check if Bootstrap's Tab class is available globally\r\n      if (typeof window.bootstrap !== 'undefined' && window.bootstrap.Tab) {\r\n        // Initialize all tabs\r\n        const tabElements = document.querySelectorAll('[data-bs-toggle=\"tab\"]');\r\n        tabElements.forEach(tabEl => {\r\n          // Create tab instance\r\n          const tab = new window.bootstrap.Tab(tabEl);\r\n          \r\n          // Add event listener for tab shown event\r\n          tabEl.addEventListener('shown.bs.tab', (event: any) => {\r\n            // Extract tab ID from the target\r\n            const targetId = event.target.getAttribute('data-bs-target');\r\n            const tabId = targetId === '#task-distribution' ? 'distribution' : 'workload';\r\n            console.log(`Tab shown event: ${tabId}`);\r\n            \r\n            // Update active tab and ensure data is loaded\r\n            this.activeTab = tabId;\r\n            \r\n            // Ensure tab content is loaded/refreshed\r\n            if (tabId === 'workload' && this.filteredTeamMembers.length === 0 && !this.loading.members) {\r\n              this.loadTeamMembers();\r\n              this.loadTeamMemberTaskCounts();\r\n            }\r\n          });\r\n        });\r\n        \r\n        console.log('Bootstrap tabs initialized successfully with event listeners');\r\n      } else {\r\n        console.warn('Bootstrap JavaScript not found. Tabs may not function properly.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing Bootstrap tabs:', error);\r\n    }\r\n  }\r\n\r\n  loadIterationPaths(): void {\r\n    this.loading.iterationPaths = true;\r\n    this.error.iterationPaths = null;\r\n\r\n    this.taskService.getIterationPaths().subscribe({\r\n      next: (paths) => {\r\n        this.iterationPaths = paths;\r\n        this.loading.iterationPaths = false;\r\n        \r\n        if (paths.length > 0) {\r\n          // Use the first path as default if available\r\n          this.currentIterationPath = paths[0];\r\n          this.manualIterationPath = paths[0];\r\n        }\r\n        \r\n        // We no longer automatically load data after loading iteration paths\r\n        // Data will be loaded when the search button is clicked\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading iteration paths:', err);\r\n        this.error.iterationPaths = `Failed to load iteration paths: ${err.message}`;\r\n        this.loading.iterationPaths = false;\r\n        \r\n        // Add fallback iteration paths if API call fails\r\n        this.iterationPaths = [\r\n          'Techoil\\\\2.3.23',\r\n          'Techoil\\\\2.3.24',\r\n          'Techoil\\\\2.3.25',\r\n          'Techoil\\\\2.3.26'\r\n        ];\r\n        console.log('Using fallback iteration paths:', this.iterationPaths);\r\n        \r\n        // We no longer automatically load data after loading iteration paths\r\n        // Data will be loaded when the search button is clicked\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Search button handler - loads data based on manual inputs\r\n   */\r\n  searchClicked(): void {\r\n    // Update the current iteration path with the manual input\r\n    this.currentIterationPath = this.manualIterationPath;\r\n    \r\n    // Clear previous errors\r\n    this.error.tasks = null;\r\n    this.error.members = null;\r\n    \r\n    // Load data based on the manual inputs\r\n    this.loadTasks();\r\n    this.loadTeamMembers();\r\n  }\r\n\r\n  loadTasks(): void {\r\n    this.loading.tasks = true;\r\n    this.error.tasks = null;\r\n    \r\n    console.log(`Loading tasks for iteration path: ${this.currentIterationPath}`);\r\n    \r\n    this.taskService.getTasks(this.currentIterationPath).subscribe({\r\n      next: (tasks) => {\r\n        this.tasks = tasks;\r\n        this.loading.tasks = false;\r\n        console.log(`Loaded ${tasks.length} tasks for iteration path ${this.currentIterationPath}`);\r\n        \r\n        // After loading tasks, update team workload and filter tasks\r\n        if (this.teamMembers.length > 0) {\r\n          this.updateTeamWorkload();\r\n          this.filterTasksByRnDTeamMembers();\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error(`Error loading tasks for iteration path ${this.currentIterationPath}:`, err);\r\n        this.error.tasks = `Failed to load tasks: ${err.message}`;\r\n        this.loading.tasks = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  loadTeamMembers(): void {\r\n    this.loading.members = true;\r\n    this.error.members = null;\r\n\r\n    // Use the teamService directly to get team members by team name\r\n    this.teamService.getTeamMembersByTeam(this.teamName, this.currentIterationPath).subscribe({\r\n      next: (teamMembers) => {\r\n        this.teamMembers = teamMembers;\r\n        console.log(`Loaded ${this.teamName} team members:`, this.teamMembers);\r\n        this.loading.members = false;\r\n        \r\n        // Filter out non-R&D team members\r\n        this.filterRnDTeamMembers();\r\n        \r\n        // Load team member task counts after loading team members\r\n        this.loadTeamMemberTaskCounts();\r\n        \r\n        // If tasks are already loaded, update workload\r\n        if (this.tasks.length > 0) {\r\n          this.updateTeamWorkload();\r\n        } else {\r\n          // If no tasks are loaded yet, still show the team members\r\n          console.log('No tasks loaded yet, showing filtered team members');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error(`Error loading ${this.teamName} team members:`, err);\r\n        \r\n        // Fallback to regular team members if team-specific call fails\r\n        this.taskService.getTeamMembers(this.currentIterationPath).subscribe({\r\n          next: (response) => {\r\n            // Process the response as an array of TeamMember objects\r\n            if (Array.isArray(response)) {\r\n              this.teamMembers = response as TeamMember[];\r\n              \r\n              // Filter out non-R&D team members\r\n              this.filterRnDTeamMembers();\r\n              \r\n              // If tasks are already loaded, update team workload data\r\n              if (this.tasks.length > 0) {\r\n                this.updateTeamWorkload();\r\n              }\r\n            } else {\r\n              console.error('Unexpected response format from getTeamMembers:', response);\r\n              this.error.members = 'Failed to load team members: Invalid response format';\r\n            }\r\n            \r\n            this.loading.members = false;\r\n          },\r\n          error: (memberErr) => {\r\n            console.error(`Error loading team members for iteration path ${this.currentIterationPath}:`, memberErr);\r\n            this.error.members = `Failed to load team members: ${memberErr.message}`;\r\n            this.loading.members = false;\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Filter team members to only include R&D team members\r\n   */\r\n  filterRnDTeamMembers(): void {\r\n    // Filter out members that don't have an R&D-related team property\r\n    this.filteredTeamMembers = this.teamMembers.filter(member => {\r\n      // If member has a team property and it contains R&D-related terms\r\n      if (member.team) {\r\n        return member.team.toLowerCase().includes('r&d') || \r\n               member.team.toLowerCase().includes('rnd') || \r\n               member.team.toLowerCase().includes('research');\r\n      }\r\n      \r\n      // Log members without team info\r\n      console.log(`Team member without team info: ${member.displayName}`);\r\n      \r\n      // If no team property, default to including the member (backend should have already filtered)\r\n      return true;\r\n    });\r\n    \r\n    // Log the results\r\n    console.log(`Filtered ${this.teamMembers.length} team members down to ${this.filteredTeamMembers.length} R&D members`);\r\n  }\r\n\r\n  /**\r\n   * Load task counts for each team member from the API\r\n   */\r\n  loadTeamMemberTaskCounts(): void {\r\n    this.loading.taskCounts = true;\r\n    this.error.taskCounts = null;\r\n    \r\n    this.taskService.getTeamMemberTaskCounts(this.currentIterationPath).subscribe({\r\n      next: (counts) => {\r\n        this.teamMemberTaskCounts = counts;\r\n        this.loading.taskCounts = false;\r\n        console.log('Loaded team member task counts:', this.teamMemberTaskCounts);\r\n        \r\n        // Update the team members with their task counts\r\n        this.updateTeamWorkload();\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading team member task counts:', err);\r\n        this.error.taskCounts = `Failed to load task counts: ${err.message}`;\r\n        this.loading.taskCounts = false;\r\n        \r\n        // Fall back to counting tasks manually\r\n        this.updateTeamWorkload();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate and update team members' workload based on task assignments\r\n   */\r\n  updateTeamWorkload(): void {\r\n    console.log('Updating team workload');\r\n    \r\n    // Reset all workloads to 0 for all team members\r\n    this.teamMembers.forEach(member => {\r\n      member.currentWorkload = 0;\r\n    });\r\n    \r\n    // If we have task counts from the API, use those\r\n    if (Object.keys(this.teamMemberTaskCounts).length > 0) {\r\n      this.teamMembers.forEach(member => {\r\n        // Try to find this member in the task counts\r\n        const counts = Object.entries(this.teamMemberTaskCounts).find(\r\n          ([name, _]) => name.toLowerCase() === member.displayName.toLowerCase()\r\n        );\r\n        \r\n        if (counts) {\r\n          member.currentWorkload = counts[1]; // Set the count from the API\r\n        }\r\n      });\r\n    } else {\r\n      // Fall back to counting from tasks array\r\n      this.tasks.forEach(task => {\r\n        if (task.assignedTo) {\r\n          // Normalize the assignedTo value\r\n          const normalizedAssignedTo = task.assignedTo.trim().toLowerCase();\r\n          \r\n          // Find matching team member\r\n          const matchedMember = this.teamMembers.find(member => \r\n            member.displayName.toLowerCase() === normalizedAssignedTo\r\n          );\r\n          \r\n          if (matchedMember) {\r\n            matchedMember.currentWorkload++;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Re-apply R&D filter to ensure we only show R&D team members\r\n    this.filterRnDTeamMembers();\r\n    \r\n    // Also filter tasks to match R&D team members\r\n    this.filterTasksByRnDTeamMembers();\r\n    \r\n    console.log('Updated team workload for filtered members:', this.filteredTeamMembers);\r\n  }\r\n\r\n  /**\r\n   * Check if a team member is part of the current iteration team\r\n   * This is a placeholder - you may need to implement actual logic based on your data model\r\n   */\r\n  isPartOfCurrentIterationTeam(member: TeamMember): boolean {\r\n    // By default, include all team members\r\n    // You might want to enhance this with actual iteration team membership logic\r\n    return true;\r\n  }\r\n\r\n  assignTask(): void {\r\n    if (!this.selectedTask) {\r\n      this.error.assign = 'Error: No task selected for assignment';\r\n      return;\r\n    }\r\n    \r\n    if (!this.selectedMember) {\r\n      this.error.assign = 'Please select a team member for assignment';\r\n      return;\r\n    }\r\n\r\n    this.loading.assign = true;\r\n    this.error.assign = null;\r\n    \r\n    // Use the selected member name directly for the API call\r\n    console.log(`Assigning task ${this.selectedTask} to member ${this.selectedMember}`);\r\n    \r\n    this.taskService.assignTask(this.selectedTask, this.selectedMember).subscribe({\r\n      next: (response) => {\r\n        console.log('Task assignment successful:', response);\r\n        // Close the modal\r\n        this.cancelAssign();\r\n        // Show success message (could be implemented with a toast/snackbar service)\r\n        this.showSuccessMessage('Task assigned successfully');\r\n        // Reload tasks and task counts to reflect changes\r\n        this.loadTasks();\r\n        this.loadTeamMemberTaskCounts();\r\n      },\r\n      error: (err) => {\r\n        console.error('Error assigning task:', err);\r\n        this.error.assign = `Failed to assign task: ${err.message}`;\r\n        this.loading.assign = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Helper method to show success message (placeholder for toast/snackbar)\r\n  showSuccessMessage(message: string): void {\r\n    console.log('SUCCESS:', message);\r\n    // In a real implementation, you would use a toast/snackbar service\r\n    // Example: this.toastService.show(message, { classname: 'bg-success' });\r\n    \r\n    // For now, create a simple alert element that disappears after a few seconds\r\n    const alertDiv = document.createElement('div');\r\n    alertDiv.className = 'alert alert-success position-fixed top-0 end-0 m-3';\r\n    alertDiv.textContent = message;\r\n    alertDiv.style.zIndex = '9999';\r\n    document.body.appendChild(alertDiv);\r\n    \r\n    // Remove after 3 seconds\r\n    setTimeout(() => {\r\n      alertDiv.remove();\r\n    }, 3000);\r\n  }\r\n\r\n  /**\r\n   * Show auto-assign preview before actually assigning tasks\r\n   */\r\n  showAutoAssignPreview(): void {\r\n    this.loading.preview = true;\r\n    this.error.preview = null;\r\n    this.showingPreview = true;\r\n    \r\n    // First get all tasks for the iteration path\r\n    this.taskService.getTasks(this.currentIterationPath).subscribe({\r\n      next: (tasks) => {\r\n        console.log('Got tasks from service:', tasks);\r\n        console.log('Tasks with Dev-New status:', tasks.filter(t => \r\n          t.status && t.status.toLowerCase() === 'dev-new'\r\n        ));\r\n        \r\n        // First, get all Dev-New tasks\r\n        const allDevNewTasks = tasks.filter(t => \r\n          t.status && t.status.toLowerCase() === 'dev-new'\r\n        );\r\n        \r\n        console.log('All Dev-New tasks:', allDevNewTasks);\r\n        \r\n        // Get R&D team members for this iteration path\r\n        this.teamService.getTeamMembersByTeam('RND', this.currentIterationPath).subscribe({\r\n          next: (rndMembers) => {\r\n            console.log('Got R&D team members for auto-assign:', rndMembers);\r\n            \r\n            // Extract the list of R&D team member names for the API\r\n            const rndMemberNames = rndMembers.map(m => m.displayName);\r\n            \r\n            // Then, get suggestions for which tasks should be reassigned\r\n            // Pass the R&D team member names to the API for filtering\r\n            this.taskService.getAutoAssignSuggestionsForTeam(this.currentIterationPath, rndMemberNames).subscribe({\r\n              next: (suggestions: Record<string, string>) => {\r\n                this.assignPreviewSuggestions = suggestions;\r\n                console.log('Got suggestions for R&D members:', suggestions);\r\n                \r\n                // Filter tasks to only include those in the suggestions (tasks to be reassigned)\r\n                const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\r\n                this.assignPreviewTasks = allDevNewTasks.filter(task => \r\n                  suggestedTaskIds.includes(task.id)\r\n                );\r\n                \r\n                console.log('Filtered tasks to be reassigned:', this.assignPreviewTasks);\r\n                this.loading.preview = false;\r\n              },\r\n              error: (err: Error) => {\r\n                // Fall back to the standard auto-assign if the R&D-specific endpoint fails\r\n                console.error('Failed to get R&D-specific suggestions, falling back to standard auto-assign:', err);\r\n                this.getStandardAutoAssignSuggestions(allDevNewTasks);\r\n              }\r\n            });\r\n          },\r\n          error: (err: Error) => {\r\n            console.error('Error loading R&D team members for auto-assign:', err);\r\n            // Fall back to the standard auto-assign if R&D team member loading fails\r\n            this.getStandardAutoAssignSuggestions(allDevNewTasks);\r\n          }\r\n        });\r\n      },\r\n      error: (err) => {\r\n        this.error.preview = `Failed to load tasks: ${err.message}`;\r\n        this.loading.preview = false;\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Fallback method to get standard auto-assign suggestions if R&D-specific fails\r\n   */\r\n  private getStandardAutoAssignSuggestions(allDevNewTasks: WorkItem[]): void {\r\n    this.taskService.getAutoAssignSuggestions(this.currentIterationPath).subscribe({\r\n      next: (suggestions) => {\r\n        this.assignPreviewSuggestions = suggestions;\r\n        console.log('Got standard suggestions (fallback):', suggestions);\r\n        \r\n        // Filter tasks to only include those in the suggestions (tasks to be reassigned)\r\n        const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\r\n        this.assignPreviewTasks = allDevNewTasks.filter(task => \r\n          suggestedTaskIds.includes(task.id)\r\n        );\r\n        \r\n        console.log('Filtered tasks to be reassigned (fallback):', this.assignPreviewTasks);\r\n        this.loading.preview = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.preview = `Failed to load auto-assign suggestions: ${err.message}`;\r\n        this.loading.preview = false;\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Check if there are valid assignment suggestions\r\n   */\r\n  hasAssignmentSuggestions(): boolean {\r\n    return this.assignPreviewSuggestions && Object.keys(this.assignPreviewSuggestions).length > 0;\r\n  }\r\n  \r\n  /**\r\n   * Cancel auto-assign preview and close the modal\r\n   */\r\n  cancelAutoAssignPreview(): void {\r\n    this.showingPreview = false;\r\n    this.assignPreviewTasks = [];\r\n    this.assignPreviewSuggestions = {};\r\n    this.error.preview = null;\r\n  }\r\n  \r\n  /**\r\n   * Confirm and perform the auto-assignments\r\n   */\r\n  confirmAutoAssign(): void {\r\n    this.loading.autoAssign = true;\r\n    this.error.autoAssign = null;\r\n    \r\n    const assignmentPromises = [];\r\n    let assignmentCount = 0;\r\n    \r\n    // For each task with a suggestion, create an assignment\r\n    for (const task of this.assignPreviewTasks) {\r\n      if (this.assignPreviewSuggestions[task.id]) {\r\n        const developerName = this.extractDeveloperName(this.assignPreviewSuggestions[task.id]);\r\n        assignmentPromises.push(\r\n          this.taskService.assignTask(task.id, developerName)\r\n        );\r\n        assignmentCount++;\r\n      }\r\n    }\r\n    \r\n    // If we have assignments to make, execute them all in parallel\r\n    if (assignmentPromises.length > 0) {\r\n      forkJoin(assignmentPromises).subscribe({\r\n        next: () => {\r\n          // Hide the preview after successful assignment\r\n          this.showingPreview = false;\r\n          \r\n          // Refresh the task list\r\n          this.loadTasks();\r\n          \r\n          // Show success message\r\n          alert(`Successfully assigned ${assignmentCount} tasks.`);\r\n          \r\n          this.loading.autoAssign = false;\r\n        },\r\n        error: (err) => {\r\n          this.error.autoAssign = `Error assigning tasks: ${err.message}`;\r\n          this.loading.autoAssign = false;\r\n        }\r\n      });\r\n    } else {\r\n      this.loading.autoAssign = false;\r\n      this.error.preview = \"No tasks available for assignment.\";\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Extract just the developer name from the suggestion string\r\n   * Format is typically \"Name (explanation)\"\r\n   */\r\n  extractDeveloperName(suggestion: string): string {\r\n    if (!suggestion) return '';\r\n    const parts = suggestion.split(' (');\r\n    return parts[0];\r\n  }\r\n  \r\n  /**\r\n   * Extract the logic explanation from the suggestion string\r\n   * Format is typically \"Name (explanation)\"\r\n   */\r\n  extractLogicExplanation(suggestion: string): string {\r\n    if (!suggestion) return '';\r\n    const match = suggestion.match(/\\((.*?)\\)/);\r\n    return match ? match[1] : '';\r\n  }\r\n\r\n  /**\r\n   * Original auto-assign tasks method - replaced with preview workflow\r\n   */\r\n  autoAssignTasks(): void {\r\n    this.loading.autoAssign = true;\r\n    this.error.autoAssign = null;\r\n    \r\n    this.taskService.autoAssignTasks(this.currentIterationPath).subscribe({\r\n      next: () => {\r\n        // Reload tasks and task counts to reflect changes\r\n        this.loadTasks();\r\n        this.loadTeamMemberTaskCounts();\r\n        this.loading.autoAssign = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.autoAssign = `Failed to auto-assign tasks: ${err.message}`;\r\n        this.loading.autoAssign = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  openAssignModal(taskId: number): void {\r\n    this.selectedTask = taskId;\r\n    this.selectedMember = '';\r\n    this.error.assign = null;\r\n\r\n    // Get the iteration path for this specific task - first try filtered tasks\r\n    let task = this.filteredTasks.find(t => t.id === taskId);\r\n    \r\n    // If not found, check all tasks (in case this is accessing a non-filtered task)\r\n    if (!task) {\r\n      task = this.tasks.find(t => t.id === taskId);\r\n    }\r\n    \r\n    if (task && task.iterationPath) {\r\n      // Fetch R&D team members specifically for this task's iteration path\r\n      this.loading.members = true;\r\n      \r\n      this.teamService.getTeamMembersByTeam('RND', task.iterationPath).subscribe({\r\n        next: (members) => {\r\n          this.teamMembers = members;\r\n          this.loading.members = false;\r\n          \r\n          // Filter to R&D team members\r\n          this.filterRnDTeamMembers();\r\n          \r\n          // Load task counts after team members are loaded\r\n          if (task && task.iterationPath) {\r\n            this.loadTeamMemberTaskCountsForModal(task.iterationPath);\r\n          }\r\n        },\r\n        error: (err) => {\r\n          console.error(`Error loading R&D team members for iteration path ${task?.iterationPath ?? 'unknown'}:`, err);\r\n          this.error.members = `Failed to load team members: ${err.message}`;\r\n          this.loading.members = false;\r\n          \r\n          // Fallback to regular team members if R&D team fetch fails\r\n          if (task && task.iterationPath) {\r\n            this.taskService.getTeamMembers(task.iterationPath).subscribe({\r\n              next: (response) => {\r\n                if (Array.isArray(response) && response.length > 0) {\r\n                  if (typeof response[0] === 'string') {\r\n                    // String array response\r\n                    const names = response as string[];\r\n                    this.teamMembers = names.map((name, index) => ({\r\n                      id: `member-${index}`,\r\n                      displayName: name,\r\n                      uniqueName: '',\r\n                      currentWorkload: 0,\r\n                      isActive: true,\r\n                      email: ''\r\n                    }));\r\n                  } else {\r\n                    // TeamMember array response\r\n                    this.teamMembers = response as TeamMember[];\r\n                  }\r\n                } else {\r\n                  this.teamMembers = [];\r\n                }\r\n                \r\n                this.loading.members = false;\r\n                \r\n                // Filter to R&D team members even with fallback response\r\n                this.filterRnDTeamMembers();\r\n                \r\n                if (task && task.iterationPath) {\r\n                  this.loadTeamMemberTaskCountsForModal(task.iterationPath);\r\n                }\r\n              },\r\n              error: (fallbackErr) => {\r\n                console.error(`Error loading fallback team members:`, fallbackErr);\r\n                this.error.members = `Failed to load team members: ${fallbackErr.message}`;\r\n                this.loading.members = false;\r\n              }\r\n            });\r\n          } else {\r\n            console.error('Cannot load team members: task or iterationPath is undefined');\r\n            this.loading.members = false;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // Ensure we have team members loaded before showing the modal\r\n      if (this.filteredTeamMembers.length === 0 && !this.loading.members) {\r\n        this.loadTeamMembers();\r\n      }\r\n      \r\n      // Make sure we have task counts loaded\r\n      if (Object.keys(this.teamMemberTaskCounts).length === 0) {\r\n        this.loadTeamMemberTaskCounts();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load task counts specifically for the modal dialogue\r\n   * This ensures counts are up-to-date when assigning tasks\r\n   */\r\n  loadTeamMemberTaskCountsForModal(iterationPath: string): void {\r\n    this.loading.taskCounts = true;\r\n    \r\n    this.taskService.getTeamMemberTaskCounts(iterationPath).subscribe({\r\n      next: (counts) => {\r\n        this.teamMemberTaskCounts = counts;\r\n        this.loading.taskCounts = false;\r\n        console.log('Loaded team member task counts for modal:', this.teamMemberTaskCounts);\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading team member task counts for modal:', err);\r\n        this.loading.taskCounts = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  cancelAssign(): void {\r\n    this.selectedTask = null;\r\n    this.selectedMember = '';\r\n    this.error.assign = null;\r\n    this.loading.assign = false;\r\n  }\r\n\r\n  /**\r\n   * Get CSS class for priority badge\r\n   * @param priority Priority value (number or string)\r\n   * @returns CSS class name\r\n   */\r\n  getPriorityClass(priority: number | string): string {\r\n    // Convert priority to number if it's a string\r\n    const priorityNum = typeof priority === 'string' ? parseInt(priority, 10) : priority;\r\n    \r\n    if (isNaN(priorityNum)) {\r\n      return 'bg-secondary'; // Default for invalid priority\r\n    }\r\n    \r\n    switch (priorityNum) {\r\n      case 1:\r\n        return 'bg-danger';\r\n      case 2:\r\n        return 'bg-warning text-dark';\r\n      case 3:\r\n        return 'bg-info text-dark';\r\n      case 4:\r\n        return 'bg-success';\r\n      default:\r\n        return 'bg-secondary';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CSS class for status badge\r\n   * @param status Status string or undefined\r\n   * @returns CSS class name\r\n   */\r\n  getStatusClass(status: string | undefined): string {\r\n    if (!status) {\r\n      return 'bg-secondary'; // Default for undefined status\r\n    }\r\n    \r\n    const statusLower = status.toLowerCase();\r\n    \r\n    if (statusLower.includes('progress') || statusLower === 'active') {\r\n      return 'bg-primary';\r\n    } else if (statusLower === 'completed' || statusLower === 'done' || statusLower === 'closed') {\r\n      return 'bg-success';\r\n    } else if (statusLower === 'blocked') {\r\n      return 'bg-danger';\r\n    } else if (statusLower === 'to do' || statusLower === 'new') {\r\n      return 'bg-secondary';\r\n    } else {\r\n      return 'bg-info';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CSS class for team member workload indicator\r\n   * @param workload Current workload value\r\n   * @returns CSS class name\r\n   */\r\n  getTeamMemberWorkloadClass(workload: number): string {\r\n    if (workload === 0) {\r\n      return 'bg-secondary';\r\n    } else if (workload < 3) {\r\n      return 'bg-success';\r\n    } else if (workload < 7) {\r\n      return 'bg-warning text-dark';\r\n    } else {\r\n      return 'bg-danger';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the progress bar class based on workload\r\n   * @param workload Current workload\r\n   * @returns Bootstrap progress bar class\r\n   */\r\n  getProgressBarClass(workload: number): string {\r\n    if (workload === 0) {\r\n      return 'bg-secondary';\r\n    } else if (workload < 3) {\r\n      return 'bg-success';\r\n    } else if (workload < 7) {\r\n      return 'bg-warning';\r\n    } else {\r\n      return 'bg-danger';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate workload as a percentage (for progress bar width)\r\n   * @param workload Current workload\r\n   * @returns Percentage value (0-100)\r\n   */\r\n  getWorkloadPercentage(workload: number): number {\r\n    // Using 10 as maximum reasonable workload\r\n    const maxWorkload = 10;\r\n    return Math.min(100, (workload / maxWorkload) * 100);\r\n  }\r\n\r\n  /**\r\n   * Handle changing the iteration path\r\n   * @param iterationPath The new iteration path\r\n   */\r\n  changeIterationPath(iterationPath: string): void {\r\n    console.log(`Changing iteration path to: ${iterationPath}`);\r\n    \r\n    if (this.currentIterationPath === iterationPath) {\r\n      console.log('Iteration path unchanged, skipping reload');\r\n      return;\r\n    }\r\n    \r\n    // Update both the current and manual iteration paths\r\n    this.currentIterationPath = iterationPath;\r\n    this.manualIterationPath = iterationPath;\r\n    \r\n    // For backward compatibility, trigger the search (load data)\r\n    this.searchClicked();\r\n  }\r\n\r\n  /**\r\n   * Get the title of the currently selected task\r\n   * @returns The task title or a fallback message\r\n   */\r\n  getSelectedTaskTitle(): string {\r\n    if (this.selectedTask === null) {\r\n      return 'No task selected';\r\n    }\r\n    \r\n    const selectedTaskId = this.selectedTask;\r\n    // First try to find in filtered tasks\r\n    let task = this.filteredTasks.find(t => t.id === selectedTaskId);\r\n    \r\n    // If not found (could be a non-R&D task), look in all tasks\r\n    if (!task) {\r\n      task = this.tasks.find(t => t.id === selectedTaskId);\r\n    }\r\n    \r\n    return task ? task.title : 'Unknown Task';\r\n  }\r\n\r\n  /**\r\n   * Get the task count for a specific team member\r\n   * @param memberName The name of the team member\r\n   * @returns The number of tasks assigned to that member\r\n   */\r\n  getTaskCount(memberName: string): number {\r\n    // First check if we have task counts from the API\r\n    if (Object.keys(this.teamMemberTaskCounts).length > 0) {\r\n      // Look for an exact match\r\n      if (this.teamMemberTaskCounts[memberName] !== undefined) {\r\n        return this.teamMemberTaskCounts[memberName];\r\n      }\r\n      \r\n      // Try case-insensitive match\r\n      const key = Object.keys(this.teamMemberTaskCounts).find(\r\n        k => k.toLowerCase() === memberName.toLowerCase()\r\n      );\r\n      \r\n      if (key) {\r\n        return this.teamMemberTaskCounts[key];\r\n      }\r\n    }\r\n    \r\n    // Fall back to the currentWorkload from team members\r\n    const member = this.teamMembers.find(\r\n      m => m.displayName.toLowerCase() === memberName.toLowerCase()\r\n    );\r\n    \r\n    return member ? member.currentWorkload : 0;\r\n  }\r\n\r\n  /**\r\n   * Get a list of all tasks with Dev-New status\r\n   * @returns List of Dev-New tasks\r\n   */\r\n  getDevNewTasks(): WorkItem[] {\r\n    return this.filteredTasks.filter(task => \r\n      task.status && task.status.toLowerCase() === 'dev-new'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a list of unassigned Dev-New tasks\r\n   * @returns List of unassigned Dev-New tasks\r\n   */\r\n  getUnassignedDevNewTasks(): WorkItem[] {\r\n    return this.filteredTasks.filter(task => \r\n      task.status && \r\n      task.status.toLowerCase() === 'dev-new' && \r\n      !task.assignedTo\r\n    );\r\n  }\r\n  \r\n  /**\r\n   * Get a summary of task status distribution\r\n   * @returns Array of status counts\r\n   */\r\n  getStatusDistribution(): {status: string, count: number}[] {\r\n    const statusCounts: {[key: string]: number} = {};\r\n    \r\n    this.filteredTasks.forEach(task => {\r\n      const status = task.status || 'Unknown';\r\n      statusCounts[status] = (statusCounts[status] || 0) + 1;\r\n    });\r\n    \r\n    return Object.entries(statusCounts).map(([status, count]) => ({\r\n      status, \r\n      count\r\n    })).sort((a, b) => b.count - a.count);\r\n  }\r\n\r\n  /**\r\n   * Filter tasks to only show those assigned to R&D team members\r\n   */\r\n  filterTasksByRnDTeamMembers(): void {\r\n    // First ensure we have filtered team members\r\n    if (this.filteredTeamMembers.length === 0) {\r\n      this.filterRnDTeamMembers();\r\n    }\r\n    \r\n    // Get a list of display names of filtered R&D team members\r\n    const rndMemberNames = this.filteredTeamMembers.map(member => \r\n      member.displayName.toLowerCase()\r\n    );\r\n    \r\n    console.log('R&D team member names for task filtering:', rndMemberNames);\r\n    \r\n    // Filter tasks to only include those assigned to R&D members and unassigned tasks\r\n    this.filteredTasks = this.tasks.filter(task => {\r\n      // Always include unassigned tasks\r\n      if (!task.assignedTo) {\r\n        return true;\r\n      }\r\n      \r\n      // Check if task is assigned to an R&D team member\r\n      return rndMemberNames.includes(task.assignedTo.toLowerCase());\r\n    });\r\n    \r\n    console.log(`Filtered ${this.tasks.length} tasks down to ${this.filteredTasks.length} tasks assigned to R&D members or unassigned`);\r\n  }\r\n}","<div class=\"container-fluid p-4\">\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <h2 class=\"mb-0\">Task Distribution</h2>\r\n        <div>\r\n          <!-- Manual Input Form -->\r\n          <div class=\"d-flex\">\r\n            <!-- Team Name Input -->\r\n            <div class=\"me-2\">\r\n              <input type=\"text\" class=\"form-control\" placeholder=\"Team Name\" [(ngModel)]=\"teamName\" \r\n                [disabled]=\"loading.tasks || loading.members\">\r\n              <small class=\"text-muted\">e.g., RND</small>\r\n            </div>\r\n            \r\n            <!-- Iteration Path Input -->\r\n            <div class=\"me-2\">\r\n              <input type=\"text\" class=\"form-control\" placeholder=\"Iteration Path\" [(ngModel)]=\"manualIterationPath\" \r\n                [disabled]=\"loading.tasks || loading.members\" list=\"iterationPathsList\">\r\n              <small class=\"text-muted\">e.g., Techoil\\2.3.23</small>\r\n              \r\n              <!-- Datalist for iteration path suggestions -->\r\n              <datalist id=\"iterationPathsList\">\r\n                <option *ngFor=\"let path of iterationPaths\" [value]=\"path\"></option>\r\n              </datalist>\r\n            </div>\r\n            \r\n            <!-- Search Button -->\r\n            <button class=\"btn btn-primary me-2\" (click)=\"searchClicked()\" [disabled]=\"loading.tasks || loading.members\">\r\n              <i class=\"bi bi-search me-1\"></i>\r\n              <span *ngIf=\"!loading.tasks && !loading.members\">Search</span>\r\n              <span *ngIf=\"loading.tasks || loading.members\">\r\n                <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                Loading...\r\n              </span>\r\n            </button>\r\n            \r\n            <!-- Auto Assign Button -->\r\n            <button class=\"btn btn-primary\" (click)=\"showAutoAssignPreview()\" [disabled]=\"loading.autoAssign || loading.preview\">\r\n              <i class=\"bi bi-magic\"></i> \r\n              <span *ngIf=\"!loading.autoAssign && !loading.preview\">Auto-Assign Tasks</span>\r\n              <span *ngIf=\"loading.preview\">\r\n                <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                Loading Preview...\r\n              </span>\r\n              <span *ngIf=\"loading.autoAssign\">\r\n                <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                Assigning...\r\n              </span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <p class=\"text-muted mt-2\">Manage and assign tasks for the current sprint</p>\r\n      <div *ngIf=\"error.autoAssign\" class=\"alert alert-danger\">{{ error.autoAssign }}</div>\r\n      <div *ngIf=\"error.iterationPaths\" class=\"alert alert-warning\">{{ error.iterationPaths }}</div>\r\n      <div *ngIf=\"error.tasks\" class=\"alert alert-danger\">{{ error.tasks }}</div>\r\n      <div *ngIf=\"error.members\" class=\"alert alert-danger\">{{ error.members }}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Tab Navigation -->\r\n  <ul class=\"nav nav-tabs mb-4\" id=\"taskTabs\" role=\"tablist\">\r\n    <li class=\"nav-item\" role=\"presentation\">\r\n      <button class=\"nav-link active\" id=\"task-distribution-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#task-distribution\" type=\"button\" role=\"tab\" aria-controls=\"task-distribution\" aria-selected=\"true\" (click)=\"onTabChange('distribution')\">\r\n        <i class=\"bi bi-list-task me-2\"></i>Task Distribution\r\n      </button>\r\n    </li>\r\n    <li class=\"nav-item\" role=\"presentation\">\r\n      <button class=\"nav-link\" id=\"task-workload-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#task-workload\" type=\"button\" role=\"tab\" aria-controls=\"task-workload\" aria-selected=\"false\" (click)=\"onTabChange('workload')\">\r\n        <i class=\"bi bi-bar-chart-line me-2\"></i>Task Workload\r\n      </button>\r\n    </li>\r\n  </ul>\r\n\r\n  <!-- Tab Content -->\r\n  <div class=\"tab-content\" id=\"taskTabsContent\">\r\n    <!-- Task Distribution Tab -->\r\n    <div class=\"tab-pane fade show active\" id=\"task-distribution\" role=\"tabpanel\" aria-labelledby=\"task-distribution-tab\">\r\n      <!-- Tasks Table -->\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <div *ngIf=\"loading.tasks\" class=\"text-center py-4\">\r\n                <div class=\"spinner-border text-primary\" role=\"status\">\r\n                  <span class=\"visually-hidden\">Loading tasks...</span>\r\n                </div>\r\n              </div>\r\n\r\n              <div *ngIf=\"error.tasks\" class=\"alert alert-danger\">{{ error.tasks }}</div>\r\n\r\n              <div *ngIf=\"!loading.tasks && !error.tasks && tasks.length === 0\" class=\"text-center py-4\">\r\n                <p class=\"text-muted\">No tasks found for the current iteration path.</p>\r\n              </div>\r\n\r\n              <div *ngIf=\"!loading.tasks && !error.tasks && tasks.length > 0\" class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>ID</th>\r\n                      <th>Title</th>\r\n                      <th>Priority</th>\r\n                      <th>Assigned To</th>\r\n                      <th>Status</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr *ngFor=\"let task of filteredTasks\">\r\n                      <td>{{ task.id }}</td>\r\n                      <td>{{ task.title }}</td>\r\n                      <td>\r\n                        <span class=\"badge rounded-pill\" [ngClass]=\"getPriorityClass(task.priority)\">\r\n                          {{ task.priority }}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <div class=\"d-flex align-items-center\">\r\n                          <span *ngIf=\"task.assignedTo\" class=\"me-2\">{{ task.assignedTo }}</span>\r\n                          <span *ngIf=\"!task.assignedTo\" class=\"text-muted me-2\">Unassigned</span>\r\n                          <div *ngIf=\"task.autoAssignSuggestion\" class=\"ms-1 suggestion-box\">\r\n                            <small class=\"text-primary\">\r\n                              <i class=\"bi bi-lightbulb-fill\"></i> \r\n                              Suggest: {{ task.autoAssignSuggestion }}\r\n                            </small>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <span class=\"badge rounded-pill\" [ngClass]=\"getStatusClass(task.status)\">\r\n                          {{ task.status }}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <button class=\"btn btn-primary btn-sm\" (click)=\"openAssignModal(task.id)\">\r\n                          <i class=\"bi bi-person-plus\"></i> Assign\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Task Workload Tab -->\r\n    <div class=\"tab-pane fade\" id=\"task-workload\" role=\"tabpanel\" aria-labelledby=\"task-workload-tab\">\r\n      <!-- Team Workload Overview -->\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n              <h4 class=\"mb-0\">Team Workload</h4>\r\n              <button class=\"btn btn-outline-primary btn-sm\" (click)=\"loadTeamMembers(); loadTeamMemberTaskCounts()\">\r\n                <i class=\"bi bi-arrow-clockwise me-1\"></i> Refresh Data\r\n              </button>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <div *ngIf=\"loading.members\" class=\"text-center py-4\">\r\n                <div class=\"spinner-border text-primary\" role=\"status\">\r\n                  <span class=\"visually-hidden\">Loading team members...</span>\r\n                </div>\r\n              </div>\r\n\r\n              <div *ngIf=\"error.members\" class=\"alert alert-danger\">{{ error.members }}</div>\r\n\r\n              <div *ngIf=\"!loading.members && !error.members && filteredTeamMembers.length === 0\" class=\"text-center py-4\">\r\n                <p class=\"text-muted\">No team members found for the current iteration path.</p>\r\n              </div>\r\n\r\n              <div *ngIf=\"!loading.members && !error.members && filteredTeamMembers.length > 0\" class=\"row\">\r\n                <div *ngFor=\"let member of filteredTeamMembers\" class=\"col-md-3 col-sm-6 mb-3\">\r\n                  <div class=\"card team-member-card h-100\" [ngClass]=\"{'bg-light': getTaskCount(member.displayName) === 0}\">\r\n                    <div class=\"card-body\">\r\n                      <h5 class=\"card-title\">{{ member.displayName }}</h5>\r\n                      <div class=\"workload-stats mt-2\">\r\n                        <span class=\"badge rounded-pill\" [ngClass]=\"getTeamMemberWorkloadClass(getTaskCount(member.displayName))\">\r\n                          {{ getTaskCount(member.displayName) }} Tasks\r\n                        </span>\r\n                      </div>\r\n                      <div class=\"progress mt-2\">\r\n                        <div class=\"progress-bar\" \r\n                            [ngClass]=\"getProgressBarClass(getTaskCount(member.displayName))\"\r\n                            [style.width.%]=\"getWorkloadPercentage(getTaskCount(member.displayName))\" \r\n                            role=\"progressbar\" \r\n                            [attr.aria-valuenow]=\"getTaskCount(member.displayName)\" \r\n                            aria-valuemin=\"0\" \r\n                            aria-valuemax=\"10\">\r\n                        </div>\r\n                      </div>\r\n                      <div *ngIf=\"member.email\" class=\"text-muted mt-2 small\">\r\n                        <i class=\"bi bi-envelope\"></i> {{ member.email }}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Assign Task Modal -->\r\n  <div class=\"modal\" [ngClass]=\"{'show': selectedTask !== null}\" [style.display]=\"selectedTask !== null ? 'block' : 'none'\" tabindex=\"-1\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">Assign Task</h5>\r\n          <button type=\"button\" class=\"btn-close\" (click)=\"cancelAssign()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div *ngIf=\"error.assign\" class=\"alert alert-danger mb-3\">{{ error.assign }}</div>\r\n          \r\n          <div *ngIf=\"selectedTask !== null\">\r\n            <div class=\"mb-3\">\r\n              <label class=\"form-label fw-bold\">Task ID</label>\r\n              <div class=\"py-2 px-3 bg-light rounded\">{{ selectedTask }}</div>\r\n            </div>\r\n            \r\n            <div class=\"mb-3\">\r\n              <label class=\"form-label fw-bold\">Task Title</label>\r\n              <div class=\"py-2 px-3 bg-light rounded\">\r\n                {{ getSelectedTaskTitle() }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"mb-4\">\r\n            <label for=\"teamMemberSelect\" class=\"form-label fw-bold mb-2\">Select Team Member</label>\r\n            \r\n            <!-- Team Member Selection List -->\r\n            <div class=\"team-member-options\">\r\n              <div class=\"form-check mb-2 border p-2 rounded\" *ngFor=\"let member of filteredTeamMembers\">\r\n                <input \r\n                  class=\"form-check-input\" \r\n                  type=\"radio\" \r\n                  [id]=\"'member-' + member.id\" \r\n                  [value]=\"member.displayName\" \r\n                  [(ngModel)]=\"selectedMember\" \r\n                  name=\"teamMemberRadio\">\r\n                <label class=\"form-check-label w-100\" [attr.for]=\"'member-' + member.id\">\r\n                  <div class=\"d-flex justify-content-between align-items-center\">\r\n                    <span class=\"member-name\">{{ member.displayName }}</span>\r\n                    <span class=\"badge rounded-pill\" [ngClass]=\"getTeamMemberWorkloadClass(getTaskCount(member.displayName))\">\r\n                      {{ getTaskCount(member.displayName) }} Tasks\r\n                    </span>\r\n                  </div>\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancelAssign()\">Cancel</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"assignTask()\" [disabled]=\"loading.assign || !selectedMember\">\r\n            <span *ngIf=\"!loading.assign\">Assign</span>\r\n            <span *ngIf=\"loading.assign\">\r\n              <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n              Assigning...\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"modal-backdrop fade show\" *ngIf=\"selectedTask !== null\"></div>\r\n  \r\n  <!-- Auto-Assign Preview Modal -->\r\n  <div class=\"modal\" [ngClass]=\"{'show': showingPreview}\" [style.display]=\"showingPreview ? 'block' : 'none'\" tabindex=\"-1\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header bg-primary text-white\">\r\n          <h5 class=\"modal-title\">\r\n            <i class=\"bi bi-magic me-2\"></i> Auto-Assign Preview\r\n          </h5>\r\n          <button type=\"button\" class=\"btn-close btn-close-white\" (click)=\"cancelAutoAssignPreview()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div *ngIf=\"error.preview\" class=\"alert alert-danger mb-3\">{{ error.preview }}</div>\r\n          \r\n          <div class=\"alert alert-primary mb-3\">\r\n            <i class=\"bi bi-info-circle me-2\"></i>\r\n            <strong>Preview Mode:</strong> Review AI-suggested assignments before confirming. No changes will be made until you click \"Confirm & Assign\".\r\n          </div>\r\n          \r\n          <!-- Loading state -->\r\n          <div *ngIf=\"loading.preview\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading assignment suggestions...</span>\r\n            </div>\r\n            <p class=\"mt-2\">Analyzing tasks and developer performance...</p>\r\n          </div>\r\n          \r\n          <!-- No tasks to assign -->\r\n          <div *ngIf=\"!loading.preview && assignPreviewTasks.length === 0\" class=\"alert alert-info\">\r\n            <i class=\"bi bi-info-circle me-2\"></i>\r\n            No \"Dev-New\" tasks available for assignment.\r\n          </div>\r\n          \r\n          <!-- Debugging information -->\r\n          <div *ngIf=\"!loading.preview && assignPreviewTasks.length === 0\" class=\"mt-3\">\r\n            <div class=\"accordion\" id=\"debugAccordion\">\r\n              <div class=\"accordion-item\">\r\n                <h2 class=\"accordion-header\" id=\"headingOne\">\r\n                  <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\r\n                    <i class=\"bi bi-bug me-2\"></i> Debug Information\r\n                  </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#debugAccordion\">\r\n                  <div class=\"accordion-body\">\r\n                    <h6>Total Tasks: {{ tasks.length }}</h6>\r\n                    <h6>Total Tasks: {{ filteredTasks.length }} (filtered from {{ tasks.length }} total)</h6>\r\n                    <div *ngIf=\"filteredTasks.length > 0\">\r\n                      <h6>Status Distribution:</h6>\r\n                      <ul>\r\n                        <li *ngFor=\"let status of getStatusDistribution()\">\r\n                          {{ status.status }}: {{ status.count }}\r\n                        </li>\r\n                      </ul>\r\n                      \r\n                      <h6>Dev-New Tasks ({{ getDevNewTasks().length }}):</h6>\r\n                      <div class=\"table-responsive\" *ngIf=\"getDevNewTasks().length > 0\">\r\n                        <table class=\"table table-sm table-bordered\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th>ID</th>\r\n                              <th>Title</th>\r\n                              <th>Status</th>\r\n                              <th>Assigned To</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <tr *ngFor=\"let task of getDevNewTasks()\">\r\n                              <td>{{ task.id }}</td>\r\n                              <td>{{ task.title }}</td>\r\n                              <td>{{ task.status }}</td>\r\n                              <td>{{ task.assignedTo || 'Unassigned' }}</td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                      \r\n                      <div *ngIf=\"getDevNewTasks().length === 0\" class=\"alert alert-warning\">\r\n                        No tasks with 'Dev-New' status found in the data.\r\n                      </div>\r\n                      \r\n                      <div *ngIf=\"getUnassignedDevNewTasks().length === 0 && getDevNewTasks().length > 0\" class=\"alert alert-warning\">\r\n                        Found {{ getDevNewTasks().length }} Dev-New tasks, but all are already assigned.\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Preview table -->\r\n          <div *ngIf=\"!loading.preview && assignPreviewTasks.length > 0\">\r\n            <div class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Type</th>\r\n                    <th>Title</th>\r\n                    <th>Status</th>\r\n                    <th>Current Assignee</th>\r\n                    <th>Suggested Assignee</th>\r\n                    <th>Assignment Logic</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let task of assignPreviewTasks\">\r\n                    <td>{{ task.id }}</td>\r\n                    <td>\r\n                      <span class=\"badge bg-info text-dark\">{{ task.type }}</span>\r\n                    </td>\r\n                    <td>{{ task.title }}</td>\r\n                    <td>\r\n                      <span class=\"badge bg-secondary\">{{ task.status }}</span>\r\n                    </td>\r\n                    <td>\r\n                      <span *ngIf=\"task.assignedTo\" class=\"text-muted\">{{ task.assignedTo }}</span>\r\n                      <span *ngIf=\"!task.assignedTo\" class=\"badge bg-warning text-dark\">Unassigned</span>\r\n                    </td>\r\n                    <td>\r\n                      <ng-container *ngIf=\"assignPreviewSuggestions[task.id]\">\r\n                        <div class=\"d-flex align-items-center\">\r\n                          <span class=\"badge bg-success me-2\">AI Pick</span>\r\n                          <strong>{{ extractDeveloperName(assignPreviewSuggestions[task.id]) }}</strong>\r\n                          <span *ngIf=\"extractDeveloperName(assignPreviewSuggestions[task.id]) !== task.assignedTo && task.assignedTo\" \r\n                                class=\"ms-2 badge bg-warning text-dark\">Reassignment</span>\r\n                        </div>\r\n                      </ng-container>\r\n                      <span *ngIf=\"!assignPreviewSuggestions[task.id]\" class=\"text-muted\">No suggestion available</span>\r\n                    </td>\r\n                    <td>\r\n                      <span *ngIf=\"assignPreviewSuggestions[task.id]\" class=\"text-muted small\">\r\n                        {{ extractLogicExplanation(assignPreviewSuggestions[task.id]) }}\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n            <!-- Assignment Logic Legend -->\r\n            <div class=\"mt-4\">\r\n              <h6>Assignment Logic Explanation:</h6>\r\n              <ul class=\"list-unstyled row\">\r\n                <li class=\"col-md-6 mb-2\">\r\n                  <i class=\"bi bi-trophy text-warning me-2\"></i>\r\n                  <small><strong>Past Expertise</strong> - Completed similar tasks in the past 3 months</small>\r\n                </li>\r\n                <li class=\"col-md-6 mb-2\">\r\n                  <i class=\"bi bi-check-circle text-success me-2\"></i>\r\n                  <small><strong>Recent Completion</strong> - Recently completed tasks with no active work</small>\r\n                </li>\r\n                <li class=\"col-md-6 mb-2\">\r\n                  <i class=\"bi bi-speedometer2 text-info me-2\"></i>\r\n                  <small><strong>Low Workload</strong> - Developer with few active tasks</small>\r\n                </li>\r\n                <li class=\"col-md-6 mb-2\">\r\n                  <i class=\"bi bi-person-plus text-primary me-2\"></i>\r\n                  <small><strong>Least Assigned</strong> - Developer with lowest total task count</small>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancelAutoAssignPreview()\">Cancel</button>\r\n          <button \r\n            type=\"button\" \r\n            class=\"btn btn-primary\" \r\n            (click)=\"confirmAutoAssign()\" \r\n            [disabled]=\"loading.autoAssign || !assignPreviewTasks || assignPreviewTasks.length === 0 || !hasAssignmentSuggestions()\">\r\n            <i class=\"bi bi-magic me-2\"></i>\r\n            <span *ngIf=\"!loading.autoAssign\">Confirm & Assign</span>\r\n            <span *ngIf=\"loading.autoAssign\">\r\n              <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n              Assigning...\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"modal-backdrop fade show\" *ngIf=\"showingPreview\"></div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}