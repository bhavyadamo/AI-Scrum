{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/task.service\";\nimport * as i2 from \"../../services/team.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction TaskDistributionComponent_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const path_r29 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", path_r29);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(path_r29);\n  }\n}\nfunction TaskDistributionComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 58);\n    i0.ɵɵelement(1, \"span\", 59);\n    i0.ɵɵtext(2, \" Loading iteration paths... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Auto-Assign Tasks\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 59);\n    i0.ɵɵtext(2, \" Loading Preview... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 59);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 60);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.error.autoAssign);\n  }\n}\nfunction TaskDistributionComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 61);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.error.iterationPaths);\n  }\n}\nfunction TaskDistributionComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 62)(1, \"div\", 63)(2, \"span\", 64);\n    i0.ɵɵtext(3, \"Loading tasks...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction TaskDistributionComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 60);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.error.tasks);\n  }\n}\nfunction TaskDistributionComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 62)(1, \"p\", 65);\n    i0.ɵɵtext(2, \"No tasks found for the current iteration path.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_38_tr_17_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 76);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r31 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r31.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_38_tr_17_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 77);\n    i0.ɵɵtext(1, \"Unassigned\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_38_tr_17_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 78)(1, \"small\", 79);\n    i0.ɵɵelement(2, \"i\", 80);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r31 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Suggest: \", task_r31.autoAssignSuggestion, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_38_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"span\", 69);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"td\")(9, \"div\", 70);\n    i0.ɵɵtemplate(10, TaskDistributionComponent_div_38_tr_17_span_10_Template, 2, 1, \"span\", 71);\n    i0.ɵɵtemplate(11, TaskDistributionComponent_div_38_tr_17_span_11_Template, 2, 0, \"span\", 72);\n    i0.ɵɵtemplate(12, TaskDistributionComponent_div_38_tr_17_div_12_Template, 4, 1, \"div\", 73);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"td\")(14, \"span\", 69);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"td\")(17, \"button\", 74);\n    i0.ɵɵlistener(\"click\", function TaskDistributionComponent_div_38_tr_17_Template_button_click_17_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const task_r31 = restoredCtx.$implicit;\n      const ctx_r37 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r37.openAssignModal(task_r31.id));\n    });\n    i0.ɵɵelement(18, \"i\", 75);\n    i0.ɵɵtext(19, \" Assign \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const task_r31 = ctx.$implicit;\n    const ctx_r30 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r31.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r31.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r30.getPriorityClass(task_r31.priority));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r31.priority, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", task_r31.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r31.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r31.autoAssignSuggestion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r30.getStatusClass(task_r31.status));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r31.status, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"table\", 67)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Priority\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Assigned To\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\");\n    i0.ɵɵtext(13, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"th\");\n    i0.ɵɵtext(15, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"tbody\");\n    i0.ɵɵtemplate(17, TaskDistributionComponent_div_38_tr_17_Template, 20, 9, \"tr\", 68);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(17);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r10.filteredTasks);\n  }\n}\nfunction TaskDistributionComponent_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 62)(1, \"div\", 63)(2, \"span\", 64);\n    i0.ɵɵtext(3, \"Loading team members...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction TaskDistributionComponent_div_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 60);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r12.error.members);\n  }\n}\nfunction TaskDistributionComponent_div_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 62)(1, \"p\", 65);\n    i0.ɵɵtext(2, \"No team members found for the current iteration path.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_53_div_1_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 89);\n    i0.ɵɵelement(1, \"i\", 90);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const member_r40 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", member_r40.email, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"bg-light\": a0\n  };\n};\nfunction TaskDistributionComponent_div_53_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 82)(1, \"div\", 83)(2, \"div\", 25)(3, \"h5\", 84);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 85)(6, \"span\", 69);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 86);\n    i0.ɵɵelement(9, \"div\", 87);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, TaskDistributionComponent_div_53_div_1_div_10_Template, 3, 1, \"div\", 88);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const member_r40 = ctx.$implicit;\n    const ctx_r39 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r39.getTaskCount(member_r40.displayName) === 0));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(member_r40.displayName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r39.getTeamMemberWorkloadClass(ctx_r39.getTaskCount(member_r40.displayName)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r39.getTaskCount(member_r40.displayName), \" Tasks \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r39.getWorkloadPercentage(ctx_r39.getTaskCount(member_r40.displayName)), \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r39.getProgressBarClass(ctx_r39.getTaskCount(member_r40.displayName)));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r39.getTaskCount(member_r40.displayName));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", member_r40.email);\n  }\n}\nfunction TaskDistributionComponent_div_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtemplate(1, TaskDistributionComponent_div_53_div_1_Template, 11, 11, \"div\", 81);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r14.filteredTeamMembers);\n  }\n}\nfunction TaskDistributionComponent_div_62_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 91);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r15.error.assign);\n  }\n}\nfunction TaskDistributionComponent_div_63_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 92)(2, \"label\", 93);\n    i0.ɵɵtext(3, \"Task ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 94);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 92)(7, \"label\", 93);\n    i0.ɵɵtext(8, \"Task Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 94);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r16.selectedTask);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r16.getSelectedTaskTitle(), \" \");\n  }\n}\nfunction TaskDistributionComponent_div_68_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r45 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 95)(1, \"input\", 96);\n    i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_div_68_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r45);\n      const ctx_r44 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r44.selectedMember = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 97)(3, \"div\", 3)(4, \"span\", 98);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"span\", 69);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const member_r43 = ctx.$implicit;\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"member-\" + member_r43.id)(\"value\", member_r43.displayName)(\"ngModel\", ctx_r17.selectedMember);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"for\", \"member-\" + member_r43.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(member_r43.displayName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r17.getTeamMemberWorkloadClass(ctx_r17.getTaskCount(member_r43.displayName)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.getTaskCount(member_r43.displayName), \" Tasks \");\n  }\n}\nfunction TaskDistributionComponent_span_73_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Assign\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_74_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 59);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_75_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 99);\n  }\n}\nfunction TaskDistributionComponent_div_85_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 91);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r21.error.preview);\n  }\n}\nfunction TaskDistributionComponent_div_91_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 62)(1, \"div\", 63)(2, \"span\", 64);\n    i0.ɵɵtext(3, \"Loading assignment suggestions...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 100);\n    i0.ɵɵtext(5, \"Analyzing tasks and developer performance...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaskDistributionComponent_div_92_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 101);\n    i0.ɵɵelement(1, \"i\", 54);\n    i0.ɵɵtext(2, \" No \\\"Dev-New\\\" tasks available for assignment. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_93_div_13_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r51 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", status_r51.status, \": \", status_r51.count, \" \");\n  }\n}\nfunction TaskDistributionComponent_div_93_div_13_div_7_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r53 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r53.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r53.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r53.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r53.assignedTo || \"Unassigned\");\n  }\n}\nfunction TaskDistributionComponent_div_93_div_13_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"table\", 110)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Assigned To\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"tbody\");\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_93_div_13_div_7_tr_13_Template, 9, 4, \"tr\", 68);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r48 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r48.getDevNewTasks());\n  }\n}\nfunction TaskDistributionComponent_div_93_div_13_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 61);\n    i0.ɵɵtext(1, \" No tasks with 'Dev-New' status found in the data. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_93_div_13_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 61);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r50 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Found \", ctx_r50.getDevNewTasks().length, \" Dev-New tasks, but all are already assigned. \");\n  }\n}\nfunction TaskDistributionComponent_div_93_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h6\");\n    i0.ɵɵtext(2, \"Status Distribution:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, TaskDistributionComponent_div_93_div_13_li_4_Template, 2, 2, \"li\", 68);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"h6\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, TaskDistributionComponent_div_93_div_13_div_7_Template, 14, 1, \"div\", 27);\n    i0.ɵɵtemplate(8, TaskDistributionComponent_div_93_div_13_div_8_Template, 2, 0, \"div\", 14);\n    i0.ɵɵtemplate(9, TaskDistributionComponent_div_93_div_13_div_9_Template, 2, 1, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r46 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r46.getStatusDistribution());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Dev-New Tasks (\", ctx_r46.getDevNewTasks().length, \"):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r46.getDevNewTasks().length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r46.getDevNewTasks().length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r46.getUnassignedDevNewTasks().length === 0 && ctx_r46.getDevNewTasks().length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_93_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 102)(1, \"div\", 103)(2, \"div\", 104)(3, \"h2\", 105)(4, \"button\", 106);\n    i0.ɵɵelement(5, \"i\", 107);\n    i0.ɵɵtext(6, \" Debug Information \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 108)(8, \"div\", 109)(9, \"h6\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"h6\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_93_div_13_Template, 10, 5, \"div\", 11);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate1(\"Total Tasks: \", ctx_r24.tasks.length, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Total Tasks: \", ctx_r24.filteredTasks.length, \" (filtered from \", ctx_r24.tasks.length, \" total)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r24.filteredTasks.length > 0);\n  }\n}\nfunction TaskDistributionComponent_div_94_tr_20_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r55 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r55.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_94_tr_20_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 123);\n    i0.ɵɵtext(1, \"Unassigned\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_94_tr_20_ng_container_15_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 126);\n    i0.ɵɵtext(1, \"Reassignment\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_94_tr_20_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 70)(2, \"span\", 124);\n    i0.ɵɵtext(3, \"AI Pick\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"strong\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, TaskDistributionComponent_div_94_tr_20_ng_container_15_span_6_Template, 2, 0, \"span\", 125);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const task_r55 = i0.ɵɵnextContext().$implicit;\n    const ctx_r58 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r58.extractDeveloperName(ctx_r58.assignPreviewSuggestions[task_r55.id]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r58.extractDeveloperName(ctx_r58.assignPreviewSuggestions[task_r55.id]) !== task_r55.assignedTo && task_r55.assignedTo);\n  }\n}\nfunction TaskDistributionComponent_div_94_tr_20_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵtext(1, \"No suggestion available\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_94_tr_20_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 127);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r55 = i0.ɵɵnextContext().$implicit;\n    const ctx_r60 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r60.extractLogicExplanation(ctx_r60.assignPreviewSuggestions[task_r55.id]), \" \");\n  }\n}\nfunction TaskDistributionComponent_div_94_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\")(4, \"span\", 118);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"span\", 119);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtemplate(12, TaskDistributionComponent_div_94_tr_20_span_12_Template, 2, 1, \"span\", 120);\n    i0.ɵɵtemplate(13, TaskDistributionComponent_div_94_tr_20_span_13_Template, 2, 0, \"span\", 121);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtemplate(15, TaskDistributionComponent_div_94_tr_20_ng_container_15_Template, 7, 2, \"ng-container\", 11);\n    i0.ɵɵtemplate(16, TaskDistributionComponent_div_94_tr_20_span_16_Template, 2, 0, \"span\", 120);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"td\");\n    i0.ɵɵtemplate(18, TaskDistributionComponent_div_94_tr_20_span_18_Template, 2, 1, \"span\", 122);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r55 = ctx.$implicit;\n    const ctx_r54 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r55.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r55.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r55.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r55.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", task_r55.assignedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r55.assignedTo);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r54.assignPreviewSuggestions[task_r55.id]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r54.assignPreviewSuggestions[task_r55.id]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r54.assignPreviewSuggestions[task_r55.id]);\n  }\n}\nfunction TaskDistributionComponent_div_94_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 66)(2, \"table\", 67)(3, \"thead\")(4, \"tr\")(5, \"th\");\n    i0.ɵɵtext(6, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14, \"Current Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16, \"Suggested Assignee\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"th\");\n    i0.ɵɵtext(18, \"Assignment Logic\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"tbody\");\n    i0.ɵɵtemplate(20, TaskDistributionComponent_div_94_tr_20_Template, 19, 9, \"tr\", 68);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(21, \"div\", 111)(22, \"h6\");\n    i0.ɵɵtext(23, \"Assignment Logic Explanation:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"ul\", 112)(25, \"li\", 113);\n    i0.ɵɵelement(26, \"i\", 114);\n    i0.ɵɵelementStart(27, \"small\")(28, \"strong\");\n    i0.ɵɵtext(29, \"Past Expertise\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(30, \" - Completed similar tasks in the past 3 months\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"li\", 113);\n    i0.ɵɵelement(32, \"i\", 115);\n    i0.ɵɵelementStart(33, \"small\")(34, \"strong\");\n    i0.ɵɵtext(35, \"Recent Completion\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(36, \" - Recently completed tasks with no active work\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(37, \"li\", 113);\n    i0.ɵɵelement(38, \"i\", 116);\n    i0.ɵɵelementStart(39, \"small\")(40, \"strong\");\n    i0.ɵɵtext(41, \"Low Workload\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(42, \" - Developer with few active tasks\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(43, \"li\", 113);\n    i0.ɵɵelement(44, \"i\", 117);\n    i0.ɵɵelementStart(45, \"small\")(46, \"strong\");\n    i0.ɵɵtext(47, \"Least Assigned\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(48, \" - Developer with lowest total task count\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r25 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(20);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r25.assignPreviewTasks);\n  }\n}\nfunction TaskDistributionComponent_span_100_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Confirm & Assign\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_span_101_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"span\", 59);\n    i0.ɵɵtext(2, \" Assigning... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskDistributionComponent_div_102_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 99);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"show\": a0\n  };\n};\nexport let TaskDistributionComponent = /*#__PURE__*/(() => {\n  class TaskDistributionComponent {\n    constructor(taskService, teamService) {\n      this.taskService = taskService;\n      this.teamService = teamService;\n      this.tasks = [];\n      this.filteredTasks = [];\n      this.teamMembers = [];\n      this.filteredTeamMembers = []; // New property for filtered team members\n      this.selectedTaskId = null;\n      this.selectedTeamMemberId = '';\n      this.selectedTask = null; // Added for modal display\n      this.selectedMember = ''; // Added for member selection in modal\n      this.currentIterationPath = 'Techoil\\\\2.3.23'; // Default value\n      this.iterationPaths = []; // Will be loaded from API\n      this.teamMemberTaskCounts = {}; // Added for task counts\n      // Auto-assign preview properties\n      this.showingPreview = false;\n      this.assignPreviewTasks = [];\n      this.assignPreviewSuggestions = {};\n      // Track the active tab\n      this.activeTab = 'distribution';\n      // Convert simple boolean to object with specific loading states\n      this.loading = {\n        tasks: false,\n        members: false,\n        assign: false,\n        autoAssign: false,\n        iterationPaths: false,\n        taskCounts: false,\n        preview: false // Added for auto-assign preview loading\n      };\n      // Convert simple string to object with specific error states\n      this.error = {\n        tasks: null,\n        members: null,\n        assign: null,\n        autoAssign: null,\n        iterationPaths: null,\n        taskCounts: null,\n        preview: null // Added for auto-assign preview errors\n      };\n    }\n\n    ngOnInit() {\n      this.loadIterationPaths();\n    }\n    /**\r\n     * Handle tab change events\r\n     * @param tabId The ID of the selected tab\r\n     */\n    onTabChange(tabId) {\n      console.log(`Tab changed to: ${tabId}`);\n      this.activeTab = tabId;\n      // Load specific data based on the selected tab\n      if (tabId === 'workload') {\n        // Force refresh team members and workload data\n        this.loadTeamMembers();\n        this.loadTeamMemberTaskCounts();\n        console.log('Refreshing team workload data');\n      } else if (tabId === 'distribution') {\n        // Refresh tasks if needed\n        if (this.filteredTasks.length === 0 && !this.loading.tasks) {\n          this.loadTasks();\n          console.log('Refreshing task distribution data');\n        }\n      }\n    }\n    ngAfterViewInit() {\n      // Initialize Bootstrap tabs\n      this.initializeBootstrapTabs();\n    }\n    /**\r\n     * Initialize Bootstrap tabs programmatically\r\n     */\n    initializeBootstrapTabs() {\n      try {\n        // Check if Bootstrap's Tab class is available globally\n        if (typeof window.bootstrap !== 'undefined' && window.bootstrap.Tab) {\n          // Initialize all tabs\n          const tabElements = document.querySelectorAll('[data-bs-toggle=\"tab\"]');\n          tabElements.forEach(tabEl => {\n            // Create tab instance\n            const tab = new window.bootstrap.Tab(tabEl);\n            // Add event listener for tab shown event\n            tabEl.addEventListener('shown.bs.tab', event => {\n              // Extract tab ID from the target\n              const targetId = event.target.getAttribute('data-bs-target');\n              const tabId = targetId === '#task-distribution' ? 'distribution' : 'workload';\n              console.log(`Tab shown event: ${tabId}`);\n              // Update active tab and ensure data is loaded\n              this.activeTab = tabId;\n              // Ensure tab content is loaded/refreshed\n              if (tabId === 'workload' && this.filteredTeamMembers.length === 0 && !this.loading.members) {\n                this.loadTeamMembers();\n                this.loadTeamMemberTaskCounts();\n              }\n            });\n          });\n          console.log('Bootstrap tabs initialized successfully with event listeners');\n        } else {\n          console.warn('Bootstrap JavaScript not found. Tabs may not function properly.');\n        }\n      } catch (error) {\n        console.error('Error initializing Bootstrap tabs:', error);\n      }\n    }\n    loadIterationPaths() {\n      this.loading.iterationPaths = true;\n      this.error.iterationPaths = null;\n      this.taskService.getIterationPaths().subscribe({\n        next: paths => {\n          this.iterationPaths = paths;\n          this.loading.iterationPaths = false;\n          if (paths.length > 0) {\n            // Use the first path as default if available\n            this.currentIterationPath = paths[0];\n          }\n          // After loading iteration paths, load tasks and team members\n          this.loadTasks();\n          this.loadTeamMembers();\n        },\n        error: err => {\n          console.error('Error loading iteration paths:', err);\n          this.error.iterationPaths = `Failed to load iteration paths: ${err.message}`;\n          this.loading.iterationPaths = false;\n          // Add fallback iteration paths if API call fails\n          this.iterationPaths = ['Techoil\\\\2.3.23', 'Techoil\\\\2.3.24', 'Techoil\\\\2.3.25', 'Techoil\\\\2.3.26'];\n          console.log('Using fallback iteration paths:', this.iterationPaths);\n          // Even if iteration paths loading fails, try to load tasks and team members\n          this.loadTasks();\n          this.loadTeamMembers();\n        }\n      });\n    }\n    loadTasks() {\n      this.loading.tasks = true;\n      this.error.tasks = null;\n      console.log(`Loading tasks for iteration path: ${this.currentIterationPath}`);\n      this.taskService.getTasks(this.currentIterationPath).subscribe({\n        next: tasks => {\n          this.tasks = tasks;\n          this.loading.tasks = false;\n          console.log(`Loaded ${tasks.length} tasks for iteration path ${this.currentIterationPath}`);\n          // After loading tasks, update team workload and filter tasks\n          if (this.teamMembers.length > 0) {\n            this.updateTeamWorkload();\n            this.filterTasksByRnDTeamMembers();\n          }\n        },\n        error: err => {\n          console.error(`Error loading tasks for iteration path ${this.currentIterationPath}:`, err);\n          this.error.tasks = `Failed to load tasks: ${err.message}`;\n          this.loading.tasks = false;\n        }\n      });\n    }\n    loadTeamMembers() {\n      this.loading.members = true;\n      this.error.members = null;\n      // Use the taskService directly to get team members by RND team\n      this.teamService.getTeamMembersByTeam('RND', this.currentIterationPath).subscribe({\n        next: teamMembers => {\n          this.teamMembers = teamMembers;\n          console.log('Loaded RND team members:', this.teamMembers);\n          this.loading.members = false;\n          // Filter out non-R&D team members\n          this.filterRnDTeamMembers();\n          // Load team member task counts after loading team members\n          this.loadTeamMemberTaskCounts();\n          // If tasks are already loaded, update workload\n          if (this.tasks.length > 0) {\n            this.updateTeamWorkload();\n          } else {\n            // If no tasks are loaded yet, still show the team members\n            console.log('No tasks loaded yet, showing filtered RND team members');\n          }\n        },\n        error: err => {\n          console.error('Error loading RND team members:', err);\n          // Fallback to regular team members if RND team fails\n          this.taskService.getTeamMembers(this.currentIterationPath).subscribe({\n            next: response => {\n              // Check if response is an array of strings (names) or TeamMember objects\n              if (response.length > 0 && typeof response[0] === 'string') {\n                // It's an array of strings, convert to TeamMember objects\n                const names = response;\n                this.teamMembers = names.map((name, index) => ({\n                  id: `member-${index}`,\n                  displayName: name,\n                  uniqueName: '',\n                  currentWorkload: 0,\n                  isActive: true,\n                  email: ''\n                }));\n              } else {\n                // It's already an array of TeamMember objects\n                this.teamMembers = response;\n              }\n              console.log('Loaded fallback team members:', this.teamMembers);\n              this.loading.members = false;\n              // Filter out non-R&D team members even with fallback approach\n              this.filterRnDTeamMembers();\n              // Load team member task counts after loading team members\n              this.loadTeamMemberTaskCounts();\n              // If tasks are already loaded, update workload\n              if (this.tasks.length > 0) {\n                this.updateTeamWorkload();\n              }\n            },\n            error: innerErr => {\n              console.error('Error loading fallback team members:', innerErr);\n              this.error.members = `Failed to load team members: ${err.message}`;\n              this.loading.members = false;\n              // Add fallback team members if API call fails\n              this.teamMembers = [{\n                id: '1',\n                displayName: 'Ranjith Kumar S',\n                email: 'ranjithkumar.s@inatech.onmicrosoft.com',\n                currentWorkload: 0,\n                isActive: true,\n                uniqueName: 'ranjithkumar.s',\n                team: 'R&D'\n              }, {\n                id: '2',\n                displayName: 'Rabirai Madhavan',\n                email: 'rabiraj.m@example.com',\n                currentWorkload: 0,\n                isActive: true,\n                uniqueName: 'rabiraj.m',\n                team: 'R&D'\n              }, {\n                id: '3',\n                displayName: 'Dhinakarraj Sivakumar',\n                email: 'dhivakarraj.s@example.com',\n                currentWorkload: 0,\n                isActive: true,\n                uniqueName: 'dhivakarraj.s',\n                team: 'R&D'\n              }];\n              this.filterRnDTeamMembers();\n              console.log('Using fallback team members:', this.teamMembers);\n              // Try to load task counts even if team members loading fails\n              this.loadTeamMemberTaskCounts();\n            }\n          });\n        }\n      });\n    }\n    /**\r\n     * Filter team members to only include R&D team members\r\n     */\n    filterRnDTeamMembers() {\n      // Filter out members that don't have an R&D-related team property\n      this.filteredTeamMembers = this.teamMembers.filter(member => {\n        // If member has a team property and it contains R&D-related terms\n        if (member.team) {\n          return member.team.toLowerCase().includes('r&d') || member.team.toLowerCase().includes('rnd') || member.team.toLowerCase().includes('research');\n        }\n        // Log members without team info\n        console.log(`Team member without team info: ${member.displayName}`);\n        // If no team property, default to including the member (backend should have already filtered)\n        return true;\n      });\n      // Log the results\n      console.log(`Filtered ${this.teamMembers.length} team members down to ${this.filteredTeamMembers.length} R&D members`);\n    }\n    /**\r\n     * Load task counts for each team member from the API\r\n     */\n    loadTeamMemberTaskCounts() {\n      this.loading.taskCounts = true;\n      this.error.taskCounts = null;\n      this.taskService.getTeamMemberTaskCounts(this.currentIterationPath).subscribe({\n        next: counts => {\n          this.teamMemberTaskCounts = counts;\n          this.loading.taskCounts = false;\n          console.log('Loaded team member task counts:', this.teamMemberTaskCounts);\n          // Update the team members with their task counts\n          this.updateTeamWorkload();\n        },\n        error: err => {\n          console.error('Error loading team member task counts:', err);\n          this.error.taskCounts = `Failed to load task counts: ${err.message}`;\n          this.loading.taskCounts = false;\n          // Fall back to counting tasks manually\n          this.updateTeamWorkload();\n        }\n      });\n    }\n    /**\r\n     * Calculate and update team members' workload based on task assignments\r\n     */\n    updateTeamWorkload() {\n      console.log('Updating team workload');\n      // Reset all workloads to 0 for all team members\n      this.teamMembers.forEach(member => {\n        member.currentWorkload = 0;\n      });\n      // If we have task counts from the API, use those\n      if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n        this.teamMembers.forEach(member => {\n          // Try to find this member in the task counts\n          const counts = Object.entries(this.teamMemberTaskCounts).find(([name, _]) => name.toLowerCase() === member.displayName.toLowerCase());\n          if (counts) {\n            member.currentWorkload = counts[1]; // Set the count from the API\n          }\n        });\n      } else {\n        // Fall back to counting from tasks array\n        this.tasks.forEach(task => {\n          if (task.assignedTo) {\n            // Normalize the assignedTo value\n            const normalizedAssignedTo = task.assignedTo.trim().toLowerCase();\n            // Find matching team member\n            const matchedMember = this.teamMembers.find(member => member.displayName.toLowerCase() === normalizedAssignedTo);\n            if (matchedMember) {\n              matchedMember.currentWorkload++;\n            }\n          }\n        });\n      }\n      // Re-apply R&D filter to ensure we only show R&D team members\n      this.filterRnDTeamMembers();\n      // Also filter tasks to match R&D team members\n      this.filterTasksByRnDTeamMembers();\n      console.log('Updated team workload for filtered members:', this.filteredTeamMembers);\n    }\n    /**\r\n     * Check if a team member is part of the current iteration team\r\n     * This is a placeholder - you may need to implement actual logic based on your data model\r\n     */\n    isPartOfCurrentIterationTeam(member) {\n      // By default, include all team members\n      // You might want to enhance this with actual iteration team membership logic\n      return true;\n    }\n    assignTask() {\n      if (!this.selectedTask) {\n        this.error.assign = 'Error: No task selected for assignment';\n        return;\n      }\n      if (!this.selectedMember) {\n        this.error.assign = 'Please select a team member for assignment';\n        return;\n      }\n      this.loading.assign = true;\n      this.error.assign = null;\n      // Use the selected member name directly for the API call\n      console.log(`Assigning task ${this.selectedTask} to member ${this.selectedMember}`);\n      this.taskService.assignTask(this.selectedTask, this.selectedMember).subscribe({\n        next: response => {\n          console.log('Task assignment successful:', response);\n          // Close the modal\n          this.cancelAssign();\n          // Show success message (could be implemented with a toast/snackbar service)\n          this.showSuccessMessage('Task assigned successfully');\n          // Reload tasks and task counts to reflect changes\n          this.loadTasks();\n          this.loadTeamMemberTaskCounts();\n        },\n        error: err => {\n          console.error('Error assigning task:', err);\n          this.error.assign = `Failed to assign task: ${err.message}`;\n          this.loading.assign = false;\n        }\n      });\n    }\n    // Helper method to show success message (placeholder for toast/snackbar)\n    showSuccessMessage(message) {\n      console.log('SUCCESS:', message);\n      // In a real implementation, you would use a toast/snackbar service\n      // Example: this.toastService.show(message, { classname: 'bg-success' });\n      // For now, create a simple alert element that disappears after a few seconds\n      const alertDiv = document.createElement('div');\n      alertDiv.className = 'alert alert-success position-fixed top-0 end-0 m-3';\n      alertDiv.textContent = message;\n      alertDiv.style.zIndex = '9999';\n      document.body.appendChild(alertDiv);\n      // Remove after 3 seconds\n      setTimeout(() => {\n        alertDiv.remove();\n      }, 3000);\n    }\n    /**\r\n     * Show auto-assign preview before actually assigning tasks\r\n     */\n    showAutoAssignPreview() {\n      this.loading.preview = true;\n      this.error.preview = null;\n      this.showingPreview = true;\n      // First get all tasks for the iteration path\n      this.taskService.getTasks(this.currentIterationPath).subscribe({\n        next: tasks => {\n          console.log('Got tasks from service:', tasks);\n          console.log('Tasks with Dev-New status:', tasks.filter(t => t.status && t.status.toLowerCase() === 'dev-new'));\n          // First, get all Dev-New tasks\n          const allDevNewTasks = tasks.filter(t => t.status && t.status.toLowerCase() === 'dev-new');\n          console.log('All Dev-New tasks:', allDevNewTasks);\n          // Get R&D team members for this iteration path\n          this.teamService.getTeamMembersByTeam('RND', this.currentIterationPath).subscribe({\n            next: rndMembers => {\n              console.log('Got R&D team members for auto-assign:', rndMembers);\n              // Extract the list of R&D team member names for the API\n              const rndMemberNames = rndMembers.map(m => m.displayName);\n              // Then, get suggestions for which tasks should be reassigned\n              // Pass the R&D team member names to the API for filtering\n              this.taskService.getAutoAssignSuggestionsForTeam(this.currentIterationPath, rndMemberNames).subscribe({\n                next: suggestions => {\n                  this.assignPreviewSuggestions = suggestions;\n                  console.log('Got suggestions for R&D members:', suggestions);\n                  // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n                  const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n                  this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(task.id));\n                  console.log('Filtered tasks to be reassigned:', this.assignPreviewTasks);\n                  this.loading.preview = false;\n                },\n                error: err => {\n                  // Fall back to the standard auto-assign if the R&D-specific endpoint fails\n                  console.error('Failed to get R&D-specific suggestions, falling back to standard auto-assign:', err);\n                  this.getStandardAutoAssignSuggestions(allDevNewTasks);\n                }\n              });\n            },\n            error: err => {\n              console.error('Error loading R&D team members for auto-assign:', err);\n              // Fall back to the standard auto-assign if R&D team member loading fails\n              this.getStandardAutoAssignSuggestions(allDevNewTasks);\n            }\n          });\n        },\n        error: err => {\n          this.error.preview = `Failed to load tasks: ${err.message}`;\n          this.loading.preview = false;\n        }\n      });\n    }\n    /**\r\n     * Fallback method to get standard auto-assign suggestions if R&D-specific fails\r\n     */\n    getStandardAutoAssignSuggestions(allDevNewTasks) {\n      this.taskService.getAutoAssignSuggestions(this.currentIterationPath).subscribe({\n        next: suggestions => {\n          this.assignPreviewSuggestions = suggestions;\n          console.log('Got standard suggestions (fallback):', suggestions);\n          // Filter tasks to only include those in the suggestions (tasks to be reassigned)\n          const suggestedTaskIds = Object.keys(suggestions).map(id => parseInt(id));\n          this.assignPreviewTasks = allDevNewTasks.filter(task => suggestedTaskIds.includes(task.id));\n          console.log('Filtered tasks to be reassigned (fallback):', this.assignPreviewTasks);\n          this.loading.preview = false;\n        },\n        error: err => {\n          this.error.preview = `Failed to load auto-assign suggestions: ${err.message}`;\n          this.loading.preview = false;\n        }\n      });\n    }\n    /**\r\n     * Check if there are valid assignment suggestions\r\n     */\n    hasAssignmentSuggestions() {\n      return this.assignPreviewSuggestions && Object.keys(this.assignPreviewSuggestions).length > 0;\n    }\n    /**\r\n     * Cancel auto-assign preview and close the modal\r\n     */\n    cancelAutoAssignPreview() {\n      this.showingPreview = false;\n      this.assignPreviewTasks = [];\n      this.assignPreviewSuggestions = {};\n      this.error.preview = null;\n    }\n    /**\r\n     * Confirm and perform the auto-assignments\r\n     */\n    confirmAutoAssign() {\n      this.loading.autoAssign = true;\n      this.error.autoAssign = null;\n      const assignmentPromises = [];\n      let assignmentCount = 0;\n      // For each task with a suggestion, create an assignment\n      for (const task of this.assignPreviewTasks) {\n        if (this.assignPreviewSuggestions[task.id]) {\n          const developerName = this.extractDeveloperName(this.assignPreviewSuggestions[task.id]);\n          assignmentPromises.push(this.taskService.assignTask(task.id, developerName));\n          assignmentCount++;\n        }\n      }\n      // If we have assignments to make, execute them all in parallel\n      if (assignmentPromises.length > 0) {\n        forkJoin(assignmentPromises).subscribe({\n          next: () => {\n            // Hide the preview after successful assignment\n            this.showingPreview = false;\n            // Refresh the task list\n            this.loadTasks();\n            // Show success message\n            alert(`Successfully assigned ${assignmentCount} tasks.`);\n            this.loading.autoAssign = false;\n          },\n          error: err => {\n            this.error.autoAssign = `Error assigning tasks: ${err.message}`;\n            this.loading.autoAssign = false;\n          }\n        });\n      } else {\n        this.loading.autoAssign = false;\n        this.error.preview = \"No tasks available for assignment.\";\n      }\n    }\n    /**\r\n     * Extract just the developer name from the suggestion string\r\n     * Format is typically \"Name (explanation)\"\r\n     */\n    extractDeveloperName(suggestion) {\n      if (!suggestion) return '';\n      const parts = suggestion.split(' (');\n      return parts[0];\n    }\n    /**\r\n     * Extract the logic explanation from the suggestion string\r\n     * Format is typically \"Name (explanation)\"\r\n     */\n    extractLogicExplanation(suggestion) {\n      if (!suggestion) return '';\n      const match = suggestion.match(/\\((.*?)\\)/);\n      return match ? match[1] : '';\n    }\n    /**\r\n     * Original auto-assign tasks method - replaced with preview workflow\r\n     */\n    autoAssignTasks() {\n      this.loading.autoAssign = true;\n      this.error.autoAssign = null;\n      this.taskService.autoAssignTasks(this.currentIterationPath).subscribe({\n        next: () => {\n          // Reload tasks and task counts to reflect changes\n          this.loadTasks();\n          this.loadTeamMemberTaskCounts();\n          this.loading.autoAssign = false;\n        },\n        error: err => {\n          this.error.autoAssign = `Failed to auto-assign tasks: ${err.message}`;\n          this.loading.autoAssign = false;\n        }\n      });\n    }\n    openAssignModal(taskId) {\n      this.selectedTask = taskId;\n      this.selectedMember = '';\n      this.error.assign = null;\n      // Get the iteration path for this specific task - first try filtered tasks\n      let task = this.filteredTasks.find(t => t.id === taskId);\n      // If not found, check all tasks (in case this is accessing a non-filtered task)\n      if (!task) {\n        task = this.tasks.find(t => t.id === taskId);\n      }\n      if (task && task.iterationPath) {\n        // Fetch R&D team members specifically for this task's iteration path\n        this.loading.members = true;\n        this.teamService.getTeamMembersByTeam('RND', task.iterationPath).subscribe({\n          next: members => {\n            this.teamMembers = members;\n            this.loading.members = false;\n            // Filter to R&D team members\n            this.filterRnDTeamMembers();\n            // Load task counts after team members are loaded\n            if (task && task.iterationPath) {\n              this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n            }\n          },\n          error: err => {\n            console.error(`Error loading R&D team members for iteration path ${task?.iterationPath ?? 'unknown'}:`, err);\n            this.error.members = `Failed to load team members: ${err.message}`;\n            this.loading.members = false;\n            // Fallback to regular team members if R&D team fetch fails\n            if (task && task.iterationPath) {\n              this.taskService.getTeamMembers(task.iterationPath).subscribe({\n                next: response => {\n                  if (Array.isArray(response) && response.length > 0) {\n                    if (typeof response[0] === 'string') {\n                      // String array response\n                      const names = response;\n                      this.teamMembers = names.map((name, index) => ({\n                        id: `member-${index}`,\n                        displayName: name,\n                        uniqueName: '',\n                        currentWorkload: 0,\n                        isActive: true,\n                        email: ''\n                      }));\n                    } else {\n                      // TeamMember array response\n                      this.teamMembers = response;\n                    }\n                  } else {\n                    this.teamMembers = [];\n                  }\n                  this.loading.members = false;\n                  // Filter to R&D team members even with fallback response\n                  this.filterRnDTeamMembers();\n                  if (task && task.iterationPath) {\n                    this.loadTeamMemberTaskCountsForModal(task.iterationPath);\n                  }\n                },\n                error: fallbackErr => {\n                  console.error(`Error loading fallback team members:`, fallbackErr);\n                  this.error.members = `Failed to load team members: ${fallbackErr.message}`;\n                  this.loading.members = false;\n                }\n              });\n            } else {\n              console.error('Cannot load team members: task or iterationPath is undefined');\n              this.loading.members = false;\n            }\n          }\n        });\n      } else {\n        // Ensure we have team members loaded before showing the modal\n        if (this.filteredTeamMembers.length === 0 && !this.loading.members) {\n          this.loadTeamMembers();\n        }\n        // Make sure we have task counts loaded\n        if (Object.keys(this.teamMemberTaskCounts).length === 0) {\n          this.loadTeamMemberTaskCounts();\n        }\n      }\n    }\n    /**\r\n     * Load task counts specifically for the modal dialogue\r\n     * This ensures counts are up-to-date when assigning tasks\r\n     */\n    loadTeamMemberTaskCountsForModal(iterationPath) {\n      this.loading.taskCounts = true;\n      this.taskService.getTeamMemberTaskCounts(iterationPath).subscribe({\n        next: counts => {\n          this.teamMemberTaskCounts = counts;\n          this.loading.taskCounts = false;\n          console.log('Loaded team member task counts for modal:', this.teamMemberTaskCounts);\n        },\n        error: err => {\n          console.error('Error loading team member task counts for modal:', err);\n          this.loading.taskCounts = false;\n        }\n      });\n    }\n    cancelAssign() {\n      this.selectedTask = null;\n      this.selectedMember = '';\n      this.error.assign = null;\n      this.loading.assign = false;\n    }\n    /**\r\n     * Get CSS class for priority badge\r\n     * @param priority Priority value (number or string)\r\n     * @returns CSS class name\r\n     */\n    getPriorityClass(priority) {\n      // Convert priority to number if it's a string\n      const priorityNum = typeof priority === 'string' ? parseInt(priority, 10) : priority;\n      if (isNaN(priorityNum)) {\n        return 'bg-secondary'; // Default for invalid priority\n      }\n\n      switch (priorityNum) {\n        case 1:\n          return 'bg-danger';\n        case 2:\n          return 'bg-warning text-dark';\n        case 3:\n          return 'bg-info text-dark';\n        case 4:\n          return 'bg-success';\n        default:\n          return 'bg-secondary';\n      }\n    }\n    /**\r\n     * Get CSS class for status badge\r\n     * @param status Status string or undefined\r\n     * @returns CSS class name\r\n     */\n    getStatusClass(status) {\n      if (!status) {\n        return 'bg-secondary'; // Default for undefined status\n      }\n\n      const statusLower = status.toLowerCase();\n      if (statusLower.includes('progress') || statusLower === 'active') {\n        return 'bg-primary';\n      } else if (statusLower === 'completed' || statusLower === 'done' || statusLower === 'closed') {\n        return 'bg-success';\n      } else if (statusLower === 'blocked') {\n        return 'bg-danger';\n      } else if (statusLower === 'to do' || statusLower === 'new') {\n        return 'bg-secondary';\n      } else {\n        return 'bg-info';\n      }\n    }\n    /**\r\n     * Get CSS class for team member workload indicator\r\n     * @param workload Current workload value\r\n     * @returns CSS class name\r\n     */\n    getTeamMemberWorkloadClass(workload) {\n      if (workload === 0) {\n        return 'bg-secondary';\n      } else if (workload < 3) {\n        return 'bg-success';\n      } else if (workload < 7) {\n        return 'bg-warning text-dark';\n      } else {\n        return 'bg-danger';\n      }\n    }\n    /**\r\n     * Get the progress bar class based on workload\r\n     * @param workload Current workload\r\n     * @returns Bootstrap progress bar class\r\n     */\n    getProgressBarClass(workload) {\n      if (workload === 0) {\n        return 'bg-secondary';\n      } else if (workload < 3) {\n        return 'bg-success';\n      } else if (workload < 7) {\n        return 'bg-warning';\n      } else {\n        return 'bg-danger';\n      }\n    }\n    /**\r\n     * Calculate workload as a percentage (for progress bar width)\r\n     * @param workload Current workload\r\n     * @returns Percentage value (0-100)\r\n     */\n    getWorkloadPercentage(workload) {\n      // Using 10 as maximum reasonable workload\n      const maxWorkload = 10;\n      return Math.min(100, workload / maxWorkload * 100);\n    }\n    /**\r\n     * Change the iteration path and reload tasks\r\n     * @param iterationPath New iteration path to load tasks from\r\n     */\n    changeIterationPath(iterationPath) {\n      console.log(`Changing iteration path to: ${iterationPath}`);\n      this.currentIterationPath = iterationPath;\n      // Reset data\n      this.tasks = [];\n      this.filteredTasks = [];\n      this.teamMembers = [];\n      this.filteredTeamMembers = [];\n      this.teamMemberTaskCounts = {};\n      // Load new data\n      this.loadTasks();\n      this.loadTeamMembers();\n    }\n    /**\r\n     * Get the title of the currently selected task\r\n     * @returns The task title or a fallback message\r\n     */\n    getSelectedTaskTitle() {\n      if (this.selectedTask === null) {\n        return 'No task selected';\n      }\n      const selectedTaskId = this.selectedTask;\n      // First try to find in filtered tasks\n      let task = this.filteredTasks.find(t => t.id === selectedTaskId);\n      // If not found (could be a non-R&D task), look in all tasks\n      if (!task) {\n        task = this.tasks.find(t => t.id === selectedTaskId);\n      }\n      return task ? task.title : 'Unknown Task';\n    }\n    /**\r\n     * Get the task count for a specific team member\r\n     * @param memberName The name of the team member\r\n     * @returns The number of tasks assigned to that member\r\n     */\n    getTaskCount(memberName) {\n      // First check if we have task counts from the API\n      if (Object.keys(this.teamMemberTaskCounts).length > 0) {\n        // Look for an exact match\n        if (this.teamMemberTaskCounts[memberName] !== undefined) {\n          return this.teamMemberTaskCounts[memberName];\n        }\n        // Try case-insensitive match\n        const key = Object.keys(this.teamMemberTaskCounts).find(k => k.toLowerCase() === memberName.toLowerCase());\n        if (key) {\n          return this.teamMemberTaskCounts[key];\n        }\n      }\n      // Fall back to the currentWorkload from team members\n      const member = this.teamMembers.find(m => m.displayName.toLowerCase() === memberName.toLowerCase());\n      return member ? member.currentWorkload : 0;\n    }\n    /**\r\n     * Get a list of all tasks with Dev-New status\r\n     * @returns List of Dev-New tasks\r\n     */\n    getDevNewTasks() {\n      return this.filteredTasks.filter(task => task.status && task.status.toLowerCase() === 'dev-new');\n    }\n    /**\r\n     * Get a list of unassigned Dev-New tasks\r\n     * @returns List of unassigned Dev-New tasks\r\n     */\n    getUnassignedDevNewTasks() {\n      return this.filteredTasks.filter(task => task.status && task.status.toLowerCase() === 'dev-new' && !task.assignedTo);\n    }\n    /**\r\n     * Get a summary of task status distribution\r\n     * @returns Array of status counts\r\n     */\n    getStatusDistribution() {\n      const statusCounts = {};\n      this.filteredTasks.forEach(task => {\n        const status = task.status || 'Unknown';\n        statusCounts[status] = (statusCounts[status] || 0) + 1;\n      });\n      return Object.entries(statusCounts).map(([status, count]) => ({\n        status,\n        count\n      })).sort((a, b) => b.count - a.count);\n    }\n    /**\r\n     * Filter tasks to only show those assigned to R&D team members\r\n     */\n    filterTasksByRnDTeamMembers() {\n      // First ensure we have filtered team members\n      if (this.filteredTeamMembers.length === 0) {\n        this.filterRnDTeamMembers();\n      }\n      // Get a list of display names of filtered R&D team members\n      const rndMemberNames = this.filteredTeamMembers.map(member => member.displayName.toLowerCase());\n      console.log('R&D team member names for task filtering:', rndMemberNames);\n      // Filter tasks to only include those assigned to R&D members and unassigned tasks\n      this.filteredTasks = this.tasks.filter(task => {\n        // Always include unassigned tasks\n        if (!task.assignedTo) {\n          return true;\n        }\n        // Check if task is assigned to an R&D team member\n        return rndMemberNames.includes(task.assignedTo.toLowerCase());\n      });\n      console.log(`Filtered ${this.tasks.length} tasks down to ${this.filteredTasks.length} tasks assigned to R&D members or unassigned`);\n    }\n    static {\n      this.ɵfac = function TaskDistributionComponent_Factory(t) {\n        return new (t || TaskDistributionComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.TeamService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TaskDistributionComponent,\n        selectors: [[\"app-task-distribution\"]],\n        decls: 103,\n        vars: 44,\n        consts: [[1, \"container-fluid\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [1, \"d-inline-block\", \"me-3\"], [1, \"form-select\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-muted small mt-1\", 4, \"ngIf\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-magic\"], [4, \"ngIf\"], [1, \"text-muted\", \"mt-2\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [\"id\", \"taskTabs\", \"role\", \"tablist\", 1, \"nav\", \"nav-tabs\", \"mb-4\"], [\"role\", \"presentation\", 1, \"nav-item\"], [\"id\", \"task-distribution-tab\", \"data-bs-toggle\", \"tab\", \"data-bs-target\", \"#task-distribution\", \"type\", \"button\", \"role\", \"tab\", \"aria-controls\", \"task-distribution\", \"aria-selected\", \"true\", 1, \"nav-link\", \"active\", 3, \"click\"], [1, \"bi\", \"bi-list-task\", \"me-2\"], [\"id\", \"task-workload-tab\", \"data-bs-toggle\", \"tab\", \"data-bs-target\", \"#task-workload\", \"type\", \"button\", \"role\", \"tab\", \"aria-controls\", \"task-workload\", \"aria-selected\", \"false\", 1, \"nav-link\", 3, \"click\"], [1, \"bi\", \"bi-bar-chart-line\", \"me-2\"], [\"id\", \"taskTabsContent\", 1, \"tab-content\"], [\"id\", \"task-distribution\", \"role\", \"tabpanel\", \"aria-labelledby\", \"task-distribution-tab\", 1, \"tab-pane\", \"fade\", \"show\", \"active\"], [1, \"row\"], [1, \"card\"], [1, \"card-body\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [\"id\", \"task-workload\", \"role\", \"tabpanel\", \"aria-labelledby\", \"task-workload-tab\", 1, \"tab-pane\", \"fade\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"btn\", \"btn-outline-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-arrow-clockwise\", \"me-1\"], [\"class\", \"row\", 4, \"ngIf\"], [\"tabindex\", \"-1\", 1, \"modal\", 3, \"ngClass\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\"], [\"class\", \"alert alert-danger mb-3\", 4, \"ngIf\"], [1, \"mb-4\"], [\"for\", \"teamMemberSelect\", 1, \"form-label\", \"fw-bold\", \"mb-2\"], [1, \"team-member-options\"], [\"class\", \"form-check mb-2 border p-2 rounded\", 4, \"ngFor\", \"ngForOf\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"class\", \"modal-backdrop fade show\", 4, \"ngIf\"], [1, \"modal-dialog\", \"modal-lg\"], [1, \"modal-header\", \"bg-primary\", \"text-white\"], [1, \"bi\", \"bi-magic\", \"me-2\"], [\"type\", \"button\", 1, \"btn-close\", \"btn-close-white\", 3, \"click\"], [1, \"alert\", \"alert-primary\", \"mb-3\"], [1, \"bi\", \"bi-info-circle\", \"me-2\"], [\"class\", \"alert alert-info\", 4, \"ngIf\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [3, \"ngValue\"], [1, \"text-muted\", \"small\", \"mt-1\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-warning\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"text-muted\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\"], [4, \"ngFor\", \"ngForOf\"], [1, \"badge\", \"rounded-pill\", 3, \"ngClass\"], [1, \"d-flex\", \"align-items-center\"], [\"class\", \"me-2\", 4, \"ngIf\"], [\"class\", \"text-muted me-2\", 4, \"ngIf\"], [\"class\", \"ms-1 suggestion-box\", 4, \"ngIf\"], [1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-person-plus\"], [1, \"me-2\"], [1, \"text-muted\", \"me-2\"], [1, \"ms-1\", \"suggestion-box\"], [1, \"text-primary\"], [1, \"bi\", \"bi-lightbulb-fill\"], [\"class\", \"col-md-3 col-sm-6 mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-3\", \"col-sm-6\", \"mb-3\"], [1, \"card\", \"team-member-card\", \"h-100\", 3, \"ngClass\"], [1, \"card-title\"], [1, \"workload-stats\", \"mt-2\"], [1, \"progress\", \"mt-2\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"10\", 1, \"progress-bar\", 3, \"ngClass\"], [\"class\", \"text-muted mt-2 small\", 4, \"ngIf\"], [1, \"text-muted\", \"mt-2\", \"small\"], [1, \"bi\", \"bi-envelope\"], [1, \"alert\", \"alert-danger\", \"mb-3\"], [1, \"mb-3\"], [1, \"form-label\", \"fw-bold\"], [1, \"py-2\", \"px-3\", \"bg-light\", \"rounded\"], [1, \"form-check\", \"mb-2\", \"border\", \"p-2\", \"rounded\"], [\"type\", \"radio\", \"name\", \"teamMemberRadio\", 1, \"form-check-input\", 3, \"id\", \"value\", \"ngModel\", \"ngModelChange\"], [1, \"form-check-label\", \"w-100\"], [1, \"member-name\"], [1, \"modal-backdrop\", \"fade\", \"show\"], [1, \"mt-2\"], [1, \"alert\", \"alert-info\"], [1, \"mt-3\"], [\"id\", \"debugAccordion\", 1, \"accordion\"], [1, \"accordion-item\"], [\"id\", \"headingOne\", 1, \"accordion-header\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#collapseOne\", \"aria-expanded\", \"false\", \"aria-controls\", \"collapseOne\", 1, \"accordion-button\", \"collapsed\"], [1, \"bi\", \"bi-bug\", \"me-2\"], [\"id\", \"collapseOne\", \"aria-labelledby\", \"headingOne\", \"data-bs-parent\", \"#debugAccordion\", 1, \"accordion-collapse\", \"collapse\"], [1, \"accordion-body\"], [1, \"table\", \"table-sm\", \"table-bordered\"], [1, \"mt-4\"], [1, \"list-unstyled\", \"row\"], [1, \"col-md-6\", \"mb-2\"], [1, \"bi\", \"bi-trophy\", \"text-warning\", \"me-2\"], [1, \"bi\", \"bi-check-circle\", \"text-success\", \"me-2\"], [1, \"bi\", \"bi-speedometer2\", \"text-info\", \"me-2\"], [1, \"bi\", \"bi-person-plus\", \"text-primary\", \"me-2\"], [1, \"badge\", \"bg-info\", \"text-dark\"], [1, \"badge\", \"bg-secondary\"], [\"class\", \"text-muted\", 4, \"ngIf\"], [\"class\", \"badge bg-warning text-dark\", 4, \"ngIf\"], [\"class\", \"text-muted small\", 4, \"ngIf\"], [1, \"badge\", \"bg-warning\", \"text-dark\"], [1, \"badge\", \"bg-success\", \"me-2\"], [\"class\", \"ms-2 badge bg-warning text-dark\", 4, \"ngIf\"], [1, \"ms-2\", \"badge\", \"bg-warning\", \"text-dark\"], [1, \"text-muted\", \"small\"]],\n        template: function TaskDistributionComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\", 4);\n            i0.ɵɵtext(5, \"Task Distribution\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"div\")(7, \"div\", 5)(8, \"select\", 6);\n            i0.ɵɵlistener(\"ngModelChange\", function TaskDistributionComponent_Template_select_ngModelChange_8_listener($event) {\n              return ctx.changeIterationPath($event);\n            });\n            i0.ɵɵtemplate(9, TaskDistributionComponent_option_9_Template, 2, 2, \"option\", 7);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(10, TaskDistributionComponent_div_10_Template, 3, 0, \"div\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"button\", 9);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_11_listener() {\n              return ctx.showAutoAssignPreview();\n            });\n            i0.ɵɵelement(12, \"i\", 10);\n            i0.ɵɵtemplate(13, TaskDistributionComponent_span_13_Template, 2, 0, \"span\", 11);\n            i0.ɵɵtemplate(14, TaskDistributionComponent_span_14_Template, 3, 0, \"span\", 11);\n            i0.ɵɵtemplate(15, TaskDistributionComponent_span_15_Template, 3, 0, \"span\", 11);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(16, \"p\", 12);\n            i0.ɵɵtext(17, \"Manage and assign tasks for the current sprint\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(18, TaskDistributionComponent_div_18_Template, 2, 1, \"div\", 13);\n            i0.ɵɵtemplate(19, TaskDistributionComponent_div_19_Template, 2, 1, \"div\", 14);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(20, \"ul\", 15)(21, \"li\", 16)(22, \"button\", 17);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_22_listener() {\n              return ctx.onTabChange(\"distribution\");\n            });\n            i0.ɵɵelement(23, \"i\", 18);\n            i0.ɵɵtext(24, \"Task Distribution \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(25, \"li\", 16)(26, \"button\", 19);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_26_listener() {\n              return ctx.onTabChange(\"workload\");\n            });\n            i0.ɵɵelement(27, \"i\", 20);\n            i0.ɵɵtext(28, \"Task Workload \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(29, \"div\", 21)(30, \"div\", 22)(31, \"div\", 23)(32, \"div\", 2)(33, \"div\", 24)(34, \"div\", 25);\n            i0.ɵɵtemplate(35, TaskDistributionComponent_div_35_Template, 4, 0, \"div\", 26);\n            i0.ɵɵtemplate(36, TaskDistributionComponent_div_36_Template, 2, 1, \"div\", 13);\n            i0.ɵɵtemplate(37, TaskDistributionComponent_div_37_Template, 3, 0, \"div\", 26);\n            i0.ɵɵtemplate(38, TaskDistributionComponent_div_38_Template, 18, 1, \"div\", 27);\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(39, \"div\", 28)(40, \"div\", 23)(41, \"div\", 2)(42, \"div\", 24)(43, \"div\", 29)(44, \"h4\", 4);\n            i0.ɵɵtext(45, \"Team Workload\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(46, \"button\", 30);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_46_listener() {\n              ctx.loadTeamMembers();\n              return ctx.loadTeamMemberTaskCounts();\n            });\n            i0.ɵɵelement(47, \"i\", 31);\n            i0.ɵɵtext(48, \" Refresh Data \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(49, \"div\", 25);\n            i0.ɵɵtemplate(50, TaskDistributionComponent_div_50_Template, 4, 0, \"div\", 26);\n            i0.ɵɵtemplate(51, TaskDistributionComponent_div_51_Template, 2, 1, \"div\", 13);\n            i0.ɵɵtemplate(52, TaskDistributionComponent_div_52_Template, 3, 0, \"div\", 26);\n            i0.ɵɵtemplate(53, TaskDistributionComponent_div_53_Template, 2, 1, \"div\", 32);\n            i0.ɵɵelementEnd()()()()()();\n            i0.ɵɵelementStart(54, \"div\", 33)(55, \"div\", 34)(56, \"div\", 35)(57, \"div\", 36)(58, \"h5\", 37);\n            i0.ɵɵtext(59, \"Assign Task\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(60, \"button\", 38);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_60_listener() {\n              return ctx.cancelAssign();\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(61, \"div\", 39);\n            i0.ɵɵtemplate(62, TaskDistributionComponent_div_62_Template, 2, 1, \"div\", 40);\n            i0.ɵɵtemplate(63, TaskDistributionComponent_div_63_Template, 11, 2, \"div\", 11);\n            i0.ɵɵelementStart(64, \"div\", 41)(65, \"label\", 42);\n            i0.ɵɵtext(66, \"Select Team Member\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(67, \"div\", 43);\n            i0.ɵɵtemplate(68, TaskDistributionComponent_div_68_Template, 8, 7, \"div\", 44);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(69, \"div\", 45)(70, \"button\", 46);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_70_listener() {\n              return ctx.cancelAssign();\n            });\n            i0.ɵɵtext(71, \"Cancel\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(72, \"button\", 47);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_72_listener() {\n              return ctx.assignTask();\n            });\n            i0.ɵɵtemplate(73, TaskDistributionComponent_span_73_Template, 2, 0, \"span\", 11);\n            i0.ɵɵtemplate(74, TaskDistributionComponent_span_74_Template, 3, 0, \"span\", 11);\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵtemplate(75, TaskDistributionComponent_div_75_Template, 1, 0, \"div\", 48);\n            i0.ɵɵelementStart(76, \"div\", 33)(77, \"div\", 49)(78, \"div\", 35)(79, \"div\", 50)(80, \"h5\", 37);\n            i0.ɵɵelement(81, \"i\", 51);\n            i0.ɵɵtext(82, \" Auto-Assign Preview \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(83, \"button\", 52);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_83_listener() {\n              return ctx.cancelAutoAssignPreview();\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(84, \"div\", 39);\n            i0.ɵɵtemplate(85, TaskDistributionComponent_div_85_Template, 2, 1, \"div\", 40);\n            i0.ɵɵelementStart(86, \"div\", 53);\n            i0.ɵɵelement(87, \"i\", 54);\n            i0.ɵɵelementStart(88, \"strong\");\n            i0.ɵɵtext(89, \"Preview Mode:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(90, \" Review AI-suggested assignments before confirming. No changes will be made until you click \\\"Confirm & Assign\\\". \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(91, TaskDistributionComponent_div_91_Template, 6, 0, \"div\", 26);\n            i0.ɵɵtemplate(92, TaskDistributionComponent_div_92_Template, 3, 0, \"div\", 55);\n            i0.ɵɵtemplate(93, TaskDistributionComponent_div_93_Template, 14, 4, \"div\", 56);\n            i0.ɵɵtemplate(94, TaskDistributionComponent_div_94_Template, 49, 1, \"div\", 11);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(95, \"div\", 45)(96, \"button\", 46);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_96_listener() {\n              return ctx.cancelAutoAssignPreview();\n            });\n            i0.ɵɵtext(97, \"Cancel\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(98, \"button\", 47);\n            i0.ɵɵlistener(\"click\", function TaskDistributionComponent_Template_button_click_98_listener() {\n              return ctx.confirmAutoAssign();\n            });\n            i0.ɵɵelement(99, \"i\", 51);\n            i0.ɵɵtemplate(100, TaskDistributionComponent_span_100_Template, 2, 0, \"span\", 11);\n            i0.ɵɵtemplate(101, TaskDistributionComponent_span_101_Template, 3, 0, \"span\", 11);\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵtemplate(102, TaskDistributionComponent_div_102_Template, 1, 0, \"div\", 48);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngModel\", ctx.currentIterationPath)(\"disabled\", ctx.loading.iterationPaths);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngForOf\", ctx.iterationPaths);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.iterationPaths);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"disabled\", ctx.loading.autoAssign || ctx.loading.preview);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.autoAssign && !ctx.loading.preview);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.preview);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.autoAssign);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.autoAssign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.iterationPaths);\n            i0.ɵɵadvance(16);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.tasks);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.tasks);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.error.tasks && ctx.tasks.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.tasks && !ctx.error.tasks && ctx.tasks.length > 0);\n            i0.ɵɵadvance(12);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.members);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.members);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.members && !ctx.error.members && ctx.filteredTeamMembers.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.members && !ctx.error.members && ctx.filteredTeamMembers.length > 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵstyleProp(\"display\", ctx.selectedTask !== null ? \"block\" : \"none\");\n            i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(40, _c1, ctx.selectedTask !== null));\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.assign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedTask !== null);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngForOf\", ctx.filteredTeamMembers);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"disabled\", ctx.loading.assign || !ctx.selectedMember);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.assign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.assign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedTask !== null);\n            i0.ɵɵadvance(1);\n            i0.ɵɵstyleProp(\"display\", ctx.showingPreview ? \"block\" : \"none\");\n            i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(42, _c1, ctx.showingPreview));\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"ngIf\", ctx.error.preview);\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.preview);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.preview && ctx.assignPreviewTasks.length > 0);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"disabled\", ctx.loading.autoAssign || !ctx.assignPreviewTasks || ctx.assignPreviewTasks.length === 0 || !ctx.hasAssignmentSuggestions());\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading.autoAssign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading.autoAssign);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.showingPreview);\n          }\n        },\n        dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.SelectControlValueAccessor, i4.RadioControlValueAccessor, i4.NgControlStatus, i4.NgModel],\n        styles: [\".card[_ngcontent-%COMP%]{border-radius:8px;box-shadow:0 2px 8px #0000001a;margin-bottom:20px}.nav-tabs[_ngcontent-%COMP%]{border-bottom:1px solid #dee2e6}.nav-tabs[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%]{border:none;color:#495057;font-weight:500;padding:10px 16px;margin-right:4px;border-radius:4px 4px 0 0;transition:all .2s ease}.nav-tabs[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%]:hover{background-color:#0d6efd0d;border-color:transparent}.nav-tabs[_ngcontent-%COMP%]   .nav-link.active[_ngcontent-%COMP%]{color:#0d6efd;background-color:#fff;border-bottom:3px solid #0d6efd;font-weight:600}.tab-content[_ngcontent-%COMP%]{padding:20px 0}.card-header[_ngcontent-%COMP%]{background-color:#f8f9fa;border-bottom:1px solid rgba(0,0,0,.125);padding:12px 16px}.table[_ngcontent-%COMP%]{margin-bottom:0}.table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{font-weight:600;color:#495057}.suggestion-box[_ngcontent-%COMP%]{background-color:#0d6efd0d;padding:3px 6px;border-radius:4px;border-left:2px solid #0d6efd;font-size:.8rem}.team-member-card[_ngcontent-%COMP%]{transition:all .3s ease;border-radius:8px;box-shadow:0 2px 5px #0000001a}.team-member-card[_ngcontent-%COMP%]:hover{transform:translateY(-5px);box-shadow:0 5px 15px #0000001a}.team-member-card[_ngcontent-%COMP%]   .card-title[_ngcontent-%COMP%]{font-weight:600;margin-bottom:.5rem}.workload-indicator[_ngcontent-%COMP%]{position:relative;height:24px;border-radius:12px;background-color:#f0f0f0;overflow:hidden;margin-top:10px}.workload-bar[_ngcontent-%COMP%]{position:absolute;top:0;left:0;height:100%;z-index:1}.workload-label[_ngcontent-%COMP%]{position:relative;z-index:2;display:block;text-align:center;line-height:24px;font-size:.8rem;font-weight:500;color:#333}.low-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%]{background-color:#28a745}.medium-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%]{background-color:#ffc107}.high-workload[_ngcontent-%COMP%]   .workload-bar[_ngcontent-%COMP%]{background-color:#dc3545}.workload-stats[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:flex-start;margin-bottom:.5rem}.workload-stats[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%]{font-size:.8rem;padding:5px 10px}.progress[_ngcontent-%COMP%]{height:8px;background-color:#f0f0f0}.modal-backdrop[_ngcontent-%COMP%]{opacity:.5}.modal-content[_ngcontent-%COMP%]{border-radius:8px;box-shadow:0 5px 15px #0000001a}#teamMemberSelect[_ngcontent-%COMP%]{max-height:300px;width:100%}#teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]{padding:8px 12px;cursor:pointer}#teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]:hover, #teamMemberSelect[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]:focus{background-color:#e9ecef}select.form-select[_ngcontent-%COMP%]{height:auto!important}select.form-select[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]{display:block;font-size:16px;line-height:1.5;padding:8px 12px}@keyframes _ngcontent-%COMP%_pulse{0%{box-shadow:0 0 #0d6efd66}70%{box-shadow:0 0 0 10px #0d6efd00}to{box-shadow:0 0 #0d6efd00}}.team-member-options[_ngcontent-%COMP%]{max-height:300px;overflow-y:auto}.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]{transition:all .2s ease;cursor:pointer;border:1px solid #dee2e6!important}.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]:hover{background-color:#f8f9fa;transform:translateY(-2px);box-shadow:0 2px 5px #0000001a}.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]{cursor:pointer}.team-member-options[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%]{cursor:pointer;padding:4px 0}.team-member-options[_ngcontent-%COMP%]   .member-name[_ngcontent-%COMP%]{font-weight:500}.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]:checked + .form-check-label[_ngcontent-%COMP%]{color:#0d6efd}.team-member-options[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]:checked + .form-check-label[_ngcontent-%COMP%]   .member-name[_ngcontent-%COMP%]{font-weight:600}.team-member-options[_ngcontent-%COMP%]   .form-check[_ngcontent-%COMP%]:has(.form-check-input:checked){background-color:#0d6efd0d;border-color:#0d6efd!important}\"]\n      });\n    }\n  }\n  return TaskDistributionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}