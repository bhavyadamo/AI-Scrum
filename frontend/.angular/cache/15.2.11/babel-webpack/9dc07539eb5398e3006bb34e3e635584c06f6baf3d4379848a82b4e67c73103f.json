{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AzureDevOpsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.azureDevOpsUrl;\n    this.organization = environment.organization;\n    this.project = environment.project;\n    this.apiVersion = '7.0';\n  }\n  /**\r\n   * Fetch work items using WIQL query for a specific iteration path\r\n   * @param iterationPath The iteration path to filter by\r\n   * @returns Observable with work items data\r\n   */\n  getWorkItemsByIteration(iterationPath) {\n    const url = `${this.apiUrl}/${this.organization}/${this.project}/_apis/wit/wiql?api-version=${this.apiVersion}`;\n    // Create WIQL query to filter by iteration path\n    const query = {\n      query: `SELECT [System.Id], [System.WorkItemType], [System.Title], [System.State], [System.AssignedTo] \n              FROM WorkItems \n              WHERE [System.IterationPath] = '${iterationPath}'\n              ORDER BY [System.Id]`\n    };\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(url, query, {\n      headers\n    }).pipe(map(response => {\n      if (response.workItems && response.workItems.length > 0) {\n        // Get the work item IDs\n        const workItemIds = response.workItems.map(item => item.id);\n        // Batch fetch the work item details\n        return this.getWorkItemsDetails(workItemIds);\n      }\n      return [];\n    }), catchError(error => {\n      console.error('Error fetching work items by iteration:', error);\n      return throwError(() => new Error('Failed to fetch work items. Please try again.'));\n    }));\n  }\n  /**\r\n   * Get detailed information for a batch of work items by IDs\r\n   * @param ids Array of work item IDs\r\n   * @returns Observable with detailed work item data\r\n   */\n  getWorkItemsDetails(ids) {\n    if (!ids || ids.length === 0) {\n      return new Observable(observer => {\n        observer.next([]);\n        observer.complete();\n      });\n    }\n    const idsString = ids.join(',');\n    const url = `${this.apiUrl}/${this.organization}/${this.project}/_apis/wit/workitems?ids=${idsString}&fields=System.Id,System.WorkItemType,System.Title,System.State,System.AssignedTo&api-version=${this.apiVersion}`;\n    return this.http.get(url).pipe(map(response => response.value || []), catchError(error => {\n      console.error('Error fetching work item details:', error);\n      return throwError(() => new Error('Failed to fetch work item details. Please try again.'));\n    }));\n  }\n  /**\r\n   * Process work items to get counts by status\r\n   * @param workItems The work items data\r\n   * @returns Object with counts by status\r\n   */\n  getWorkItemCounts(workItems) {\n    const counts = {\n      totalTasks: workItems.length,\n      devNew: 0,\n      inProgress: 0,\n      codeReview: 0,\n      devComplete: 0,\n      completed: 0,\n      blocked: 0\n    };\n    workItems.forEach(item => {\n      const state = item.fields['System.State'];\n      // Increment appropriate counter based on state\n      if (state === 'Dev-New') {\n        counts.devNew++;\n      } else if (state === 'Dev-WIP' || state === 'In Progress' || state === 'Active') {\n        counts.inProgress++;\n      } else if (state === 'Code Review' || state === 'Dev-Code Review') {\n        counts.codeReview++;\n      } else if (state === 'Dev-Done' || state === 'Dev-Complete') {\n        counts.devComplete++;\n      } else if (state === 'Completed' || state === 'Closed' || state === 'Done') {\n        counts.completed++;\n      } else if (state === 'Blocked' || state === 'Impediment') {\n        counts.blocked++;\n      }\n    });\n    return counts;\n  }\n  static {\n    this.ɵfac = function AzureDevOpsService_Factory(t) {\n      return new (t || AzureDevOpsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AzureDevOpsService,\n      factory: AzureDevOpsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","Observable","throwError","catchError","map","environment","AzureDevOpsService","constructor","http","azureDevOpsUrl","organization","project","getWorkItemsByIteration","iterationPath","url","apiUrl","apiVersion","query","headers","post","pipe","response","workItems","length","workItemIds","item","id","getWorkItemsDetails","error","console","Error","ids","observer","next","complete","idsString","join","get","value","getWorkItemCounts","counts","totalTasks","devNew","inProgress","codeReview","devComplete","completed","blocked","forEach","state","fields","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\azure-devops.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AzureDevOpsService {\r\n  private apiUrl = environment.azureDevOpsUrl;\r\n  private organization = environment.organization;\r\n  private project = environment.project;\r\n  private apiVersion = '7.0';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Fetch work items using WIQL query for a specific iteration path\r\n   * @param iterationPath The iteration path to filter by\r\n   * @returns Observable with work items data\r\n   */\r\n  getWorkItemsByIteration(iterationPath: string): Observable<any> {\r\n    const url = `${this.apiUrl}/${this.organization}/${this.project}/_apis/wit/wiql?api-version=${this.apiVersion}`;\r\n    \r\n    // Create WIQL query to filter by iteration path\r\n    const query = {\r\n      query: `SELECT [System.Id], [System.WorkItemType], [System.Title], [System.State], [System.AssignedTo] \r\n              FROM WorkItems \r\n              WHERE [System.IterationPath] = '${iterationPath}'\r\n              ORDER BY [System.Id]`\r\n    };\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    });\r\n\r\n    return this.http.post(url, query, { headers }).pipe(\r\n      map((response: any) => {\r\n        if (response.workItems && response.workItems.length > 0) {\r\n          // Get the work item IDs\r\n          const workItemIds = response.workItems.map((item: any) => item.id);\r\n          \r\n          // Batch fetch the work item details\r\n          return this.getWorkItemsDetails(workItemIds);\r\n        }\r\n        return [];\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error fetching work items by iteration:', error);\r\n        return throwError(() => new Error('Failed to fetch work items. Please try again.'));\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get detailed information for a batch of work items by IDs\r\n   * @param ids Array of work item IDs\r\n   * @returns Observable with detailed work item data\r\n   */\r\n  getWorkItemsDetails(ids: number[]): Observable<any> {\r\n    if (!ids || ids.length === 0) {\r\n      return new Observable(observer => {\r\n        observer.next([]);\r\n        observer.complete();\r\n      });\r\n    }\r\n\r\n    const idsString = ids.join(',');\r\n    const url = `${this.apiUrl}/${this.organization}/${this.project}/_apis/wit/workitems?ids=${idsString}&fields=System.Id,System.WorkItemType,System.Title,System.State,System.AssignedTo&api-version=${this.apiVersion}`;\r\n\r\n    return this.http.get(url).pipe(\r\n      map((response: any) => response.value || []),\r\n      catchError(error => {\r\n        console.error('Error fetching work item details:', error);\r\n        return throwError(() => new Error('Failed to fetch work item details. Please try again.'));\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Process work items to get counts by status\r\n   * @param workItems The work items data\r\n   * @returns Object with counts by status\r\n   */\r\n  getWorkItemCounts(workItems: any[]): any {\r\n    const counts = {\r\n      totalTasks: workItems.length,\r\n      devNew: 0,\r\n      inProgress: 0,\r\n      codeReview: 0,\r\n      devComplete: 0,\r\n      completed: 0,\r\n      blocked: 0\r\n    };\r\n\r\n    workItems.forEach(item => {\r\n      const state = item.fields['System.State'];\r\n      \r\n      // Increment appropriate counter based on state\r\n      if (state === 'Dev-New') {\r\n        counts.devNew++;\r\n      } else if (state === 'Dev-WIP' || state === 'In Progress' || state === 'Active') {\r\n        counts.inProgress++;\r\n      } else if (state === 'Code Review' || state === 'Dev-Code Review') {\r\n        counts.codeReview++;\r\n      } else if (state === 'Dev-Done' || state === 'Dev-Complete') {\r\n        counts.devComplete++;\r\n      } else if (state === 'Completed' || state === 'Closed' || state === 'Done') {\r\n        counts.completed++;\r\n      } else if (state === 'Blocked' || state === 'Impediment') {\r\n        counts.blocked++;\r\n      }\r\n    });\r\n\r\n    return counts;\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}