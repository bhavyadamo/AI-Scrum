{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DashboardService = /*#__PURE__*/(() => {\n  class DashboardService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiUrl}/dashboard`;\n      this.tasksApiUrl = `${environment.apiUrl}`; // Base API URL for /api/tasks endpoints\n    }\n    // Helper method to properly encode iteration path\n    encodeIterationPath(iterationPath) {\n      // Use double-encoded backslashes (%255C) which is what the working API expects\n      return iterationPath.replace(/\\\\/g, '%255C');\n    }\n    // Helper method to decode iteration path for display\n    decodeIterationPath(path) {\n      if (!path) return '';\n      // Replace the encoded backslash with an actual backslash\n      let decoded = path.replace(/%255C/g, '\\\\');\n      decoded = decoded.replace(/%5C/g, '\\\\');\n      decoded = decoded.replace(/%5c/g, '\\\\');\n      return decoded;\n    }\n    getCurrentSprint() {\n      return this.http.get(`${this.apiUrl}/sprint`);\n    }\n    getSprintSummary(iterationPath) {\n      const encodedPath = this.encodeIterationPath(iterationPath);\n      let params = new HttpParams().set('iterationPath', encodedPath);\n      return this.http.get(`${this.apiUrl}/summary`, {\n        params\n      });\n    }\n    getActivityFeed(count = 10) {\n      return this.http.get(`${this.apiUrl}/activity`, {\n        params: {\n          count: count.toString()\n        }\n      });\n    }\n    getDailyTip() {\n      return this.http.get(`${this.apiUrl}/tip`);\n    }\n    getTaskDistribution(iterationPath) {\n      const encodedPath = this.encodeIterationPath(iterationPath);\n      let params = new HttpParams().set('iterationPath', encodedPath);\n      return this.http.get(`${this.tasksApiUrl}/tasks`, {\n        params\n      }).pipe(catchError(error => {\n        console.error('Error fetching task distribution:', error);\n        return of(null);\n      }));\n    }\n    getWorkItemDistribution(iterationPath) {\n      let params = new HttpParams();\n      if (iterationPath) {\n        params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\n      }\n      return this.http.get(`${this.apiUrl}/distribution`, {\n        params\n      }).pipe(catchError(error => {\n        console.error('Error fetching work item distribution:', error);\n        return of({\n          iterationPath: iterationPath || '',\n          states: [],\n          totalCount: 0\n        });\n      }));\n    }\n    getStateDistribution(iterationPath) {\n      let params = new HttpParams();\n      if (iterationPath) {\n        params = params.set('iterationPath', this.encodeIterationPath(iterationPath));\n      }\n      return this.http.get(`${this.apiUrl}/state-distribution`, {\n        params\n      });\n    }\n    getLongTermDevNewItems(maxItems = 5) {\n      return this.http.get(`${this.apiUrl}/long-term-dev-new`, {\n        params: {\n          count: maxItems.toString()\n        }\n      });\n    }\n    getSupportItems(months = 6) {\n      return this.http.get(`${this.apiUrl}/support-items`, {\n        params: {\n          months: months.toString()\n        }\n      });\n    }\n    getAiTips() {\n      return this.http.get(`${this.apiUrl}/ai-tips`);\n    }\n    getTasksByStatus(iterationPath) {\n      let params = new HttpParams().set('iterationPath', this.encodeIterationPath(iterationPath));\n      return this.http.get(`${this.apiUrl}/tasks-by-status`, {\n        params\n      }).pipe(catchError(error => {\n        console.error('Error fetching tasks by status:', error);\n        return of({\n          items: []\n        });\n      }));\n    }\n    sendChatMessage(data) {\n      return this.http.post(`${this.apiUrl}/chat`, {\n        message: data.message,\n        currentIterationPath: data.currentIterationPath\n      });\n    }\n    getSprintDetailsByIterationPath(iterationPath) {\n      const encodedPath = this.encodeIterationPath(iterationPath);\n      let params = new HttpParams().set('iterationPath', encodedPath);\n      return this.http.get(`${this.apiUrl}/sprint-details`, {\n        params\n      });\n    }\n    static {\n      this.ɵfac = function DashboardService_Factory(t) {\n        return new (t || DashboardService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DashboardService,\n        factory: DashboardService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DashboardService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}