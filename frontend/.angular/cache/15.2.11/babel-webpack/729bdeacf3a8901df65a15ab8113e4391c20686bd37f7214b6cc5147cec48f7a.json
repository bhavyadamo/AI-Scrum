{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    // Get the auth token from the service\n    const currentUser = this.authService.currentUserValue;\n    // Clone the request and add auth header if user is logged in\n    if (currentUser && currentUser.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n    // Pass the cloned request to the next handler\n    return next.handle(request).pipe(catchError(error => {\n      // Handle 401 Unauthorized or 404 Not Found errors\n      if (error.status === 401 || error.status === 404 && error.url?.includes('Login')) {\n        console.log('Authentication error, redirecting to mock data');\n        // Instead of redirecting, we'll just log and let the service handle it with mock data\n      }\n\n      return throwError(() => error);\n    }));\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAI3C,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD;IACA,MAAMC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,gBAAgB;IAErD;IACA,IAAID,WAAW,IAAIA,WAAW,CAACE,KAAK,EAAE;MACpCJ,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,WAAW,CAACE,KAAK;;OAE7C,CAAC;;IAGJ;IACA,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC,CAACS,IAAI,CAC9Bd,UAAU,CAAEe,KAAwB,IAAI;MACtC;MACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,IAAKD,KAAK,CAACC,MAAM,KAAK,GAAG,IAAID,KAAK,CAACE,GAAG,EAAEC,QAAQ,CAAC,OAAO,CAAE,EAAE;QAClFC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;QAC7D;;;MAGF,OAAOrB,UAAU,CAAC,MAAMgB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uBA5BWd,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAoB,SAAfpB,eAAe;IAAA;EAAA","names":["throwError","catchError","AuthInterceptor","constructor","authService","intercept","request","next","currentUser","currentUserValue","token","clone","setHeaders","Authorization","handle","pipe","error","status","url","includes","console","log","factory"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // Get the auth token from the service\r\n    const currentUser = this.authService.currentUserValue;\r\n    \r\n    // Clone the request and add auth header if user is logged in\r\n    if (currentUser && currentUser.token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${currentUser.token}`\r\n        }\r\n      });\r\n    }\r\n\r\n    // Pass the cloned request to the next handler\r\n    return next.handle(request).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        // Handle 401 Unauthorized or 404 Not Found errors\r\n        if (error.status === 401 || (error.status === 404 && error.url?.includes('Login'))) {\r\n          console.log('Authentication error, redirecting to mock data');\r\n          // Instead of redirecting, we'll just log and let the service handle it with mock data\r\n        }\r\n        \r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}