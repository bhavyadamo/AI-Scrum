{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/work-items`;\n  }\n  getTasks(iterationPath, fromDate, toDate) {\n    let params = {\n      iterationPath\n    };\n    if (fromDate) {\n      params.fromDate = fromDate;\n    }\n    if (toDate) {\n      params.toDate = toDate;\n    }\n    return this.http.get(this.apiUrl, {\n      params\n    });\n  }\n  getTaskDetails(taskId) {\n    return this.http.get(`${this.apiUrl}/${taskId}`);\n  }\n  getTeamMembers() {\n    return this.http.get(`${this.apiUrl}/team-members`);\n  }\n  assignTask(taskId, assignedTo) {\n    return this.http.post(`${this.apiUrl}/assign`, {\n      taskId,\n      assignedTo\n    });\n  }\n  getAutoAssignSuggestions(iterationPath) {\n    return this.http.get(`${this.apiUrl}/auto-assign-suggestions`, {\n      params: {\n        iterationPath\n      }\n    });\n  }\n  autoAssignTasks(iterationPath) {\n    return this.http.post(`${this.apiUrl}/auto-assign`, {\n      iterationPath\n    });\n  }\n  static {\n    this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,aAAa;EAEX;EAExCC,QAAQ,CAACC,aAAqB,EAAEC,QAAiB,EAAEC,MAAe;IAChE,IAAIC,MAAM,GAAQ;MAAEH;IAAa,CAAE;IAEnC,IAAIC,QAAQ,EAAE;MACZE,MAAM,CAACF,QAAQ,GAAGA,QAAQ;;IAG5B,IAAIC,MAAM,EAAE;MACVC,MAAM,CAACD,MAAM,GAAGA,MAAM;;IAGxB,OAAO,IAAI,CAACL,IAAI,CAACO,GAAG,CAAa,IAAI,CAACN,MAAM,EAAE;MAAEK;IAAM,CAAE,CAAC;EAC3D;EAEAE,cAAc,CAACC,MAAc;IAC3B,OAAO,IAAI,CAACT,IAAI,CAACO,GAAG,CAAkB,GAAG,IAAI,CAACN,MAAM,IAAIQ,MAAM,EAAE,CAAC;EACnE;EAEAC,cAAc;IACZ,OAAO,IAAI,CAACV,IAAI,CAACO,GAAG,CAAe,GAAG,IAAI,CAACN,MAAM,eAAe,CAAC;EACnE;EAEAU,UAAU,CAACF,MAAc,EAAEG,UAAkB;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAM,GAAG,IAAI,CAACZ,MAAM,SAAS,EAAE;MAClDQ,MAAM;MACNG;KACD,CAAC;EACJ;EAEAE,wBAAwB,CAACX,aAAqB;IAC5C,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAyB,GAAG,IAAI,CAACN,MAAM,0BAA0B,EAAE;MACrFK,MAAM,EAAE;QAAEH;MAAa;KACxB,CAAC;EACJ;EAEAY,eAAe,CAACZ,aAAqB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACa,IAAI,CAAM,GAAG,IAAI,CAACZ,MAAM,cAAc,EAAE;MACvDE;KACD,CAAC;EACJ;;;uBA5CWL,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAkB,SAAXlB,WAAW;MAAAmB,YAFV;IAAM;EAAA","names":["environment","TaskService","constructor","http","apiUrl","getTasks","iterationPath","fromDate","toDate","params","get","getTaskDetails","taskId","getTeamMembers","assignTask","assignedTo","post","getAutoAssignSuggestions","autoAssignTasks","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\services\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { WorkItem, WorkItemDetails, TeamMember } from '../models/task.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n  private apiUrl = `${environment.apiUrl}/work-items`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getTasks(iterationPath: string, fromDate?: string, toDate?: string): Observable<WorkItem[]> {\r\n    let params: any = { iterationPath };\r\n    \r\n    if (fromDate) {\r\n      params.fromDate = fromDate;\r\n    }\r\n    \r\n    if (toDate) {\r\n      params.toDate = toDate;\r\n    }\r\n    \r\n    return this.http.get<WorkItem[]>(this.apiUrl, { params });\r\n  }\r\n\r\n  getTaskDetails(taskId: number): Observable<WorkItemDetails> {\r\n    return this.http.get<WorkItemDetails>(`${this.apiUrl}/${taskId}`);\r\n  }\r\n\r\n  getTeamMembers(): Observable<TeamMember[]> {\r\n    return this.http.get<TeamMember[]>(`${this.apiUrl}/team-members`);\r\n  }\r\n\r\n  assignTask(taskId: number, assignedTo: string): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/assign`, {\r\n      taskId,\r\n      assignedTo\r\n    });\r\n  }\r\n\r\n  getAutoAssignSuggestions(iterationPath: string): Observable<Record<string, string>> {\r\n    return this.http.get<Record<string, string>>(`${this.apiUrl}/auto-assign-suggestions`, {\r\n      params: { iterationPath }\r\n    });\r\n  }\r\n\r\n  autoAssignTasks(iterationPath: string): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/auto-assign`, {\r\n      iterationPath\r\n    });\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}