{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/dashboard.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = [\"stateDistributionChart\"];\nconst _c1 = [\"iterationDistributionChart\"];\nconst _c2 = [\"statusPieChart\"];\nfunction DashboardComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"div\", 32)(2, \"span\", 33);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.error.sprint, \" \");\n  }\n}\nfunction DashboardComponent_div_19_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41)(1, \"div\", 42)(2, \"span\");\n    i0.ɵɵtext(3, \"Sprint Progress\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"number\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 43);\n    i0.ɵɵelement(8, \"div\", 44);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(6, 4, ctx_r15.sprintSummary.completionPercentage, \"1.0-0\"), \"%\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r15.sprintSummary.completionPercentage, \"%\");\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r15.sprintSummary.completionPercentage);\n  }\n}\nfunction DashboardComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 35);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 36)(4, \"div\")(5, \"p\", 37);\n    i0.ɵɵtext(6, \"Start Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\", 38);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\")(11, \"p\", 37);\n    i0.ɵɵtext(12, \"End Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\", 38);\n    i0.ɵɵtext(14);\n    i0.ɵɵpipe(15, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\")(17, \"p\", 37);\n    i0.ɵɵtext(18, \"Days Remaining\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p\", 39);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(21, DashboardComponent_div_19_div_21_Template, 9, 7, \"div\", 40);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.sprintOverview.sprintName);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 5, ctx_r2.sprintOverview.startDate, \"mediumDate\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(15, 8, ctx_r2.sprintOverview.endDate, \"mediumDate\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r2.sprintOverview.daysRemaining);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.sprintSummary);\n  }\n}\nfunction DashboardComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"p\", 45);\n    i0.ɵɵtext(2, \"Ask me anything about your project or tasks.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 46);\n    i0.ɵɵtext(4, \"Examples:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ul\", 47)(6, \"li\");\n    i0.ɵɵtext(7, \"How many tasks are in the current sprint?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"li\");\n    i0.ɵɵtext(9, \"Show me tasks assigned to John\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"li\");\n    i0.ɵɵtext(11, \"Assign task #1234 to Sarah\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c3 = function (a0, a1) {\n  return {\n    \"user-message\": a0,\n    \"assistant-message\": a1\n  };\n};\nfunction DashboardComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 48)(1, \"div\", 49)(2, \"div\", 50);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 51);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const msg_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c3, msg_r16.role === \"user\", msg_r16.role === \"assistant\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(msg_r16.content);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 3, msg_r16.timestamp, \"shortTime\"));\n  }\n}\nfunction DashboardComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"div\", 32)(2, \"span\", 33);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.error.summary, \" \");\n  }\n}\nfunction DashboardComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 52)(2, \"div\", 53)(3, \"div\", 13)(4, \"h5\", 54);\n    i0.ɵɵtext(5, \"Total Tasks\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"h2\", 55);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(8, \"div\", 52)(9, \"div\", 56)(10, \"div\", 13)(11, \"h5\", 54);\n    i0.ɵɵtext(12, \"In Progress\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"h2\", 55);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(15, \"div\", 52)(16, \"div\", 57)(17, \"div\", 13)(18, \"h5\", 54);\n    i0.ɵɵtext(19, \"Completed\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"h2\", 55);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(22, \"div\", 52)(23, \"div\", 58)(24, \"div\", 13)(25, \"h5\", 54);\n    i0.ɵɵtext(26, \"Blocked\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"h2\", 55);\n    i0.ɵɵtext(28);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r7.sprintSummary.totalTasks);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r7.sprintSummary.inProgress);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r7.sprintSummary.completed);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r7.sprintSummary.blocked);\n  }\n}\nfunction DashboardComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"div\", 32)(2, \"span\", 33);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.error.taskStatusBoard, \" \");\n  }\n}\nfunction DashboardComponent_div_47_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 64)(1, \"div\", 65)(2, \"div\", 66)(3, \"h6\", 67);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 68);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 69);\n    i0.ɵɵtext(8, \"Work Items\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const statusItem_r19 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border-top\", \"4px solid \" + statusItem_r19.color);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(statusItem_r19.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(statusItem_r19.count);\n  }\n}\nfunction DashboardComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 59)(2, \"div\", 29);\n    i0.ɵɵtemplate(3, DashboardComponent_div_47_div_3_Template, 9, 4, \"div\", 60);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 61)(5, \"div\", 62);\n    i0.ɵɵelement(6, \"canvas\", null, 63);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r10.taskStatusBoard);\n  }\n}\nfunction DashboardComponent_div_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"div\", 32)(2, \"span\", 33);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.error.activity, \" \");\n  }\n}\nfunction DashboardComponent_div_57_li_2_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 78);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r21 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r21.details);\n  }\n}\nfunction DashboardComponent_div_57_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 72)(1, \"div\", 73)(2, \"div\")(3, \"span\", 74);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 75);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 76)(8, \"small\", 45);\n    i0.ɵɵtext(9);\n    i0.ɵɵpipe(10, \"date\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(11, DashboardComponent_div_57_li_2_p_11_Template, 2, 1, \"p\", 77);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r21 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", \"bg-\" + (item_r21.type === \"Created\" ? \"success\" : item_r21.type === \"Updated\" ? \"info\" : item_r21.type === \"Commented\" ? \"warning\" : \"primary\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r21.type, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r21.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\"\", item_r21.user, \" \\u00B7 \", i0.ɵɵpipeBind2(10, 6, item_r21.timestamp, \"short\"), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", item_r21.details);\n  }\n}\nfunction DashboardComponent_div_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"ul\", 70);\n    i0.ɵɵtemplate(2, DashboardComponent_div_57_li_2_Template, 12, 9, \"li\", 71);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r13.activityFeed.activities);\n  }\n}\nfunction DashboardComponent_div_58_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 79)(1, \"p\", 45);\n    i0.ɵɵtext(2, \"No recent activity found\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class DashboardComponent {\n  constructor(dashboardService) {\n    this.dashboardService = dashboardService;\n    this.sprintOverview = null;\n    this.sprintSummary = null;\n    this.activityFeed = null;\n    this.dailyTip = '';\n    this.workItemDistribution = null;\n    this.stateDistributions = [];\n    this.longTermDevNewItems = [];\n    this.supportItems = [];\n    this.aiTips = null;\n    // Define state colors for consistency\n    this.stateColors = {\n      'Proposed': '#e6e6e6',\n      'New': '#b4d7a8',\n      'Dev-New': '#b4d7a8',\n      'Active': '#4a86e8',\n      'Dev-WIP': '#4a86e8',\n      'In Progress': '#4a86e8',\n      'Resolved': '#ffd966',\n      'Code Review': '#9fc5e8',\n      'QA': '#d5a6bd',\n      'Testing': '#d5a6bd',\n      'Done': '#93c47d',\n      'Closed': '#6aa84f',\n      'Completed': '#6aa84f',\n      'Blocked': '#e06666',\n      'Removed': '#999999'\n    };\n    // Default chart colors if state not found in mapping\n    this.defaultChartColors = ['#4a86e8', '#6aa84f', '#ffd966', '#e06666', '#9fc5e8', '#d5a6bd', '#b4d7a8', '#e6e6e6', '#93c47d', '#6fa8dc'];\n    // Properties for the new task board\n    this.taskStatusBoard = [];\n    // Chat properties\n    this.chatMessages = [];\n    this.currentMessage = '';\n    // Define status colors based on Azure DevOps board from the image\n    this.statusColors = {\n      'PMG - Proposed': '#e0e0e0',\n      'DEV - Yet to Start': '#9a9a9a',\n      'DEV - WIP': '#0078d4',\n      'DEV - Code Review': '#324e93',\n      'DEV - Done': '#00b7c3',\n      'DEV/QC - Reopened': '#e81123',\n      'Clarifications': '#fff100',\n      'On Hold': '#e3008c',\n      'QC - In Test Bed': '#8764b8',\n      'Completed': '#107c10'\n    };\n    // Track loading and error states\n    this.loading = {\n      sprint: true,\n      summary: true,\n      activity: true,\n      tip: true,\n      distribution: true,\n      stateDistribution: true,\n      longTermDevNew: true,\n      supportItems: true,\n      aiTips: true,\n      taskStatusBoard: true\n    };\n    this.error = {\n      sprint: '',\n      summary: '',\n      activity: '',\n      tip: '',\n      distribution: '',\n      stateDistribution: '',\n      longTermDevNew: '',\n      supportItems: '',\n      aiTips: '',\n      taskStatusBoard: ''\n    };\n    // Starting with a default Iteration Path that can be changed\n    this.selectedIterationPath = 'Techoil\\\\2.3.23';\n    this.availableIterationPaths = ['Techoil\\\\2.3.23'];\n  }\n  ngOnInit() {\n    this.loadDashboardData();\n  }\n  ngAfterViewInit() {\n    // Charts will be initialized after data is loaded\n  }\n  loadDashboardData() {\n    this.loadSprintOverview();\n    this.loadAiTips();\n    this.loadTaskStatusBoard();\n  }\n  loadIterationData() {\n    // Validate iteration path\n    if (!this.selectedIterationPath) {\n      return;\n    }\n    // Trim whitespace and ensure consistent formatting\n    this.selectedIterationPath = this.selectedIterationPath.trim();\n    // Load data for the selected iteration\n    this.loadSprintSummary(this.selectedIterationPath);\n    this.loadTaskStatusBoard();\n    // Update available paths if this is a new one\n    if (!this.availableIterationPaths.includes(this.selectedIterationPath)) {\n      this.availableIterationPaths.push(this.selectedIterationPath);\n    }\n  }\n  loadSprintOverview() {\n    this.loading.sprint = true;\n    this.dashboardService.getCurrentSprint().subscribe({\n      next: data => {\n        this.sprintOverview = data;\n        // Use hard-coded iteration path instead of data.iterationPath\n        // this.selectedIterationPath = data.iterationPath;\n        this.loading.sprint = false;\n        this.loadSprintSummary(this.selectedIterationPath);\n        this.loadActivityFeed();\n        this.loadWorkItemDistribution(this.selectedIterationPath);\n        this.loadStateDistributions();\n      },\n      error: err => {\n        this.error.sprint = 'Failed to load sprint data';\n        this.loading.sprint = false;\n        console.error('Error loading sprint data:', err);\n      }\n    });\n  }\n  loadSprintSummary(iterationPath) {\n    this.loading.summary = true;\n    this.dashboardService.getSprintSummary(iterationPath).subscribe({\n      next: data => {\n        this.sprintSummary = data;\n        this.loading.summary = false;\n      },\n      error: err => {\n        this.error.summary = 'Failed to load summary data';\n        this.loading.summary = false;\n        console.error('Error loading summary data:', err);\n      }\n    });\n  }\n  loadActivityFeed() {\n    this.loading.activity = true;\n    this.dashboardService.getActivityFeed().subscribe({\n      next: data => {\n        this.activityFeed = data;\n        this.loading.activity = false;\n      },\n      error: err => {\n        this.error.activity = 'Failed to load activity feed';\n        this.loading.activity = false;\n        console.error('Error loading activity feed:', err);\n      }\n    });\n  }\n  loadDailyTip() {\n    this.loading.tip = true;\n    this.dashboardService.getDailyTip().subscribe({\n      next: data => {\n        this.dailyTip = data.tip;\n        this.loading.tip = false;\n      },\n      error: err => {\n        this.error.tip = 'Failed to load daily tip';\n        this.loading.tip = false;\n        console.error('Error loading daily tip:', err);\n      }\n    });\n  }\n  loadWorkItemDistribution(iterationPath) {\n    this.loading.distribution = true;\n    this.dashboardService.getWorkItemDistribution(iterationPath).subscribe({\n      next: data => {\n        this.workItemDistribution = data;\n        this.loading.distribution = false;\n        // Initialize distribution chart after data is loaded\n        setTimeout(() => {\n          this.initializeWorkItemDistributionChart();\n        }, 100);\n      },\n      error: err => {\n        this.error.distribution = 'Failed to load work item distribution';\n        this.loading.distribution = false;\n        console.error('Error loading work item distribution:', err);\n      }\n    });\n  }\n  loadStateDistributions() {\n    this.loading.stateDistribution = true;\n    this.dashboardService.getStateDistribution(this.selectedIterationPath).subscribe({\n      next: data => {\n        this.stateDistributions = data;\n        // Keep hard-coded iteration paths instead of dynamically loading them\n        // this.availableIterationPaths = data.map(d => d.iterationPath);\n        this.loading.stateDistribution = false;\n        // Initialize state distribution chart after data is loaded\n        setTimeout(() => {\n          this.initializeStateDistributionsChart();\n        }, 100);\n      },\n      error: err => {\n        this.error.stateDistribution = 'Failed to load state distributions';\n        this.loading.stateDistribution = false;\n        console.error('Error loading state distributions:', err);\n      }\n    });\n  }\n  loadLongTermDevNewItems() {\n    this.loading.longTermDevNew = true;\n    this.dashboardService.getLongTermDevNewItems(5).subscribe({\n      next: data => {\n        this.longTermDevNewItems = data;\n        this.loading.longTermDevNew = false;\n      },\n      error: err => {\n        this.error.longTermDevNew = 'Failed to load long-term Dev-New items';\n        this.loading.longTermDevNew = false;\n        console.error('Error loading long-term Dev-New items:', err);\n      }\n    });\n  }\n  loadSupportItems() {\n    this.loading.supportItems = true;\n    this.dashboardService.getSupportItems(6).subscribe({\n      next: data => {\n        this.supportItems = data;\n        this.loading.supportItems = false;\n      },\n      error: err => {\n        this.error.supportItems = 'Failed to load support items';\n        this.loading.supportItems = false;\n        console.error('Error loading support items:', err);\n      }\n    });\n  }\n  loadAiTips() {\n    this.loading.aiTips = true;\n    this.dashboardService.getAiTips().subscribe({\n      next: data => {\n        this.aiTips = data;\n        this.longTermDevNewItems = data.longTermDevNewItems;\n        this.supportItems = data.supportItems;\n        this.dailyTip = data.tip;\n        this.loading.aiTips = false;\n      },\n      error: err => {\n        this.error.aiTips = 'Failed to load AI tips';\n        this.loading.aiTips = false;\n        console.error('Error loading AI tips:', err);\n        // Fall back to individual methods\n        this.loadDailyTip();\n        this.loadLongTermDevNewItems();\n        this.loadSupportItems();\n      }\n    });\n  }\n  initializeWorkItemDistributionChart() {\n    if (!this.workItemDistribution || !this.stateDistributionChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.stateDistributionChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    const labels = this.workItemDistribution.states.map(s => s.state);\n    const data = this.workItemDistribution.states.map(s => s.count);\n    const colors = this.workItemDistribution.states.map(s => this.stateColors[s.state] || this.getRandomColor());\n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            backgroundColor: colors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right'\n            },\n            title: {\n              display: true,\n              text: `Work Item States - ${this.workItemDistribution.iterationPath}`\n            }\n          }\n        }\n      });\n    }\n  }\n  initializeStateDistributionsChart() {\n    if (this.stateDistributions.length === 0 || !this.iterationDistributionChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.iterationDistributionChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    // Prepare data for stacked bar chart\n    const iterationLabels = this.stateDistributions.map(d => d.iterationPath);\n    // Find all unique states across all iterations\n    const allStates = new Set();\n    this.stateDistributions.forEach(dist => {\n      dist.states.forEach(state => {\n        allStates.add(state.state);\n      });\n    });\n    // Create datasets, one for each state\n    const datasets = Array.from(allStates).map(stateName => {\n      // Find color for this state\n      const stateColor = this.stateColors[stateName] || this.getRandomColor();\n      // Create dataset for this state across all iterations\n      return {\n        label: stateName,\n        data: this.stateDistributions.map(dist => {\n          const stateData = dist.states.find(s => s.state === stateName);\n          return stateData ? stateData.count : 0;\n        }),\n        backgroundColor: stateColor\n      };\n    });\n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: iterationLabels,\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'right'\n            },\n            title: {\n              display: true,\n              text: 'Work Item Distribution by Iteration'\n            }\n          }\n        }\n      });\n    }\n  }\n  changeIterationPath(iterationPath) {\n    // Even with hardcoded path, keep the method in case it's called from elsewhere\n    if (iterationPath !== this.selectedIterationPath) {\n      this.selectedIterationPath = iterationPath;\n      this.loadWorkItemDistribution(iterationPath);\n      this.loadSprintSummary(iterationPath);\n    }\n  }\n  getStateColor(state) {\n    return this.stateColors[state] || this.getRandomColor();\n  }\n  getRandomColor() {\n    const randomIndex = Math.floor(Math.random() * this.defaultChartColors.length);\n    return this.defaultChartColors[randomIndex];\n  }\n  reload() {\n    this.loadDashboardData();\n  }\n  loadTaskStatusBoard() {\n    this.loading.taskStatusBoard = true;\n    this.error.taskStatusBoard = '';\n    // First try to use the task distribution API which has all the data we need\n    this.dashboardService.getWorkItemDistribution(this.selectedIterationPath).subscribe({\n      next: data => {\n        if (data && data.states && data.states.length > 0) {\n          // Convert from WorkItemDistribution to TaskStatusItem[]\n          this.taskStatusBoard = data.states.map(state => ({\n            status: state.state,\n            count: state.count,\n            color: state.color || this.getStatusColor(state.state)\n          }));\n          this.loading.taskStatusBoard = false;\n          // Initialize the pie chart\n          setTimeout(() => {\n            this.initializeStatusPieChart();\n          }, 100);\n        } else {\n          // Fallback to tasks-by-status if data is empty\n          this.loadTasksByStatus();\n        }\n      },\n      error: err => {\n        console.error('Error loading work item distribution:', err);\n        // Fallback to tasks-by-status API\n        this.loadTasksByStatus();\n      }\n    });\n  }\n  loadTasksByStatus() {\n    this.dashboardService.getTasksByStatus(this.selectedIterationPath).subscribe({\n      next: data => {\n        if (data && data.items) {\n          this.taskStatusBoard = data.items;\n          this.loading.taskStatusBoard = false;\n          // Initialize the pie chart\n          setTimeout(() => {\n            this.initializeStatusPieChart();\n          }, 100);\n        } else {\n          this.error.taskStatusBoard = 'No task status data available for this iteration';\n          this.loading.taskStatusBoard = false;\n          // Create dummy data as a last resort\n          this.createDummyTaskBoard();\n          setTimeout(() => {\n            this.initializeStatusPieChart();\n          }, 100);\n        }\n      },\n      error: err => {\n        this.error.taskStatusBoard = 'Failed to load task status data';\n        this.loading.taskStatusBoard = false;\n        console.error('Error loading task status data:', err);\n        // Fallback to dummy data for development\n        this.createDummyTaskBoard();\n        // Initialize the pie chart with dummy data\n        setTimeout(() => {\n          this.initializeStatusPieChart();\n        }, 100);\n      }\n    });\n  }\n  createDummyTaskBoard() {\n    // Create dummy data similar to the Azure DevOps board in the image\n    this.taskStatusBoard = [{\n      status: 'PMG - Proposed',\n      count: 0,\n      color: this.statusColors['PMG - Proposed']\n    }, {\n      status: 'DEV - Yet to Start',\n      count: 2,\n      color: this.statusColors['DEV - Yet to Start']\n    }, {\n      status: 'DEV - WIP',\n      count: 4,\n      color: this.statusColors['DEV - WIP']\n    }, {\n      status: 'DEV - Code Review',\n      count: 2,\n      color: this.statusColors['DEV - Code Review']\n    }, {\n      status: 'DEV - Done',\n      count: 5,\n      color: this.statusColors['DEV - Done']\n    }, {\n      status: 'DEV/QC - Reopened',\n      count: 1,\n      color: this.statusColors['DEV/QC - Reopened']\n    }, {\n      status: 'Clarifications',\n      count: 1,\n      color: this.statusColors['Clarifications']\n    }, {\n      status: 'On Hold',\n      count: 0,\n      color: this.statusColors['On Hold']\n    }, {\n      status: 'QC - In Test Bed',\n      count: 7,\n      color: this.statusColors['QC - In Test Bed']\n    }, {\n      status: 'Completed',\n      count: 123,\n      color: this.statusColors['Completed']\n    }];\n  }\n  initializeStatusPieChart() {\n    if (!this.taskStatusBoard || !this.statusPieChartRef?.nativeElement) {\n      return;\n    }\n    // Get canvas element\n    const ctx = this.statusPieChartRef.nativeElement.getContext('2d');\n    if (!ctx) return;\n    // Filter out states with 0 count for better visualization\n    const filteredStatuses = this.taskStatusBoard.filter(item => item.count > 0);\n    const labels = filteredStatuses.map(s => s.status);\n    const data = filteredStatuses.map(s => s.count);\n    const colors = filteredStatuses.map(s => s.color);\n    // Clear any existing chart\n    if (window.Chart && ctx.chart) {\n      ctx.chart.destroy();\n    }\n    // Create new chart\n    if (window.Chart) {\n      ctx.chart = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            backgroundColor: colors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n              display: true\n            },\n            title: {\n              display: true,\n              text: 'Work Item States Distribution'\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  const total = context.dataset.data.reduce((a, b) => Number(a) + Number(b), 0);\n                  const percentage = Math.round(value / total * 100);\n                  return `${label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  getStatusColor(status) {\n    return this.statusColors[status] || '#9a9a9a'; // Default gray color\n  }\n  // Chat methods\n  sendChatMessage() {\n    if (!this.currentMessage.trim()) return;\n    // Add user message\n    const userMessage = {\n      role: 'user',\n      content: this.currentMessage.trim(),\n      timestamp: new Date()\n    };\n    this.chatMessages.push(userMessage);\n    // Store message and clear input\n    const message = this.currentMessage;\n    this.currentMessage = '';\n    // Call API to get response\n    this.dashboardService.sendChatMessage(message).subscribe({\n      next: response => {\n        const assistantMessage = {\n          role: 'assistant',\n          content: response,\n          timestamp: new Date()\n        };\n        this.chatMessages.push(assistantMessage);\n      },\n      error: err => {\n        console.error('Error getting chat response:', err);\n        // Add fallback response\n        const fallbackMessage = {\n          role: 'assistant',\n          content: 'Sorry, I encountered an error processing your request. Please try again later.',\n          timestamp: new Date()\n        };\n        this.chatMessages.push(fallbackMessage);\n      }\n    });\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DashboardService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      viewQuery: function DashboardComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n          i0.ɵɵviewQuery(_c2, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stateDistributionChartRef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iterationDistributionChartRef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusPieChartRef = _t.first);\n        }\n      },\n      decls: 59,\n      vars: 17,\n      consts: [[1, \"dashboard-container\", \"p-4\"], [1, \"row\", \"mb-4\"], [1, \"col-md-8\"], [1, \"card\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [1, \"d-flex\", \"align-items-center\"], [1, \"input-group\", \"input-group-sm\", \"me-2\", 2, \"max-width\", \"250px\"], [\"type\", \"text\", \"placeholder\", \"Enter Iteration Path\", \"aria-label\", \"Iteration Path\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", \"title\", \"Load data for this iteration path\", 1, \"btn\", \"btn-outline-primary\", 3, \"click\"], [1, \"bi\", \"bi-search\"], [1, \"btn\", \"btn-outline-primary\", \"btn-sm\", 3, \"click\"], [1, \"bi\", \"bi-arrow-clockwise\"], [1, \"card-body\"], [\"class\", \"text-center py-4\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"col-md-4\"], [1, \"card-header\"], [1, \"card-body\", \"d-flex\", \"flex-column\", 2, \"height\", \"350px\"], [1, \"chat-messages\", \"flex-grow-1\", \"overflow-auto\", \"mb-3\"], [\"class\", \"message mb-2\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"chat-input\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Type your message...\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"bi\", \"bi-send\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"col-12\"], [1, \"row\"], [\"class\", \"text-center py-3\", 4, \"ngIf\"], [1, \"text-center\", \"py-4\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"alert\", \"alert-danger\"], [1, \"sprint-title\"], [1, \"d-flex\", \"justify-content-between\", \"mt-3\"], [1, \"text-muted\", \"mb-1\"], [1, \"fw-bold\"], [1, \"fw-bold\", \"days-remaining\"], [\"class\", \"mt-4\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"d-flex\", \"justify-content-between\", \"mb-1\"], [1, \"progress\", 2, \"height\", \"10px\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", \"bg-success\"], [1, \"text-muted\"], [1, \"text-muted\", \"small\"], [1, \"text-muted\", \"small\", \"text-start\"], [1, \"message\", \"mb-2\", 3, \"ngClass\"], [1, \"message-content\"], [1, \"message-text\"], [1, \"message-time\", \"small\", \"text-muted\"], [1, \"col-md-3\", \"mb-3\"], [1, \"card\", \"summary-card\", \"total-card\"], [1, \"card-title\"], [1, \"card-value\"], [1, \"card\", \"summary-card\", \"in-progress-card\"], [1, \"card\", \"summary-card\", \"completed-card\"], [1, \"card\", \"summary-card\", \"blocked-card\"], [1, \"col-md-7\"], [\"class\", \"col-md-4 mb-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-5\"], [1, \"chart-container\", 2, \"height\", \"300px\"], [\"statusPieChart\", \"\"], [1, \"col-md-4\", \"mb-4\"], [1, \"card\", \"status-card\", \"h-100\"], [1, \"card-body\", \"text-center\"], [1, \"status-title\", \"mb-2\"], [1, \"status-count\", \"display-4\", \"fw-bold\"], [1, \"status-label\", \"text-muted\"], [1, \"list-group\", \"activity-list\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"badge\", 3, \"ngClass\"], [1, \"ms-2\", \"activity-title\"], [1, \"activity-meta\"], [\"class\", \"mt-1 mb-0 activity-details\", 4, \"ngIf\"], [1, \"mt-1\", \"mb-0\", \"activity-details\"], [1, \"text-center\", \"py-3\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\", 5);\n          i0.ɵɵtext(6, \"Sprint Overview\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\")(8, \"div\", 6)(9, \"div\", 7)(10, \"input\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_10_listener($event) {\n            return ctx.selectedIterationPath = $event;\n          })(\"keyup.enter\", function DashboardComponent_Template_input_keyup_enter_10_listener() {\n            return ctx.loadIterationData();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_11_listener() {\n            return ctx.loadIterationData();\n          });\n          i0.ɵɵelement(12, \"i\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_13_listener() {\n            return ctx.reload();\n          });\n          i0.ɵɵelement(14, \"i\", 12);\n          i0.ɵɵtext(15, \" Refresh \");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(16, \"div\", 13);\n          i0.ɵɵtemplate(17, DashboardComponent_div_17_Template, 4, 0, \"div\", 14);\n          i0.ɵɵtemplate(18, DashboardComponent_div_18_Template, 2, 1, \"div\", 15);\n          i0.ɵɵtemplate(19, DashboardComponent_div_19_Template, 22, 11, \"div\", 16);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(20, \"div\", 17)(21, \"div\", 3)(22, \"div\", 18)(23, \"h4\", 5);\n          i0.ɵɵtext(24, \"AI Assistant\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"div\", 19)(26, \"div\", 20);\n          i0.ɵɵtemplate(27, DashboardComponent_div_27_Template, 12, 0, \"div\", 14);\n          i0.ɵɵtemplate(28, DashboardComponent_div_28_Template, 7, 9, \"div\", 21);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(29, \"div\", 22)(30, \"div\", 23)(31, \"input\", 24);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_31_listener($event) {\n            return ctx.currentMessage = $event;\n          })(\"keyup.enter\", function DashboardComponent_Template_input_keyup_enter_31_listener() {\n            return ctx.sendChatMessage();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"button\", 25);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_32_listener() {\n            return ctx.sendChatMessage();\n          });\n          i0.ɵɵelement(33, \"i\", 26);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(34, \"div\", 1);\n          i0.ɵɵtemplate(35, DashboardComponent_div_35_Template, 4, 0, \"div\", 14);\n          i0.ɵɵtemplate(36, DashboardComponent_div_36_Template, 2, 1, \"div\", 15);\n          i0.ɵɵtemplate(37, DashboardComponent_div_37_Template, 29, 4, \"div\", 27);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(38, \"div\", 1)(39, \"div\", 28)(40, \"div\", 3)(41, \"div\", 18)(42, \"h4\", 5);\n          i0.ɵɵtext(43, \"Work Items by Status\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(44, \"div\", 13);\n          i0.ɵɵtemplate(45, DashboardComponent_div_45_Template, 4, 0, \"div\", 14);\n          i0.ɵɵtemplate(46, DashboardComponent_div_46_Template, 2, 1, \"div\", 15);\n          i0.ɵɵtemplate(47, DashboardComponent_div_47_Template, 8, 1, \"div\", 27);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(48, \"div\", 29)(49, \"div\", 28)(50, \"div\", 3)(51, \"div\", 18)(52, \"h4\", 5);\n          i0.ɵɵtext(53, \"Latest Activity\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(54, \"div\", 13);\n          i0.ɵɵtemplate(55, DashboardComponent_div_55_Template, 4, 0, \"div\", 14);\n          i0.ɵɵtemplate(56, DashboardComponent_div_56_Template, 2, 1, \"div\", 15);\n          i0.ɵɵtemplate(57, DashboardComponent_div_57_Template, 3, 1, \"div\", 16);\n          i0.ɵɵtemplate(58, DashboardComponent_div_58_Template, 3, 0, \"div\", 30);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedIterationPath);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.sprint);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.sprint);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.sprint && !ctx.error.sprint && ctx.sprintOverview);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.chatMessages.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.chatMessages);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.currentMessage);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.summary);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.summary);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.summary && !ctx.error.summary && ctx.sprintSummary);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.taskStatusBoard);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.taskStatusBoard);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.taskStatusBoard && !ctx.error.taskStatusBoard);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading.activity);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error.activity);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.activity && !ctx.error.activity && ctx.activityFeed && ctx.activityFeed.activities.length > 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading.activity && !ctx.error.activity && (!ctx.activityFeed || ctx.activityFeed.activities.length === 0));\n        }\n      },\n      dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.DecimalPipe, i2.DatePipe],\n      styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n  padding: 20px;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n  border-radius: 8px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n  border: none;\\n  margin-bottom: 20px;\\n}\\n.card[_ngcontent-%COMP%]   .card-header[_ngcontent-%COMP%] {\\n  background-color: #fff;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\\n  font-weight: 600;\\n  padding: 12px 16px;\\n}\\n\\n.days-remaining[_ngcontent-%COMP%] {\\n  font-size: 24px;\\n  color: #3050e6;\\n}\\n\\n.sprint-title[_ngcontent-%COMP%] {\\n  font-size: 1.5rem;\\n  font-weight: 600;\\n  color: #333;\\n  margin-bottom: 1rem;\\n}\\n\\n\\n.summary-card[_ngcontent-%COMP%] {\\n  text-align: center;\\n  border-radius: 8px;\\n  transition: transform 0.2s;\\n  height: 100%;\\n}\\n.summary-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n}\\n.summary-card[_ngcontent-%COMP%]   .card-value[_ngcontent-%COMP%] {\\n  font-size: 2.5rem;\\n  font-weight: 700;\\n}\\n\\n.total-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #6c757d;\\n}\\n\\n.in-progress-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #0078d4;\\n}\\n\\n.completed-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #107c10;\\n}\\n\\n.blocked-card[_ngcontent-%COMP%] {\\n  border-top: 4px solid #e81123;\\n}\\n\\n\\n.status-card[_ngcontent-%COMP%] {\\n  transition: transform 0.2s;\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\\n}\\n.status-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-5px);\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\\n}\\n.status-card[_ngcontent-%COMP%]   .status-count[_ngcontent-%COMP%] {\\n  font-size: 2.5rem;\\n  font-weight: bold;\\n}\\n.status-card[_ngcontent-%COMP%]   .status-title[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n\\n\\n.chat-messages[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 250px;\\n  overflow-y: auto;\\n}\\n\\n.message[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n  max-width: 85%;\\n  padding: 8px 12px;\\n  border-radius: 12px;\\n  position: relative;\\n}\\n\\n.user-message[_ngcontent-%COMP%] {\\n  align-self: flex-end;\\n  background-color: #007bff;\\n  color: white;\\n  margin-left: auto;\\n  border-bottom-right-radius: 2px;\\n}\\n.user-message[_ngcontent-%COMP%]   .message-time[_ngcontent-%COMP%] {\\n  text-align: right;\\n  color: rgba(255, 255, 255, 0.7) !important;\\n}\\n\\n.assistant-message[_ngcontent-%COMP%] {\\n  align-self: flex-start;\\n  background-color: #f1f1f1;\\n  color: #333;\\n  margin-right: auto;\\n  border-bottom-left-radius: 2px;\\n}\\n\\n.message-content[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.message-text[_ngcontent-%COMP%] {\\n  margin-bottom: 4px;\\n}\\n\\n\\n.activity-list[_ngcontent-%COMP%] {\\n  max-height: 400px;\\n  overflow-y: auto;\\n}\\n\\n.activity-title[_ngcontent-%COMP%] {\\n  font-weight: 500;\\n}\\n\\n.activity-details[_ngcontent-%COMP%] {\\n  font-size: 0.9rem;\\n  color: #666;\\n}\\n\\n.activity-meta[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  margin-left: 15px;\\n}\\n\\n\\n.color-box[_ngcontent-%COMP%] {\\n  width: 12px;\\n  height: 12px;\\n  display: inline-block;\\n  border-radius: 2px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSx3Q0FBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtBQUNGO0FBQ0U7RUFDRSxzQkFBQTtFQUNBLDRDQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtBQUNKOztBQUdBO0VBQ0UsZUFBQTtFQUNBLGNBQUE7QUFBRjs7QUFHQTtFQUNFLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EsbUJBQUE7QUFBRjs7QUFHQSxrQkFBQTtBQUNBO0VBQ0Usa0JBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0VBQ0EsWUFBQTtBQUFGO0FBRUU7RUFDRSwyQkFBQTtBQUFKO0FBR0U7RUFDRSxpQkFBQTtFQUNBLGdCQUFBO0FBREo7O0FBS0E7RUFDRSw2QkFBQTtBQUZGOztBQUtBO0VBQ0UsNkJBQUE7QUFGRjs7QUFLQTtFQUNFLDZCQUFBO0FBRkY7O0FBS0E7RUFDRSw2QkFBQTtBQUZGOztBQUtBLHdCQUFBO0FBQ0E7RUFDRSwwQkFBQTtFQUNBLHdDQUFBO0FBRkY7QUFJRTtFQUNFLDJCQUFBO0VBQ0EseUNBQUE7QUFGSjtBQUtFO0VBQ0UsaUJBQUE7RUFDQSxpQkFBQTtBQUhKO0FBTUU7RUFDRSxtQkFBQTtFQUNBLGdCQUFBO0VBQ0EsdUJBQUE7QUFKSjs7QUFRQSxvQkFBQTtBQUNBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQkFBQTtBQUxGOztBQVFBO0VBQ0UsbUJBQUE7RUFDQSxjQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0FBTEY7O0FBUUE7RUFDRSxvQkFBQTtFQUNBLHlCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0EsK0JBQUE7QUFMRjtBQU9FO0VBQ0UsaUJBQUE7RUFDQSwwQ0FBQTtBQUxKOztBQVNBO0VBQ0Usc0JBQUE7RUFDQSx5QkFBQTtFQUNBLFdBQUE7RUFDQSxrQkFBQTtFQUNBLDhCQUFBO0FBTkY7O0FBU0E7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7QUFORjs7QUFTQTtFQUNFLGtCQUFBO0FBTkY7O0FBU0EsMEJBQUE7QUFDQTtFQUNFLGlCQUFBO0VBQ0EsZ0JBQUE7QUFORjs7QUFTQTtFQUNFLGdCQUFBO0FBTkY7O0FBU0E7RUFDRSxpQkFBQTtFQUNBLFdBQUE7QUFORjs7QUFTQTtFQUNFLG1CQUFBO0VBQ0EsaUJBQUE7QUFORjs7QUFTQSwwQkFBQTtBQUNBO0VBQ0UsV0FBQTtFQUNBLFlBQUE7RUFDQSxxQkFBQTtFQUNBLGtCQUFBO0FBTkYiLCJzb3VyY2VzQ29udGVudCI6WyIuZGFzaGJvYXJkLWNvbnRhaW5lciB7XG4gIHBhZGRpbmc6IDIwcHg7XG59XG5cbi5jYXJkIHtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBib3JkZXI6IG5vbmU7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIFxuICAuY2FyZC1oZWFkZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4wNSk7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBwYWRkaW5nOiAxMnB4IDE2cHg7XG4gIH1cbn1cblxuLmRheXMtcmVtYWluaW5nIHtcbiAgZm9udC1zaXplOiAyNHB4O1xuICBjb2xvcjogIzMwNTBlNjtcbn1cblxuLnNwcmludC10aXRsZSB7XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogIzMzMztcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbn1cblxuLyogU3VtbWFyeSBDYXJkcyAqL1xuLnN1bW1hcnktY2FyZCB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycztcbiAgaGVpZ2h0OiAxMDAlO1xuICBcbiAgJjpob3ZlciB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01cHgpO1xuICB9XG4gIFxuICAuY2FyZC12YWx1ZSB7XG4gICAgZm9udC1zaXplOiAyLjVyZW07XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgfVxufVxuXG4udG90YWwtY2FyZCB7XG4gIGJvcmRlci10b3A6IDRweCBzb2xpZCAjNmM3NTdkO1xufVxuXG4uaW4tcHJvZ3Jlc3MtY2FyZCB7XG4gIGJvcmRlci10b3A6IDRweCBzb2xpZCAjMDA3OGQ0O1xufVxuXG4uY29tcGxldGVkLWNhcmQge1xuICBib3JkZXItdG9wOiA0cHggc29saWQgIzEwN2MxMDtcbn1cblxuLmJsb2NrZWQtY2FyZCB7XG4gIGJvcmRlci10b3A6IDRweCBzb2xpZCAjZTgxMTIzO1xufVxuXG4vKiBTdGF0dXMgY2FyZCBzdHlsaW5nICovXG4uc3RhdHVzLWNhcmQge1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycztcbiAgYm94LXNoYWRvdzogMCAycHggNXB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcblxuICAmOmhvdmVyIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTVweCk7XG4gICAgYm94LXNoYWRvdzogMCA1cHggMTVweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIH1cblxuICAuc3RhdHVzLWNvdW50IHtcbiAgICBmb250LXNpemU6IDIuNXJlbTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxuXG4gIC5zdGF0dXMtdGl0bGUge1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgfVxufVxuXG4vKiBBSSBDaGF0IHN0eWxpbmcgKi9cbi5jaGF0LW1lc3NhZ2VzIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgbWF4LWhlaWdodDogMjUwcHg7XG4gIG92ZXJmbG93LXk6IGF1dG87XG59XG5cbi5tZXNzYWdlIHtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgbWF4LXdpZHRoOiA4NSU7XG4gIHBhZGRpbmc6IDhweCAxMnB4O1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi51c2VyLW1lc3NhZ2Uge1xuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcbiAgY29sb3I6IHdoaXRlO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDJweDtcbiAgXG4gIC5tZXNzYWdlLXRpbWUge1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNykgIWltcG9ydGFudDtcbiAgfVxufVxuXG4uYXNzaXN0YW50LW1lc3NhZ2Uge1xuICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMWYxO1xuICBjb2xvcjogIzMzMztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAycHg7XG59XG5cbi5tZXNzYWdlLWNvbnRlbnQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubWVzc2FnZS10ZXh0IHtcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xufVxuXG4vKiBBY3Rpdml0eSBmZWVkIHN0eWxpbmcgKi9cbi5hY3Rpdml0eS1saXN0IHtcbiAgbWF4LWhlaWdodDogNDAwcHg7XG4gIG92ZXJmbG93LXk6IGF1dG87XG59XG5cbi5hY3Rpdml0eS10aXRsZSB7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG59XG5cbi5hY3Rpdml0eS1kZXRhaWxzIHtcbiAgZm9udC1zaXplOiAwLjlyZW07XG4gIGNvbG9yOiAjNjY2O1xufVxuXG4uYWN0aXZpdHktbWV0YSB7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG1hcmdpbi1sZWZ0OiAxNXB4O1xufVxuXG4vKiBDb2xvciBib3ggZm9yIGxlZ2VuZHMgKi9cbi5jb2xvci1ib3gge1xuICB3aWR0aDogMTJweDtcbiAgaGVpZ2h0OiAxMnB4O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbn0gIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["i0","DashboardComponent","constructor","dashboardService","sprint","summary","activity","tip","distribution","stateDistribution","longTermDevNew","supportItems","aiTips","taskStatusBoard","ngOnInit","loadDashboardData","ngAfterViewInit","loadSprintOverview","loadAiTips","loadTaskStatusBoard","loadIterationData","selectedIterationPath","trim","loadSprintSummary","availableIterationPaths","includes","push","loading","getCurrentSprint","subscribe","next","data","sprintOverview","loadActivityFeed","loadWorkItemDistribution","loadStateDistributions","error","err","console","iterationPath","getSprintSummary","sprintSummary","getActivityFeed","activityFeed","loadDailyTip","getDailyTip","dailyTip","getWorkItemDistribution","workItemDistribution","setTimeout","initializeWorkItemDistributionChart","getStateDistribution","stateDistributions","initializeStateDistributionsChart","loadLongTermDevNewItems","getLongTermDevNewItems","longTermDevNewItems","loadSupportItems","getSupportItems","getAiTips","stateDistributionChartRef","nativeElement","ctx","getContext","labels","states","map","s","state","count","colors","stateColors","getRandomColor","window","Chart","chart","destroy","type","datasets","backgroundColor","borderWidth","options","responsive","plugins","legend","position","title","display","text","length","iterationDistributionChartRef","iterationLabels","d","allStates","Set","forEach","dist","add","Array","from","stateName","stateColor","label","stateData","find","scales","x","stacked","y","beginAtZero","changeIterationPath","getStateColor","randomIndex","Math","floor","random","defaultChartColors","reload","status","color","getStatusColor","initializeStatusPieChart","loadTasksByStatus","getTasksByStatus","items","createDummyTaskBoard","statusColors","statusPieChartRef","filteredStatuses","filter","item","tooltip","callbacks","context","value","raw","total","dataset","reduce","a","b","Number","percentage","round","sendChatMessage","currentMessage","userMessage","role","content","timestamp","Date","chatMessages","message","response","assistantMessage","fallbackMessage","selectors","viewQuery"],"sourceRoot":"","sources":["E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\dashboard\\dashboard.component.html","E:\\Project-AI\\AI-Scrum\\frontend\\src\\app\\components\\dashboard\\dashboard.component.ts"],"sourcesContent":["<div class=\"dashboard-container p-4\">\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-md-8\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n          <h4 class=\"mb-0\">Sprint Overview</h4>\r\n          <div>\r\n            <div class=\"d-flex align-items-center\">\r\n              <div class=\"input-group input-group-sm me-2\" style=\"max-width: 250px;\">\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  placeholder=\"Enter Iteration Path\" \r\n                  [(ngModel)]=\"selectedIterationPath\"\r\n                  (keyup.enter)=\"loadIterationData()\"\r\n                  aria-label=\"Iteration Path\">\r\n                <button \r\n                  class=\"btn btn-outline-primary\" \r\n                  type=\"button\" \r\n                  (click)=\"loadIterationData()\"\r\n                  title=\"Load data for this iteration path\">\r\n                  <i class=\"bi bi-search\"></i>\r\n                </button>\r\n              </div>\r\n              <button class=\"btn btn-outline-primary btn-sm\" (click)=\"reload()\">\r\n                <i class=\"bi bi-arrow-clockwise\"></i> Refresh\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div *ngIf=\"loading.sprint\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div *ngIf=\"error.sprint\" class=\"alert alert-danger\">\r\n            {{ error.sprint }}\r\n          </div>\r\n          \r\n          <div *ngIf=\"!loading.sprint && !error.sprint && sprintOverview\">\r\n            <h2 class=\"sprint-title\">{{ sprintOverview.sprintName }}</h2>\r\n            <div class=\"d-flex justify-content-between mt-3\">\r\n              <div>\r\n                <p class=\"text-muted mb-1\">Start Date</p>\r\n                <p class=\"fw-bold\">{{ sprintOverview.startDate | date:'mediumDate' }}</p>\r\n              </div>\r\n              <div>\r\n                <p class=\"text-muted mb-1\">End Date</p>\r\n                <p class=\"fw-bold\">{{ sprintOverview.endDate | date:'mediumDate' }}</p>\r\n              </div>\r\n              <div>\r\n                <p class=\"text-muted mb-1\">Days Remaining</p>\r\n                <p class=\"fw-bold days-remaining\">{{ sprintOverview.daysRemaining }}</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Progress Bar -->\r\n            <div *ngIf=\"sprintSummary\" class=\"mt-4\">\r\n              <div class=\"d-flex justify-content-between mb-1\">\r\n                <span>Sprint Progress</span>\r\n                <span>{{ sprintSummary.completionPercentage | number:'1.0-0' }}%</span>\r\n              </div>\r\n              <div class=\"progress\" style=\"height: 10px;\">\r\n                <div class=\"progress-bar bg-success\" \r\n                     [style.width.%]=\"sprintSummary.completionPercentage\"\r\n                     role=\"progressbar\" \r\n                     [attr.aria-valuenow]=\"sprintSummary.completionPercentage\" \r\n                     aria-valuemin=\"0\" \r\n                     aria-valuemax=\"100\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"col-md-4\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"mb-0\">AI Assistant</h4>\r\n        </div>\r\n        <div class=\"card-body d-flex flex-column\" style=\"height: 350px;\">\r\n          <!-- Chat Messages -->\r\n          <div class=\"chat-messages flex-grow-1 overflow-auto mb-3\">\r\n            <div *ngIf=\"chatMessages.length === 0\" class=\"text-center py-4\">\r\n              <p class=\"text-muted\">Ask me anything about your project or tasks.</p>\r\n              <p class=\"text-muted small\">Examples:</p>\r\n              <ul class=\"text-muted small text-start\">\r\n                <li>How many tasks are in the current sprint?</li>\r\n                <li>Show me tasks assigned to John</li>\r\n                <li>Assign task #1234 to Sarah</li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <div *ngFor=\"let msg of chatMessages\" class=\"message mb-2\"\r\n                 [ngClass]=\"{'user-message': msg.role === 'user', 'assistant-message': msg.role === 'assistant'}\">\r\n              <div class=\"message-content\">\r\n                <div class=\"message-text\">{{ msg.content }}</div>\r\n                <div class=\"message-time small text-muted\">{{ msg.timestamp | date:'shortTime' }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Chat Input -->\r\n          <div class=\"chat-input\">\r\n            <div class=\"input-group\">\r\n              <input type=\"text\" class=\"form-control\" \r\n                     placeholder=\"Type your message...\" \r\n                     [(ngModel)]=\"currentMessage\"\r\n                     (keyup.enter)=\"sendChatMessage()\">\r\n              <button class=\"btn btn-primary\" type=\"button\" (click)=\"sendChatMessage()\">\r\n                <i class=\"bi bi-send\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Summary Cards Row -->\r\n  <div class=\"row mb-4\">\r\n    <div *ngIf=\"loading.summary\" class=\"text-center py-4\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n    \r\n    <div *ngIf=\"error.summary\" class=\"alert alert-danger\">\r\n      {{ error.summary }}\r\n    </div>\r\n    \r\n    <div *ngIf=\"!loading.summary && !error.summary && sprintSummary\" class=\"row\">\r\n      <div class=\"col-md-3 mb-3\">\r\n        <div class=\"card summary-card total-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Total Tasks</h5>\r\n            <h2 class=\"card-value\">{{ sprintSummary.totalTasks }}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-3 mb-3\">\r\n        <div class=\"card summary-card in-progress-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">In Progress</h5>\r\n            <h2 class=\"card-value\">{{ sprintSummary.inProgress }}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-3 mb-3\">\r\n        <div class=\"card summary-card completed-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Completed</h5>\r\n            <h2 class=\"card-value\">{{ sprintSummary.completed }}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-3 mb-3\">\r\n        <div class=\"card summary-card blocked-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Blocked</h5>\r\n            <h2 class=\"card-value\">{{ sprintSummary.blocked }}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Azure DevOps Style Task Board -->\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"mb-0\">Work Items by Status</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div *ngIf=\"loading.taskStatusBoard\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div *ngIf=\"error.taskStatusBoard\" class=\"alert alert-danger\">\r\n            {{ error.taskStatusBoard }}\r\n          </div>\r\n          \r\n          <div *ngIf=\"!loading.taskStatusBoard && !error.taskStatusBoard\" class=\"row\">\r\n            <div class=\"col-md-7\">\r\n              <div class=\"row\">\r\n                <div *ngFor=\"let statusItem of taskStatusBoard\" class=\"col-md-4 mb-4\">\r\n                  <div class=\"card status-card h-100\" [style.border-top]=\"'4px solid ' + statusItem.color\">\r\n                    <div class=\"card-body text-center\">\r\n                      <h6 class=\"status-title mb-2\">{{ statusItem.status }}</h6>\r\n                      <div class=\"status-count display-4 fw-bold\">{{ statusItem.count }}</div>\r\n                      <div class=\"status-label text-muted\">Work Items</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"col-md-5\">\r\n              <div class=\"chart-container\" style=\"height: 300px;\">\r\n                <canvas #statusPieChart></canvas>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Activity Feed -->\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4 class=\"mb-0\">Latest Activity</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div *ngIf=\"loading.activity\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div *ngIf=\"error.activity\" class=\"alert alert-danger\">\r\n            {{ error.activity }}\r\n          </div>\r\n          \r\n          <div *ngIf=\"!loading.activity && !error.activity && activityFeed && activityFeed.activities.length > 0\">\r\n            <ul class=\"list-group activity-list\">\r\n              <li *ngFor=\"let item of activityFeed.activities\" class=\"list-group-item\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div>\r\n                    <span class=\"badge\" [ngClass]=\"'bg-' + (item.type === 'Created' ? 'success' : \r\n                                                          item.type === 'Updated' ? 'info' : \r\n                                                          item.type === 'Commented' ? 'warning' : 'primary')\">\r\n                      {{ item.type }}\r\n                    </span>\r\n                    <span class=\"ms-2 activity-title\">{{ item.title }}</span>\r\n                  </div>\r\n                  <div class=\"activity-meta\">\r\n                    <small class=\"text-muted\">{{ item.user }} · {{ item.timestamp | date:'short' }}</small>\r\n                  </div>\r\n                </div>\r\n                <p *ngIf=\"item.details\" class=\"mt-1 mb-0 activity-details\">{{ item.details }}</p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          \r\n          <div *ngIf=\"!loading.activity && !error.activity && (!activityFeed || activityFeed.activities.length === 0)\" class=\"text-center py-3\">\r\n            <p class=\"text-muted\">No recent activity found</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> ","import { Component, OnInit, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\r\nimport { DashboardService } from '../../services/dashboard.service';\r\nimport { \r\n  SprintOverview, \r\n  SprintSummary, \r\n  ActivityFeed, \r\n  WorkItemDistribution, \r\n  LongTermDevNewItem, \r\n  SupportItem,\r\n  AiDashboardTip,\r\n  StateCount,\r\n  TaskStatusBoard,\r\n  TaskStatusItem,\r\n  ChatMessage\r\n} from '../../models/sprint.model';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    Chart: any;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('stateDistributionChart') stateDistributionChartRef!: ElementRef;\r\n  @ViewChild('iterationDistributionChart') iterationDistributionChartRef!: ElementRef;\r\n  @ViewChild('statusPieChart') statusPieChartRef!: ElementRef;\r\n  \r\n  sprintOverview: SprintOverview | null = null;\r\n  sprintSummary: SprintSummary | null = null;\r\n  activityFeed: ActivityFeed | null = null;\r\n  dailyTip: string = '';\r\n  workItemDistribution: WorkItemDistribution | null = null;\r\n  stateDistributions: WorkItemDistribution[] = [];\r\n  longTermDevNewItems: LongTermDevNewItem[] = [];\r\n  supportItems: SupportItem[] = [];\r\n  aiTips: AiDashboardTip | null = null;\r\n  \r\n  // Define state colors for consistency\r\n  stateColors: Record<string, string> = {\r\n    'Proposed': '#e6e6e6',\r\n    'New': '#b4d7a8',\r\n    'Dev-New': '#b4d7a8',\r\n    'Active': '#4a86e8',\r\n    'Dev-WIP': '#4a86e8',\r\n    'In Progress': '#4a86e8',\r\n    'Resolved': '#ffd966',\r\n    'Code Review': '#9fc5e8',\r\n    'QA': '#d5a6bd',\r\n    'Testing': '#d5a6bd',\r\n    'Done': '#93c47d',\r\n    'Closed': '#6aa84f',\r\n    'Completed': '#6aa84f',\r\n    'Blocked': '#e06666',\r\n    'Removed': '#999999'\r\n  };\r\n  \r\n  // Default chart colors if state not found in mapping\r\n  defaultChartColors = [\r\n    '#4a86e8', '#6aa84f', '#ffd966', '#e06666', '#9fc5e8', \r\n    '#d5a6bd', '#b4d7a8', '#e6e6e6', '#93c47d', '#6fa8dc'\r\n  ];\r\n  \r\n  // Properties for the new task board\r\n  taskStatusBoard: TaskStatusItem[] = [];\r\n  \r\n  // Chat properties\r\n  chatMessages: ChatMessage[] = [];\r\n  currentMessage: string = '';\r\n  \r\n  // Define status colors based on Azure DevOps board from the image\r\n  statusColors: Record<string, string> = {\r\n    'PMG - Proposed': '#e0e0e0',\r\n    'DEV - Yet to Start': '#9a9a9a',\r\n    'DEV - WIP': '#0078d4',\r\n    'DEV - Code Review': '#324e93',\r\n    'DEV - Done': '#00b7c3',\r\n    'DEV/QC - Reopened': '#e81123',\r\n    'Clarifications': '#fff100',\r\n    'On Hold': '#e3008c',\r\n    'QC - In Test Bed': '#8764b8',\r\n    'Completed': '#107c10'\r\n  };\r\n  \r\n  // Track loading and error states\r\n  loading = {\r\n    sprint: true,\r\n    summary: true,\r\n    activity: true,\r\n    tip: true,\r\n    distribution: true,\r\n    stateDistribution: true,\r\n    longTermDevNew: true,\r\n    supportItems: true,\r\n    aiTips: true,\r\n    taskStatusBoard: true\r\n  };\r\n  \r\n  error = {\r\n    sprint: '',\r\n    summary: '',\r\n    activity: '',\r\n    tip: '',\r\n    distribution: '',\r\n    stateDistribution: '',\r\n    longTermDevNew: '',\r\n    supportItems: '',\r\n    aiTips: '',\r\n    taskStatusBoard: ''\r\n  };\r\n\r\n  // Starting with a default Iteration Path that can be changed\r\n  selectedIterationPath: string = 'Techoil\\\\2.3.23';\r\n  availableIterationPaths: string[] = ['Techoil\\\\2.3.23'];\r\n\r\n  constructor(private dashboardService: DashboardService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Charts will be initialized after data is loaded\r\n  }\r\n\r\n  loadDashboardData(): void {\r\n    this.loadSprintOverview();\r\n    this.loadAiTips();\r\n    this.loadTaskStatusBoard();\r\n  }\r\n\r\n  loadIterationData(): void {\r\n    // Validate iteration path\r\n    if (!this.selectedIterationPath) {\r\n      return;\r\n    }\r\n    \r\n    // Trim whitespace and ensure consistent formatting\r\n    this.selectedIterationPath = this.selectedIterationPath.trim();\r\n    \r\n    // Load data for the selected iteration\r\n    this.loadSprintSummary(this.selectedIterationPath);\r\n    this.loadTaskStatusBoard();\r\n    \r\n    // Update available paths if this is a new one\r\n    if (!this.availableIterationPaths.includes(this.selectedIterationPath)) {\r\n      this.availableIterationPaths.push(this.selectedIterationPath);\r\n    }\r\n  }\r\n\r\n  loadSprintOverview(): void {\r\n    this.loading.sprint = true;\r\n    this.dashboardService.getCurrentSprint().subscribe({\r\n      next: (data) => {\r\n        this.sprintOverview = data;\r\n        // Use hard-coded iteration path instead of data.iterationPath\r\n        // this.selectedIterationPath = data.iterationPath;\r\n        this.loading.sprint = false;\r\n        this.loadSprintSummary(this.selectedIterationPath);\r\n        this.loadActivityFeed();\r\n        this.loadWorkItemDistribution(this.selectedIterationPath);\r\n        this.loadStateDistributions();\r\n      },\r\n      error: (err) => {\r\n        this.error.sprint = 'Failed to load sprint data';\r\n        this.loading.sprint = false;\r\n        console.error('Error loading sprint data:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadSprintSummary(iterationPath: string): void {\r\n    this.loading.summary = true;\r\n    this.dashboardService.getSprintSummary(iterationPath).subscribe({\r\n      next: (data) => {\r\n        this.sprintSummary = data;\r\n        this.loading.summary = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.summary = 'Failed to load summary data';\r\n        this.loading.summary = false;\r\n        console.error('Error loading summary data:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadActivityFeed(): void {\r\n    this.loading.activity = true;\r\n    this.dashboardService.getActivityFeed().subscribe({\r\n      next: (data) => {\r\n        this.activityFeed = data;\r\n        this.loading.activity = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.activity = 'Failed to load activity feed';\r\n        this.loading.activity = false;\r\n        console.error('Error loading activity feed:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadDailyTip(): void {\r\n    this.loading.tip = true;\r\n    this.dashboardService.getDailyTip().subscribe({\r\n      next: (data) => {\r\n        this.dailyTip = data.tip;\r\n        this.loading.tip = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.tip = 'Failed to load daily tip';\r\n        this.loading.tip = false;\r\n        console.error('Error loading daily tip:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadWorkItemDistribution(iterationPath?: string): void {\r\n    this.loading.distribution = true;\r\n    this.dashboardService.getWorkItemDistribution(iterationPath).subscribe({\r\n      next: (data) => {\r\n        this.workItemDistribution = data;\r\n        this.loading.distribution = false;\r\n        \r\n        // Initialize distribution chart after data is loaded\r\n        setTimeout(() => {\r\n          this.initializeWorkItemDistributionChart();\r\n        }, 100);\r\n      },\r\n      error: (err) => {\r\n        this.error.distribution = 'Failed to load work item distribution';\r\n        this.loading.distribution = false;\r\n        console.error('Error loading work item distribution:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadStateDistributions(): void {\r\n    this.loading.stateDistribution = true;\r\n    this.dashboardService.getStateDistribution(this.selectedIterationPath).subscribe({\r\n      next: (data) => {\r\n        this.stateDistributions = data;\r\n        // Keep hard-coded iteration paths instead of dynamically loading them\r\n        // this.availableIterationPaths = data.map(d => d.iterationPath);\r\n        this.loading.stateDistribution = false;\r\n        \r\n        // Initialize state distribution chart after data is loaded\r\n        setTimeout(() => {\r\n          this.initializeStateDistributionsChart();\r\n        }, 100);\r\n      },\r\n      error: (err) => {\r\n        this.error.stateDistribution = 'Failed to load state distributions';\r\n        this.loading.stateDistribution = false;\r\n        console.error('Error loading state distributions:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadLongTermDevNewItems(): void {\r\n    this.loading.longTermDevNew = true;\r\n    this.dashboardService.getLongTermDevNewItems(5).subscribe({\r\n      next: (data) => {\r\n        this.longTermDevNewItems = data;\r\n        this.loading.longTermDevNew = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.longTermDevNew = 'Failed to load long-term Dev-New items';\r\n        this.loading.longTermDevNew = false;\r\n        console.error('Error loading long-term Dev-New items:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadSupportItems(): void {\r\n    this.loading.supportItems = true;\r\n    this.dashboardService.getSupportItems(6).subscribe({\r\n      next: (data) => {\r\n        this.supportItems = data;\r\n        this.loading.supportItems = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.supportItems = 'Failed to load support items';\r\n        this.loading.supportItems = false;\r\n        console.error('Error loading support items:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadAiTips(): void {\r\n    this.loading.aiTips = true;\r\n    this.dashboardService.getAiTips().subscribe({\r\n      next: (data) => {\r\n        this.aiTips = data;\r\n        this.longTermDevNewItems = data.longTermDevNewItems;\r\n        this.supportItems = data.supportItems;\r\n        this.dailyTip = data.tip;\r\n        this.loading.aiTips = false;\r\n      },\r\n      error: (err) => {\r\n        this.error.aiTips = 'Failed to load AI tips';\r\n        this.loading.aiTips = false;\r\n        console.error('Error loading AI tips:', err);\r\n        // Fall back to individual methods\r\n        this.loadDailyTip();\r\n        this.loadLongTermDevNewItems();\r\n        this.loadSupportItems();\r\n      }\r\n    });\r\n  }\r\n  \r\n  initializeWorkItemDistributionChart(): void {\r\n    if (!this.workItemDistribution || !this.stateDistributionChartRef?.nativeElement) {\r\n      return;\r\n    }\r\n    \r\n    // Get canvas element\r\n    const ctx = this.stateDistributionChartRef.nativeElement.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    const labels = this.workItemDistribution.states.map(s => s.state);\r\n    const data = this.workItemDistribution.states.map(s => s.count);\r\n    const colors = this.workItemDistribution.states.map(s => \r\n      this.stateColors[s.state] || this.getRandomColor()\r\n    );\r\n    \r\n    // Clear any existing chart\r\n    if (window.Chart && ctx.chart) {\r\n      ctx.chart.destroy();\r\n    }\r\n    \r\n    // Create new chart\r\n    if (window.Chart) {\r\n      ctx.chart = new window.Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [{\r\n            data: data,\r\n            backgroundColor: colors,\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: `Work Item States - ${this.workItemDistribution.iterationPath}`\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  initializeStateDistributionsChart(): void {\r\n    if (this.stateDistributions.length === 0 || !this.iterationDistributionChartRef?.nativeElement) {\r\n      return;\r\n    }\r\n    \r\n    // Get canvas element\r\n    const ctx = this.iterationDistributionChartRef.nativeElement.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    // Clear any existing chart\r\n    if (window.Chart && ctx.chart) {\r\n      ctx.chart.destroy();\r\n    }\r\n    \r\n    // Prepare data for stacked bar chart\r\n    const iterationLabels = this.stateDistributions.map(d => d.iterationPath);\r\n    \r\n    // Find all unique states across all iterations\r\n    const allStates = new Set<string>();\r\n    this.stateDistributions.forEach(dist => {\r\n      dist.states.forEach(state => {\r\n        allStates.add(state.state);\r\n      });\r\n    });\r\n    \r\n    // Create datasets, one for each state\r\n    const datasets = Array.from(allStates).map(stateName => {\r\n      // Find color for this state\r\n      const stateColor = this.stateColors[stateName] || this.getRandomColor();\r\n      \r\n      // Create dataset for this state across all iterations\r\n      return {\r\n        label: stateName,\r\n        data: this.stateDistributions.map(dist => {\r\n          const stateData = dist.states.find(s => s.state === stateName);\r\n          return stateData ? stateData.count : 0;\r\n        }),\r\n        backgroundColor: stateColor\r\n      };\r\n    });\r\n    \r\n    // Create new chart\r\n    if (window.Chart) {\r\n      ctx.chart = new window.Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: iterationLabels,\r\n          datasets: datasets\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            x: {\r\n              stacked: true,\r\n            },\r\n            y: {\r\n              stacked: true,\r\n              beginAtZero: true\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Work Item Distribution by Iteration'\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  changeIterationPath(iterationPath: string): void {\r\n    // Even with hardcoded path, keep the method in case it's called from elsewhere\r\n    if (iterationPath !== this.selectedIterationPath) {\r\n      this.selectedIterationPath = iterationPath;\r\n      this.loadWorkItemDistribution(iterationPath);\r\n      this.loadSprintSummary(iterationPath);\r\n    }\r\n  }\r\n  \r\n  getStateColor(state: string): string {\r\n    return this.stateColors[state] || this.getRandomColor();\r\n  }\r\n  \r\n  getRandomColor(): string {\r\n    const randomIndex = Math.floor(Math.random() * this.defaultChartColors.length);\r\n    return this.defaultChartColors[randomIndex];\r\n  }\r\n\r\n  reload(): void {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  loadTaskStatusBoard(): void {\r\n    this.loading.taskStatusBoard = true;\r\n    this.error.taskStatusBoard = '';\r\n    \r\n    // First try to use the task distribution API which has all the data we need\r\n    this.dashboardService.getWorkItemDistribution(this.selectedIterationPath).subscribe({\r\n      next: (data) => {\r\n        if (data && data.states && data.states.length > 0) {\r\n          // Convert from WorkItemDistribution to TaskStatusItem[]\r\n          this.taskStatusBoard = data.states.map(state => ({\r\n            status: state.state,\r\n            count: state.count,\r\n            color: state.color || this.getStatusColor(state.state)\r\n          }));\r\n          \r\n          this.loading.taskStatusBoard = false;\r\n          \r\n          // Initialize the pie chart\r\n          setTimeout(() => {\r\n            this.initializeStatusPieChart();\r\n          }, 100);\r\n        } else {\r\n          // Fallback to tasks-by-status if data is empty\r\n          this.loadTasksByStatus();\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading work item distribution:', err);\r\n        // Fallback to tasks-by-status API\r\n        this.loadTasksByStatus();\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadTasksByStatus(): void {\r\n    this.dashboardService.getTasksByStatus(this.selectedIterationPath).subscribe({\r\n      next: (data) => {\r\n        if (data && data.items) {\r\n          this.taskStatusBoard = data.items;\r\n          this.loading.taskStatusBoard = false;\r\n          \r\n          // Initialize the pie chart\r\n          setTimeout(() => {\r\n            this.initializeStatusPieChart();\r\n          }, 100);\r\n        } else {\r\n          this.error.taskStatusBoard = 'No task status data available for this iteration';\r\n          this.loading.taskStatusBoard = false;\r\n          // Create dummy data as a last resort\r\n          this.createDummyTaskBoard();\r\n          setTimeout(() => {\r\n            this.initializeStatusPieChart();\r\n          }, 100);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.error.taskStatusBoard = 'Failed to load task status data';\r\n        this.loading.taskStatusBoard = false;\r\n        console.error('Error loading task status data:', err);\r\n        \r\n        // Fallback to dummy data for development\r\n        this.createDummyTaskBoard();\r\n        \r\n        // Initialize the pie chart with dummy data\r\n        setTimeout(() => {\r\n          this.initializeStatusPieChart();\r\n        }, 100);\r\n      }\r\n    });\r\n  }\r\n  \r\n  createDummyTaskBoard(): void {\r\n    // Create dummy data similar to the Azure DevOps board in the image\r\n    this.taskStatusBoard = [\r\n      { status: 'PMG - Proposed', count: 0, color: this.statusColors['PMG - Proposed'] },\r\n      { status: 'DEV - Yet to Start', count: 2, color: this.statusColors['DEV - Yet to Start'] },\r\n      { status: 'DEV - WIP', count: 4, color: this.statusColors['DEV - WIP'] },\r\n      { status: 'DEV - Code Review', count: 2, color: this.statusColors['DEV - Code Review'] },\r\n      { status: 'DEV - Done', count: 5, color: this.statusColors['DEV - Done'] },\r\n      { status: 'DEV/QC - Reopened', count: 1, color: this.statusColors['DEV/QC - Reopened'] },\r\n      { status: 'Clarifications', count: 1, color: this.statusColors['Clarifications'] },\r\n      { status: 'On Hold', count: 0, color: this.statusColors['On Hold'] },\r\n      { status: 'QC - In Test Bed', count: 7, color: this.statusColors['QC - In Test Bed'] },\r\n      { status: 'Completed', count: 123, color: this.statusColors['Completed'] }\r\n    ];\r\n  }\r\n  \r\n  initializeStatusPieChart(): void {\r\n    if (!this.taskStatusBoard || !this.statusPieChartRef?.nativeElement) {\r\n      return;\r\n    }\r\n    \r\n    // Get canvas element\r\n    const ctx = this.statusPieChartRef.nativeElement.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    // Filter out states with 0 count for better visualization\r\n    const filteredStatuses = this.taskStatusBoard.filter(item => item.count > 0);\r\n    \r\n    const labels = filteredStatuses.map(s => s.status);\r\n    const data = filteredStatuses.map(s => s.count);\r\n    const colors = filteredStatuses.map(s => s.color);\r\n    \r\n    // Clear any existing chart\r\n    if (window.Chart && ctx.chart) {\r\n      ctx.chart.destroy();\r\n    }\r\n    \r\n    // Create new chart\r\n    if (window.Chart) {\r\n      ctx.chart = new window.Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [{\r\n            data: data,\r\n            backgroundColor: colors,\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n              display: true\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Work Item States Distribution'\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context: any) {\r\n                  const label = context.label || '';\r\n                  const value = context.raw || 0;\r\n                  const total = context.dataset.data.reduce((a: number, b: number) => Number(a) + Number(b), 0);\r\n                  const percentage = Math.round((value / total) * 100);\r\n                  return `${label}: ${value} (${percentage}%)`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  getStatusColor(status: string): string {\r\n    return this.statusColors[status] || '#9a9a9a'; // Default gray color\r\n  }\r\n  \r\n  // Chat methods\r\n  sendChatMessage(): void {\r\n    if (!this.currentMessage.trim()) return;\r\n    \r\n    // Add user message\r\n    const userMessage: ChatMessage = {\r\n      role: 'user',\r\n      content: this.currentMessage.trim(),\r\n      timestamp: new Date()\r\n    };\r\n    this.chatMessages.push(userMessage);\r\n    \r\n    // Store message and clear input\r\n    const message = this.currentMessage;\r\n    this.currentMessage = '';\r\n    \r\n    // Call API to get response\r\n    this.dashboardService.sendChatMessage(message).subscribe({\r\n      next: (response) => {\r\n        const assistantMessage: ChatMessage = {\r\n          role: 'assistant',\r\n          content: response,\r\n          timestamp: new Date()\r\n        };\r\n        this.chatMessages.push(assistantMessage);\r\n      },\r\n      error: (err) => {\r\n        console.error('Error getting chat response:', err);\r\n        // Add fallback response\r\n        const fallbackMessage: ChatMessage = {\r\n          role: 'assistant',\r\n          content: 'Sorry, I encountered an error processing your request. Please try again later.',\r\n          timestamp: new Date()\r\n        };\r\n        this.chatMessages.push(fallbackMessage);\r\n      }\r\n    });\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}